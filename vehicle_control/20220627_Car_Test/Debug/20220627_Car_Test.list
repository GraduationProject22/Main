
20220627_Car_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b80  08003b80  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003b80  08003b80  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b80  08003b80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000074  08003bfc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003bfc  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd42  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa8  00000000  00000000  0002bddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0002dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174aa  00000000  00000000  0002f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6ae  00000000  00000000  00046aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889cb  00000000  00000000  00054198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dcb63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000dcbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b08 	.word	0x08003b08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003b08 	.word	0x08003b08

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1e      	ldr	r3, [pc, #120]	; (80001dc <MX_GPIO_Init+0x90>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a1d      	ldr	r2, [pc, #116]	; (80001dc <MX_GPIO_Init+0x90>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1b      	ldr	r3, [pc, #108]	; (80001dc <MX_GPIO_Init+0x90>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b18      	ldr	r3, [pc, #96]	; (80001dc <MX_GPIO_Init+0x90>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a17      	ldr	r2, [pc, #92]	; (80001dc <MX_GPIO_Init+0x90>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b15      	ldr	r3, [pc, #84]	; (80001dc <MX_GPIO_Init+0x90>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <MX_GPIO_Init+0x90>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a11      	ldr	r2, [pc, #68]	; (80001dc <MX_GPIO_Init+0x90>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <MX_GPIO_Init+0x90>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_1_OUTPUT_Pin|L_2_OUTPUT_Pin|R_1_OUTPUT_Pin|R_2_OUTPUT_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80001ae:	480c      	ldr	r0, [pc, #48]	; (80001e0 <MX_GPIO_Init+0x94>)
 80001b0:	f001 f8c4 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = L_1_OUTPUT_Pin|L_2_OUTPUT_Pin|R_1_OUTPUT_Pin|R_2_OUTPUT_Pin;
 80001b4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80001b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ba:	2301      	movs	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001be:	2300      	movs	r3, #0
 80001c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001c6:	f107 0310 	add.w	r3, r7, #16
 80001ca:	4619      	mov	r1, r3
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <MX_GPIO_Init+0x94>)
 80001ce:	f000 ff31 	bl	8001034 <HAL_GPIO_Init>

}
 80001d2:	bf00      	nop
 80001d4:	3720      	adds	r7, #32
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010800 	.word	0x40010800

080001e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001e8:	f000 fd04 	bl	8000bf4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001ec:	f000 f934 	bl	8000458 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001f0:	f7ff ffac 	bl	800014c <MX_GPIO_Init>
	MX_TIM3_Init();
 80001f4:	f000 fb16 	bl	8000824 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80001f8:	f000 fc10 	bl	8000a1c <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80001fc:	f000 fbe4 	bl	80009c8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000200:	2108      	movs	r1, #8
 8000202:	488d      	ldr	r0, [pc, #564]	; (8000438 <main+0x254>)
 8000204:	f001 fd74 	bl	8001cf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000208:	210c      	movs	r1, #12
 800020a:	488b      	ldr	r0, [pc, #556]	; (8000438 <main+0x254>)
 800020c:	f001 fd70 	bl	8001cf0 <HAL_TIM_PWM_Start>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		CTRL = 0;
 8000210:	4b8a      	ldr	r3, [pc, #552]	; (800043c <main+0x258>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive(&huart2, &CTRL, 1, 0xFF);
 8000216:	23ff      	movs	r3, #255	; 0xff
 8000218:	2201      	movs	r2, #1
 800021a:	4988      	ldr	r1, [pc, #544]	; (800043c <main+0x258>)
 800021c:	4888      	ldr	r0, [pc, #544]	; (8000440 <main+0x25c>)
 800021e:	f002 fb6c 	bl	80028fa <HAL_UART_Receive>
		//#if 1
		HAL_UART_Receive(&huart1, &distance, 1, 0xFF);
 8000222:	23ff      	movs	r3, #255	; 0xff
 8000224:	2201      	movs	r2, #1
 8000226:	4987      	ldr	r1, [pc, #540]	; (8000444 <main+0x260>)
 8000228:	4887      	ldr	r0, [pc, #540]	; (8000448 <main+0x264>)
 800022a:	f002 fb66 	bl	80028fa <HAL_UART_Receive>

		if(!(distance == 'T'))
 800022e:	4b85      	ldr	r3, [pc, #532]	; (8000444 <main+0x260>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b54      	cmp	r3, #84	; 0x54
 8000234:	d002      	beq.n	800023c <main+0x58>
		{
			Stop();
 8000236:	f000 f9cb 	bl	80005d0 <Stop>
 800023a:	e7e9      	b.n	8000210 <main+0x2c>
		}
		else
		{	//#endif
			switch (CTRL)
 800023c:	4b7f      	ldr	r3, [pc, #508]	; (800043c <main+0x258>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	3b30      	subs	r3, #48	; 0x30
 8000242:	2b41      	cmp	r3, #65	; 0x41
 8000244:	d8e4      	bhi.n	8000210 <main+0x2c>
 8000246:	a201      	add	r2, pc, #4	; (adr r2, 800024c <main+0x68>)
 8000248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024c:	080003cf 	.word	0x080003cf
 8000250:	080003d5 	.word	0x080003d5
 8000254:	080003dd 	.word	0x080003dd
 8000258:	080003e5 	.word	0x080003e5
 800025c:	080003ef 	.word	0x080003ef
 8000260:	080003f9 	.word	0x080003f9
 8000264:	08000403 	.word	0x08000403
 8000268:	0800040d 	.word	0x0800040d
 800026c:	08000417 	.word	0x08000417
 8000270:	08000421 	.word	0x08000421
 8000274:	08000211 	.word	0x08000211
 8000278:	08000211 	.word	0x08000211
 800027c:	08000211 	.word	0x08000211
 8000280:	08000211 	.word	0x08000211
 8000284:	08000211 	.word	0x08000211
 8000288:	08000211 	.word	0x08000211
 800028c:	08000211 	.word	0x08000211
 8000290:	08000211 	.word	0x08000211
 8000294:	08000361 	.word	0x08000361
 8000298:	08000211 	.word	0x08000211
 800029c:	080003ad 	.word	0x080003ad
 80002a0:	08000211 	.word	0x08000211
 80002a4:	0800035b 	.word	0x0800035b
 80002a8:	08000373 	.word	0x08000373
 80002ac:	0800037f 	.word	0x0800037f
 80002b0:	08000379 	.word	0x08000379
 80002b4:	08000385 	.word	0x08000385
 80002b8:	08000211 	.word	0x08000211
 80002bc:	08000367 	.word	0x08000367
 80002c0:	08000211 	.word	0x08000211
 80002c4:	08000211 	.word	0x08000211
 80002c8:	08000211 	.word	0x08000211
 80002cc:	08000211 	.word	0x08000211
 80002d0:	08000211 	.word	0x08000211
 80002d4:	0800036d 	.word	0x0800036d
 80002d8:	08000355 	.word	0x08000355
 80002dc:	08000211 	.word	0x08000211
 80002e0:	0800038b 	.word	0x0800038b
 80002e4:	08000211 	.word	0x08000211
 80002e8:	08000211 	.word	0x08000211
 80002ec:	08000211 	.word	0x08000211
 80002f0:	08000211 	.word	0x08000211
 80002f4:	08000211 	.word	0x08000211
 80002f8:	08000211 	.word	0x08000211
 80002fc:	08000211 	.word	0x08000211
 8000300:	08000211 	.word	0x08000211
 8000304:	08000211 	.word	0x08000211
 8000308:	08000211 	.word	0x08000211
 800030c:	08000211 	.word	0x08000211
 8000310:	08000211 	.word	0x08000211
 8000314:	08000211 	.word	0x08000211
 8000318:	08000211 	.word	0x08000211
 800031c:	08000211 	.word	0x08000211
 8000320:	08000211 	.word	0x08000211
 8000324:	08000211 	.word	0x08000211
 8000328:	08000211 	.word	0x08000211
 800032c:	08000211 	.word	0x08000211
 8000330:	08000211 	.word	0x08000211
 8000334:	08000211 	.word	0x08000211
 8000338:	08000211 	.word	0x08000211
 800033c:	08000211 	.word	0x08000211
 8000340:	08000211 	.word	0x08000211
 8000344:	08000211 	.word	0x08000211
 8000348:	08000211 	.word	0x08000211
 800034c:	08000211 	.word	0x08000211
 8000350:	0800042b 	.word	0x0800042b
			{
			case 'S' :
				Stop();
 8000354:	f000 f93c 	bl	80005d0 <Stop>
				break;
 8000358:	e06c      	b.n	8000434 <main+0x250>

			case 'F':
				Forward();
 800035a:	f000 f925 	bl	80005a8 <Forward>
				break;
 800035e:	e069      	b.n	8000434 <main+0x250>

			case 'B':
				Backward();
 8000360:	f000 f92c 	bl	80005bc <Backward>
				break;
 8000364:	e066      	b.n	8000434 <main+0x250>

			case 'L':
				Left_Rot();
 8000366:	f000 f93b 	bl	80005e0 <Left_Rot>
				break;
 800036a:	e063      	b.n	8000434 <main+0x250>

			case 'R':
				Right_Rot();
 800036c:	f000 f942 	bl	80005f4 <Right_Rot>
				break;
 8000370:	e060      	b.n	8000434 <main+0x250>

			case 'G':
				Forward_Left_Turn();
 8000372:	f000 f949 	bl	8000608 <Forward_Left_Turn>
				break;
 8000376:	e05d      	b.n	8000434 <main+0x250>

			case 'I':
				Forward_Right_Turn();
 8000378:	f000 f950 	bl	800061c <Forward_Right_Turn>
				break;
 800037c:	e05a      	b.n	8000434 <main+0x250>

			case 'H':
				Backward_Left_Turn();
 800037e:	f000 f957 	bl	8000630 <Backward_Left_Turn>
				break;
 8000382:	e057      	b.n	8000434 <main+0x250>

			case 'J':
				Backward_Right_Turn();
 8000384:	f000 f95e 	bl	8000644 <Backward_Right_Turn>
				break;
 8000388:	e054      	b.n	8000434 <main+0x250>

			case 'U':
				Speed_Up();
 800038a:	f000 f965 	bl	8000658 <Speed_Up>
				sprintf(MSG,"%d\n",Speed);
 800038e:	4b2f      	ldr	r3, [pc, #188]	; (800044c <main+0x268>)
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	461a      	mov	r2, r3
 8000394:	492e      	ldr	r1, [pc, #184]	; (8000450 <main+0x26c>)
 8000396:	482f      	ldr	r0, [pc, #188]	; (8000454 <main+0x270>)
 8000398:	f002 ff7c 	bl	8003294 <siprintf>
				HAL_UART_Transmit(&huart2, MSG, 4, HAL_MAX_DELAY);
 800039c:	f04f 33ff 	mov.w	r3, #4294967295
 80003a0:	2204      	movs	r2, #4
 80003a2:	492c      	ldr	r1, [pc, #176]	; (8000454 <main+0x270>)
 80003a4:	4826      	ldr	r0, [pc, #152]	; (8000440 <main+0x25c>)
 80003a6:	f002 fa16 	bl	80027d6 <HAL_UART_Transmit>
				break;
 80003aa:	e043      	b.n	8000434 <main+0x250>

			case 'D':
				Speed_Down();
 80003ac:	f000 f96c 	bl	8000688 <Speed_Down>
				sprintf(MSG,"%d\n",Speed);
 80003b0:	4b26      	ldr	r3, [pc, #152]	; (800044c <main+0x268>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	4926      	ldr	r1, [pc, #152]	; (8000450 <main+0x26c>)
 80003b8:	4826      	ldr	r0, [pc, #152]	; (8000454 <main+0x270>)
 80003ba:	f002 ff6b 	bl	8003294 <siprintf>
				HAL_UART_Transmit(&huart2, MSG, 4, HAL_MAX_DELAY);
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
 80003c2:	2204      	movs	r2, #4
 80003c4:	4923      	ldr	r1, [pc, #140]	; (8000454 <main+0x270>)
 80003c6:	481e      	ldr	r0, [pc, #120]	; (8000440 <main+0x25c>)
 80003c8:	f002 fa05 	bl	80027d6 <HAL_UART_Transmit>
				break;
 80003cc:	e032      	b.n	8000434 <main+0x250>

			case '0':
				Stop();
 80003ce:	f000 f8ff 	bl	80005d0 <Stop>
				break;
 80003d2:	e02f      	b.n	8000434 <main+0x250>

			case '1':
				Speed = 100;
 80003d4:	4b1d      	ldr	r3, [pc, #116]	; (800044c <main+0x268>)
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	801a      	strh	r2, [r3, #0]
				break;
 80003da:	e02b      	b.n	8000434 <main+0x250>

			case '2':
				Speed = 200;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <main+0x268>)
 80003de:	22c8      	movs	r2, #200	; 0xc8
 80003e0:	801a      	strh	r2, [r3, #0]
				break;
 80003e2:	e027      	b.n	8000434 <main+0x250>

			case '3':
				Speed = 300;
 80003e4:	4b19      	ldr	r3, [pc, #100]	; (800044c <main+0x268>)
 80003e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003ea:	801a      	strh	r2, [r3, #0]
				break;
 80003ec:	e022      	b.n	8000434 <main+0x250>

			case '4':
				Speed = 400;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <main+0x268>)
 80003f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80003f4:	801a      	strh	r2, [r3, #0]
				break;
 80003f6:	e01d      	b.n	8000434 <main+0x250>

			case '5':
				Speed = 500;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <main+0x268>)
 80003fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003fe:	801a      	strh	r2, [r3, #0]
				break;
 8000400:	e018      	b.n	8000434 <main+0x250>

			case '6':
				Speed = 600;
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <main+0x268>)
 8000404:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000408:	801a      	strh	r2, [r3, #0]
				break;
 800040a:	e013      	b.n	8000434 <main+0x250>

			case '7':
				Speed = 700;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <main+0x268>)
 800040e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000412:	801a      	strh	r2, [r3, #0]
				break;
 8000414:	e00e      	b.n	8000434 <main+0x250>

			case '8':
				Speed = 800;
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <main+0x268>)
 8000418:	f44f 7248 	mov.w	r2, #800	; 0x320
 800041c:	801a      	strh	r2, [r3, #0]
				break;
 800041e:	e009      	b.n	8000434 <main+0x250>

			case '9':
				Speed = 900;
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <main+0x268>)
 8000422:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000426:	801a      	strh	r2, [r3, #0]
				break;
 8000428:	e004      	b.n	8000434 <main+0x250>

			case 'q':
				Speed = 1000;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <main+0x268>)
 800042c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000430:	801a      	strh	r2, [r3, #0]
				break;
 8000432:	bf00      	nop
		CTRL = 0;
 8000434:	e6ec      	b.n	8000210 <main+0x2c>
 8000436:	bf00      	nop
 8000438:	200000a8 	.word	0x200000a8
 800043c:	20000090 	.word	0x20000090
 8000440:	20000134 	.word	0x20000134
 8000444:	20000098 	.word	0x20000098
 8000448:	200000f0 	.word	0x200000f0
 800044c:	20000000 	.word	0x20000000
 8000450:	08003b20 	.word	0x08003b20
 8000454:	20000094 	.word	0x20000094

08000458 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b090      	sub	sp, #64	; 0x40
 800045c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f002 ff0c 	bl	8003284 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000482:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000484:	2300      	movs	r3, #0
 8000486:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	4618      	mov	r0, r3
 800048e:	f000 ff6d 	bl	800136c <HAL_RCC_OscConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x44>
	{
		Error_Handler();
 8000498:	f000 f91e 	bl	80006d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049c:	230f      	movs	r3, #15
 800049e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004a0:	2301      	movs	r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80004a8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80004ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 f9d8 	bl	800186c <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 80004c2:	f000 f909 	bl	80006d8 <Error_Handler>
	}
}
 80004c6:	bf00      	nop
 80004c8:	3740      	adds	r7, #64	; 0x40
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <Left_Forward>:

/* USER CODE BEGIN 4 */
void Left_Forward(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	L1_State(GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <Left_Forward+0x20>)
 80004dc:	f000 ff2e 	bl	800133c <HAL_GPIO_WritePin>
	L2_State(GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e6:	4802      	ldr	r0, [pc, #8]	; (80004f0 <Left_Forward+0x20>)
 80004e8:	f000 ff28 	bl	800133c <HAL_GPIO_WritePin>
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40010800 	.word	0x40010800

080004f4 <Right_Forward>:
void Right_Forward(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	R1_State(GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <Right_Forward+0x20>)
 8000500:	f000 ff1c 	bl	800133c <HAL_GPIO_WritePin>
	R2_State(GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050a:	4802      	ldr	r0, [pc, #8]	; (8000514 <Right_Forward+0x20>)
 800050c:	f000 ff16 	bl	800133c <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40010800 	.word	0x40010800

08000518 <Left_Backward>:

void Left_Backward(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	L1_State(GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <Left_Backward+0x20>)
 8000524:	f000 ff0a 	bl	800133c <HAL_GPIO_WritePin>
	L2_State(GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052e:	4802      	ldr	r0, [pc, #8]	; (8000538 <Left_Backward+0x20>)
 8000530:	f000 ff04 	bl	800133c <HAL_GPIO_WritePin>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40010800 	.word	0x40010800

0800053c <Right_Backward>:
void Right_Backward(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	R1_State(GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <Right_Backward+0x20>)
 8000548:	f000 fef8 	bl	800133c <HAL_GPIO_WritePin>
	R2_State(GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000552:	4802      	ldr	r0, [pc, #8]	; (800055c <Right_Backward+0x20>)
 8000554:	f000 fef2 	bl	800133c <HAL_GPIO_WritePin>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40010800 	.word	0x40010800

08000560 <Left_Stop>:

void Left_Stop(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	L1_State(GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <Left_Stop+0x20>)
 800056c:	f000 fee6 	bl	800133c <HAL_GPIO_WritePin>
	L2_State(GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000576:	4802      	ldr	r0, [pc, #8]	; (8000580 <Left_Stop+0x20>)
 8000578:	f000 fee0 	bl	800133c <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40010800 	.word	0x40010800

08000584 <Right_Stop>:
void Right_Stop(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	R1_State(GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <Right_Stop+0x20>)
 8000590:	f000 fed4 	bl	800133c <HAL_GPIO_WritePin>
	R2_State(GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059a:	4802      	ldr	r0, [pc, #8]	; (80005a4 <Right_Stop+0x20>)
 800059c:	f000 fece 	bl	800133c <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40010800 	.word	0x40010800

080005a8 <Forward>:

void Forward(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	Fixed_Speed();
 80005ac:	f000 f882 	bl	80006b4 <Fixed_Speed>
	Left_Forward();
 80005b0:	f7ff ff8e 	bl	80004d0 <Left_Forward>
	Right_Forward();
 80005b4:	f7ff ff9e 	bl	80004f4 <Right_Forward>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Backward>:
void Backward(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	Fixed_Speed();
 80005c0:	f000 f878 	bl	80006b4 <Fixed_Speed>
	Left_Backward();
 80005c4:	f7ff ffa8 	bl	8000518 <Left_Backward>
	Right_Backward();
 80005c8:	f7ff ffb8 	bl	800053c <Right_Backward>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Stop>:
void Stop(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	Left_Stop();
 80005d4:	f7ff ffc4 	bl	8000560 <Left_Stop>
	Right_Stop();
 80005d8:	f7ff ffd4 	bl	8000584 <Right_Stop>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <Left_Rot>:
void Left_Rot(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	Fixed_Speed();
 80005e4:	f000 f866 	bl	80006b4 <Fixed_Speed>
	Left_Backward();
 80005e8:	f7ff ff96 	bl	8000518 <Left_Backward>
	Right_Forward();
 80005ec:	f7ff ff82 	bl	80004f4 <Right_Forward>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <Right_Rot>:
void Right_Rot(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	Fixed_Speed();
 80005f8:	f000 f85c 	bl	80006b4 <Fixed_Speed>
	Left_Forward();
 80005fc:	f7ff ff68 	bl	80004d0 <Left_Forward>
	Right_Backward();
 8000600:	f7ff ff9c 	bl	800053c <Right_Backward>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <Forward_Left_Turn>:
void Forward_Left_Turn(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	Fixed_Speed();
 800060c:	f000 f852 	bl	80006b4 <Fixed_Speed>
	Left_Stop();
 8000610:	f7ff ffa6 	bl	8000560 <Left_Stop>
	Right_Forward();
 8000614:	f7ff ff6e 	bl	80004f4 <Right_Forward>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <Forward_Right_Turn>:
void Forward_Right_Turn(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	Fixed_Speed();
 8000620:	f000 f848 	bl	80006b4 <Fixed_Speed>
	Right_Stop();
 8000624:	f7ff ffae 	bl	8000584 <Right_Stop>
	Left_Forward();
 8000628:	f7ff ff52 	bl	80004d0 <Left_Forward>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <Backward_Left_Turn>:
void Backward_Left_Turn(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	Fixed_Speed();
 8000634:	f000 f83e 	bl	80006b4 <Fixed_Speed>
	Left_Stop();
 8000638:	f7ff ff92 	bl	8000560 <Left_Stop>
	Right_Backward();
 800063c:	f7ff ff7e 	bl	800053c <Right_Backward>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <Backward_Right_Turn>:
void Backward_Right_Turn(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	Fixed_Speed();
 8000648:	f000 f834 	bl	80006b4 <Fixed_Speed>
	Right_Stop();
 800064c:	f7ff ff9a 	bl	8000584 <Right_Stop>
	Left_Backward();
 8000650:	f7ff ff62 	bl	8000518 <Left_Backward>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <Speed_Up>:

void Speed_Up(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if (Speed >= 1000)
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <Speed_Up+0x2c>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000664:	d304      	bcc.n	8000670 <Speed_Up+0x18>
	{
		Speed = 1000;
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <Speed_Up+0x2c>)
 8000668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	e005      	b.n	800067c <Speed_Up+0x24>
	}
	else
	{
		Speed += 100;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <Speed_Up+0x2c>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	3364      	adds	r3, #100	; 0x64
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <Speed_Up+0x2c>)
 800067a:	801a      	strh	r2, [r3, #0]
	}
	Fixed_Speed();
 800067c:	f000 f81a 	bl	80006b4 <Fixed_Speed>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000

08000688 <Speed_Down>:
void Speed_Down(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	if (Speed <= 100)
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <Speed_Down+0x28>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	2b64      	cmp	r3, #100	; 0x64
 8000692:	d803      	bhi.n	800069c <Speed_Down+0x14>
	{
		Speed = 100;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <Speed_Down+0x28>)
 8000696:	2264      	movs	r2, #100	; 0x64
 8000698:	801a      	strh	r2, [r3, #0]
 800069a:	e005      	b.n	80006a8 <Speed_Down+0x20>
	}
	else
	{
		Speed -= 100;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <Speed_Down+0x28>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	3b64      	subs	r3, #100	; 0x64
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <Speed_Down+0x28>)
 80006a6:	801a      	strh	r2, [r3, #0]
	}
	Fixed_Speed();
 80006a8:	f000 f804 	bl	80006b4 <Fixed_Speed>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000

080006b4 <Fixed_Speed>:
void Fixed_Speed(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	TIM3->CCR3 = Speed;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <Fixed_Speed+0x1c>)
 80006ba:	881a      	ldrh	r2, [r3, #0]
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <Fixed_Speed+0x20>)
 80006be:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = Speed;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <Fixed_Speed+0x1c>)
 80006c2:	881a      	ldrh	r2, [r3, #0]
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <Fixed_Speed+0x20>)
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000000 	.word	0x20000000
 80006d4:	40000400 	.word	0x40000400

080006d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_MspInit+0x5c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <HAL_MspInit+0x5c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_MspInit+0x5c>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x5c>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x5c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x5c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_MspInit+0x60>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_MspInit+0x60>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 fa77 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <USART1_IRQHandler+0x10>)
 800079e:	f002 f94f 	bl	8002a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000f0 	.word	0x200000f0

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f002 fd28 	bl	8003230 <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20005000 	.word	0x20005000
 800080c:	00000400 	.word	0x00000400
 8000810:	2000009c 	.word	0x2000009c
 8000814:	20000190 	.word	0x20000190

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000856:	4a33      	ldr	r2, [pc, #204]	; (8000924 <MX_TIM3_Init+0x100>)
 8000858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <MX_TIM3_Init+0xfc>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800086c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000874:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800087a:	4829      	ldr	r0, [pc, #164]	; (8000920 <MX_TIM3_Init+0xfc>)
 800087c:	f001 f990 	bl	8001ba0 <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000886:	f7ff ff27 	bl	80006d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000894:	4619      	mov	r1, r3
 8000896:	4822      	ldr	r0, [pc, #136]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000898:	f001 fb8a 	bl	8001fb0 <HAL_TIM_ConfigClockSource>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008a2:	f7ff ff19 	bl	80006d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008a6:	481e      	ldr	r0, [pc, #120]	; (8000920 <MX_TIM3_Init+0xfc>)
 80008a8:	f001 f9c9 	bl	8001c3e <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008b2:	f7ff ff11 	bl	80006d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	4619      	mov	r1, r3
 80008c4:	4816      	ldr	r0, [pc, #88]	; (8000920 <MX_TIM3_Init+0xfc>)
 80008c6:	f001 fedb 	bl	8002680 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008d0:	f7ff ff02 	bl	80006d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d4:	2360      	movs	r3, #96	; 0x60
 80008d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2208      	movs	r2, #8
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_TIM3_Init+0xfc>)
 80008ec:	f001 faa2 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008f6:	f7ff feef 	bl	80006d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	220c      	movs	r2, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000902:	f001 fa97 	bl	8001e34 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800090c:	f7ff fee4 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <MX_TIM3_Init+0xfc>)
 8000912:	f000 f827 	bl	8000964 <HAL_TIM_MspPostInit>

}
 8000916:	bf00      	nop
 8000918:	3738      	adds	r7, #56	; 0x38
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000a8 	.word	0x200000a8
 8000924:	40000400 	.word	0x40000400

08000928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a09      	ldr	r2, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x34>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10b      	bne.n	8000952 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_TIM_Base_MspInit+0x38>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_TIM_Base_MspInit+0x38>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_TIM_Base_MspInit+0x38>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40000400 	.word	0x40000400
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <HAL_TIM_MspPostInit+0x58>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d117      	bne.n	80009b4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_TIM_MspPostInit+0x5c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_TIM_MspPostInit+0x5c>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_TIM_MspPostInit+0x5c>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800099c:	2303      	movs	r3, #3
 800099e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4619      	mov	r1, r3
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_TIM_MspPostInit+0x60>)
 80009b0:	f000 fb40 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40000400 	.word	0x40000400
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART1_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART1_UART_Init+0x4c>)
 8000a00:	f001 fe9c 	bl	800273c <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f7ff fe65 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000f0 	.word	0x200000f0
 8000a18:	40013800 	.word	0x40013800

08000a1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART2_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f001 fe72 	bl	800273c <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f7ff fe3b 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000134 	.word	0x20000134
 8000a6c:	40004400 	.word	0x40004400

08000a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a41      	ldr	r2, [pc, #260]	; (8000b90 <HAL_UART_MspInit+0x120>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d146      	bne.n	8000b1e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a90:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4831      	ldr	r0, [pc, #196]	; (8000b98 <HAL_UART_MspInit+0x128>)
 8000ad4:	f000 faae 	bl	8001034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	482b      	ldr	r0, [pc, #172]	; (8000b98 <HAL_UART_MspInit+0x128>)
 8000aec:	f000 faa2 	bl	8001034 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <HAL_UART_MspInit+0x12c>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b06:	4a25      	ldr	r2, [pc, #148]	; (8000b9c <HAL_UART_MspInit+0x12c>)
 8000b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2025      	movs	r0, #37	; 0x25
 8000b12:	f000 f9a8 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b16:	2025      	movs	r0, #37	; 0x25
 8000b18:	f000 f9c1 	bl	8000e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b1c:	e034      	b.n	8000b88 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d12f      	bne.n	8000b88 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	61d3      	str	r3, [r2, #28]
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x124>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <HAL_UART_MspInit+0x134>)
 8000b6c:	f000 fa62 	bl	8001034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b70:	2308      	movs	r3, #8
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <HAL_UART_MspInit+0x134>)
 8000b84:	f000 fa56 	bl	8001034 <HAL_GPIO_Init>
}
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	; 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40013800 	.word	0x40013800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bce:	f7ff fe23 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f002 fb33 	bl	800323c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd6:	f7ff fb05 	bl	80001e4 <main>
  bx lr
 8000bda:	4770      	bx	lr
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000be4:	08003b88 	.word	0x08003b88
  ldr r2, =_sbss
 8000be8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bec:	2000018c 	.word	0x2000018c

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x28>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f923 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fd68 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f93b 	bl	8000eba <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f903 	bl	8000e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000004 	.word	0x20000004
 8000c78:	2000000c 	.word	0x2000000c
 8000c7c:	20000008 	.word	0x20000008

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	20000178 	.word	0x20000178

08000ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <HAL_GetTick+0x10>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000178 	.word	0x20000178

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4906      	ldr	r1, [pc, #24]	; (8000d50 <__NVIC_EnableIRQ+0x34>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff90 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff2d 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff42 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff90 	bl	8000da8 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5f 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff35 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffa2 	bl	8000e0c <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d008      	beq.n	8000efa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2204      	movs	r2, #4
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e020      	b.n	8000f3c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 020e 	bic.w	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f202 	lsl.w	r2, r1, r2
 8000f28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d005      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2204      	movs	r2, #4
 8000f62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e051      	b.n	800100e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 020e 	bic.w	r2, r2, #14
 8000f78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0201 	bic.w	r2, r2, #1
 8000f88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <HAL_DMA_Abort_IT+0xd0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d029      	beq.n	8000fe8 <HAL_DMA_Abort_IT+0xa0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a20      	ldr	r2, [pc, #128]	; (800101c <HAL_DMA_Abort_IT+0xd4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d022      	beq.n	8000fe4 <HAL_DMA_Abort_IT+0x9c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <HAL_DMA_Abort_IT+0xd8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d01a      	beq.n	8000fde <HAL_DMA_Abort_IT+0x96>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <HAL_DMA_Abort_IT+0xdc>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d012      	beq.n	8000fd8 <HAL_DMA_Abort_IT+0x90>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <HAL_DMA_Abort_IT+0xe0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d00a      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x8a>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1a      	ldr	r2, [pc, #104]	; (800102c <HAL_DMA_Abort_IT+0xe4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d102      	bne.n	8000fcc <HAL_DMA_Abort_IT+0x84>
 8000fc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fca:	e00e      	b.n	8000fea <HAL_DMA_Abort_IT+0xa2>
 8000fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd0:	e00b      	b.n	8000fea <HAL_DMA_Abort_IT+0xa2>
 8000fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd6:	e008      	b.n	8000fea <HAL_DMA_Abort_IT+0xa2>
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	e005      	b.n	8000fea <HAL_DMA_Abort_IT+0xa2>
 8000fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe2:	e002      	b.n	8000fea <HAL_DMA_Abort_IT+0xa2>
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	e000      	b.n	8000fea <HAL_DMA_Abort_IT+0xa2>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_DMA_Abort_IT+0xe8>)
 8000fec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	4798      	blx	r3
    } 
  }
  return status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020008 	.word	0x40020008
 800101c:	4002001c 	.word	0x4002001c
 8001020:	40020030 	.word	0x40020030
 8001024:	40020044 	.word	0x40020044
 8001028:	40020058 	.word	0x40020058
 800102c:	4002006c 	.word	0x4002006c
 8001030:	40020000 	.word	0x40020000

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e169      	b.n	800131c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001048:	2201      	movs	r2, #1
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 8158 	bne.w	8001316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a9a      	ldr	r2, [pc, #616]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d05e      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001070:	4a98      	ldr	r2, [pc, #608]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d875      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001076:	4a98      	ldr	r2, [pc, #608]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d058      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 800107c:	4a96      	ldr	r2, [pc, #600]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d86f      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001082:	4a96      	ldr	r2, [pc, #600]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d052      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001088:	4a94      	ldr	r2, [pc, #592]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d869      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800108e:	4a94      	ldr	r2, [pc, #592]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d04c      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001094:	4a92      	ldr	r2, [pc, #584]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d863      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800109a:	4a92      	ldr	r2, [pc, #584]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d046      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 80010a0:	4a90      	ldr	r2, [pc, #576]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d85d      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d82a      	bhi.n	8001100 <HAL_GPIO_Init+0xcc>
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d859      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_GPIO_Init+0x80>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	0800112f 	.word	0x0800112f
 80010b8:	08001109 	.word	0x08001109
 80010bc:	0800111b 	.word	0x0800111b
 80010c0:	0800115d 	.word	0x0800115d
 80010c4:	08001163 	.word	0x08001163
 80010c8:	08001163 	.word	0x08001163
 80010cc:	08001163 	.word	0x08001163
 80010d0:	08001163 	.word	0x08001163
 80010d4:	08001163 	.word	0x08001163
 80010d8:	08001163 	.word	0x08001163
 80010dc:	08001163 	.word	0x08001163
 80010e0:	08001163 	.word	0x08001163
 80010e4:	08001163 	.word	0x08001163
 80010e8:	08001163 	.word	0x08001163
 80010ec:	08001163 	.word	0x08001163
 80010f0:	08001163 	.word	0x08001163
 80010f4:	08001163 	.word	0x08001163
 80010f8:	08001111 	.word	0x08001111
 80010fc:	08001125 	.word	0x08001125
 8001100:	4a79      	ldr	r2, [pc, #484]	; (80012e8 <HAL_GPIO_Init+0x2b4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001106:	e02c      	b.n	8001162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e029      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	3304      	adds	r3, #4
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e024      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	3308      	adds	r3, #8
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e01f      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	330c      	adds	r3, #12
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e01a      	b.n	8001164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001136:	2304      	movs	r3, #4
 8001138:	623b      	str	r3, [r7, #32]
          break;
 800113a:	e013      	b.n	8001164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d105      	bne.n	8001150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	611a      	str	r2, [r3, #16]
          break;
 800114e:	e009      	b.n	8001164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001150:	2308      	movs	r3, #8
 8001152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	615a      	str	r2, [r3, #20]
          break;
 800115a:	e003      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x130>
          break;
 8001162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d801      	bhi.n	800116e <HAL_GPIO_Init+0x13a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	e001      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	; 0xff
 8001178:	d802      	bhi.n	8001180 <HAL_GPIO_Init+0x14c>
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0x152>
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3b08      	subs	r3, #8
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	210f      	movs	r1, #15
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	431a      	orrs	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80b1 	beq.w	8001316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <HAL_GPIO_Init+0x2c0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x1ec>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <HAL_GPIO_Init+0x2c4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1e8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3e      	ldr	r2, [pc, #248]	; (80012fc <HAL_GPIO_Init+0x2c8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1e4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <HAL_GPIO_Init+0x2cc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1e0>
 8001210:	2303      	movs	r3, #3
 8001212:	e006      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001214:	2304      	movs	r3, #4
 8001216:	e004      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001218:	2302      	movs	r3, #2
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001220:	2300      	movs	r3, #0
 8001222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001224:	f002 0203 	and.w	r2, r2, #3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	4093      	lsls	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001232:	492f      	ldr	r1, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	492c      	ldr	r1, [pc, #176]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	4928      	ldr	r1, [pc, #160]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001264:	4013      	ands	r3, r2
 8001266:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4922      	ldr	r1, [pc, #136]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	491e      	ldr	r1, [pc, #120]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	4918      	ldr	r1, [pc, #96]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4914      	ldr	r1, [pc, #80]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d021      	beq.n	8001308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	490e      	ldr	r1, [pc, #56]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
 80012d0:	e021      	b.n	8001316 <HAL_GPIO_Init+0x2e2>
 80012d2:	bf00      	nop
 80012d4:	10320000 	.word	0x10320000
 80012d8:	10310000 	.word	0x10310000
 80012dc:	10220000 	.word	0x10220000
 80012e0:	10210000 	.word	0x10210000
 80012e4:	10120000 	.word	0x10120000
 80012e8:	10110000 	.word	0x10110000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_GPIO_Init+0x304>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	43db      	mvns	r3, r3
 8001310:	4909      	ldr	r1, [pc, #36]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001312:	4013      	ands	r3, r2
 8001314:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	f47f ae8e 	bne.w	8001048 <HAL_GPIO_Init+0x14>
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	372c      	adds	r7, #44	; 0x2c
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	611a      	str	r2, [r3, #16]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e26c      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8087 	beq.w	800149a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800138c:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b04      	cmp	r3, #4
 8001396:	d00c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001398:	4b8f      	ldr	r3, [pc, #572]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d112      	bne.n	80013ca <HAL_RCC_OscConfig+0x5e>
 80013a4:	4b8c      	ldr	r3, [pc, #560]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d10b      	bne.n	80013ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	4b89      	ldr	r3, [pc, #548]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d06c      	beq.n	8001498 <HAL_RCC_OscConfig+0x12c>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d168      	bne.n	8001498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e246      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x76>
 80013d4:	4b80      	ldr	r3, [pc, #512]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a7f      	ldr	r2, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e02e      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x98>
 80013ea:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a7a      	ldr	r2, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b78      	ldr	r3, [pc, #480]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e01d      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0xbc>
 800140e:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a71      	ldr	r2, [pc, #452]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e00b      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 8001428:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a6a      	ldr	r2, [pc, #424]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800142e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a67      	ldr	r2, [pc, #412]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800143a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fc2c 	bl	8000ca4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fc28 	bl	8000ca4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1fa      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0xe4>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc18 	bl	8000ca4 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fc14 	bl	8000ca4 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e1e6      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x10c>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d063      	beq.n	800156e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a6:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014b2:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d11c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x18c>
 80014be:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d116      	bne.n	80014f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x176>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e1ba      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4939      	ldr	r1, [pc, #228]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	e03a      	b.n	800156e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001500:	4b36      	ldr	r3, [pc, #216]	; (80015dc <HAL_RCC_OscConfig+0x270>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fbcd 	bl	8000ca4 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150e:	f7ff fbc9 	bl	8000ca4 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e19b      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4927      	ldr	r1, [pc, #156]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
 8001540:	e015      	b.n	800156e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_RCC_OscConfig+0x270>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fbac 	bl	8000ca4 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff fba8 	bl	8000ca4 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e17a      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d03a      	beq.n	80015f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d019      	beq.n	80015b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_RCC_OscConfig+0x274>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fb8c 	bl	8000ca4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff fb88 	bl	8000ca4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e15a      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f000 fad8 	bl	8001b64 <RCC_Delay>
 80015b4:	e01c      	b.n	80015f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_RCC_OscConfig+0x274>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb72 	bl	8000ca4 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c2:	e00f      	b.n	80015e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fb6e 	bl	8000ca4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d908      	bls.n	80015e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e140      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	42420000 	.word	0x42420000
 80015e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b9e      	ldr	r3, [pc, #632]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e9      	bne.n	80015c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a6 	beq.w	800174a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b97      	ldr	r3, [pc, #604]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b94      	ldr	r3, [pc, #592]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a93      	ldr	r2, [pc, #588]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b91      	ldr	r3, [pc, #580]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b8e      	ldr	r3, [pc, #568]	; (8001864 <HAL_RCC_OscConfig+0x4f8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d118      	bne.n	8001668 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001636:	4b8b      	ldr	r3, [pc, #556]	; (8001864 <HAL_RCC_OscConfig+0x4f8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a8a      	ldr	r2, [pc, #552]	; (8001864 <HAL_RCC_OscConfig+0x4f8>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001642:	f7ff fb2f 	bl	8000ca4 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164a:	f7ff fb2b 	bl	8000ca4 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0fd      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x4f8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x312>
 8001670:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a7a      	ldr	r2, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	e02d      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x334>
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a75      	ldr	r2, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	4b73      	ldr	r3, [pc, #460]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4a72      	ldr	r2, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	e01c      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x356>
 80016a8:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a6c      	ldr	r2, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	4b6a      	ldr	r3, [pc, #424]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a69      	ldr	r2, [pc, #420]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 80016c2:	4b67      	ldr	r3, [pc, #412]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a66      	ldr	r2, [pc, #408]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	4b64      	ldr	r3, [pc, #400]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a63      	ldr	r2, [pc, #396]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fadf 	bl	8000ca4 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff fadb 	bl	8000ca4 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0ab      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	4b57      	ldr	r3, [pc, #348]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ee      	beq.n	80016ea <HAL_RCC_OscConfig+0x37e>
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff fac9 	bl	8000ca4 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff fac5 	bl	8000ca4 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	; 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e095      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ee      	bne.n	8001716 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d105      	bne.n	800174a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173e:	4b48      	ldr	r3, [pc, #288]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a47      	ldr	r2, [pc, #284]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8081 	beq.w	8001856 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001754:	4b42      	ldr	r3, [pc, #264]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d061      	beq.n	8001824 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d146      	bne.n	80017f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <HAL_RCC_OscConfig+0x4fc>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fa99 	bl	8000ca4 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff fa95 	bl	8000ca4 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e067      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f0      	bne.n	8001776 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179c:	d108      	bne.n	80017b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	492d      	ldr	r1, [pc, #180]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a19      	ldr	r1, [r3, #32]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	430b      	orrs	r3, r1
 80017c2:	4927      	ldr	r1, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_OscConfig+0x4fc>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fa69 	bl	8000ca4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff fa65 	bl	8000ca4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e037      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x46a>
 80017f4:	e02f      	b.n	8001856 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_RCC_OscConfig+0x4fc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fa52 	bl	8000ca4 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fa4e 	bl	8000ca4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e020      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x498>
 8001822:	e018      	b.n	8001856 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	40007000 	.word	0x40007000
 8001868:	42420060 	.word	0x42420060

0800186c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0d0      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001880:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d910      	bls.n	80018b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 0207 	bic.w	r2, r3, #7
 8001896:	4965      	ldr	r1, [pc, #404]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0b8      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a52      	ldr	r2, [pc, #328]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ec:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	494d      	ldr	r1, [pc, #308]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d040      	beq.n	800198c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d115      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e07f      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e073      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06b      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194a:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f023 0203 	bic.w	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4936      	ldr	r1, [pc, #216]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800195c:	f7ff f9a2 	bl	8000ca4 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	e00a      	b.n	800197a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff f99e 	bl	8000ca4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e053      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 020c 	and.w	r2, r3, #12
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	429a      	cmp	r2, r3
 800198a:	d1eb      	bne.n	8001964 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d210      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 0207 	bic.w	r2, r3, #7
 80019a2:	4922      	ldr	r1, [pc, #136]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e032      	b.n	8001a22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4916      	ldr	r1, [pc, #88]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	490e      	ldr	r1, [pc, #56]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fa:	f000 f821 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	490a      	ldr	r1, [pc, #40]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	5ccb      	ldrb	r3, [r1, r3]
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1cc>)
 8001a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f900 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08003b34 	.word	0x08003b34
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b490      	push	{r4, r7}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a48:	1d3c      	adds	r4, r7, #4
 8001a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a50:	f240 2301 	movw	r3, #513	; 0x201
 8001a54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d002      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x46>
 8001a7e:	e02d      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a82:	623b      	str	r3, [r7, #32]
      break;
 8001a84:	e02d      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	0c9b      	lsrs	r3, r3, #18
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a92:	4413      	add	r3, r2
 8001a94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	0c5b      	lsrs	r3, r3, #17
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ab8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001abe:	fb02 f203 	mul.w	r2, r2, r3
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e004      	b.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	623b      	str	r3, [r7, #32]
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ade:	623b      	str	r3, [r7, #32]
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc90      	pop	{r4, r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	08003b24 	.word	0x08003b24
 8001af4:	40021000 	.word	0x40021000
 8001af8:	007a1200 	.word	0x007a1200
 8001afc:	003d0900 	.word	0x003d0900

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b18:	f7ff fff2 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003b44 	.word	0x08003b44

08001b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	0adb      	lsrs	r3, r3, #11
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4903      	ldr	r1, [pc, #12]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	08003b44 	.word	0x08003b44

08001b64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <RCC_Delay+0x34>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <RCC_Delay+0x38>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a5b      	lsrs	r3, r3, #9
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b80:	bf00      	nop
  }
  while (Delay --);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	60fa      	str	r2, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f9      	bne.n	8001b80 <RCC_Delay+0x1c>
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	10624dd3 	.word	0x10624dd3

08001ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e041      	b.n	8001c36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe feae 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f000 faaa 	bl	8002138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e041      	b.n	8001cd4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f839 	bl	8001cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f000 fa5b 	bl	8002138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d109      	bne.n	8001d14 <HAL_TIM_PWM_Start+0x24>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	e022      	b.n	8001d5a <HAL_TIM_PWM_Start+0x6a>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d109      	bne.n	8001d2e <HAL_TIM_PWM_Start+0x3e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	e015      	b.n	8001d5a <HAL_TIM_PWM_Start+0x6a>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d109      	bne.n	8001d48 <HAL_TIM_PWM_Start+0x58>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e008      	b.n	8001d5a <HAL_TIM_PWM_Start+0x6a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e05e      	b.n	8001e20 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start+0x82>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d70:	e013      	b.n	8001d9a <HAL_TIM_PWM_Start+0xaa>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_PWM_Start+0x92>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d80:	e00b      	b.n	8001d9a <HAL_TIM_PWM_Start+0xaa>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d104      	bne.n	8001d92 <HAL_TIM_PWM_Start+0xa2>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d90:	e003      	b.n	8001d9a <HAL_TIM_PWM_Start+0xaa>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	6839      	ldr	r1, [r7, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fc48 	bl	8002638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_TIM_PWM_Start+0x138>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d107      	bne.n	8001dc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_TIM_PWM_Start+0x138>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00e      	beq.n	8001dea <HAL_TIM_PWM_Start+0xfa>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd4:	d009      	beq.n	8001dea <HAL_TIM_PWM_Start+0xfa>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_TIM_PWM_Start+0x13c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_TIM_PWM_Start+0xfa>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <HAL_TIM_PWM_Start+0x140>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d111      	bne.n	8001e0e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d010      	beq.n	8001e1e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	e007      	b.n	8001e1e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40000800 	.word	0x40000800

08001e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e0ac      	b.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0c      	cmp	r3, #12
 8001e5a:	f200 809f 	bhi.w	8001f9c <HAL_TIM_PWM_ConfigChannel+0x168>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e99 	.word	0x08001e99
 8001e68:	08001f9d 	.word	0x08001f9d
 8001e6c:	08001f9d 	.word	0x08001f9d
 8001e70:	08001f9d 	.word	0x08001f9d
 8001e74:	08001ed9 	.word	0x08001ed9
 8001e78:	08001f9d 	.word	0x08001f9d
 8001e7c:	08001f9d 	.word	0x08001f9d
 8001e80:	08001f9d 	.word	0x08001f9d
 8001e84:	08001f1b 	.word	0x08001f1b
 8001e88:	08001f9d 	.word	0x08001f9d
 8001e8c:	08001f9d 	.word	0x08001f9d
 8001e90:	08001f9d 	.word	0x08001f9d
 8001e94:	08001f5b 	.word	0x08001f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f9ac 	bl	80021fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0208 	orr.w	r2, r2, #8
 8001eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0204 	bic.w	r2, r2, #4
 8001ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6999      	ldr	r1, [r3, #24]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	619a      	str	r2, [r3, #24]
      break;
 8001ed6:	e062      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f9f2 	bl	80022c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6999      	ldr	r1, [r3, #24]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	021a      	lsls	r2, r3, #8
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	619a      	str	r2, [r3, #24]
      break;
 8001f18:	e041      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fa3b 	bl	800239c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0208 	orr.w	r2, r2, #8
 8001f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0204 	bic.w	r2, r2, #4
 8001f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69d9      	ldr	r1, [r3, #28]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	61da      	str	r2, [r3, #28]
      break;
 8001f58:	e021      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fa85 	bl	8002470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69da      	ldr	r2, [r3, #28]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69d9      	ldr	r1, [r3, #28]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	021a      	lsls	r2, r3, #8
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	61da      	str	r2, [r3, #28]
      break;
 8001f9a:	e000      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001f9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_TIM_ConfigClockSource+0x18>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e0b3      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x180>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002000:	d03e      	beq.n	8002080 <HAL_TIM_ConfigClockSource+0xd0>
 8002002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002006:	f200 8087 	bhi.w	8002118 <HAL_TIM_ConfigClockSource+0x168>
 800200a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800200e:	f000 8085 	beq.w	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002016:	d87f      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x168>
 8002018:	2b70      	cmp	r3, #112	; 0x70
 800201a:	d01a      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0xa2>
 800201c:	2b70      	cmp	r3, #112	; 0x70
 800201e:	d87b      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x168>
 8002020:	2b60      	cmp	r3, #96	; 0x60
 8002022:	d050      	beq.n	80020c6 <HAL_TIM_ConfigClockSource+0x116>
 8002024:	2b60      	cmp	r3, #96	; 0x60
 8002026:	d877      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x168>
 8002028:	2b50      	cmp	r3, #80	; 0x50
 800202a:	d03c      	beq.n	80020a6 <HAL_TIM_ConfigClockSource+0xf6>
 800202c:	2b50      	cmp	r3, #80	; 0x50
 800202e:	d873      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x168>
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	d058      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x136>
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	d86f      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x168>
 8002038:	2b30      	cmp	r3, #48	; 0x30
 800203a:	d064      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x156>
 800203c:	2b30      	cmp	r3, #48	; 0x30
 800203e:	d86b      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x168>
 8002040:	2b20      	cmp	r3, #32
 8002042:	d060      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x156>
 8002044:	2b20      	cmp	r3, #32
 8002046:	d867      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x168>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d05c      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x156>
 800204c:	2b10      	cmp	r3, #16
 800204e:	d05a      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002050:	e062      	b.n	8002118 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f000 faca 	bl	80025fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002074:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	609a      	str	r2, [r3, #8]
      break;
 800207e:	e04e      	b.n	800211e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f000 fab3 	bl	80025fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020a2:	609a      	str	r2, [r3, #8]
      break;
 80020a4:	e03b      	b.n	800211e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6859      	ldr	r1, [r3, #4]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f000 fa2a 	bl	800250c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2150      	movs	r1, #80	; 0x50
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fa81 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 80020c4:	e02b      	b.n	800211e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f000 fa48 	bl	8002568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2160      	movs	r1, #96	; 0x60
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fa71 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 80020e4:	e01b      	b.n	800211e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	461a      	mov	r2, r3
 80020f4:	f000 fa0a 	bl	800250c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2140      	movs	r1, #64	; 0x40
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fa61 	bl	80025c6 <TIM_ITRx_SetConfig>
      break;
 8002104:	e00b      	b.n	800211e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f000 fa58 	bl	80025c6 <TIM_ITRx_SetConfig>
        break;
 8002116:	e002      	b.n	800211e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002118:	bf00      	nop
 800211a:	e000      	b.n	800211e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800211c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a29      	ldr	r2, [pc, #164]	; (80021f0 <TIM_Base_SetConfig+0xb8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00b      	beq.n	8002168 <TIM_Base_SetConfig+0x30>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d007      	beq.n	8002168 <TIM_Base_SetConfig+0x30>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <TIM_Base_SetConfig+0xbc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <TIM_Base_SetConfig+0x30>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <TIM_Base_SetConfig+0xc0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d108      	bne.n	800217a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <TIM_Base_SetConfig+0xb8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00b      	beq.n	800219a <TIM_Base_SetConfig+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d007      	beq.n	800219a <TIM_Base_SetConfig+0x62>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <TIM_Base_SetConfig+0xbc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d003      	beq.n	800219a <TIM_Base_SetConfig+0x62>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <TIM_Base_SetConfig+0xc0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d108      	bne.n	80021ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <TIM_Base_SetConfig+0xb8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d103      	bne.n	80021e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	615a      	str	r2, [r3, #20]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800

080021fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f023 0201 	bic.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f023 0302 	bic.w	r3, r3, #2
 8002244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <TIM_OC1_SetConfig+0xc8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d10c      	bne.n	8002272 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0308 	bic.w	r3, r3, #8
 800225e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <TIM_OC1_SetConfig+0xc8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d111      	bne.n	800229e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	621a      	str	r2, [r3, #32]
}
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40012c00 	.word	0x40012c00

080022c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f023 0210 	bic.w	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0320 	bic.w	r3, r3, #32
 8002312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <TIM_OC2_SetConfig+0xd0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d10d      	bne.n	8002344 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800232e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <TIM_OC2_SetConfig+0xd0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d113      	bne.n	8002374 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800235a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	621a      	str	r2, [r3, #32]
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00

0800239c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <TIM_OC3_SetConfig+0xd0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10d      	bne.n	8002416 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <TIM_OC3_SetConfig+0xd0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d113      	bne.n	8002446 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800242c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	621a      	str	r2, [r3, #32]
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40012c00 	.word	0x40012c00

08002470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800249e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	031b      	lsls	r3, r3, #12
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a0f      	ldr	r2, [pc, #60]	; (8002508 <TIM_OC4_SetConfig+0x98>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d109      	bne.n	80024e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	621a      	str	r2, [r3, #32]
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40012c00 	.word	0x40012c00

0800250c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	f023 0201 	bic.w	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f023 030a 	bic.w	r3, r3, #10
 8002548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	621a      	str	r2, [r3, #32]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f023 0210 	bic.w	r2, r3, #16
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	031b      	lsls	r3, r3, #12
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	621a      	str	r2, [r3, #32]
}
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f043 0307 	orr.w	r3, r3, #7
 80025e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002614:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	021a      	lsls	r2, r3, #8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	431a      	orrs	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4313      	orrs	r3, r2
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	609a      	str	r2, [r3, #8]
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2201      	movs	r2, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1a      	ldr	r2, [r3, #32]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	621a      	str	r2, [r3, #32]
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002694:	2302      	movs	r3, #2
 8002696:	e046      	b.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a16      	ldr	r2, [pc, #88]	; (8002730 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d00e      	beq.n	80026fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e4:	d009      	beq.n	80026fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d004      	beq.n	80026fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d10c      	bne.n	8002714 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	4313      	orrs	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40000400 	.word	0x40000400
 8002738:	40000800 	.word	0x40000800

0800273c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e03f      	b.n	80027ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe f984 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fcc7 	bl	8003114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b08a      	sub	sp, #40	; 0x28
 80027da:	af02      	add	r7, sp, #8
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d17c      	bne.n	80028f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_UART_Transmit+0x2c>
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e075      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x3e>
 8002810:	2302      	movs	r3, #2
 8002812:	e06e      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fe fa3b 	bl	8000ca4 <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x82>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002868:	e02a      	b.n	80028c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fab3 	bl	8002de0 <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e036      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3302      	adds	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e007      	b.n	80028b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cf      	bne.n	800286a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fa83 	bl	8002de0 <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b08a      	sub	sp, #40	; 0x28
 80028fe:	af02      	add	r7, sp, #8
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	f040 808c 	bne.w	8002a34 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Receive+0x2e>
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e084      	b.n	8002a36 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_UART_Receive+0x40>
 8002936:	2302      	movs	r3, #2
 8002938:	e07d      	b.n	8002a36 <HAL_UART_Receive+0x13c>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2222      	movs	r2, #34	; 0x22
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002956:	f7fe f9a5 	bl	8000ca4 <HAL_GetTick>
 800295a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	d108      	bne.n	8002984 <HAL_UART_Receive+0x8a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d104      	bne.n	8002984 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	e003      	b.n	800298c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002994:	e043      	b.n	8002a1e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	2120      	movs	r1, #32
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fa1d 	bl	8002de0 <UART_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e042      	b.n	8002a36 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	3302      	adds	r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e01f      	b.n	8002a10 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d8:	d007      	beq.n	80029ea <HAL_UART_Receive+0xf0>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <HAL_UART_Receive+0xfe>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e008      	b.n	8002a0a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1b6      	bne.n	8002996 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_UART_IRQHandler+0x52>
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa99 	bl	8002fc2 <UART_Receive_IT>
      return;
 8002a90:	e17b      	b.n	8002d8a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80b1 	beq.w	8002bfc <HAL_UART_IRQHandler+0x1bc>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x70>
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a6 	beq.w	8002bfc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x90>
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_UART_IRQHandler+0xb0>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f043 0202 	orr.w	r2, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_UART_IRQHandler+0xd0>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00f      	beq.n	8002b3a <HAL_UART_IRQHandler+0xfa>
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <HAL_UART_IRQHandler+0xee>
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 0208 	orr.w	r2, r3, #8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 811e 	beq.w	8002d80 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_UART_IRQHandler+0x11e>
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fa32 	bl	8002fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <HAL_UART_IRQHandler+0x146>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d031      	beq.n	8002bea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f974 	bl	8002e74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d023      	beq.n	8002be2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d013      	beq.n	8002bda <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4a76      	ldr	r2, [pc, #472]	; (8002d90 <HAL_UART_IRQHandler+0x350>)
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe f9c2 	bl	8000f48 <HAL_DMA_Abort_IT>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e00e      	b.n	8002bf8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8ec 	bl	8002db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	e00a      	b.n	8002bf8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8e8 	bl	8002db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	e006      	b.n	8002bf8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8e4 	bl	8002db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bf6:	e0c3      	b.n	8002d80 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	bf00      	nop
    return;
 8002bfa:	e0c1      	b.n	8002d80 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 80a1 	bne.w	8002d48 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 809b 	beq.w	8002d48 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8095 	beq.w	8002d48 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04e      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002c4c:	8a3b      	ldrh	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8098 	beq.w	8002d84 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c58:	8a3a      	ldrh	r2, [r7, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	f080 8092 	bcs.w	8002d84 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8a3a      	ldrh	r2, [r7, #16]
 8002c64:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d02b      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0210 	bic.w	r2, r2, #16
 8002cbc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f905 	bl	8000ed2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f876 	bl	8002dca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cde:	e051      	b.n	8002d84 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d047      	beq.n	8002d88 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002cf8:	8a7b      	ldrh	r3, [r7, #18]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d044      	beq.n	8002d88 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d0c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0210 	bic.w	r2, r2, #16
 8002d3a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d3c:	8a7b      	ldrh	r3, [r7, #18]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f842 	bl	8002dca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d46:	e01f      	b.n	8002d88 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_UART_IRQHandler+0x324>
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f8c9 	bl	8002ef4 <UART_Transmit_IT>
    return;
 8002d62:	e012      	b.n	8002d8a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <HAL_UART_IRQHandler+0x34a>
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f90a 	bl	8002f92 <UART_EndTransmit_IT>
    return;
 8002d7e:	e004      	b.n	8002d8a <HAL_UART_IRQHandler+0x34a>
    return;
 8002d80:	bf00      	nop
 8002d82:	e002      	b.n	8002d8a <HAL_UART_IRQHandler+0x34a>
      return;
 8002d84:	bf00      	nop
 8002d86:	e000      	b.n	8002d8a <HAL_UART_IRQHandler+0x34a>
      return;
 8002d88:	bf00      	nop
  }
}
 8002d8a:	3728      	adds	r7, #40	; 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	08002ecd 	.word	0x08002ecd

08002d94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df0:	e02c      	b.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d028      	beq.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e00:	f7fd ff50 	bl	8000ca4 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d21d      	bcs.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e00f      	b.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d0c3      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0210 	bic.w	r2, r2, #16
 8002eb2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff ff66 	bl	8002db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b21      	cmp	r3, #33	; 0x21
 8002f06:	d13e      	bne.n	8002f86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d114      	bne.n	8002f3c <UART_Transmit_IT+0x48>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d110      	bne.n	8002f3c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]
 8002f3a:	e008      	b.n	8002f4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	1c59      	adds	r1, r3, #1
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6211      	str	r1, [r2, #32]
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff feee 	bl	8002d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b22      	cmp	r3, #34	; 0x22
 8002fd4:	f040 8099 	bne.w	800310a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d117      	bne.n	8003012 <UART_Receive_IT+0x50>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d113      	bne.n	8003012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	b29a      	uxth	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
 8003010:	e026      	b.n	8003060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d007      	beq.n	8003036 <UART_Receive_IT+0x74>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <UART_Receive_IT+0x82>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e008      	b.n	8003056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003050:	b2da      	uxtb	r2, r3
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4619      	mov	r1, r3
 800306e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003070:	2b00      	cmp	r3, #0
 8003072:	d148      	bne.n	8003106 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0220 	bic.w	r2, r2, #32
 8003082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d123      	bne.n	80030fc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0210 	bic.w	r2, r2, #16
 80030c8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d10a      	bne.n	80030ee <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff fe68 	bl	8002dca <HAL_UARTEx_RxEventCallback>
 80030fa:	e002      	b.n	8003102 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fe52 	bl	8002da6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e002      	b.n	800310c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800314e:	f023 030c 	bic.w	r3, r3, #12
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	430b      	orrs	r3, r1
 800315a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <UART_SetConfig+0x114>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d103      	bne.n	8003184 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800317c:	f7fe fcde 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	e002      	b.n	800318a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003184:	f7fe fcc6 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8003188:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	4a22      	ldr	r2, [pc, #136]	; (800322c <UART_SetConfig+0x118>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	0119      	lsls	r1, r3, #4
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009a      	lsls	r2, r3, #2
 80031b4:	441a      	add	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <UART_SetConfig+0x118>)
 80031c2:	fba3 0302 	umull	r0, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2064      	movs	r0, #100	; 0x64
 80031ca:	fb00 f303 	mul.w	r3, r0, r3
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	3332      	adds	r3, #50	; 0x32
 80031d4:	4a15      	ldr	r2, [pc, #84]	; (800322c <UART_SetConfig+0x118>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	4419      	add	r1, r3
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <UART_SetConfig+0x118>)
 80031fa:	fba3 0302 	umull	r0, r3, r3, r2
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2064      	movs	r0, #100	; 0x64
 8003202:	fb00 f303 	mul.w	r3, r0, r3
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	3332      	adds	r3, #50	; 0x32
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <UART_SetConfig+0x118>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	f003 020f 	and.w	r2, r3, #15
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	440a      	add	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40013800 	.word	0x40013800
 800322c:	51eb851f 	.word	0x51eb851f

08003230 <__errno>:
 8003230:	4b01      	ldr	r3, [pc, #4]	; (8003238 <__errno+0x8>)
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000010 	.word	0x20000010

0800323c <__libc_init_array>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	2600      	movs	r6, #0
 8003240:	4d0c      	ldr	r5, [pc, #48]	; (8003274 <__libc_init_array+0x38>)
 8003242:	4c0d      	ldr	r4, [pc, #52]	; (8003278 <__libc_init_array+0x3c>)
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	42a6      	cmp	r6, r4
 800324a:	d109      	bne.n	8003260 <__libc_init_array+0x24>
 800324c:	f000 fc5c 	bl	8003b08 <_init>
 8003250:	2600      	movs	r6, #0
 8003252:	4d0a      	ldr	r5, [pc, #40]	; (800327c <__libc_init_array+0x40>)
 8003254:	4c0a      	ldr	r4, [pc, #40]	; (8003280 <__libc_init_array+0x44>)
 8003256:	1b64      	subs	r4, r4, r5
 8003258:	10a4      	asrs	r4, r4, #2
 800325a:	42a6      	cmp	r6, r4
 800325c:	d105      	bne.n	800326a <__libc_init_array+0x2e>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	f855 3b04 	ldr.w	r3, [r5], #4
 8003264:	4798      	blx	r3
 8003266:	3601      	adds	r6, #1
 8003268:	e7ee      	b.n	8003248 <__libc_init_array+0xc>
 800326a:	f855 3b04 	ldr.w	r3, [r5], #4
 800326e:	4798      	blx	r3
 8003270:	3601      	adds	r6, #1
 8003272:	e7f2      	b.n	800325a <__libc_init_array+0x1e>
 8003274:	08003b80 	.word	0x08003b80
 8003278:	08003b80 	.word	0x08003b80
 800327c:	08003b80 	.word	0x08003b80
 8003280:	08003b84 	.word	0x08003b84

08003284 <memset>:
 8003284:	4603      	mov	r3, r0
 8003286:	4402      	add	r2, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <siprintf>:
 8003294:	b40e      	push	{r1, r2, r3}
 8003296:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800329a:	b500      	push	{lr}
 800329c:	b09c      	sub	sp, #112	; 0x70
 800329e:	ab1d      	add	r3, sp, #116	; 0x74
 80032a0:	9002      	str	r0, [sp, #8]
 80032a2:	9006      	str	r0, [sp, #24]
 80032a4:	9107      	str	r1, [sp, #28]
 80032a6:	9104      	str	r1, [sp, #16]
 80032a8:	4808      	ldr	r0, [pc, #32]	; (80032cc <siprintf+0x38>)
 80032aa:	4909      	ldr	r1, [pc, #36]	; (80032d0 <siprintf+0x3c>)
 80032ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80032b0:	9105      	str	r1, [sp, #20]
 80032b2:	6800      	ldr	r0, [r0, #0]
 80032b4:	a902      	add	r1, sp, #8
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	f000 f868 	bl	800338c <_svfiprintf_r>
 80032bc:	2200      	movs	r2, #0
 80032be:	9b02      	ldr	r3, [sp, #8]
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	b01c      	add	sp, #112	; 0x70
 80032c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032c8:	b003      	add	sp, #12
 80032ca:	4770      	bx	lr
 80032cc:	20000010 	.word	0x20000010
 80032d0:	ffff0208 	.word	0xffff0208

080032d4 <__ssputs_r>:
 80032d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d8:	688e      	ldr	r6, [r1, #8]
 80032da:	4682      	mov	sl, r0
 80032dc:	429e      	cmp	r6, r3
 80032de:	460c      	mov	r4, r1
 80032e0:	4690      	mov	r8, r2
 80032e2:	461f      	mov	r7, r3
 80032e4:	d838      	bhi.n	8003358 <__ssputs_r+0x84>
 80032e6:	898a      	ldrh	r2, [r1, #12]
 80032e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032ec:	d032      	beq.n	8003354 <__ssputs_r+0x80>
 80032ee:	6825      	ldr	r5, [r4, #0]
 80032f0:	6909      	ldr	r1, [r1, #16]
 80032f2:	3301      	adds	r3, #1
 80032f4:	eba5 0901 	sub.w	r9, r5, r1
 80032f8:	6965      	ldr	r5, [r4, #20]
 80032fa:	444b      	add	r3, r9
 80032fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003304:	106d      	asrs	r5, r5, #1
 8003306:	429d      	cmp	r5, r3
 8003308:	bf38      	it	cc
 800330a:	461d      	movcc	r5, r3
 800330c:	0553      	lsls	r3, r2, #21
 800330e:	d531      	bpl.n	8003374 <__ssputs_r+0xa0>
 8003310:	4629      	mov	r1, r5
 8003312:	f000 fb53 	bl	80039bc <_malloc_r>
 8003316:	4606      	mov	r6, r0
 8003318:	b950      	cbnz	r0, 8003330 <__ssputs_r+0x5c>
 800331a:	230c      	movs	r3, #12
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f8ca 3000 	str.w	r3, [sl]
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332a:	81a3      	strh	r3, [r4, #12]
 800332c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003330:	464a      	mov	r2, r9
 8003332:	6921      	ldr	r1, [r4, #16]
 8003334:	f000 face 	bl	80038d4 <memcpy>
 8003338:	89a3      	ldrh	r3, [r4, #12]
 800333a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800333e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003342:	81a3      	strh	r3, [r4, #12]
 8003344:	6126      	str	r6, [r4, #16]
 8003346:	444e      	add	r6, r9
 8003348:	6026      	str	r6, [r4, #0]
 800334a:	463e      	mov	r6, r7
 800334c:	6165      	str	r5, [r4, #20]
 800334e:	eba5 0509 	sub.w	r5, r5, r9
 8003352:	60a5      	str	r5, [r4, #8]
 8003354:	42be      	cmp	r6, r7
 8003356:	d900      	bls.n	800335a <__ssputs_r+0x86>
 8003358:	463e      	mov	r6, r7
 800335a:	4632      	mov	r2, r6
 800335c:	4641      	mov	r1, r8
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	f000 fac6 	bl	80038f0 <memmove>
 8003364:	68a3      	ldr	r3, [r4, #8]
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	1b9b      	subs	r3, r3, r6
 800336a:	4432      	add	r2, r6
 800336c:	2000      	movs	r0, #0
 800336e:	60a3      	str	r3, [r4, #8]
 8003370:	6022      	str	r2, [r4, #0]
 8003372:	e7db      	b.n	800332c <__ssputs_r+0x58>
 8003374:	462a      	mov	r2, r5
 8003376:	f000 fb7b 	bl	8003a70 <_realloc_r>
 800337a:	4606      	mov	r6, r0
 800337c:	2800      	cmp	r0, #0
 800337e:	d1e1      	bne.n	8003344 <__ssputs_r+0x70>
 8003380:	4650      	mov	r0, sl
 8003382:	6921      	ldr	r1, [r4, #16]
 8003384:	f000 face 	bl	8003924 <_free_r>
 8003388:	e7c7      	b.n	800331a <__ssputs_r+0x46>
	...

0800338c <_svfiprintf_r>:
 800338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003390:	4698      	mov	r8, r3
 8003392:	898b      	ldrh	r3, [r1, #12]
 8003394:	4607      	mov	r7, r0
 8003396:	061b      	lsls	r3, r3, #24
 8003398:	460d      	mov	r5, r1
 800339a:	4614      	mov	r4, r2
 800339c:	b09d      	sub	sp, #116	; 0x74
 800339e:	d50e      	bpl.n	80033be <_svfiprintf_r+0x32>
 80033a0:	690b      	ldr	r3, [r1, #16]
 80033a2:	b963      	cbnz	r3, 80033be <_svfiprintf_r+0x32>
 80033a4:	2140      	movs	r1, #64	; 0x40
 80033a6:	f000 fb09 	bl	80039bc <_malloc_r>
 80033aa:	6028      	str	r0, [r5, #0]
 80033ac:	6128      	str	r0, [r5, #16]
 80033ae:	b920      	cbnz	r0, 80033ba <_svfiprintf_r+0x2e>
 80033b0:	230c      	movs	r3, #12
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	e0d1      	b.n	800355e <_svfiprintf_r+0x1d2>
 80033ba:	2340      	movs	r3, #64	; 0x40
 80033bc:	616b      	str	r3, [r5, #20]
 80033be:	2300      	movs	r3, #0
 80033c0:	9309      	str	r3, [sp, #36]	; 0x24
 80033c2:	2320      	movs	r3, #32
 80033c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033c8:	2330      	movs	r3, #48	; 0x30
 80033ca:	f04f 0901 	mov.w	r9, #1
 80033ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80033d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003578 <_svfiprintf_r+0x1ec>
 80033d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033da:	4623      	mov	r3, r4
 80033dc:	469a      	mov	sl, r3
 80033de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033e2:	b10a      	cbz	r2, 80033e8 <_svfiprintf_r+0x5c>
 80033e4:	2a25      	cmp	r2, #37	; 0x25
 80033e6:	d1f9      	bne.n	80033dc <_svfiprintf_r+0x50>
 80033e8:	ebba 0b04 	subs.w	fp, sl, r4
 80033ec:	d00b      	beq.n	8003406 <_svfiprintf_r+0x7a>
 80033ee:	465b      	mov	r3, fp
 80033f0:	4622      	mov	r2, r4
 80033f2:	4629      	mov	r1, r5
 80033f4:	4638      	mov	r0, r7
 80033f6:	f7ff ff6d 	bl	80032d4 <__ssputs_r>
 80033fa:	3001      	adds	r0, #1
 80033fc:	f000 80aa 	beq.w	8003554 <_svfiprintf_r+0x1c8>
 8003400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003402:	445a      	add	r2, fp
 8003404:	9209      	str	r2, [sp, #36]	; 0x24
 8003406:	f89a 3000 	ldrb.w	r3, [sl]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a2 	beq.w	8003554 <_svfiprintf_r+0x1c8>
 8003410:	2300      	movs	r3, #0
 8003412:	f04f 32ff 	mov.w	r2, #4294967295
 8003416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800341a:	f10a 0a01 	add.w	sl, sl, #1
 800341e:	9304      	str	r3, [sp, #16]
 8003420:	9307      	str	r3, [sp, #28]
 8003422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003426:	931a      	str	r3, [sp, #104]	; 0x68
 8003428:	4654      	mov	r4, sl
 800342a:	2205      	movs	r2, #5
 800342c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003430:	4851      	ldr	r0, [pc, #324]	; (8003578 <_svfiprintf_r+0x1ec>)
 8003432:	f000 fa41 	bl	80038b8 <memchr>
 8003436:	9a04      	ldr	r2, [sp, #16]
 8003438:	b9d8      	cbnz	r0, 8003472 <_svfiprintf_r+0xe6>
 800343a:	06d0      	lsls	r0, r2, #27
 800343c:	bf44      	itt	mi
 800343e:	2320      	movmi	r3, #32
 8003440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003444:	0711      	lsls	r1, r2, #28
 8003446:	bf44      	itt	mi
 8003448:	232b      	movmi	r3, #43	; 0x2b
 800344a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800344e:	f89a 3000 	ldrb.w	r3, [sl]
 8003452:	2b2a      	cmp	r3, #42	; 0x2a
 8003454:	d015      	beq.n	8003482 <_svfiprintf_r+0xf6>
 8003456:	4654      	mov	r4, sl
 8003458:	2000      	movs	r0, #0
 800345a:	f04f 0c0a 	mov.w	ip, #10
 800345e:	9a07      	ldr	r2, [sp, #28]
 8003460:	4621      	mov	r1, r4
 8003462:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003466:	3b30      	subs	r3, #48	; 0x30
 8003468:	2b09      	cmp	r3, #9
 800346a:	d94e      	bls.n	800350a <_svfiprintf_r+0x17e>
 800346c:	b1b0      	cbz	r0, 800349c <_svfiprintf_r+0x110>
 800346e:	9207      	str	r2, [sp, #28]
 8003470:	e014      	b.n	800349c <_svfiprintf_r+0x110>
 8003472:	eba0 0308 	sub.w	r3, r0, r8
 8003476:	fa09 f303 	lsl.w	r3, r9, r3
 800347a:	4313      	orrs	r3, r2
 800347c:	46a2      	mov	sl, r4
 800347e:	9304      	str	r3, [sp, #16]
 8003480:	e7d2      	b.n	8003428 <_svfiprintf_r+0x9c>
 8003482:	9b03      	ldr	r3, [sp, #12]
 8003484:	1d19      	adds	r1, r3, #4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	9103      	str	r1, [sp, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	bfbb      	ittet	lt
 800348e:	425b      	neglt	r3, r3
 8003490:	f042 0202 	orrlt.w	r2, r2, #2
 8003494:	9307      	strge	r3, [sp, #28]
 8003496:	9307      	strlt	r3, [sp, #28]
 8003498:	bfb8      	it	lt
 800349a:	9204      	strlt	r2, [sp, #16]
 800349c:	7823      	ldrb	r3, [r4, #0]
 800349e:	2b2e      	cmp	r3, #46	; 0x2e
 80034a0:	d10c      	bne.n	80034bc <_svfiprintf_r+0x130>
 80034a2:	7863      	ldrb	r3, [r4, #1]
 80034a4:	2b2a      	cmp	r3, #42	; 0x2a
 80034a6:	d135      	bne.n	8003514 <_svfiprintf_r+0x188>
 80034a8:	9b03      	ldr	r3, [sp, #12]
 80034aa:	3402      	adds	r4, #2
 80034ac:	1d1a      	adds	r2, r3, #4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	9203      	str	r2, [sp, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bfb8      	it	lt
 80034b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80034ba:	9305      	str	r3, [sp, #20]
 80034bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003588 <_svfiprintf_r+0x1fc>
 80034c0:	2203      	movs	r2, #3
 80034c2:	4650      	mov	r0, sl
 80034c4:	7821      	ldrb	r1, [r4, #0]
 80034c6:	f000 f9f7 	bl	80038b8 <memchr>
 80034ca:	b140      	cbz	r0, 80034de <_svfiprintf_r+0x152>
 80034cc:	2340      	movs	r3, #64	; 0x40
 80034ce:	eba0 000a 	sub.w	r0, r0, sl
 80034d2:	fa03 f000 	lsl.w	r0, r3, r0
 80034d6:	9b04      	ldr	r3, [sp, #16]
 80034d8:	3401      	adds	r4, #1
 80034da:	4303      	orrs	r3, r0
 80034dc:	9304      	str	r3, [sp, #16]
 80034de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034e2:	2206      	movs	r2, #6
 80034e4:	4825      	ldr	r0, [pc, #148]	; (800357c <_svfiprintf_r+0x1f0>)
 80034e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ea:	f000 f9e5 	bl	80038b8 <memchr>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d038      	beq.n	8003564 <_svfiprintf_r+0x1d8>
 80034f2:	4b23      	ldr	r3, [pc, #140]	; (8003580 <_svfiprintf_r+0x1f4>)
 80034f4:	bb1b      	cbnz	r3, 800353e <_svfiprintf_r+0x1b2>
 80034f6:	9b03      	ldr	r3, [sp, #12]
 80034f8:	3307      	adds	r3, #7
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	3308      	adds	r3, #8
 8003500:	9303      	str	r3, [sp, #12]
 8003502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003504:	4433      	add	r3, r6
 8003506:	9309      	str	r3, [sp, #36]	; 0x24
 8003508:	e767      	b.n	80033da <_svfiprintf_r+0x4e>
 800350a:	460c      	mov	r4, r1
 800350c:	2001      	movs	r0, #1
 800350e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003512:	e7a5      	b.n	8003460 <_svfiprintf_r+0xd4>
 8003514:	2300      	movs	r3, #0
 8003516:	f04f 0c0a 	mov.w	ip, #10
 800351a:	4619      	mov	r1, r3
 800351c:	3401      	adds	r4, #1
 800351e:	9305      	str	r3, [sp, #20]
 8003520:	4620      	mov	r0, r4
 8003522:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003526:	3a30      	subs	r2, #48	; 0x30
 8003528:	2a09      	cmp	r2, #9
 800352a:	d903      	bls.n	8003534 <_svfiprintf_r+0x1a8>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0c5      	beq.n	80034bc <_svfiprintf_r+0x130>
 8003530:	9105      	str	r1, [sp, #20]
 8003532:	e7c3      	b.n	80034bc <_svfiprintf_r+0x130>
 8003534:	4604      	mov	r4, r0
 8003536:	2301      	movs	r3, #1
 8003538:	fb0c 2101 	mla	r1, ip, r1, r2
 800353c:	e7f0      	b.n	8003520 <_svfiprintf_r+0x194>
 800353e:	ab03      	add	r3, sp, #12
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	462a      	mov	r2, r5
 8003544:	4638      	mov	r0, r7
 8003546:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <_svfiprintf_r+0x1f8>)
 8003548:	a904      	add	r1, sp, #16
 800354a:	f3af 8000 	nop.w
 800354e:	1c42      	adds	r2, r0, #1
 8003550:	4606      	mov	r6, r0
 8003552:	d1d6      	bne.n	8003502 <_svfiprintf_r+0x176>
 8003554:	89ab      	ldrh	r3, [r5, #12]
 8003556:	065b      	lsls	r3, r3, #25
 8003558:	f53f af2c 	bmi.w	80033b4 <_svfiprintf_r+0x28>
 800355c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800355e:	b01d      	add	sp, #116	; 0x74
 8003560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003564:	ab03      	add	r3, sp, #12
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	462a      	mov	r2, r5
 800356a:	4638      	mov	r0, r7
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <_svfiprintf_r+0x1f8>)
 800356e:	a904      	add	r1, sp, #16
 8003570:	f000 f87c 	bl	800366c <_printf_i>
 8003574:	e7eb      	b.n	800354e <_svfiprintf_r+0x1c2>
 8003576:	bf00      	nop
 8003578:	08003b4c 	.word	0x08003b4c
 800357c:	08003b56 	.word	0x08003b56
 8003580:	00000000 	.word	0x00000000
 8003584:	080032d5 	.word	0x080032d5
 8003588:	08003b52 	.word	0x08003b52

0800358c <_printf_common>:
 800358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	4616      	mov	r6, r2
 8003592:	4699      	mov	r9, r3
 8003594:	688a      	ldr	r2, [r1, #8]
 8003596:	690b      	ldr	r3, [r1, #16]
 8003598:	4607      	mov	r7, r0
 800359a:	4293      	cmp	r3, r2
 800359c:	bfb8      	it	lt
 800359e:	4613      	movlt	r3, r2
 80035a0:	6033      	str	r3, [r6, #0]
 80035a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035a6:	460c      	mov	r4, r1
 80035a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035ac:	b10a      	cbz	r2, 80035b2 <_printf_common+0x26>
 80035ae:	3301      	adds	r3, #1
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	0699      	lsls	r1, r3, #26
 80035b6:	bf42      	ittt	mi
 80035b8:	6833      	ldrmi	r3, [r6, #0]
 80035ba:	3302      	addmi	r3, #2
 80035bc:	6033      	strmi	r3, [r6, #0]
 80035be:	6825      	ldr	r5, [r4, #0]
 80035c0:	f015 0506 	ands.w	r5, r5, #6
 80035c4:	d106      	bne.n	80035d4 <_printf_common+0x48>
 80035c6:	f104 0a19 	add.w	sl, r4, #25
 80035ca:	68e3      	ldr	r3, [r4, #12]
 80035cc:	6832      	ldr	r2, [r6, #0]
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	42ab      	cmp	r3, r5
 80035d2:	dc28      	bgt.n	8003626 <_printf_common+0x9a>
 80035d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035d8:	1e13      	subs	r3, r2, #0
 80035da:	6822      	ldr	r2, [r4, #0]
 80035dc:	bf18      	it	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	0692      	lsls	r2, r2, #26
 80035e2:	d42d      	bmi.n	8003640 <_printf_common+0xb4>
 80035e4:	4649      	mov	r1, r9
 80035e6:	4638      	mov	r0, r7
 80035e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035ec:	47c0      	blx	r8
 80035ee:	3001      	adds	r0, #1
 80035f0:	d020      	beq.n	8003634 <_printf_common+0xa8>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	68e5      	ldr	r5, [r4, #12]
 80035f6:	f003 0306 	and.w	r3, r3, #6
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf18      	it	ne
 80035fe:	2500      	movne	r5, #0
 8003600:	6832      	ldr	r2, [r6, #0]
 8003602:	f04f 0600 	mov.w	r6, #0
 8003606:	68a3      	ldr	r3, [r4, #8]
 8003608:	bf08      	it	eq
 800360a:	1aad      	subeq	r5, r5, r2
 800360c:	6922      	ldr	r2, [r4, #16]
 800360e:	bf08      	it	eq
 8003610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003614:	4293      	cmp	r3, r2
 8003616:	bfc4      	itt	gt
 8003618:	1a9b      	subgt	r3, r3, r2
 800361a:	18ed      	addgt	r5, r5, r3
 800361c:	341a      	adds	r4, #26
 800361e:	42b5      	cmp	r5, r6
 8003620:	d11a      	bne.n	8003658 <_printf_common+0xcc>
 8003622:	2000      	movs	r0, #0
 8003624:	e008      	b.n	8003638 <_printf_common+0xac>
 8003626:	2301      	movs	r3, #1
 8003628:	4652      	mov	r2, sl
 800362a:	4649      	mov	r1, r9
 800362c:	4638      	mov	r0, r7
 800362e:	47c0      	blx	r8
 8003630:	3001      	adds	r0, #1
 8003632:	d103      	bne.n	800363c <_printf_common+0xb0>
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363c:	3501      	adds	r5, #1
 800363e:	e7c4      	b.n	80035ca <_printf_common+0x3e>
 8003640:	2030      	movs	r0, #48	; 0x30
 8003642:	18e1      	adds	r1, r4, r3
 8003644:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800364e:	4422      	add	r2, r4
 8003650:	3302      	adds	r3, #2
 8003652:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003656:	e7c5      	b.n	80035e4 <_printf_common+0x58>
 8003658:	2301      	movs	r3, #1
 800365a:	4622      	mov	r2, r4
 800365c:	4649      	mov	r1, r9
 800365e:	4638      	mov	r0, r7
 8003660:	47c0      	blx	r8
 8003662:	3001      	adds	r0, #1
 8003664:	d0e6      	beq.n	8003634 <_printf_common+0xa8>
 8003666:	3601      	adds	r6, #1
 8003668:	e7d9      	b.n	800361e <_printf_common+0x92>
	...

0800366c <_printf_i>:
 800366c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003670:	460c      	mov	r4, r1
 8003672:	7e27      	ldrb	r7, [r4, #24]
 8003674:	4691      	mov	r9, r2
 8003676:	2f78      	cmp	r7, #120	; 0x78
 8003678:	4680      	mov	r8, r0
 800367a:	469a      	mov	sl, r3
 800367c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800367e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003682:	d807      	bhi.n	8003694 <_printf_i+0x28>
 8003684:	2f62      	cmp	r7, #98	; 0x62
 8003686:	d80a      	bhi.n	800369e <_printf_i+0x32>
 8003688:	2f00      	cmp	r7, #0
 800368a:	f000 80d9 	beq.w	8003840 <_printf_i+0x1d4>
 800368e:	2f58      	cmp	r7, #88	; 0x58
 8003690:	f000 80a4 	beq.w	80037dc <_printf_i+0x170>
 8003694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800369c:	e03a      	b.n	8003714 <_printf_i+0xa8>
 800369e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036a2:	2b15      	cmp	r3, #21
 80036a4:	d8f6      	bhi.n	8003694 <_printf_i+0x28>
 80036a6:	a001      	add	r0, pc, #4	; (adr r0, 80036ac <_printf_i+0x40>)
 80036a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036ac:	08003705 	.word	0x08003705
 80036b0:	08003719 	.word	0x08003719
 80036b4:	08003695 	.word	0x08003695
 80036b8:	08003695 	.word	0x08003695
 80036bc:	08003695 	.word	0x08003695
 80036c0:	08003695 	.word	0x08003695
 80036c4:	08003719 	.word	0x08003719
 80036c8:	08003695 	.word	0x08003695
 80036cc:	08003695 	.word	0x08003695
 80036d0:	08003695 	.word	0x08003695
 80036d4:	08003695 	.word	0x08003695
 80036d8:	08003827 	.word	0x08003827
 80036dc:	08003749 	.word	0x08003749
 80036e0:	08003809 	.word	0x08003809
 80036e4:	08003695 	.word	0x08003695
 80036e8:	08003695 	.word	0x08003695
 80036ec:	08003849 	.word	0x08003849
 80036f0:	08003695 	.word	0x08003695
 80036f4:	08003749 	.word	0x08003749
 80036f8:	08003695 	.word	0x08003695
 80036fc:	08003695 	.word	0x08003695
 8003700:	08003811 	.word	0x08003811
 8003704:	680b      	ldr	r3, [r1, #0]
 8003706:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800370a:	1d1a      	adds	r2, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	600a      	str	r2, [r1, #0]
 8003710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003714:	2301      	movs	r3, #1
 8003716:	e0a4      	b.n	8003862 <_printf_i+0x1f6>
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	6808      	ldr	r0, [r1, #0]
 800371c:	062e      	lsls	r6, r5, #24
 800371e:	f100 0304 	add.w	r3, r0, #4
 8003722:	d50a      	bpl.n	800373a <_printf_i+0xce>
 8003724:	6805      	ldr	r5, [r0, #0]
 8003726:	600b      	str	r3, [r1, #0]
 8003728:	2d00      	cmp	r5, #0
 800372a:	da03      	bge.n	8003734 <_printf_i+0xc8>
 800372c:	232d      	movs	r3, #45	; 0x2d
 800372e:	426d      	negs	r5, r5
 8003730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003734:	230a      	movs	r3, #10
 8003736:	485e      	ldr	r0, [pc, #376]	; (80038b0 <_printf_i+0x244>)
 8003738:	e019      	b.n	800376e <_printf_i+0x102>
 800373a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800373e:	6805      	ldr	r5, [r0, #0]
 8003740:	600b      	str	r3, [r1, #0]
 8003742:	bf18      	it	ne
 8003744:	b22d      	sxthne	r5, r5
 8003746:	e7ef      	b.n	8003728 <_printf_i+0xbc>
 8003748:	680b      	ldr	r3, [r1, #0]
 800374a:	6825      	ldr	r5, [r4, #0]
 800374c:	1d18      	adds	r0, r3, #4
 800374e:	6008      	str	r0, [r1, #0]
 8003750:	0628      	lsls	r0, r5, #24
 8003752:	d501      	bpl.n	8003758 <_printf_i+0xec>
 8003754:	681d      	ldr	r5, [r3, #0]
 8003756:	e002      	b.n	800375e <_printf_i+0xf2>
 8003758:	0669      	lsls	r1, r5, #25
 800375a:	d5fb      	bpl.n	8003754 <_printf_i+0xe8>
 800375c:	881d      	ldrh	r5, [r3, #0]
 800375e:	2f6f      	cmp	r7, #111	; 0x6f
 8003760:	bf0c      	ite	eq
 8003762:	2308      	moveq	r3, #8
 8003764:	230a      	movne	r3, #10
 8003766:	4852      	ldr	r0, [pc, #328]	; (80038b0 <_printf_i+0x244>)
 8003768:	2100      	movs	r1, #0
 800376a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800376e:	6866      	ldr	r6, [r4, #4]
 8003770:	2e00      	cmp	r6, #0
 8003772:	bfa8      	it	ge
 8003774:	6821      	ldrge	r1, [r4, #0]
 8003776:	60a6      	str	r6, [r4, #8]
 8003778:	bfa4      	itt	ge
 800377a:	f021 0104 	bicge.w	r1, r1, #4
 800377e:	6021      	strge	r1, [r4, #0]
 8003780:	b90d      	cbnz	r5, 8003786 <_printf_i+0x11a>
 8003782:	2e00      	cmp	r6, #0
 8003784:	d04d      	beq.n	8003822 <_printf_i+0x1b6>
 8003786:	4616      	mov	r6, r2
 8003788:	fbb5 f1f3 	udiv	r1, r5, r3
 800378c:	fb03 5711 	mls	r7, r3, r1, r5
 8003790:	5dc7      	ldrb	r7, [r0, r7]
 8003792:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003796:	462f      	mov	r7, r5
 8003798:	42bb      	cmp	r3, r7
 800379a:	460d      	mov	r5, r1
 800379c:	d9f4      	bls.n	8003788 <_printf_i+0x11c>
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d10b      	bne.n	80037ba <_printf_i+0x14e>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	07df      	lsls	r7, r3, #31
 80037a6:	d508      	bpl.n	80037ba <_printf_i+0x14e>
 80037a8:	6923      	ldr	r3, [r4, #16]
 80037aa:	6861      	ldr	r1, [r4, #4]
 80037ac:	4299      	cmp	r1, r3
 80037ae:	bfde      	ittt	le
 80037b0:	2330      	movle	r3, #48	; 0x30
 80037b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037ba:	1b92      	subs	r2, r2, r6
 80037bc:	6122      	str	r2, [r4, #16]
 80037be:	464b      	mov	r3, r9
 80037c0:	4621      	mov	r1, r4
 80037c2:	4640      	mov	r0, r8
 80037c4:	f8cd a000 	str.w	sl, [sp]
 80037c8:	aa03      	add	r2, sp, #12
 80037ca:	f7ff fedf 	bl	800358c <_printf_common>
 80037ce:	3001      	adds	r0, #1
 80037d0:	d14c      	bne.n	800386c <_printf_i+0x200>
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	b004      	add	sp, #16
 80037d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037dc:	4834      	ldr	r0, [pc, #208]	; (80038b0 <_printf_i+0x244>)
 80037de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037e2:	680e      	ldr	r6, [r1, #0]
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80037ea:	061f      	lsls	r7, r3, #24
 80037ec:	600e      	str	r6, [r1, #0]
 80037ee:	d514      	bpl.n	800381a <_printf_i+0x1ae>
 80037f0:	07d9      	lsls	r1, r3, #31
 80037f2:	bf44      	itt	mi
 80037f4:	f043 0320 	orrmi.w	r3, r3, #32
 80037f8:	6023      	strmi	r3, [r4, #0]
 80037fa:	b91d      	cbnz	r5, 8003804 <_printf_i+0x198>
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	f023 0320 	bic.w	r3, r3, #32
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	2310      	movs	r3, #16
 8003806:	e7af      	b.n	8003768 <_printf_i+0xfc>
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	f043 0320 	orr.w	r3, r3, #32
 800380e:	6023      	str	r3, [r4, #0]
 8003810:	2378      	movs	r3, #120	; 0x78
 8003812:	4828      	ldr	r0, [pc, #160]	; (80038b4 <_printf_i+0x248>)
 8003814:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003818:	e7e3      	b.n	80037e2 <_printf_i+0x176>
 800381a:	065e      	lsls	r6, r3, #25
 800381c:	bf48      	it	mi
 800381e:	b2ad      	uxthmi	r5, r5
 8003820:	e7e6      	b.n	80037f0 <_printf_i+0x184>
 8003822:	4616      	mov	r6, r2
 8003824:	e7bb      	b.n	800379e <_printf_i+0x132>
 8003826:	680b      	ldr	r3, [r1, #0]
 8003828:	6826      	ldr	r6, [r4, #0]
 800382a:	1d1d      	adds	r5, r3, #4
 800382c:	6960      	ldr	r0, [r4, #20]
 800382e:	600d      	str	r5, [r1, #0]
 8003830:	0635      	lsls	r5, r6, #24
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	d501      	bpl.n	800383a <_printf_i+0x1ce>
 8003836:	6018      	str	r0, [r3, #0]
 8003838:	e002      	b.n	8003840 <_printf_i+0x1d4>
 800383a:	0671      	lsls	r1, r6, #25
 800383c:	d5fb      	bpl.n	8003836 <_printf_i+0x1ca>
 800383e:	8018      	strh	r0, [r3, #0]
 8003840:	2300      	movs	r3, #0
 8003842:	4616      	mov	r6, r2
 8003844:	6123      	str	r3, [r4, #16]
 8003846:	e7ba      	b.n	80037be <_printf_i+0x152>
 8003848:	680b      	ldr	r3, [r1, #0]
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	600a      	str	r2, [r1, #0]
 800384e:	681e      	ldr	r6, [r3, #0]
 8003850:	2100      	movs	r1, #0
 8003852:	4630      	mov	r0, r6
 8003854:	6862      	ldr	r2, [r4, #4]
 8003856:	f000 f82f 	bl	80038b8 <memchr>
 800385a:	b108      	cbz	r0, 8003860 <_printf_i+0x1f4>
 800385c:	1b80      	subs	r0, r0, r6
 800385e:	6060      	str	r0, [r4, #4]
 8003860:	6863      	ldr	r3, [r4, #4]
 8003862:	6123      	str	r3, [r4, #16]
 8003864:	2300      	movs	r3, #0
 8003866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800386a:	e7a8      	b.n	80037be <_printf_i+0x152>
 800386c:	4632      	mov	r2, r6
 800386e:	4649      	mov	r1, r9
 8003870:	4640      	mov	r0, r8
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	47d0      	blx	sl
 8003876:	3001      	adds	r0, #1
 8003878:	d0ab      	beq.n	80037d2 <_printf_i+0x166>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	079b      	lsls	r3, r3, #30
 800387e:	d413      	bmi.n	80038a8 <_printf_i+0x23c>
 8003880:	68e0      	ldr	r0, [r4, #12]
 8003882:	9b03      	ldr	r3, [sp, #12]
 8003884:	4298      	cmp	r0, r3
 8003886:	bfb8      	it	lt
 8003888:	4618      	movlt	r0, r3
 800388a:	e7a4      	b.n	80037d6 <_printf_i+0x16a>
 800388c:	2301      	movs	r3, #1
 800388e:	4632      	mov	r2, r6
 8003890:	4649      	mov	r1, r9
 8003892:	4640      	mov	r0, r8
 8003894:	47d0      	blx	sl
 8003896:	3001      	adds	r0, #1
 8003898:	d09b      	beq.n	80037d2 <_printf_i+0x166>
 800389a:	3501      	adds	r5, #1
 800389c:	68e3      	ldr	r3, [r4, #12]
 800389e:	9903      	ldr	r1, [sp, #12]
 80038a0:	1a5b      	subs	r3, r3, r1
 80038a2:	42ab      	cmp	r3, r5
 80038a4:	dcf2      	bgt.n	800388c <_printf_i+0x220>
 80038a6:	e7eb      	b.n	8003880 <_printf_i+0x214>
 80038a8:	2500      	movs	r5, #0
 80038aa:	f104 0619 	add.w	r6, r4, #25
 80038ae:	e7f5      	b.n	800389c <_printf_i+0x230>
 80038b0:	08003b5d 	.word	0x08003b5d
 80038b4:	08003b6e 	.word	0x08003b6e

080038b8 <memchr>:
 80038b8:	4603      	mov	r3, r0
 80038ba:	b510      	push	{r4, lr}
 80038bc:	b2c9      	uxtb	r1, r1
 80038be:	4402      	add	r2, r0
 80038c0:	4293      	cmp	r3, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	d101      	bne.n	80038ca <memchr+0x12>
 80038c6:	2000      	movs	r0, #0
 80038c8:	e003      	b.n	80038d2 <memchr+0x1a>
 80038ca:	7804      	ldrb	r4, [r0, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	428c      	cmp	r4, r1
 80038d0:	d1f6      	bne.n	80038c0 <memchr+0x8>
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <memcpy>:
 80038d4:	440a      	add	r2, r1
 80038d6:	4291      	cmp	r1, r2
 80038d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038dc:	d100      	bne.n	80038e0 <memcpy+0xc>
 80038de:	4770      	bx	lr
 80038e0:	b510      	push	{r4, lr}
 80038e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038e6:	4291      	cmp	r1, r2
 80038e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ec:	d1f9      	bne.n	80038e2 <memcpy+0xe>
 80038ee:	bd10      	pop	{r4, pc}

080038f0 <memmove>:
 80038f0:	4288      	cmp	r0, r1
 80038f2:	b510      	push	{r4, lr}
 80038f4:	eb01 0402 	add.w	r4, r1, r2
 80038f8:	d902      	bls.n	8003900 <memmove+0x10>
 80038fa:	4284      	cmp	r4, r0
 80038fc:	4623      	mov	r3, r4
 80038fe:	d807      	bhi.n	8003910 <memmove+0x20>
 8003900:	1e43      	subs	r3, r0, #1
 8003902:	42a1      	cmp	r1, r4
 8003904:	d008      	beq.n	8003918 <memmove+0x28>
 8003906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800390a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800390e:	e7f8      	b.n	8003902 <memmove+0x12>
 8003910:	4601      	mov	r1, r0
 8003912:	4402      	add	r2, r0
 8003914:	428a      	cmp	r2, r1
 8003916:	d100      	bne.n	800391a <memmove+0x2a>
 8003918:	bd10      	pop	{r4, pc}
 800391a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800391e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003922:	e7f7      	b.n	8003914 <memmove+0x24>

08003924 <_free_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	4605      	mov	r5, r0
 8003928:	2900      	cmp	r1, #0
 800392a:	d043      	beq.n	80039b4 <_free_r+0x90>
 800392c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003930:	1f0c      	subs	r4, r1, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	18e4      	addlt	r4, r4, r3
 8003938:	f000 f8d0 	bl	8003adc <__malloc_lock>
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <_free_r+0x94>)
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	4610      	mov	r0, r2
 8003942:	b933      	cbnz	r3, 8003952 <_free_r+0x2e>
 8003944:	6063      	str	r3, [r4, #4]
 8003946:	6014      	str	r4, [r2, #0]
 8003948:	4628      	mov	r0, r5
 800394a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800394e:	f000 b8cb 	b.w	8003ae8 <__malloc_unlock>
 8003952:	42a3      	cmp	r3, r4
 8003954:	d90a      	bls.n	800396c <_free_r+0x48>
 8003956:	6821      	ldr	r1, [r4, #0]
 8003958:	1862      	adds	r2, r4, r1
 800395a:	4293      	cmp	r3, r2
 800395c:	bf01      	itttt	eq
 800395e:	681a      	ldreq	r2, [r3, #0]
 8003960:	685b      	ldreq	r3, [r3, #4]
 8003962:	1852      	addeq	r2, r2, r1
 8003964:	6022      	streq	r2, [r4, #0]
 8003966:	6063      	str	r3, [r4, #4]
 8003968:	6004      	str	r4, [r0, #0]
 800396a:	e7ed      	b.n	8003948 <_free_r+0x24>
 800396c:	461a      	mov	r2, r3
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	b10b      	cbz	r3, 8003976 <_free_r+0x52>
 8003972:	42a3      	cmp	r3, r4
 8003974:	d9fa      	bls.n	800396c <_free_r+0x48>
 8003976:	6811      	ldr	r1, [r2, #0]
 8003978:	1850      	adds	r0, r2, r1
 800397a:	42a0      	cmp	r0, r4
 800397c:	d10b      	bne.n	8003996 <_free_r+0x72>
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	4401      	add	r1, r0
 8003982:	1850      	adds	r0, r2, r1
 8003984:	4283      	cmp	r3, r0
 8003986:	6011      	str	r1, [r2, #0]
 8003988:	d1de      	bne.n	8003948 <_free_r+0x24>
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4401      	add	r1, r0
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	6053      	str	r3, [r2, #4]
 8003994:	e7d8      	b.n	8003948 <_free_r+0x24>
 8003996:	d902      	bls.n	800399e <_free_r+0x7a>
 8003998:	230c      	movs	r3, #12
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	e7d4      	b.n	8003948 <_free_r+0x24>
 800399e:	6820      	ldr	r0, [r4, #0]
 80039a0:	1821      	adds	r1, r4, r0
 80039a2:	428b      	cmp	r3, r1
 80039a4:	bf01      	itttt	eq
 80039a6:	6819      	ldreq	r1, [r3, #0]
 80039a8:	685b      	ldreq	r3, [r3, #4]
 80039aa:	1809      	addeq	r1, r1, r0
 80039ac:	6021      	streq	r1, [r4, #0]
 80039ae:	6063      	str	r3, [r4, #4]
 80039b0:	6054      	str	r4, [r2, #4]
 80039b2:	e7c9      	b.n	8003948 <_free_r+0x24>
 80039b4:	bd38      	pop	{r3, r4, r5, pc}
 80039b6:	bf00      	nop
 80039b8:	200000a0 	.word	0x200000a0

080039bc <_malloc_r>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	1ccd      	adds	r5, r1, #3
 80039c0:	f025 0503 	bic.w	r5, r5, #3
 80039c4:	3508      	adds	r5, #8
 80039c6:	2d0c      	cmp	r5, #12
 80039c8:	bf38      	it	cc
 80039ca:	250c      	movcc	r5, #12
 80039cc:	2d00      	cmp	r5, #0
 80039ce:	4606      	mov	r6, r0
 80039d0:	db01      	blt.n	80039d6 <_malloc_r+0x1a>
 80039d2:	42a9      	cmp	r1, r5
 80039d4:	d903      	bls.n	80039de <_malloc_r+0x22>
 80039d6:	230c      	movs	r3, #12
 80039d8:	6033      	str	r3, [r6, #0]
 80039da:	2000      	movs	r0, #0
 80039dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039de:	f000 f87d 	bl	8003adc <__malloc_lock>
 80039e2:	4921      	ldr	r1, [pc, #132]	; (8003a68 <_malloc_r+0xac>)
 80039e4:	680a      	ldr	r2, [r1, #0]
 80039e6:	4614      	mov	r4, r2
 80039e8:	b99c      	cbnz	r4, 8003a12 <_malloc_r+0x56>
 80039ea:	4f20      	ldr	r7, [pc, #128]	; (8003a6c <_malloc_r+0xb0>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b923      	cbnz	r3, 80039fa <_malloc_r+0x3e>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4630      	mov	r0, r6
 80039f4:	f000 f862 	bl	8003abc <_sbrk_r>
 80039f8:	6038      	str	r0, [r7, #0]
 80039fa:	4629      	mov	r1, r5
 80039fc:	4630      	mov	r0, r6
 80039fe:	f000 f85d 	bl	8003abc <_sbrk_r>
 8003a02:	1c43      	adds	r3, r0, #1
 8003a04:	d123      	bne.n	8003a4e <_malloc_r+0x92>
 8003a06:	230c      	movs	r3, #12
 8003a08:	4630      	mov	r0, r6
 8003a0a:	6033      	str	r3, [r6, #0]
 8003a0c:	f000 f86c 	bl	8003ae8 <__malloc_unlock>
 8003a10:	e7e3      	b.n	80039da <_malloc_r+0x1e>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	1b5b      	subs	r3, r3, r5
 8003a16:	d417      	bmi.n	8003a48 <_malloc_r+0x8c>
 8003a18:	2b0b      	cmp	r3, #11
 8003a1a:	d903      	bls.n	8003a24 <_malloc_r+0x68>
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	441c      	add	r4, r3
 8003a20:	6025      	str	r5, [r4, #0]
 8003a22:	e004      	b.n	8003a2e <_malloc_r+0x72>
 8003a24:	6863      	ldr	r3, [r4, #4]
 8003a26:	42a2      	cmp	r2, r4
 8003a28:	bf0c      	ite	eq
 8003a2a:	600b      	streq	r3, [r1, #0]
 8003a2c:	6053      	strne	r3, [r2, #4]
 8003a2e:	4630      	mov	r0, r6
 8003a30:	f000 f85a 	bl	8003ae8 <__malloc_unlock>
 8003a34:	f104 000b 	add.w	r0, r4, #11
 8003a38:	1d23      	adds	r3, r4, #4
 8003a3a:	f020 0007 	bic.w	r0, r0, #7
 8003a3e:	1ac2      	subs	r2, r0, r3
 8003a40:	d0cc      	beq.n	80039dc <_malloc_r+0x20>
 8003a42:	1a1b      	subs	r3, r3, r0
 8003a44:	50a3      	str	r3, [r4, r2]
 8003a46:	e7c9      	b.n	80039dc <_malloc_r+0x20>
 8003a48:	4622      	mov	r2, r4
 8003a4a:	6864      	ldr	r4, [r4, #4]
 8003a4c:	e7cc      	b.n	80039e8 <_malloc_r+0x2c>
 8003a4e:	1cc4      	adds	r4, r0, #3
 8003a50:	f024 0403 	bic.w	r4, r4, #3
 8003a54:	42a0      	cmp	r0, r4
 8003a56:	d0e3      	beq.n	8003a20 <_malloc_r+0x64>
 8003a58:	1a21      	subs	r1, r4, r0
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f000 f82e 	bl	8003abc <_sbrk_r>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d1dd      	bne.n	8003a20 <_malloc_r+0x64>
 8003a64:	e7cf      	b.n	8003a06 <_malloc_r+0x4a>
 8003a66:	bf00      	nop
 8003a68:	200000a0 	.word	0x200000a0
 8003a6c:	200000a4 	.word	0x200000a4

08003a70 <_realloc_r>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	4607      	mov	r7, r0
 8003a74:	4614      	mov	r4, r2
 8003a76:	460e      	mov	r6, r1
 8003a78:	b921      	cbnz	r1, 8003a84 <_realloc_r+0x14>
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a80:	f7ff bf9c 	b.w	80039bc <_malloc_r>
 8003a84:	b922      	cbnz	r2, 8003a90 <_realloc_r+0x20>
 8003a86:	f7ff ff4d 	bl	8003924 <_free_r>
 8003a8a:	4625      	mov	r5, r4
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a90:	f000 f830 	bl	8003af4 <_malloc_usable_size_r>
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d20f      	bcs.n	8003ab8 <_realloc_r+0x48>
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f7ff ff8e 	bl	80039bc <_malloc_r>
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0f2      	beq.n	8003a8c <_realloc_r+0x1c>
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	f7ff ff13 	bl	80038d4 <memcpy>
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f7ff ff37 	bl	8003924 <_free_r>
 8003ab6:	e7e9      	b.n	8003a8c <_realloc_r+0x1c>
 8003ab8:	4635      	mov	r5, r6
 8003aba:	e7e7      	b.n	8003a8c <_realloc_r+0x1c>

08003abc <_sbrk_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4d05      	ldr	r5, [pc, #20]	; (8003ad8 <_sbrk_r+0x1c>)
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	602b      	str	r3, [r5, #0]
 8003ac8:	f7fc fe70 	bl	80007ac <_sbrk>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_sbrk_r+0x1a>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_sbrk_r+0x1a>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	2000017c 	.word	0x2000017c

08003adc <__malloc_lock>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__malloc_lock+0x8>)
 8003ade:	f000 b811 	b.w	8003b04 <__retarget_lock_acquire_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	20000184 	.word	0x20000184

08003ae8 <__malloc_unlock>:
 8003ae8:	4801      	ldr	r0, [pc, #4]	; (8003af0 <__malloc_unlock+0x8>)
 8003aea:	f000 b80c 	b.w	8003b06 <__retarget_lock_release_recursive>
 8003aee:	bf00      	nop
 8003af0:	20000184 	.word	0x20000184

08003af4 <_malloc_usable_size_r>:
 8003af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af8:	1f18      	subs	r0, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bfbc      	itt	lt
 8003afe:	580b      	ldrlt	r3, [r1, r0]
 8003b00:	18c0      	addlt	r0, r0, r3
 8003b02:	4770      	bx	lr

08003b04 <__retarget_lock_acquire_recursive>:
 8003b04:	4770      	bx	lr

08003b06 <__retarget_lock_release_recursive>:
 8003b06:	4770      	bx	lr

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
