
20220701_IREncoder_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800b5f8  0800b5f8  0001b5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bacc  0800bacc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800bacc  0800bacc  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bacc  0800bacc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bacc  0800bacc  0001bacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bad0  0800bad0  0001bad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800bad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b4  20000200  0800bcd0  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ab4  0800bcd0  00020ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001643c  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003424  00000000  00000000  00036661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00039a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003ac20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a287  00000000  00000000  0003bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159a5  00000000  00000000  00055f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090271  00000000  00000000  0006b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fbb3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c1c  00000000  00000000  000fbb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b5dc 	.word	0x0800b5dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800b5dc 	.word	0x0800b5dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	4621      	mov	r1, r4
 8000d60:	4628      	mov	r0, r5
 8000d62:	2200      	movs	r2, #0
 8000d64:	2300      	movs	r3, #0
 8000d66:	f7ff fe29 	bl	80009bc <__aeabi_dcmplt>
 8000d6a:	b928      	cbnz	r0, 8000d78 <__aeabi_d2lz+0x20>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	4621      	mov	r1, r4
 8000d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d74:	f000 b80a 	b.w	8000d8c <__aeabi_d2ulz>
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d7e:	f000 f805 	bl	8000d8c <__aeabi_d2ulz>
 8000d82:	4240      	negs	r0, r0
 8000d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d88:	bd38      	pop	{r3, r4, r5, pc}
 8000d8a:	bf00      	nop

08000d8c <__aeabi_d2ulz>:
 8000d8c:	b5d0      	push	{r4, r6, r7, lr}
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <__aeabi_d2ulz+0x34>)
 8000d92:	4606      	mov	r6, r0
 8000d94:	460f      	mov	r7, r1
 8000d96:	f7ff fb9f 	bl	80004d8 <__aeabi_dmul>
 8000d9a:	f7ff fe5f 	bl	8000a5c <__aeabi_d2uiz>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	f7ff fb20 	bl	80003e4 <__aeabi_ui2d>
 8000da4:	2200      	movs	r2, #0
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <__aeabi_d2ulz+0x38>)
 8000da8:	f7ff fb96 	bl	80004d8 <__aeabi_dmul>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4630      	mov	r0, r6
 8000db2:	4639      	mov	r1, r7
 8000db4:	f7ff f9d8 	bl	8000168 <__aeabi_dsub>
 8000db8:	f7ff fe50 	bl	8000a5c <__aeabi_d2uiz>
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000dc0:	3df00000 	.word	0x3df00000
 8000dc4:	41f00000 	.word	0x41f00000

08000dc8 <getGPSData>:
extern char tempArray[20];
extern int globalIndex;
int count = 0;

void getGPSData(void)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	while(RMC[indexRMC] == ',') indexRMC++;
 8000dcc:	e005      	b.n	8000dda <getGPSData+0x12>
 8000dce:	4b96      	ldr	r3, [pc, #600]	; (8001028 <getGPSData+0x260>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b94      	ldr	r3, [pc, #592]	; (8001028 <getGPSData+0x260>)
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	4b93      	ldr	r3, [pc, #588]	; (8001028 <getGPSData+0x260>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b92      	ldr	r3, [pc, #584]	; (800102c <getGPSData+0x264>)
 8000de2:	5c9b      	ldrb	r3, [r3, r2]
 8000de4:	2b2c      	cmp	r3, #44	; 0x2c
 8000de6:	d0f2      	beq.n	8000dce <getGPSData+0x6>
	while(RMC[indexRMC] != ',') indexRMC++;
 8000de8:	e005      	b.n	8000df6 <getGPSData+0x2e>
 8000dea:	4b8f      	ldr	r3, [pc, #572]	; (8001028 <getGPSData+0x260>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b8d      	ldr	r3, [pc, #564]	; (8001028 <getGPSData+0x260>)
 8000df4:	801a      	strh	r2, [r3, #0]
 8000df6:	4b8c      	ldr	r3, [pc, #560]	; (8001028 <getGPSData+0x260>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b8b      	ldr	r3, [pc, #556]	; (800102c <getGPSData+0x264>)
 8000dfe:	5c9b      	ldrb	r3, [r3, r2]
 8000e00:	2b2c      	cmp	r3, #44	; 0x2c
 8000e02:	d1f2      	bne.n	8000dea <getGPSData+0x22>

	while(RMC[indexRMC] == ',') indexRMC++;
 8000e04:	e005      	b.n	8000e12 <getGPSData+0x4a>
 8000e06:	4b88      	ldr	r3, [pc, #544]	; (8001028 <getGPSData+0x260>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b86      	ldr	r3, [pc, #536]	; (8001028 <getGPSData+0x260>)
 8000e10:	801a      	strh	r2, [r3, #0]
 8000e12:	4b85      	ldr	r3, [pc, #532]	; (8001028 <getGPSData+0x260>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b84      	ldr	r3, [pc, #528]	; (800102c <getGPSData+0x264>)
 8000e1a:	5c9b      	ldrb	r3, [r3, r2]
 8000e1c:	2b2c      	cmp	r3, #44	; 0x2c
 8000e1e:	d0f2      	beq.n	8000e06 <getGPSData+0x3e>
	gpsData.valid = RMC[indexRMC++];
 8000e20:	4b81      	ldr	r3, [pc, #516]	; (8001028 <getGPSData+0x260>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	b291      	uxth	r1, r2
 8000e28:	4a7f      	ldr	r2, [pc, #508]	; (8001028 <getGPSData+0x260>)
 8000e2a:	8011      	strh	r1, [r2, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b7f      	ldr	r3, [pc, #508]	; (800102c <getGPSData+0x264>)
 8000e30:	5c9a      	ldrb	r2, [r3, r2]
 8000e32:	4b7f      	ldr	r3, [pc, #508]	; (8001030 <getGPSData+0x268>)
 8000e34:	729a      	strb	r2, [r3, #10]

	if(gpsData.valid == 'V' || gpsData.valid == 'N')
 8000e36:	4b7e      	ldr	r3, [pc, #504]	; (8001030 <getGPSData+0x268>)
 8000e38:	7a9b      	ldrb	r3, [r3, #10]
 8000e3a:	2b56      	cmp	r3, #86	; 0x56
 8000e3c:	d004      	beq.n	8000e48 <getGPSData+0x80>
 8000e3e:	4b7c      	ldr	r3, [pc, #496]	; (8001030 <getGPSData+0x268>)
 8000e40:	7a9b      	ldrb	r3, [r3, #10]
 8000e42:	2b4e      	cmp	r3, #78	; 0x4e
 8000e44:	f040 81c6 	bne.w	80011d4 <getGPSData+0x40c>
	{
		/* Get latitude */
		indexTempArray = 0;
 8000e48:	4b7a      	ldr	r3, [pc, #488]	; (8001034 <getGPSData+0x26c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
		tempArray[indexTempArray++] = '0';
 8000e4e:	4b79      	ldr	r3, [pc, #484]	; (8001034 <getGPSData+0x26c>)
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	b291      	uxth	r1, r2
 8000e56:	4a77      	ldr	r2, [pc, #476]	; (8001034 <getGPSData+0x26c>)
 8000e58:	8011      	strh	r1, [r2, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b76      	ldr	r3, [pc, #472]	; (8001038 <getGPSData+0x270>)
 8000e5e:	2130      	movs	r1, #48	; 0x30
 8000e60:	5499      	strb	r1, [r3, r2]
		tempArray[indexTempArray++] = '.';
 8000e62:	4b74      	ldr	r3, [pc, #464]	; (8001034 <getGPSData+0x26c>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	b291      	uxth	r1, r2
 8000e6a:	4a72      	ldr	r2, [pc, #456]	; (8001034 <getGPSData+0x26c>)
 8000e6c:	8011      	strh	r1, [r2, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b71      	ldr	r3, [pc, #452]	; (8001038 <getGPSData+0x270>)
 8000e72:	212e      	movs	r1, #46	; 0x2e
 8000e74:	5499      	strb	r1, [r3, r2]
		while(RMC[indexRMC] == ',') indexRMC++;
 8000e76:	e005      	b.n	8000e84 <getGPSData+0xbc>
 8000e78:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <getGPSData+0x260>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b69      	ldr	r3, [pc, #420]	; (8001028 <getGPSData+0x260>)
 8000e82:	801a      	strh	r2, [r3, #0]
 8000e84:	4b68      	ldr	r3, [pc, #416]	; (8001028 <getGPSData+0x260>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b68      	ldr	r3, [pc, #416]	; (800102c <getGPSData+0x264>)
 8000e8c:	5c9b      	ldrb	r3, [r3, r2]
 8000e8e:	2b2c      	cmp	r3, #44	; 0x2c
 8000e90:	d0f2      	beq.n	8000e78 <getGPSData+0xb0>
		while(RMC[indexRMC] != ',')
 8000e92:	e05c      	b.n	8000f4e <getGPSData+0x186>
		{
			if(count == 0)
 8000e94:	4b69      	ldr	r3, [pc, #420]	; (800103c <getGPSData+0x274>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d11d      	bne.n	8000ed8 <getGPSData+0x110>
			{
				if(RMC[indexRMC] == '0') count--;
 8000e9c:	4b62      	ldr	r3, [pc, #392]	; (8001028 <getGPSData+0x260>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b62      	ldr	r3, [pc, #392]	; (800102c <getGPSData+0x264>)
 8000ea4:	5c9b      	ldrb	r3, [r3, r2]
 8000ea6:	2b30      	cmp	r3, #48	; 0x30
 8000ea8:	d104      	bne.n	8000eb4 <getGPSData+0xec>
 8000eaa:	4b64      	ldr	r3, [pc, #400]	; (800103c <getGPSData+0x274>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	4a62      	ldr	r2, [pc, #392]	; (800103c <getGPSData+0x274>)
 8000eb2:	6013      	str	r3, [r2, #0]
				gpsData.latitude = (RMC[indexRMC] - '0') * 10;
 8000eb4:	4b5c      	ldr	r3, [pc, #368]	; (8001028 <getGPSData+0x260>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b5c      	ldr	r3, [pc, #368]	; (800102c <getGPSData+0x264>)
 8000ebc:	5c9b      	ldrb	r3, [r3, r2]
 8000ebe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fef0 	bl	8000cb0 <__aeabi_i2f>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a57      	ldr	r2, [pc, #348]	; (8001030 <getGPSData+0x268>)
 8000ed4:	6053      	str	r3, [r2, #4]
 8000ed6:	e02f      	b.n	8000f38 <getGPSData+0x170>
			}
			else if(count == 1)
 8000ed8:	4b58      	ldr	r3, [pc, #352]	; (800103c <getGPSData+0x274>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d114      	bne.n	8000f0a <getGPSData+0x142>
			{
				gpsData.latitude += (RMC[indexRMC] - '0');
 8000ee0:	4b53      	ldr	r3, [pc, #332]	; (8001030 <getGPSData+0x268>)
 8000ee2:	685c      	ldr	r4, [r3, #4]
 8000ee4:	4b50      	ldr	r3, [pc, #320]	; (8001028 <getGPSData+0x260>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b50      	ldr	r3, [pc, #320]	; (800102c <getGPSData+0x264>)
 8000eec:	5c9b      	ldrb	r3, [r3, r2]
 8000eee:	3b30      	subs	r3, #48	; 0x30
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fedd 	bl	8000cb0 <__aeabi_i2f>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fe24 	bl	8000b48 <__addsf3>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <getGPSData+0x268>)
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	e016      	b.n	8000f38 <getGPSData+0x170>
			}
			else
			{
				if(RMC[indexRMC] != '.')
 8000f0a:	4b47      	ldr	r3, [pc, #284]	; (8001028 <getGPSData+0x260>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <getGPSData+0x264>)
 8000f12:	5c9b      	ldrb	r3, [r3, r2]
 8000f14:	2b2e      	cmp	r3, #46	; 0x2e
 8000f16:	d009      	beq.n	8000f2c <getGPSData+0x164>
					tempArray[indexTempArray] = RMC[indexRMC];
 8000f18:	4b43      	ldr	r3, [pc, #268]	; (8001028 <getGPSData+0x260>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <getGPSData+0x26c>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b41      	ldr	r3, [pc, #260]	; (800102c <getGPSData+0x264>)
 8000f26:	5c59      	ldrb	r1, [r3, r1]
 8000f28:	4b43      	ldr	r3, [pc, #268]	; (8001038 <getGPSData+0x270>)
 8000f2a:	5499      	strb	r1, [r3, r2]
				indexTempArray++;
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <getGPSData+0x26c>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <getGPSData+0x26c>)
 8000f36:	801a      	strh	r2, [r3, #0]

			}
			count++;
 8000f38:	4b40      	ldr	r3, [pc, #256]	; (800103c <getGPSData+0x274>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a3f      	ldr	r2, [pc, #252]	; (800103c <getGPSData+0x274>)
 8000f40:	6013      	str	r3, [r2, #0]
			indexRMC++;
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <getGPSData+0x260>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <getGPSData+0x260>)
 8000f4c:	801a      	strh	r2, [r3, #0]
		while(RMC[indexRMC] != ',')
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <getGPSData+0x260>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <getGPSData+0x264>)
 8000f56:	5c9b      	ldrb	r3, [r3, r2]
 8000f58:	2b2c      	cmp	r3, #44	; 0x2c
 8000f5a:	d19b      	bne.n	8000e94 <getGPSData+0xcc>
		}
		gpsData.latitude += (atof(tempArray) / 60);
 8000f5c:	4836      	ldr	r0, [pc, #216]	; (8001038 <getGPSData+0x270>)
 8000f5e:	f006 fca9 	bl	80078b4 <atof>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <getGPSData+0x278>)
 8000f68:	f7ff fbe0 	bl	800072c <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4614      	mov	r4, r2
 8000f72:	461d      	mov	r5, r3
 8000f74:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <getGPSData+0x268>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fa55 	bl	8000428 <__aeabi_f2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4620      	mov	r0, r4
 8000f84:	4629      	mov	r1, r5
 8000f86:	f7ff f8f1 	bl	800016c <__adddf3>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fd83 	bl	8000a9c <__aeabi_d2f>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a25      	ldr	r2, [pc, #148]	; (8001030 <getGPSData+0x268>)
 8000f9a:	6053      	str	r3, [r2, #4]
		for(globalIndex = 0; globalIndex < 20; globalIndex++)
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <getGPSData+0x27c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e009      	b.n	8000fb8 <getGPSData+0x1f0>
			tempArray[globalIndex] = '0';
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <getGPSData+0x27c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a23      	ldr	r2, [pc, #140]	; (8001038 <getGPSData+0x270>)
 8000faa:	2130      	movs	r1, #48	; 0x30
 8000fac:	54d1      	strb	r1, [r2, r3]
		for(globalIndex = 0; globalIndex < 20; globalIndex++)
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <getGPSData+0x27c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a23      	ldr	r2, [pc, #140]	; (8001044 <getGPSData+0x27c>)
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <getGPSData+0x27c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b13      	cmp	r3, #19
 8000fbe:	ddf1      	ble.n	8000fa4 <getGPSData+0x1dc>
		count = 0;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <getGPSData+0x274>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]


		/* Get latitude direction */
		while(RMC[indexRMC] == ',') indexRMC++;
 8000fc6:	e005      	b.n	8000fd4 <getGPSData+0x20c>
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <getGPSData+0x260>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <getGPSData+0x260>)
 8000fd2:	801a      	strh	r2, [r3, #0]
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <getGPSData+0x260>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <getGPSData+0x264>)
 8000fdc:	5c9b      	ldrb	r3, [r3, r2]
 8000fde:	2b2c      	cmp	r3, #44	; 0x2c
 8000fe0:	d0f2      	beq.n	8000fc8 <getGPSData+0x200>
		gpsData.dirLatitude = RMC[indexRMC++];
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <getGPSData+0x260>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	b291      	uxth	r1, r2
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <getGPSData+0x260>)
 8000fec:	8011      	strh	r1, [r2, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <getGPSData+0x264>)
 8000ff2:	5c9a      	ldrb	r2, [r3, r2]
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <getGPSData+0x268>)
 8000ff6:	725a      	strb	r2, [r3, #9]

		/* Get longitude */
		indexTempArray = 0;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <getGPSData+0x26c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	801a      	strh	r2, [r3, #0]
		tempArray[indexTempArray++] = '0';
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <getGPSData+0x26c>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	b291      	uxth	r1, r2
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <getGPSData+0x26c>)
 8001008:	8011      	strh	r1, [r2, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <getGPSData+0x270>)
 800100e:	2130      	movs	r1, #48	; 0x30
 8001010:	5499      	strb	r1, [r3, r2]
		tempArray[indexTempArray++] = '.';
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <getGPSData+0x26c>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	b291      	uxth	r1, r2
 800101a:	4a06      	ldr	r2, [pc, #24]	; (8001034 <getGPSData+0x26c>)
 800101c:	8011      	strh	r1, [r2, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <getGPSData+0x270>)
 8001022:	212e      	movs	r1, #46	; 0x2e
 8001024:	5499      	strb	r1, [r3, r2]
		while(RMC[indexRMC] == ',') indexRMC++;
 8001026:	e015      	b.n	8001054 <getGPSData+0x28c>
 8001028:	2000021c 	.word	0x2000021c
 800102c:	2000083c 	.word	0x2000083c
 8001030:	20000660 	.word	0x20000660
 8001034:	20000228 	.word	0x20000228
 8001038:	20000000 	.word	0x20000000
 800103c:	20000220 	.word	0x20000220
 8001040:	404e0000 	.word	0x404e0000
 8001044:	200006d0 	.word	0x200006d0
 8001048:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <getGPSData+0x418>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <getGPSData+0x418>)
 8001052:	801a      	strh	r2, [r3, #0]
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <getGPSData+0x418>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b62      	ldr	r3, [pc, #392]	; (80011e4 <getGPSData+0x41c>)
 800105c:	5c9b      	ldrb	r3, [r3, r2]
 800105e:	2b2c      	cmp	r3, #44	; 0x2c
 8001060:	d0f2      	beq.n	8001048 <getGPSData+0x280>
		while(RMC[indexRMC] != ',')
 8001062:	e05c      	b.n	800111e <getGPSData+0x356>
		{
			if(count == 0)
 8001064:	4b60      	ldr	r3, [pc, #384]	; (80011e8 <getGPSData+0x420>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11d      	bne.n	80010a8 <getGPSData+0x2e0>
			{
				if(RMC[indexRMC] == '0') count--;
 800106c:	4b5c      	ldr	r3, [pc, #368]	; (80011e0 <getGPSData+0x418>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b5c      	ldr	r3, [pc, #368]	; (80011e4 <getGPSData+0x41c>)
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	2b30      	cmp	r3, #48	; 0x30
 8001078:	d104      	bne.n	8001084 <getGPSData+0x2bc>
 800107a:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <getGPSData+0x420>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3b01      	subs	r3, #1
 8001080:	4a59      	ldr	r2, [pc, #356]	; (80011e8 <getGPSData+0x420>)
 8001082:	6013      	str	r3, [r2, #0]
				gpsData.longitude = (RMC[indexRMC] - '0') * 10;
 8001084:	4b56      	ldr	r3, [pc, #344]	; (80011e0 <getGPSData+0x418>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b56      	ldr	r3, [pc, #344]	; (80011e4 <getGPSData+0x41c>)
 800108c:	5c9b      	ldrb	r3, [r3, r2]
 800108e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe08 	bl	8000cb0 <__aeabi_i2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a52      	ldr	r2, [pc, #328]	; (80011ec <getGPSData+0x424>)
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e02f      	b.n	8001108 <getGPSData+0x340>
			}
			else if(count == 1)
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <getGPSData+0x420>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d114      	bne.n	80010da <getGPSData+0x312>
			{
				gpsData.longitude += (RMC[indexRMC] - '0');
 80010b0:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <getGPSData+0x424>)
 80010b2:	681c      	ldr	r4, [r3, #0]
 80010b4:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <getGPSData+0x418>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b4a      	ldr	r3, [pc, #296]	; (80011e4 <getGPSData+0x41c>)
 80010bc:	5c9b      	ldrb	r3, [r3, r2]
 80010be:	3b30      	subs	r3, #48	; 0x30
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fdf5 	bl	8000cb0 <__aeabi_i2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff fd3c 	bl	8000b48 <__addsf3>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b45      	ldr	r3, [pc, #276]	; (80011ec <getGPSData+0x424>)
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e016      	b.n	8001108 <getGPSData+0x340>
			}
			else
			{
				if(RMC[indexRMC] != '.')
 80010da:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <getGPSData+0x418>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b40      	ldr	r3, [pc, #256]	; (80011e4 <getGPSData+0x41c>)
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	2b2e      	cmp	r3, #46	; 0x2e
 80010e6:	d009      	beq.n	80010fc <getGPSData+0x334>
					tempArray[indexTempArray] = RMC[indexRMC];
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <getGPSData+0x418>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <getGPSData+0x428>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <getGPSData+0x41c>)
 80010f6:	5c59      	ldrb	r1, [r3, r1]
 80010f8:	4b3e      	ldr	r3, [pc, #248]	; (80011f4 <getGPSData+0x42c>)
 80010fa:	5499      	strb	r1, [r3, r2]
				indexTempArray++;
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <getGPSData+0x428>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <getGPSData+0x428>)
 8001106:	801a      	strh	r2, [r3, #0]

			}
			count++;
 8001108:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <getGPSData+0x420>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a36      	ldr	r2, [pc, #216]	; (80011e8 <getGPSData+0x420>)
 8001110:	6013      	str	r3, [r2, #0]
			indexRMC++;
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <getGPSData+0x418>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <getGPSData+0x418>)
 800111c:	801a      	strh	r2, [r3, #0]
		while(RMC[indexRMC] != ',')
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <getGPSData+0x418>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <getGPSData+0x41c>)
 8001126:	5c9b      	ldrb	r3, [r3, r2]
 8001128:	2b2c      	cmp	r3, #44	; 0x2c
 800112a:	d19b      	bne.n	8001064 <getGPSData+0x29c>
		}
		gpsData.longitude += (atof(tempArray) / 60);
 800112c:	4831      	ldr	r0, [pc, #196]	; (80011f4 <getGPSData+0x42c>)
 800112e:	f006 fbc1 	bl	80078b4 <atof>
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <getGPSData+0x430>)
 8001138:	f7ff faf8 	bl	800072c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <getGPSData+0x424>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f96d 	bl	8000428 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4620      	mov	r0, r4
 8001154:	4629      	mov	r1, r5
 8001156:	f7ff f809 	bl	800016c <__adddf3>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fc9b 	bl	8000a9c <__aeabi_d2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <getGPSData+0x424>)
 800116a:	6013      	str	r3, [r2, #0]
		for(globalIndex = 0; globalIndex < 20; globalIndex++)
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <getGPSData+0x434>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e009      	b.n	8001188 <getGPSData+0x3c0>
				tempArray[globalIndex] = '0';
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <getGPSData+0x434>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <getGPSData+0x42c>)
 800117a:	2130      	movs	r1, #48	; 0x30
 800117c:	54d1      	strb	r1, [r2, r3]
		for(globalIndex = 0; globalIndex < 20; globalIndex++)
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <getGPSData+0x434>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <getGPSData+0x434>)
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <getGPSData+0x434>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b13      	cmp	r3, #19
 800118e:	ddf1      	ble.n	8001174 <getGPSData+0x3ac>
		count = 0;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <getGPSData+0x420>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

		/* Get longitude direction */
		while(RMC[indexRMC] == ',') indexRMC++;
 8001196:	e005      	b.n	80011a4 <getGPSData+0x3dc>
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <getGPSData+0x418>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <getGPSData+0x418>)
 80011a2:	801a      	strh	r2, [r3, #0]
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <getGPSData+0x418>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <getGPSData+0x41c>)
 80011ac:	5c9b      	ldrb	r3, [r3, r2]
 80011ae:	2b2c      	cmp	r3, #44	; 0x2c
 80011b0:	d0f2      	beq.n	8001198 <getGPSData+0x3d0>
		gpsData.dirLongitude = RMC[indexRMC++];
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <getGPSData+0x418>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	b291      	uxth	r1, r2
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <getGPSData+0x418>)
 80011bc:	8011      	strh	r1, [r2, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <getGPSData+0x41c>)
 80011c2:	5c9a      	ldrb	r2, [r3, r2]
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <getGPSData+0x424>)
 80011c6:	721a      	strb	r2, [r3, #8]

		indexRMC = 0;
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <getGPSData+0x418>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	801a      	strh	r2, [r3, #0]
		indexTempArray = 0;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <getGPSData+0x428>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	801a      	strh	r2, [r3, #0]
	}
	indexTempArray = 0;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <getGPSData+0x428>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]

}
 80011da:	bf00      	nop
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000021c 	.word	0x2000021c
 80011e4:	2000083c 	.word	0x2000083c
 80011e8:	20000220 	.word	0x20000220
 80011ec:	20000660 	.word	0x20000660
 80011f0:	20000228 	.word	0x20000228
 80011f4:	20000000 	.word	0x20000000
 80011f8:	404e0000 	.word	0x404e0000
 80011fc:	200006d0 	.word	0x200006d0

08001200 <resetBuffersIndexes>:
extern gps_t gpsData;
extern uint16_t FWDistance;
extern uint16_t BWDistance;

void resetBuffersIndexes(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	indexBufferTX = 0;
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <resetBuffersIndexes+0x18>)
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
	indexBufferRX = 0;
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <resetBuffersIndexes+0x1c>)
 800120c:	2200      	movs	r2, #0
 800120e:	801a      	strh	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000226 	.word	0x20000226
 800121c:	20000224 	.word	0x20000224

08001220 <getCarData>:

}

// ToDo: Linking these variables with sensors
void getCarData(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	car.longitude = gpsData.longitude;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <getCarData+0x50>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <getCarData+0x54>)
 800122a:	6013      	str	r3, [r2, #0]
	car.latitude  = gpsData.latitude;
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <getCarData+0x50>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a10      	ldr	r2, [pc, #64]	; (8001274 <getCarData+0x54>)
 8001232:	6053      	str	r3, [r2, #4]
	//car.angle     = (float) hcompass.Angle_x;
	car.speed     = (float) hirencoder.RPM;
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <getCarData+0x58>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd35 	bl	8000ca8 <__aeabi_ui2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <getCarData+0x54>)
 8001242:	6093      	str	r3, [r2, #8]
	car.Ax        = (float) himu.Ax;
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <getCarData+0x5c>)
 8001246:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fc25 	bl	8000a9c <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <getCarData+0x54>)
 8001256:	60d3      	str	r3, [r2, #12]
	car.Ay        = (float) himu.Ay;
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <getCarData+0x5c>)
 800125a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fc1b 	bl	8000a9c <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	4a02      	ldr	r2, [pc, #8]	; (8001274 <getCarData+0x54>)
 800126a:	6113      	str	r3, [r2, #16]
	//car.Vx        =         car.speed * (sin((car.angle *PI)/180));
	//car.Vy        =         car.speed * (cos((car.angle *PI)/180));
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000660 	.word	0x20000660
 8001274:	2000066c 	.word	0x2000066c
 8001278:	20000834 	.word	0x20000834
 800127c:	200007f0 	.word	0x200007f0

08001280 <sendWarning>:
	if(val < 0) val *= -1;
	return val;
}

void sendWarning(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	bufferTX[indexBufferTX++] = 'M';
 8001284:	4b33      	ldr	r3, [pc, #204]	; (8001354 <sendWarning+0xd4>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	b291      	uxth	r1, r2
 800128c:	4a31      	ldr	r2, [pc, #196]	; (8001354 <sendWarning+0xd4>)
 800128e:	8011      	strh	r1, [r2, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <sendWarning+0xd8>)
 8001294:	214d      	movs	r1, #77	; 0x4d
 8001296:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = ':';
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <sendWarning+0xd4>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	b291      	uxth	r1, r2
 80012a0:	4a2c      	ldr	r2, [pc, #176]	; (8001354 <sendWarning+0xd4>)
 80012a2:	8011      	strh	r1, [r2, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <sendWarning+0xd8>)
 80012a8:	213a      	movs	r1, #58	; 0x3a
 80012aa:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'W';
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <sendWarning+0xd4>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	b291      	uxth	r1, r2
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <sendWarning+0xd4>)
 80012b6:	8011      	strh	r1, [r2, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <sendWarning+0xd8>)
 80012bc:	2157      	movs	r1, #87	; 0x57
 80012be:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'a';
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <sendWarning+0xd4>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	b291      	uxth	r1, r2
 80012c8:	4a22      	ldr	r2, [pc, #136]	; (8001354 <sendWarning+0xd4>)
 80012ca:	8011      	strh	r1, [r2, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <sendWarning+0xd8>)
 80012d0:	2161      	movs	r1, #97	; 0x61
 80012d2:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'r';
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <sendWarning+0xd4>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	b291      	uxth	r1, r2
 80012dc:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <sendWarning+0xd4>)
 80012de:	8011      	strh	r1, [r2, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <sendWarning+0xd8>)
 80012e4:	2172      	movs	r1, #114	; 0x72
 80012e6:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'n';
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <sendWarning+0xd4>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	b291      	uxth	r1, r2
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <sendWarning+0xd4>)
 80012f2:	8011      	strh	r1, [r2, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <sendWarning+0xd8>)
 80012f8:	216e      	movs	r1, #110	; 0x6e
 80012fa:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'i';
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <sendWarning+0xd4>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	b291      	uxth	r1, r2
 8001304:	4a13      	ldr	r2, [pc, #76]	; (8001354 <sendWarning+0xd4>)
 8001306:	8011      	strh	r1, [r2, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <sendWarning+0xd8>)
 800130c:	2169      	movs	r1, #105	; 0x69
 800130e:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'n';
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <sendWarning+0xd4>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	b291      	uxth	r1, r2
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <sendWarning+0xd4>)
 800131a:	8011      	strh	r1, [r2, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <sendWarning+0xd8>)
 8001320:	216e      	movs	r1, #110	; 0x6e
 8001322:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'g';
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <sendWarning+0xd4>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	b291      	uxth	r1, r2
 800132c:	4a09      	ldr	r2, [pc, #36]	; (8001354 <sendWarning+0xd4>)
 800132e:	8011      	strh	r1, [r2, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <sendWarning+0xd8>)
 8001334:	2167      	movs	r1, #103	; 0x67
 8001336:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = '?';
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <sendWarning+0xd4>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	b291      	uxth	r1, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <sendWarning+0xd4>)
 8001342:	8011      	strh	r1, [r2, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <sendWarning+0xd8>)
 8001348:	213f      	movs	r1, #63	; 0x3f
 800134a:	5499      	strb	r1, [r3, r2]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000226 	.word	0x20000226
 8001358:	20000738 	.word	0x20000738

0800135c <mergeData>:
	}
#endif
}

void mergeData(float value)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

	gcvt(value, TEMP_ARR_SIZE, tempArray);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff f85f 	bl	8000428 <__aeabi_f2d>
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <mergeData+0xa8>)
 800136c:	2214      	movs	r2, #20
 800136e:	f006 faa5 	bl	80078bc <gcvt>

	for(indexTempArray = 0; indexTempArray < MAX_FLOAT_DIGITS; indexTempArray++)
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <mergeData+0xac>)
 8001374:	2200      	movs	r2, #0
 8001376:	801a      	strh	r2, [r3, #0]
 8001378:	e01c      	b.n	80013b4 <mergeData+0x58>
	{
		if(tempArray[indexTempArray] == '\0') break;
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <mergeData+0xac>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <mergeData+0xa8>)
 8001382:	5c9b      	ldrb	r3, [r3, r2]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01a      	beq.n	80013be <mergeData+0x62>
		bufferTX[indexBufferTX] = tempArray[indexTempArray];
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <mergeData+0xac>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <mergeData+0xb0>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <mergeData+0xa8>)
 8001396:	5c59      	ldrb	r1, [r3, r1]
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <mergeData+0xb4>)
 800139a:	5499      	strb	r1, [r3, r2]
		indexBufferTX++;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <mergeData+0xb0>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <mergeData+0xb0>)
 80013a6:	801a      	strh	r2, [r3, #0]
	for(indexTempArray = 0; indexTempArray < MAX_FLOAT_DIGITS; indexTempArray++)
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <mergeData+0xac>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <mergeData+0xac>)
 80013b2:	801a      	strh	r2, [r3, #0]
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <mergeData+0xac>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d9de      	bls.n	800137a <mergeData+0x1e>
 80013bc:	e000      	b.n	80013c0 <mergeData+0x64>
		if(tempArray[indexTempArray] == '\0') break;
 80013be:	bf00      	nop
	}
	bufferTX[indexBufferTX++] = ',';
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <mergeData+0xb0>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	b291      	uxth	r1, r2
 80013c8:	4a10      	ldr	r2, [pc, #64]	; (800140c <mergeData+0xb0>)
 80013ca:	8011      	strh	r1, [r2, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <mergeData+0xb4>)
 80013d0:	212c      	movs	r1, #44	; 0x2c
 80013d2:	5499      	strb	r1, [r3, r2]


	for(globalIndex = 0; globalIndex < TEMP_ARR_SIZE; globalIndex++)
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <mergeData+0xb8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e009      	b.n	80013f0 <mergeData+0x94>
		tempArray[globalIndex] = '0';
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <mergeData+0xb8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a08      	ldr	r2, [pc, #32]	; (8001404 <mergeData+0xa8>)
 80013e2:	2130      	movs	r1, #48	; 0x30
 80013e4:	54d1      	strb	r1, [r2, r3]
	for(globalIndex = 0; globalIndex < TEMP_ARR_SIZE; globalIndex++)
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <mergeData+0xb8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a09      	ldr	r2, [pc, #36]	; (8001414 <mergeData+0xb8>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <mergeData+0xb8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b13      	cmp	r3, #19
 80013f6:	ddf1      	ble.n	80013dc <mergeData+0x80>
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000
 8001408:	20000228 	.word	0x20000228
 800140c:	20000226 	.word	0x20000226
 8001410:	20000738 	.word	0x20000738
 8001414:	200006d0 	.word	0x200006d0

08001418 <generateTransmitBuffer>:

void generateTransmitBuffer(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	bufferTX[indexBufferTX++] = 'D';
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <generateTransmitBuffer+0xc0>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	b291      	uxth	r1, r2
 8001424:	4a2c      	ldr	r2, [pc, #176]	; (80014d8 <generateTransmitBuffer+0xc0>)
 8001426:	8011      	strh	r1, [r2, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <generateTransmitBuffer+0xc4>)
 800142c:	2144      	movs	r1, #68	; 0x44
 800142e:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = ':';
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <generateTransmitBuffer+0xc0>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	b291      	uxth	r1, r2
 8001438:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <generateTransmitBuffer+0xc0>)
 800143a:	8011      	strh	r1, [r2, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <generateTransmitBuffer+0xc4>)
 8001440:	213a      	movs	r1, #58	; 0x3a
 8001442:	5499      	strb	r1, [r3, r2]

	mergeData(car.longitude);
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <generateTransmitBuffer+0xc8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff87 	bl	800135c <mergeData>
	mergeData(car.latitude);
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <generateTransmitBuffer+0xc8>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff82 	bl	800135c <mergeData>
	mergeData(car.speed);
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <generateTransmitBuffer+0xc8>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff7d 	bl	800135c <mergeData>
	mergeData(car.Ax);
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <generateTransmitBuffer+0xc8>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff78 	bl	800135c <mergeData>
	mergeData(car.Ay);
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <generateTransmitBuffer+0xc8>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff73 	bl	800135c <mergeData>
	//mergeData(car.angle);
	//mergeData(car.Vx);
	//mergeData(car.Vy);
	mergeData(FWDistance);
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <generateTransmitBuffer+0xcc>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fc14 	bl	8000ca8 <__aeabi_ui2f>
 8001480:	4603      	mov	r3, r0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff6a 	bl	800135c <mergeData>
	mergeData(BWDistance);
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <generateTransmitBuffer+0xd0>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fc0b 	bl	8000ca8 <__aeabi_ui2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff61 	bl	800135c <mergeData>
	bufferTX[indexBufferTX++] = '?';
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <generateTransmitBuffer+0xc0>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	b291      	uxth	r1, r2
 80014a2:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <generateTransmitBuffer+0xc0>)
 80014a4:	8011      	strh	r1, [r2, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <generateTransmitBuffer+0xc4>)
 80014aa:	213f      	movs	r1, #63	; 0x3f
 80014ac:	5499      	strb	r1, [r3, r2]

	for(; indexBufferTX < TX_SIZE; indexBufferTX++)
 80014ae:	e00b      	b.n	80014c8 <generateTransmitBuffer+0xb0>
	{
		bufferTX[indexBufferTX] = '!';
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <generateTransmitBuffer+0xc0>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <generateTransmitBuffer+0xc4>)
 80014b8:	2121      	movs	r1, #33	; 0x21
 80014ba:	5499      	strb	r1, [r3, r2]
	for(; indexBufferTX < TX_SIZE; indexBufferTX++)
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <generateTransmitBuffer+0xc0>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <generateTransmitBuffer+0xc0>)
 80014c6:	801a      	strh	r2, [r3, #0]
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <generateTransmitBuffer+0xc0>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	2b63      	cmp	r3, #99	; 0x63
 80014ce:	d9ef      	bls.n	80014b0 <generateTransmitBuffer+0x98>
	}
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000226 	.word	0x20000226
 80014dc:	20000738 	.word	0x20000738
 80014e0:	2000066c 	.word	0x2000066c
 80014e4:	20000234 	.word	0x20000234
 80014e8:	20000240 	.word	0x20000240

080014ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]


}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]


}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <MX_GPIO_Init+0xec>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <MX_GPIO_Init+0xec>)
 800152a:	f043 0320 	orr.w	r3, r3, #32
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <MX_GPIO_Init+0xec>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_GPIO_Init+0xec>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <MX_GPIO_Init+0xec>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <MX_GPIO_Init+0xec>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <MX_GPIO_Init+0xec>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a28      	ldr	r2, [pc, #160]	; (80015fc <MX_GPIO_Init+0xec>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_GPIO_Init+0xec>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001572:	4823      	ldr	r0, [pc, #140]	; (8001600 <MX_GPIO_Init+0xf0>)
 8001574:	f001 ff39 	bl	80033ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157e:	4821      	ldr	r0, [pc, #132]	; (8001604 <MX_GPIO_Init+0xf4>)
 8001580:	f001 ff33 	bl	80033ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001584:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4619      	mov	r1, r3
 8001598:	4819      	ldr	r0, [pc, #100]	; (8001600 <MX_GPIO_Init+0xf0>)
 800159a:	f001 fd8b 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800159e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <MX_GPIO_Init+0xf0>)
 80015b8:	f001 fd7c 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_GPIO_Init+0xf4>)
 80015d2:	f001 fd6f 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_GPIO_Init+0xf4>)
 80015f0:	f001 fd60 	bl	80030b4 <HAL_GPIO_Init>

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010c00 	.word	0x40010c00
 8001604:	40010800 	.word	0x40010800

08001608 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x50>)
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <MX_I2C1_Init+0x54>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_I2C1_Init+0x50>)
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <MX_I2C1_Init+0x58>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_I2C1_Init+0x50>)
 8001626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_I2C1_Init+0x50>)
 8001646:	f001 fee9 	bl	800341c <HAL_I2C_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001650:	f000 fc1d 	bl	8001e8e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000079c 	.word	0x2000079c
 800165c:	40005400 	.word	0x40005400
 8001660:	000186a0 	.word	0x000186a0

08001664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a25      	ldr	r2, [pc, #148]	; (8001714 <HAL_I2C_MspInit+0xb0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d142      	bne.n	800170a <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_I2C_MspInit+0xb4>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a23      	ldr	r2, [pc, #140]	; (8001718 <HAL_I2C_MspInit+0xb4>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_I2C_MspInit+0xb4>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800169c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a2:	2312      	movs	r3, #18
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	481a      	ldr	r0, [pc, #104]	; (800171c <HAL_I2C_MspInit+0xb8>)
 80016b2:	f001 fcff 	bl	80030b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_I2C_MspInit+0xbc>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <HAL_I2C_MspInit+0xbc>)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_I2C_MspInit+0xb4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_I2C_MspInit+0xb4>)
 80016d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_I2C_MspInit+0xb4>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	201f      	movs	r0, #31
 80016f0:	f001 fbed 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016f4:	201f      	movs	r0, #31
 80016f6:	f001 fc06 	bl	8002f06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2020      	movs	r0, #32
 8001700:	f001 fbe5 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001704:	2020      	movs	r0, #32
 8001706:	f001 fbfe 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005400 	.word	0x40005400
 8001718:	40021000 	.word	0x40021000
 800171c:	40010c00 	.word	0x40010c00
 8001720:	40010000 	.word	0x40010000

08001724 <HAL_IMU_Init>:

/*Functions*/

/*This function is to initiate the IMU*/
void HAL_IMU_Init(I2C_HandleTypeDef *I2Cx)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af04      	add	r7, sp, #16
 800172a:	6078      	str	r0, [r7, #4]
	uint8_t data_write;


	/*Testing the IMU*/
	if (HAL_IMU_Test(I2Cx) != HAL_OK)
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8fa 	bl	8001926 <HAL_IMU_Test>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_IMU_Init+0x18>
	{
		Error_Handler();
 8001738:	f000 fba9 	bl	8001e8e <Error_Handler>
	}

	/*Powering on the IMU*/
	data_write = IMU_POWER_ON|0x01;
 800173c:	2309      	movs	r3, #9
 800173e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 8001740:	2364      	movs	r3, #100	; 0x64
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2301      	movs	r3, #1
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f107 030f 	add.w	r3, r7, #15
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	226b      	movs	r2, #107	; 0x6b
 8001752:	21d2      	movs	r1, #210	; 0xd2
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f001 ffa5 	bl	80036a4 <HAL_I2C_Mem_Write>

	/*Defining the digital LPF order (3-bit number)*/
	data_write = (IMU_DLPF_ORDER & 0b00000111);
 800175a:	2305      	movs	r3, #5
 800175c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, CONFIG, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 800175e:	2364      	movs	r3, #100	; 0x64
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 030f 	add.w	r3, r7, #15
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	221a      	movs	r2, #26
 8001770:	21d2      	movs	r1, #210	; 0xd2
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f001 ff96 	bl	80036a4 <HAL_I2C_Mem_Write>

	/*Defining the scale of the gyroscope*/
	data_write = (IMU_GYRO_SCALE << 3);
 8001778:	2310      	movs	r3, #16
 800177a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 800177c:	2364      	movs	r3, #100	; 0x64
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	f107 030f 	add.w	r3, r7, #15
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	221b      	movs	r2, #27
 800178e:	21d2      	movs	r1, #210	; 0xd2
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f001 ff87 	bl	80036a4 <HAL_I2C_Mem_Write>

	/*Defining the scale of the accelerometer*/
	data_write = (IMU_ACCEL_SCALE << 3);
 8001796:	2308      	movs	r3, #8
 8001798:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	2301      	movs	r3, #1
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	f107 030f 	add.w	r3, r7, #15
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2301      	movs	r3, #1
 80017aa:	221c      	movs	r2, #28
 80017ac:	21d2      	movs	r1, #210	; 0xd2
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 ff78 	bl	80036a4 <HAL_I2C_Mem_Write>
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <HAL_IMU_Read_Accel>:

/*This function is to read the acceleration*/
void HAL_IMU_Read_Accel(I2C_HandleTypeDef *I2Cx, IMU_TypeDef *DataStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af04      	add	r7, sp, #16
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];
	uint8_t scale = 1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]

    /* Read 6 bytes of data starting from ACCEL_XOUT_H register */
    if(HAL_I2C_Mem_Read(I2Cx, IMU_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, Rec_Data, 6, i2c_timeout) != HAL_OK)
 80017ce:	2364      	movs	r3, #100	; 0x64
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2306      	movs	r3, #6
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2301      	movs	r3, #1
 80017de:	223b      	movs	r2, #59	; 0x3b
 80017e0:	21d2      	movs	r1, #210	; 0xd2
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f002 f858 	bl	8003898 <HAL_I2C_Mem_Read>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_IMU_Read_Accel+0x36>
	{
    	/*Reinitiate I2C*/
    	HAL_I2C_Init(I2Cx);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f001 fe14 	bl	800341c <HAL_I2C_Init>
		DataStruct->Ax = ((DataStruct->Accel_X_RAW * scale * 2) / 32768.0)*9.8;
		DataStruct->Ay = ((DataStruct->Accel_Y_RAW * scale * 2) / 32768.0)*9.8;
		DataStruct->Az = ((DataStruct->Accel_Z_RAW * scale * 2) / 32768.0)*9.8;
	}

}
 80017f4:	e080      	b.n	80018f8 <HAL_IMU_Read_Accel+0x138>
		DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80017f6:	7a3b      	ldrb	r3, [r7, #8]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	7a7b      	ldrb	r3, [r7, #9]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b21a      	sxth	r2, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	801a      	strh	r2, [r3, #0]
		DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001808:	7abb      	ldrb	r3, [r7, #10]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	7afb      	ldrb	r3, [r7, #11]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21a      	sxth	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	805a      	strh	r2, [r3, #2]
		DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800181a:	7b3b      	ldrb	r3, [r7, #12]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	7b7b      	ldrb	r3, [r7, #13]
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b21a      	sxth	r2, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < IMU_ACCEL_SCALE; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	73bb      	strb	r3, [r7, #14]
 8001830:	e005      	b.n	800183e <HAL_IMU_Read_Accel+0x7e>
			scale *= 2;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i = 0; i < IMU_ACCEL_SCALE; i++)
 8001838:	7bbb      	ldrb	r3, [r7, #14]
 800183a:	3301      	adds	r3, #1
 800183c:	73bb      	strb	r3, [r7, #14]
 800183e:	7bbb      	ldrb	r3, [r7, #14]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f6      	beq.n	8001832 <HAL_IMU_Read_Accel+0x72>
		DataStruct->Ax = ((DataStruct->Accel_X_RAW * scale * 2) / 32768.0)*9.8;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184a:	461a      	mov	r2, r3
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	fb03 f302 	mul.w	r3, r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fdd5 	bl	8000404 <__aeabi_i2d>
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_IMU_Read_Accel+0x148>)
 8001860:	f7fe ff64 	bl	800072c <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	a324      	add	r3, pc, #144	; (adr r3, 8001900 <HAL_IMU_Read_Accel+0x140>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fe31 	bl	80004d8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	6839      	ldr	r1, [r7, #0]
 800187c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		DataStruct->Ay = ((DataStruct->Accel_Y_RAW * scale * 2) / 32768.0)*9.8;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001886:	461a      	mov	r2, r3
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	fb03 f302 	mul.w	r3, r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fdb7 	bl	8000404 <__aeabi_i2d>
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_IMU_Read_Accel+0x148>)
 800189c:	f7fe ff46 	bl	800072c <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	a315      	add	r3, pc, #84	; (adr r3, 8001900 <HAL_IMU_Read_Accel+0x140>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fe13 	bl	80004d8 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		DataStruct->Az = ((DataStruct->Accel_Z_RAW * scale * 2) / 32768.0)*9.8;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	fb03 f302 	mul.w	r3, r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fd99 	bl	8000404 <__aeabi_i2d>
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_IMU_Read_Accel+0x148>)
 80018d8:	f7fe ff28 	bl	800072c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	a306      	add	r3, pc, #24	; (adr r3, 8001900 <HAL_IMU_Read_Accel+0x140>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fdf5 	bl	80004d8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	9999999a 	.word	0x9999999a
 8001904:	40239999 	.word	0x40239999
 8001908:	40e00000 	.word	0x40e00000

0800190c <HAL_IMU_Read>:
	
}

/*This function is to read both acceleration and angular velocity*/
void HAL_IMU_Read(I2C_HandleTypeDef *I2Cx, IMU_TypeDef *DataStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    HAL_IMU_Read_Accel(I2Cx, DataStruct);
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff51 	bl	80017c0 <HAL_IMU_Read_Accel>
	//HAL_IMU_Read_Gyro(I2Cx, DataStruct);
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_IMU_Test>:
	return HAL_OK;
}

/*This function is to test the IMU*/
HAL_StatusTypeDef HAL_IMU_Test(I2C_HandleTypeDef *I2Cx)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b088      	sub	sp, #32
 800192a:	af04      	add	r7, sp, #16
 800192c:	6078      	str	r0, [r7, #4]
	uint8_t data_read;
	uint8_t	count = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
	
	while (count < i2c_timeout)
 8001932:	e018      	b.n	8001966 <HAL_IMU_Test+0x40>
	{
		/*Read the register WHO_AM_I*/
		HAL_I2C_Mem_Read(I2Cx, IMU_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &data_read, 1, i2c_timeout);
 8001934:	2364      	movs	r3, #100	; 0x64
 8001936:	9302      	str	r3, [sp, #8]
 8001938:	2301      	movs	r3, #1
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	f107 030e 	add.w	r3, r7, #14
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	2275      	movs	r2, #117	; 0x75
 8001946:	21d2      	movs	r1, #210	; 0xd2
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 ffa5 	bl	8003898 <HAL_I2C_Mem_Read>
		/*The register WHO_AM_I is read only register with the value 0x68*/
		if (data_read != 0x68)
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	2b68      	cmp	r3, #104	; 0x68
 8001952:	d006      	beq.n	8001962 <HAL_IMU_Test+0x3c>
		{
			/*Resetting the IMU*/
			HAL_IMU_Reset(I2Cx);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f810 	bl	800197a <HAL_IMU_Reset>
			/*Adding count to act as timeout*/
			count++;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	3301      	adds	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_IMU_Test+0x40>
		}
		else
		{
			return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e005      	b.n	8001972 <HAL_IMU_Test+0x4c>
	while (count < i2c_timeout)
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	b29b      	uxth	r3, r3
 800196a:	2264      	movs	r2, #100	; 0x64
 800196c:	4293      	cmp	r3, r2
 800196e:	d3e1      	bcc.n	8001934 <HAL_IMU_Test+0xe>
		}
	}
	
	return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_IMU_Reset>:

/*This function is to reset the IMU*/
void HAL_IMU_Reset(I2C_HandleTypeDef *I2Cx)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b088      	sub	sp, #32
 800197e:	af04      	add	r7, sp, #16
 8001980:	6078      	str	r0, [r7, #4]
	uint8_t	data_write;
	
	/*Resting the registers*/
	data_write = IMU_DEVICE_RESET;
 8001982:	2388      	movs	r3, #136	; 0x88
 8001984:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f107 030f 	add.w	r3, r7, #15
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	226b      	movs	r2, #107	; 0x6b
 8001998:	21d2      	movs	r1, #210	; 0xd2
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f001 fe82 	bl	80036a4 <HAL_I2C_Mem_Write>
	
	/*Reseting the signal paths*/
	data_write = IMU_SIGNAL_PATH_RESET_ALL;
 80019a0:	2307      	movs	r3, #7
 80019a2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, SIGNAL_PATH_RESET, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	2301      	movs	r3, #1
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	f107 030f 	add.w	r3, r7, #15
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2301      	movs	r3, #1
 80019b4:	2268      	movs	r2, #104	; 0x68
 80019b6:	21d2      	movs	r1, #210	; 0xd2
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f001 fe73 	bl	80036a4 <HAL_I2C_Mem_Write>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_IREncoder_Start>:

/*Functions*/

/*This function starts the IR encoder*/
void HAL_IREncoder_Start(TIM_HandleTypeDef *Counter, TIM_HandleTypeDef *Timer)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	uint32_t Dividend = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
	uint32_t Quotient = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
	uint32_t Remainder = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
	uint16_t Divisor = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	82fb      	strh	r3, [r7, #22]
	uint8_t Accurecy = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]

	/*Saving the timers*/
	hcounter = Counter;
 80019e6:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <HAL_IREncoder_Start+0x88>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]
	htimer = Timer;
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_IREncoder_Start+0x8c>)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6013      	str	r3, [r2, #0]

	/*Setting the timer to over flow when IRENCODER_FIXED_TIME_VALUE is elapsed*/
	Dividend = (IRENCODER_TIMER_CLK * IRENCODER_FIXED_TIME_VALUE) - 1;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_IREncoder_Start+0x90>)
 80019f4:	61fb      	str	r3, [r7, #28]
	 do
	 {
		 if (Dividend == 0)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d015      	beq.n	8001a28 <HAL_IREncoder_Start+0x60>
		 {
			 break;
		 }
		 ++Divisor;
 80019fc:	8afb      	ldrh	r3, [r7, #22]
 80019fe:	3301      	adds	r3, #1
 8001a00:	82fb      	strh	r3, [r7, #22]
		 Quotient = Dividend / Divisor;
 8001a02:	8afb      	ldrh	r3, [r7, #22]
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	61bb      	str	r3, [r7, #24]
		 /*Checking for overflow*/
		 if (Divisor == 0)
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_IREncoder_Start+0x50>
		 {
			 /*Decreasing the accuracy*/
			 Dividend += 1;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
		 }
	 }while(!((Quotient <= 65535)&&(Remainder == 0)));
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1e:	d2ea      	bcs.n	80019f6 <HAL_IREncoder_Start+0x2e>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1e7      	bne.n	80019f6 <HAL_IREncoder_Start+0x2e>
 8001a26:	e000      	b.n	8001a2a <HAL_IREncoder_Start+0x62>
			 break;
 8001a28:	bf00      	nop

	 Timer->Instance->PSC = Divisor;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	8afa      	ldrh	r2, [r7, #22]
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
	 Timer->Instance->ARR = Quotient;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Starting the timers*/
	HAL_TIM_Base_Start(Counter);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f004 fe2c 	bl	8006698 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(Timer);
 8001a40:	6838      	ldr	r0, [r7, #0]
 8001a42:	f004 fe99 	bl	8006778 <HAL_TIM_Base_Start_IT>
}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000838 	.word	0x20000838
 8001a54:	20000830 	.word	0x20000830
 8001a58:	007a11ff 	.word	0x007a11ff

08001a5c <HAL_TIM_PeriodElapsedCallback>:
	HAL_TIM_Base_Stop_IT(Timer);
}

/*This function is the callback function when the interrupt occurs*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	/*Saving the counts*/
	hirencoder.Pulses = hcounter->Instance->CNT;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a70:	805a      	strh	r2, [r3, #2]
	/*Stop the timer and the counter*/
	HAL_TIM_Base_Stop(hcounter);
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 fe58 	bl	800672c <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop_IT(htimer);
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 fecb 	bl	800681c <HAL_TIM_Base_Stop_IT>
	/*Calculate the RPM*/
	hirencoder.RPM = (hirencoder.Pulses*1000*60)/(IRENCODER_ONE_CYCLE_PULSES*IRENCODER_FIXED_TIME_VALUE);
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a88:	885b      	ldrh	r3, [r3, #2]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a94:	801a      	strh	r2, [r3, #0]
	/*Reset the timer and the counter*/
	hcounter->Instance->CNT = 0;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
	htimer->Instance->CNT = 0;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
	/*Start the timer and the counter*/
	HAL_TIM_Base_Start(hcounter);
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fdf2 	bl	8006698 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimer);
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 fe5d 	bl	8006778 <HAL_TIM_Base_Start_IT>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000838 	.word	0x20000838
 8001acc:	20000834 	.word	0x20000834
 8001ad0:	20000830 	.word	0x20000830
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <ultraForward>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void ultraForward()
{
 8001ad8:	b598      	push	{r3, r4, r7, lr}
 8001ada:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(FORWARD_TRIG_PORT, FORWARD_TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae2:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <ultraForward+0xf0>)
 8001ae4:	f001 fc81 	bl	80033ea <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001ae8:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <ultraForward+0xf4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001af0:	bf00      	nop
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <ultraForward+0xf4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d9fa      	bls.n	8001af2 <ultraForward+0x1a>
    HAL_GPIO_WritePin(FORWARD_TRIG_PORT, FORWARD_TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b02:	4831      	ldr	r0, [pc, #196]	; (8001bc8 <ultraForward+0xf0>)
 8001b04:	f001 fc71 	bl	80033ea <HAL_GPIO_WritePin>

	FWpMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001b08:	f001 f8dc 	bl	8002cc4 <HAL_GetTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <ultraForward+0xf8>)
 8001b10:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (FORWARD_ECHO_PORT, FORWARD_ECHO_PIN)) && FWpMillis + 10 >  HAL_GetTick());
 8001b12:	bf00      	nop
 8001b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b18:	482b      	ldr	r0, [pc, #172]	; (8001bc8 <ultraForward+0xf0>)
 8001b1a:	f001 fc4f 	bl	80033bc <HAL_GPIO_ReadPin>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d108      	bne.n	8001b36 <ultraForward+0x5e>
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <ultraForward+0xf8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f103 040a 	add.w	r4, r3, #10
 8001b2c:	f001 f8ca 	bl	8002cc4 <HAL_GetTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	429c      	cmp	r4, r3
 8001b34:	d8ee      	bhi.n	8001b14 <ultraForward+0x3c>
	FWValue1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <ultraForward+0xf4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <ultraForward+0xfc>)
 8001b3e:	6013      	str	r3, [r2, #0]

	FWpMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001b40:	f001 f8c0 	bl	8002cc4 <HAL_GetTick>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <ultraForward+0xf8>)
 8001b48:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (FORWARD_ECHO_PORT, FORWARD_ECHO_PIN)) && FWpMillis + 50 > HAL_GetTick());
 8001b4a:	bf00      	nop
 8001b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b50:	481d      	ldr	r0, [pc, #116]	; (8001bc8 <ultraForward+0xf0>)
 8001b52:	f001 fc33 	bl	80033bc <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <ultraForward+0x96>
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <ultraForward+0xf8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001b64:	f001 f8ae 	bl	8002cc4 <HAL_GetTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	429c      	cmp	r4, r3
 8001b6c:	d8ee      	bhi.n	8001b4c <ultraForward+0x74>
	FWValue2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <ultraForward+0xf4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <ultraForward+0x100>)
 8001b76:	6013      	str	r3, [r2, #0]

	FWDistance = (FWValue2-FWValue1)* 0.034/2;
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <ultraForward+0x100>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <ultraForward+0xfc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fc2e 	bl	80003e4 <__aeabi_ui2d>
 8001b88:	a30d      	add	r3, pc, #52	; (adr r3, 8001bc0 <ultraForward+0xe8>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fca3 	bl	80004d8 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ba2:	f7fe fdc3 	bl	800072c <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe ff2d 	bl	8000a0c <__aeabi_d2iz>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <ultraForward+0x104>)
 8001bb8:	801a      	strh	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	bd98      	pop	{r3, r4, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	b020c49c 	.word	0xb020c49c
 8001bc4:	3fa16872 	.word	0x3fa16872
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	20000938 	.word	0x20000938
 8001bd0:	200008a4 	.word	0x200008a4
 8001bd4:	2000022c 	.word	0x2000022c
 8001bd8:	20000230 	.word	0x20000230
 8001bdc:	20000234 	.word	0x20000234

08001be0 <ultraBackward>:

void ultraBackward()
{
 8001be0:	b598      	push	{r3, r4, r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(BACKWARD_TRIG_PORT, BACKWARD_TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bea:	4839      	ldr	r0, [pc, #228]	; (8001cd0 <ultraBackward+0xf0>)
 8001bec:	f001 fbfd 	bl	80033ea <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001bf0:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <ultraBackward+0xf4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001bf8:	bf00      	nop
 8001bfa:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <ultraBackward+0xf4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d9fa      	bls.n	8001bfa <ultraBackward+0x1a>
    HAL_GPIO_WritePin(BACKWARD_TRIG_PORT, BACKWARD_TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c0a:	4831      	ldr	r0, [pc, #196]	; (8001cd0 <ultraBackward+0xf0>)
 8001c0c:	f001 fbed 	bl	80033ea <HAL_GPIO_WritePin>

	BWpMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001c10:	f001 f858 	bl	8002cc4 <HAL_GetTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a30      	ldr	r2, [pc, #192]	; (8001cd8 <ultraBackward+0xf8>)
 8001c18:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (BACKWARD_ECHO_PORT, BACKWARD_ECHO_PIN)) && BWpMillis + 10 >  HAL_GetTick());
 8001c1a:	bf00      	nop
 8001c1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c20:	482b      	ldr	r0, [pc, #172]	; (8001cd0 <ultraBackward+0xf0>)
 8001c22:	f001 fbcb 	bl	80033bc <HAL_GPIO_ReadPin>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d108      	bne.n	8001c3e <ultraBackward+0x5e>
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <ultraBackward+0xf8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f103 040a 	add.w	r4, r3, #10
 8001c34:	f001 f846 	bl	8002cc4 <HAL_GetTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	429c      	cmp	r4, r3
 8001c3c:	d8ee      	bhi.n	8001c1c <ultraBackward+0x3c>
	BWValue1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <ultraBackward+0xf4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <ultraBackward+0xfc>)
 8001c46:	6013      	str	r3, [r2, #0]

	BWpMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001c48:	f001 f83c 	bl	8002cc4 <HAL_GetTick>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <ultraBackward+0xf8>)
 8001c50:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (BACKWARD_ECHO_PORT, BACKWARD_ECHO_PIN)) && BWpMillis + 50 > HAL_GetTick());
 8001c52:	bf00      	nop
 8001c54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c58:	481d      	ldr	r0, [pc, #116]	; (8001cd0 <ultraBackward+0xf0>)
 8001c5a:	f001 fbaf 	bl	80033bc <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <ultraBackward+0x96>
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <ultraBackward+0xf8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001c6c:	f001 f82a 	bl	8002cc4 <HAL_GetTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	429c      	cmp	r4, r3
 8001c74:	d8ee      	bhi.n	8001c54 <ultraBackward+0x74>
	BWValue2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <ultraBackward+0xf4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <ultraBackward+0x100>)
 8001c7e:	6013      	str	r3, [r2, #0]

	BWDistance = (BWValue2-BWValue1)* 0.034/2;
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <ultraBackward+0x100>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <ultraBackward+0xfc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fbaa 	bl	80003e4 <__aeabi_ui2d>
 8001c90:	a30d      	add	r3, pc, #52	; (adr r3, 8001cc8 <ultraBackward+0xe8>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fc1f 	bl	80004d8 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001caa:	f7fe fd3f 	bl	800072c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe fea9 	bl	8000a0c <__aeabi_d2iz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <ultraBackward+0x104>)
 8001cc0:	801a      	strh	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	bd98      	pop	{r3, r4, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	b020c49c 	.word	0xb020c49c
 8001ccc:	3fa16872 	.word	0x3fa16872
 8001cd0:	40010c00 	.word	0x40010c00
 8001cd4:	20000938 	.word	0x20000938
 8001cd8:	200008a0 	.word	0x200008a0
 8001cdc:	20000238 	.word	0x20000238
 8001ce0:	2000023c 	.word	0x2000023c
 8001ce4:	20000240 	.word	0x20000240

08001ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cec:	f000 ff92 	bl	8002c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf0:	f000 f888 	bl	8001e04 <SystemClock_Config>
  // pull the TRIG pin low

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf4:	f7ff fc0c 	bl	8001510 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001cf8:	f000 fa8c 	bl	8002214 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cfc:	f000 fadc 	bl	80022b8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001d00:	f000 fe06 	bl	8002910 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d04:	f7ff fc80 	bl	8001608 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001d08:	f000 fa34 	bl	8002174 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001d0c:	f000 fe2a 	bl	8002964 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001d10:	f000 fb20 	bl	8002354 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001d14:	f000 fe50 	bl	80029b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Copmass_Init(&hi2c2);
  Ringbuf_init(); //GPS
 8001d18:	f000 fbea 	bl	80024f0 <Ringbuf_init>
  HAL_TIM_Base_Start(&htim1); //Ultra Sonic
 8001d1c:	4829      	ldr	r0, [pc, #164]	; (8001dc4 <main+0xdc>)
 8001d1e:	f004 fcbb 	bl	8006698 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(FORWARD_TRIG_PORT, FORWARD_TRIG_PIN, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d28:	4827      	ldr	r0, [pc, #156]	; (8001dc8 <main+0xe0>)
 8001d2a:	f001 fb5e 	bl	80033ea <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001d2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d32:	f000 ffd1 	bl	8002cd8 <HAL_Delay>
  HAL_IREncoder_Start(&htim2, &htim3); //Encoder
 8001d36:	4925      	ldr	r1, [pc, #148]	; (8001dcc <main+0xe4>)
 8001d38:	4825      	ldr	r0, [pc, #148]	; (8001dd0 <main+0xe8>)
 8001d3a:	f7ff fe45 	bl	80019c8 <HAL_IREncoder_Start>
  HAL_IMU_Init(&hi2c1); //IMU
 8001d3e:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <main+0xec>)
 8001d40:	f7ff fcf0 	bl	8001724 <HAL_IMU_Init>
  HAL_Delay(2000);
 8001d44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d48:	f000 ffc6 	bl	8002cd8 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(Wait_for("RMC") == 1)
 8001d4c:	4822      	ldr	r0, [pc, #136]	; (8001dd8 <main+0xf0>)
 8001d4e:	f000 fcf9 	bl	8002744 <Wait_for>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <main+0x7c>
	  {
	  	 Copy_upto("*", RMC);
 8001d58:	4920      	ldr	r1, [pc, #128]	; (8001ddc <main+0xf4>)
 8001d5a:	4821      	ldr	r0, [pc, #132]	; (8001de0 <main+0xf8>)
 8001d5c:	f000 fc72 	bl	8002644 <Copy_upto>
	  	 getGPSData();
 8001d60:	f7ff f832 	bl	8000dc8 <getGPSData>

	  }
	  resetBuffersIndexes();
 8001d64:	f7ff fa4c 	bl	8001200 <resetBuffersIndexes>
	  ultraForward();
 8001d68:	f7ff feb6 	bl	8001ad8 <ultraForward>
	  ultraBackward();
 8001d6c:	f7ff ff38 	bl	8001be0 <ultraBackward>
	  if((FWDistance <= MIN_DISTANCE)||(BWDistance - CAR_LENGTH <= MIN_DISTANCE))
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <main+0xfc>)
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	2b1e      	cmp	r3, #30
 8001d78:	dd04      	ble.n	8001d84 <main+0x9c>
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <main+0x100>)
 8001d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d80:	2b2e      	cmp	r3, #46	; 0x2e
 8001d82:	dc08      	bgt.n	8001d96 <main+0xae>
	  {
		  HAL_UART_Transmit(&huart3, &FW, 1, 0xFF);
 8001d84:	23ff      	movs	r3, #255	; 0xff
 8001d86:	2201      	movs	r2, #1
 8001d88:	4918      	ldr	r1, [pc, #96]	; (8001dec <main+0x104>)
 8001d8a:	4819      	ldr	r0, [pc, #100]	; (8001df0 <main+0x108>)
 8001d8c:	f005 f919 	bl	8006fc2 <HAL_UART_Transmit>
		  sendWarning();
 8001d90:	f7ff fa76 	bl	8001280 <sendWarning>
 8001d94:	e005      	b.n	8001da2 <main+0xba>
	  }
	  else
	  		  HAL_UART_Transmit(&huart3, &safe, 1, 0xFF);
 8001d96:	23ff      	movs	r3, #255	; 0xff
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4916      	ldr	r1, [pc, #88]	; (8001df4 <main+0x10c>)
 8001d9c:	4814      	ldr	r0, [pc, #80]	; (8001df0 <main+0x108>)
 8001d9e:	f005 f910 	bl	8006fc2 <HAL_UART_Transmit>
	  HAL_IMU_Read(&hi2c1, &himu);
 8001da2:	4915      	ldr	r1, [pc, #84]	; (8001df8 <main+0x110>)
 8001da4:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <main+0xec>)
 8001da6:	f7ff fdb1 	bl	800190c <HAL_IMU_Read>
	  //HAL_Compass_Get(&hi2c2, &hcompass);
	  //HAL_UART_Receive(&huart2, bufferRX, sizeof(bufferRX), 0xFFFF);

	  //getNeighborData();
	  getCarData();
 8001daa:	f7ff fa39 	bl	8001220 <getCarData>
	  //analysis();
	  generateTransmitBuffer();
 8001dae:	f7ff fb33 	bl	8001418 <generateTransmitBuffer>
	  HAL_UART_Transmit(&huart2, bufferTX, sizeof(bufferTX), 0xFFFF);
 8001db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db6:	2264      	movs	r2, #100	; 0x64
 8001db8:	4910      	ldr	r1, [pc, #64]	; (8001dfc <main+0x114>)
 8001dba:	4811      	ldr	r0, [pc, #68]	; (8001e00 <main+0x118>)
 8001dbc:	f005 f901 	bl	8006fc2 <HAL_UART_Transmit>
	  if(Wait_for("RMC") == 1)
 8001dc0:	e7c4      	b.n	8001d4c <main+0x64>
 8001dc2:	bf00      	nop
 8001dc4:	20000938 	.word	0x20000938
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	200008f0 	.word	0x200008f0
 8001dd0:	20000980 	.word	0x20000980
 8001dd4:	2000079c 	.word	0x2000079c
 8001dd8:	0800b5f8 	.word	0x0800b5f8
 8001ddc:	2000083c 	.word	0x2000083c
 8001de0:	0800b5fc 	.word	0x0800b5fc
 8001de4:	20000234 	.word	0x20000234
 8001de8:	20000240 	.word	0x20000240
 8001dec:	20000014 	.word	0x20000014
 8001df0:	200009d4 	.word	0x200009d4
 8001df4:	20000018 	.word	0x20000018
 8001df8:	200007f0 	.word	0x200007f0
 8001dfc:	20000738 	.word	0x20000738
 8001e00:	20000a5c 	.word	0x20000a5c

08001e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b090      	sub	sp, #64	; 0x40
 8001e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0a:	f107 0318 	add.w	r3, r7, #24
 8001e0e:	2228      	movs	r2, #40	; 0x28
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f005 fda0 	bl	8007958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e34:	2301      	movs	r3, #1
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e48:	f107 0318 	add.w	r3, r7, #24
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 ffb9 	bl	8005dc4 <HAL_RCC_OscConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e58:	f000 f819 	bl	8001e8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e60:	2302      	movs	r3, #2
 8001e62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2102      	movs	r1, #2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 fa24 	bl	80062c4 <HAL_RCC_ClockConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e82:	f000 f804 	bl	8001e8e <Error_Handler>
  }
}
 8001e86:	bf00      	nop
 8001e88:	3740      	adds	r7, #64	; 0x40
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e92:	b672      	cpsid	i
}
 8001e94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <Error_Handler+0x8>

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_MspInit+0x6c>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_MspInit+0x6c>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6193      	str	r3, [r2, #24]
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_MspInit+0x6c>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_MspInit+0x6c>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <HAL_MspInit+0x6c>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_MspInit+0x6c>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2005      	movs	r0, #5
 8001ed4:	f000 fffb 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ed8:	2005      	movs	r0, #5
 8001eda:	f001 f814 	bl	8002f06 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_MspInit+0x70>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_MspInit+0x70>)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010000 	.word	0x40010000

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <NMI_Handler+0x4>

08001f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <MemManage_Handler+0x4>

08001f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout > 0) timeout--;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SysTick_Handler+0x20>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <SysTick_Handler+0x18>
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <SysTick_Handler+0x20>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <SysTick_Handler+0x20>)
 8001f66:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f68:	f000 fe9a 	bl	8002ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200009d0 	.word	0x200009d0

08001f74 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM3_IRQHandler+0x10>)
 8001f86:	f004 fc77 	bl	8006878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200008f0 	.word	0x200008f0

08001f94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <I2C1_EV_IRQHandler+0x10>)
 8001f9a:	f001 fee5 	bl	8003d68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000079c 	.word	0x2000079c

08001fa8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <I2C1_ER_IRQHandler+0x10>)
 8001fae:	f002 f84c 	bl	800404a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000079c 	.word	0x2000079c

08001fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001fc0:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <USART1_IRQHandler+0x14>)
 8001fc2:	f000 fc47 	bl	8002854 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc6:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USART1_IRQHandler+0x14>)
 8001fc8:	f005 f88e 	bl	80070e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000a18 	.word	0x20000a18

08001fd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <USART2_IRQHandler+0x10>)
 8001fda:	f005 f885 	bl	80070e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000a5c 	.word	0x20000a5c

08001fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <_kill>:

int _kill(int pid, int sig)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002000:	f005 fc80 	bl	8007904 <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	2216      	movs	r2, #22
 8002008:	601a      	str	r2, [r3, #0]
	return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_exit>:

void _exit (int status)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800201e:	f04f 31ff 	mov.w	r1, #4294967295
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffe7 	bl	8001ff6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002028:	e7fe      	b.n	8002028 <_exit+0x12>

0800202a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e00a      	b.n	8002052 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203c:	f3af 8000 	nop.w
 8002040:	4601      	mov	r1, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	60ba      	str	r2, [r7, #8]
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	dbf0      	blt.n	800203c <_read+0x12>
	}

return len;
 800205a:	687b      	ldr	r3, [r7, #4]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e009      	b.n	800208a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	60ba      	str	r2, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	dbf1      	blt.n	8002076 <_write+0x12>
	}
	return len;
 8002092:	687b      	ldr	r3, [r7, #4]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_close>:

int _close(int file)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c2:	605a      	str	r2, [r3, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <_isatty>:

int _isatty(int file)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	return 1;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
	return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f005 fbea 	bl	8007904 <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20005000 	.word	0x20005000
 800215c:	00000400 	.word	0x00000400
 8002160:	20000244 	.word	0x20000244
 8002164:	20000ab8 	.word	0x20000ab8

08002168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002188:	463b      	mov	r3, r7
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <MX_TIM1_Init+0x98>)
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <MX_TIM1_Init+0x9c>)
 8002194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <MX_TIM1_Init+0x98>)
 8002198:	2247      	movs	r2, #71	; 0x47
 800219a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_TIM1_Init+0x98>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <MX_TIM1_Init+0x98>)
 80021a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <MX_TIM1_Init+0x98>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_TIM1_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <MX_TIM1_Init+0x98>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021bc:	4813      	ldr	r0, [pc, #76]	; (800220c <MX_TIM1_Init+0x98>)
 80021be:	f004 fa1b 	bl	80065f8 <HAL_TIM_Base_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80021c8:	f7ff fe61 	bl	8001e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4619      	mov	r1, r3
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <MX_TIM1_Init+0x98>)
 80021da:	f004 fc55 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80021e4:	f7ff fe53 	bl	8001e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021f0:	463b      	mov	r3, r7
 80021f2:	4619      	mov	r1, r3
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_TIM1_Init+0x98>)
 80021f6:	f004 fe27 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002200:	f7ff fe45 	bl	8001e8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000938 	.word	0x20000938
 8002210:	40012c00 	.word	0x40012c00

08002214 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <MX_TIM2_Init+0xa0>)
 8002232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <MX_TIM2_Init+0xa0>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <MX_TIM2_Init+0xa0>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <MX_TIM2_Init+0xa0>)
 8002246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <MX_TIM2_Init+0xa0>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_TIM2_Init+0xa0>)
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002258:	4816      	ldr	r0, [pc, #88]	; (80022b4 <MX_TIM2_Init+0xa0>)
 800225a:	f004 f9cd 	bl	80065f8 <HAL_TIM_Base_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002264:	f7ff fe13 	bl	8001e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226c:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	4619      	mov	r1, r3
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <MX_TIM2_Init+0xa0>)
 8002282:	f004 fc01 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800228c:	f7ff fdff 	bl	8001e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002290:	2300      	movs	r3, #0
 8002292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002298:	463b      	mov	r3, r7
 800229a:	4619      	mov	r1, r3
 800229c:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_TIM2_Init+0xa0>)
 800229e:	f004 fdd3 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80022a8:	f7ff fdf1 	bl	8001e8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000980 	.word	0x20000980

080022b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	463b      	mov	r3, r7
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <MX_TIM3_Init+0x94>)
 80022d6:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <MX_TIM3_Init+0x98>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <MX_TIM3_Init+0x94>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <MX_TIM3_Init+0x94>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <MX_TIM3_Init+0x94>)
 80022e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_TIM3_Init+0x94>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <MX_TIM3_Init+0x94>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022fa:	4814      	ldr	r0, [pc, #80]	; (800234c <MX_TIM3_Init+0x94>)
 80022fc:	f004 f97c 	bl	80065f8 <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002306:	f7ff fdc2 	bl	8001e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	4619      	mov	r1, r3
 8002316:	480d      	ldr	r0, [pc, #52]	; (800234c <MX_TIM3_Init+0x94>)
 8002318:	f004 fbb6 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002322:	f7ff fdb4 	bl	8001e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <MX_TIM3_Init+0x94>)
 8002334:	f004 fd88 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800233e:	f7ff fda6 	bl	8001e8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200008f0 	.word	0x200008f0
 8002350:	40000400 	.word	0x40000400

08002354 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_TIM4_Init+0x94>)
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <MX_TIM4_Init+0x98>)
 8002374:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <MX_TIM4_Init+0x94>)
 8002378:	2247      	movs	r2, #71	; 0x47
 800237a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_TIM4_Init+0x94>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <MX_TIM4_Init+0x94>)
 8002384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <MX_TIM4_Init+0x94>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_TIM4_Init+0x94>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002396:	4814      	ldr	r0, [pc, #80]	; (80023e8 <MX_TIM4_Init+0x94>)
 8002398:	f004 f92e 	bl	80065f8 <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80023a2:	f7ff fd74 	bl	8001e8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	4619      	mov	r1, r3
 80023b2:	480d      	ldr	r0, [pc, #52]	; (80023e8 <MX_TIM4_Init+0x94>)
 80023b4:	f004 fb68 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80023be:	f7ff fd66 	bl	8001e8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	4619      	mov	r1, r3
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <MX_TIM4_Init+0x94>)
 80023d0:	f004 fd3a 	bl	8006e48 <HAL_TIMEx_MasterConfigSynchronization>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80023da:	f7ff fd58 	bl	8001e8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200008a8 	.word	0x200008a8
 80023ec:	40000800 	.word	0x40000800

080023f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	; 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0320 	add.w	r3, r7, #32
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a34      	ldr	r2, [pc, #208]	; (80024dc <HAL_TIM_Base_MspInit+0xec>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10c      	bne.n	800242a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 8002416:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002428:	e054      	b.n	80024d4 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002432:	d124      	bne.n	800247e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	61d3      	str	r3, [r2, #28]
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002464:	2301      	movs	r3, #1
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800246c:	2302      	movs	r3, #2
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 0320 	add.w	r3, r7, #32
 8002474:	4619      	mov	r1, r3
 8002476:	481b      	ldr	r0, [pc, #108]	; (80024e4 <HAL_TIM_Base_MspInit+0xf4>)
 8002478:	f000 fe1c 	bl	80030b4 <HAL_GPIO_Init>
}
 800247c:	e02a      	b.n	80024d4 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_TIM_Base_MspInit+0xf8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d114      	bne.n	80024b2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	61d3      	str	r3, [r2, #28]
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	201d      	movs	r0, #29
 80024a6:	f000 fd12 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024aa:	201d      	movs	r0, #29
 80024ac:	f000 fd2b 	bl	8002f06 <HAL_NVIC_EnableIRQ>
}
 80024b0:	e010      	b.n	80024d4 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM4)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <HAL_TIM_Base_MspInit+0xfc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10b      	bne.n	80024d4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	61d3      	str	r3, [r2, #28]
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_TIM_Base_MspInit+0xf0>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3730      	adds	r7, #48	; 0x30
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010800 	.word	0x40010800
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800

080024f0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <Ringbuf_init+0x38>)
 80024f6:	4a0d      	ldr	r2, [pc, #52]	; (800252c <Ringbuf_init+0x3c>)
 80024f8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <Ringbuf_init+0x40>)
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <Ringbuf_init+0x44>)
 80024fe:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <Ringbuf_init+0x48>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <Ringbuf_init+0x48>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <Ringbuf_init+0x48>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <Ringbuf_init+0x48>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	60da      	str	r2, [r3, #12]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	200009cc 	.word	0x200009cc
 800252c:	20000248 	.word	0x20000248
 8002530:	200009c8 	.word	0x200009c8
 8002534:	20000450 	.word	0x20000450
 8002538:	20000a18 	.word	0x20000a18

0800253c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800254e:	3301      	adds	r3, #1
 8002550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002554:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	429a      	cmp	r2, r3
 8002560:	d009      	beq.n	8002576 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	79f9      	ldrb	r1, [r7, #7]
 800256c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <Uart_read+0x54>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <Uart_read+0x54>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002596:	429a      	cmp	r2, r3
 8002598:	d102      	bne.n	80025a0 <Uart_read+0x20>
  {
    return -1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	e013      	b.n	80025c8 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <Uart_read+0x54>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <Uart_read+0x54>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <Uart_read+0x54>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <Uart_read+0x54>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	200009cc 	.word	0x200009cc

080025d8 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <IsDataAvailable+0x30>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <IsDataAvailable+0x30>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	200009cc 	.word	0x200009cc

0800260c <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <Uart_peek+0x34>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <Uart_peek+0x34>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002620:	429a      	cmp	r2, r3
 8002622:	d102      	bne.n	800262a <Uart_peek+0x1e>
  {
    return -1;
 8002624:	f04f 33ff 	mov.w	r3, #4294967295
 8002628:	e006      	b.n	8002638 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <Uart_peek+0x34>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <Uart_peek+0x34>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002636:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	200009cc 	.word	0x200009cc

08002644 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fd fd7c 	bl	8000150 <strlen>
 8002658:	4603      	mov	r3, r0
 800265a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002660:	e01e      	b.n	80026a0 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <Copy_upto+0xf8>)
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	4b35      	ldr	r3, [pc, #212]	; (800273c <Copy_upto+0xf8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	6838      	ldr	r0, [r7, #0]
 8002672:	4403      	add	r3, r0
 8002674:	5c8a      	ldrb	r2, [r1, r2]
 8002676:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002678:	4b30      	ldr	r3, [pc, #192]	; (800273c <Copy_upto+0xf8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <Copy_upto+0xf8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800268a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	3301      	adds	r3, #1
 8002692:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002694:	bf00      	nop
 8002696:	f7ff ff9f 	bl	80025d8 <IsDataAvailable>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0fa      	beq.n	8002696 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80026a0:	f7ff ffb4 	bl	800260c <Uart_peek>
 80026a4:	4601      	mov	r1, r0
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4299      	cmp	r1, r3
 80026b0:	d1d7      	bne.n	8002662 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80026b2:	e027      	b.n	8002704 <Copy_upto+0xc0>
	{
		so_far++;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3301      	adds	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80026ba:	f7ff ff61 	bl	8002580 <Uart_read>
 80026be:	4601      	mov	r1, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	613a      	str	r2, [r7, #16]
 80026c6:	461a      	mov	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	b2ca      	uxtb	r2, r1
 80026ce:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d101      	bne.n	80026dc <Copy_upto+0x98>
 80026d8:	2301      	movs	r3, #1
 80026da:	e02a      	b.n	8002732 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <Copy_upto+0xfc>)
 80026de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026e2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80026e4:	bf00      	nop
 80026e6:	f7ff ff77 	bl	80025d8 <IsDataAvailable>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <Copy_upto+0xb4>
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <Copy_upto+0xfc>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f6      	bne.n	80026e6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <Copy_upto+0xfc>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <Copy_upto+0xc0>
 8002700:	2300      	movs	r3, #0
 8002702:	e016      	b.n	8002732 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002704:	f7ff ff82 	bl	800260c <Uart_peek>
 8002708:	4601      	mov	r1, r0
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4299      	cmp	r1, r3
 8002714:	d0ce      	beq.n	80026b4 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	429a      	cmp	r2, r3
 800271c:	d002      	beq.n	8002724 <Copy_upto+0xe0>
	{
		so_far = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
		goto again;
 8002722:	e79d      	b.n	8002660 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d101      	bne.n	8002730 <Copy_upto+0xec>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <Copy_upto+0xee>
	else return 0;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200009cc 	.word	0x200009cc
 8002740:	200009d0 	.word	0x200009d0

08002744 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fd fcfd 	bl	8000150 <strlen>
 8002756:	4603      	mov	r3, r0
 8002758:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 800275a:	4b3c      	ldr	r3, [pc, #240]	; (800284c <Wait_for+0x108>)
 800275c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002760:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002762:	bf00      	nop
 8002764:	f7ff ff38 	bl	80025d8 <IsDataAvailable>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <Wait_for+0x32>
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <Wait_for+0x108>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f6      	bne.n	8002764 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002776:	4b35      	ldr	r3, [pc, #212]	; (800284c <Wait_for+0x108>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d119      	bne.n	80027b2 <Wait_for+0x6e>
 800277e:	2300      	movs	r3, #0
 8002780:	e060      	b.n	8002844 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <Wait_for+0x10c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <Wait_for+0x10c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002792:	429a      	cmp	r2, r3
 8002794:	d00b      	beq.n	80027ae <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <Wait_for+0x10c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <Wait_for+0x10c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80027ac:	e001      	b.n	80027b2 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e048      	b.n	8002844 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80027b2:	f7ff ff2b 	bl	800260c <Uart_peek>
 80027b6:	4601      	mov	r1, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4299      	cmp	r1, r3
 80027c2:	d1de      	bne.n	8002782 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80027c4:	e027      	b.n	8002816 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3301      	adds	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <Wait_for+0x10c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <Wait_for+0x10c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d101      	bne.n	80027ee <Wait_for+0xaa>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e02a      	b.n	8002844 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <Wait_for+0x108>)
 80027f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027f4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80027f6:	bf00      	nop
 80027f8:	f7ff feee 	bl	80025d8 <IsDataAvailable>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <Wait_for+0xc6>
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <Wait_for+0x108>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f6      	bne.n	80027f8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <Wait_for+0x108>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <Wait_for+0xd2>
 8002812:	2300      	movs	r3, #0
 8002814:	e016      	b.n	8002844 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002816:	f7ff fef9 	bl	800260c <Uart_peek>
 800281a:	4601      	mov	r1, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4299      	cmp	r1, r3
 8002826:	d0ce      	beq.n	80027c6 <Wait_for+0x82>
	}

	if (so_far != len)
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	d002      	beq.n	8002836 <Wait_for+0xf2>
	{
		so_far = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
		goto again;
 8002834:	e791      	b.n	800275a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d101      	bne.n	8002842 <Wait_for+0xfe>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <Wait_for+0x100>
	else return 0;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200009d0 	.word	0x200009d0
 8002850:	200009cc 	.word	0x200009cc

08002854 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d013      	beq.n	800289e <Uart_isr+0x4a>
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00e      	beq.n	800289e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <Uart_isr+0xb4>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fe50 	bl	800253c <store_char>
        return;
 800289c:	e031      	b.n	8002902 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d02c      	beq.n	8002902 <Uart_isr+0xae>
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d027      	beq.n	8002902 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <Uart_isr+0xb8>)
 80028b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <Uart_isr+0xb8>)
 80028ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028be:	429a      	cmp	r2, r3
 80028c0:	d108      	bne.n	80028d4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80028d2:	e015      	b.n	8002900 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <Uart_isr+0xb8>)
 80028d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028da:	4a0c      	ldr	r2, [pc, #48]	; (800290c <Uart_isr+0xb8>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <Uart_isr+0xb8>)
 80028e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <Uart_isr+0xb8>)
 80028ee:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	7bba      	ldrb	r2, [r7, #14]
 80028fe:	605a      	str	r2, [r3, #4]
    	return;
 8002900:	bf00      	nop
    }
}
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	200009cc 	.word	0x200009cc
 800290c:	20000450 	.word	0x20000450

08002910 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <MX_USART1_UART_Init+0x4c>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <MX_USART1_UART_Init+0x50>)
 8002918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <MX_USART1_UART_Init+0x4c>)
 800291c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <MX_USART1_UART_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <MX_USART1_UART_Init+0x4c>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <MX_USART1_UART_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <MX_USART1_UART_Init+0x4c>)
 8002936:	220c      	movs	r2, #12
 8002938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <MX_USART1_UART_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <MX_USART1_UART_Init+0x4c>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_USART1_UART_Init+0x4c>)
 8002948:	f004 faee 	bl	8006f28 <HAL_UART_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002952:	f7ff fa9c 	bl	8001e8e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000a18 	.word	0x20000a18
 8002960:	40013800 	.word	0x40013800

08002964 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <MX_USART2_UART_Init+0x50>)
 800296c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 8002970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 800298a:	220c      	movs	r2, #12
 800298c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800299a:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_USART2_UART_Init+0x4c>)
 800299c:	f004 fac4 	bl	8006f28 <HAL_UART_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029a6:	f7ff fa72 	bl	8001e8e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000a5c 	.word	0x20000a5c
 80029b4:	40004400 	.word	0x40004400

080029b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_USART3_UART_Init+0x50>)
 80029c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029de:	220c      	movs	r2, #12
 80029e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_USART3_UART_Init+0x4c>)
 80029f0:	f004 fa9a 	bl	8006f28 <HAL_UART_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029fa:	f7ff fa48 	bl	8001e8e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200009d4 	.word	0x200009d4
 8002a08:	40004800 	.word	0x40004800

08002a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	; 0x38
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a61      	ldr	r2, [pc, #388]	; (8002bac <HAL_UART_MspInit+0x1a0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d146      	bne.n	8002aba <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a2c:	4b60      	ldr	r3, [pc, #384]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4a5f      	ldr	r2, [pc, #380]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a36:	6193      	str	r3, [r2, #24]
 8002a38:	4b5d      	ldr	r3, [pc, #372]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a40:	623b      	str	r3, [r7, #32]
 8002a42:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a44:	4b5a      	ldr	r3, [pc, #360]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a59      	ldr	r2, [pc, #356]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a5c:	2340      	movs	r3, #64	; 0x40
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4851      	ldr	r0, [pc, #324]	; (8002bb4 <HAL_UART_MspInit+0x1a8>)
 8002a70:	f000 fb20 	bl	80030b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a84:	4619      	mov	r1, r3
 8002a86:	484b      	ldr	r0, [pc, #300]	; (8002bb4 <HAL_UART_MspInit+0x1a8>)
 8002a88:	f000 fb14 	bl	80030b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_UART_MspInit+0x1ac>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa2:	4a45      	ldr	r2, [pc, #276]	; (8002bb8 <HAL_UART_MspInit+0x1ac>)
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2025      	movs	r0, #37	; 0x25
 8002aae:	f000 fa0e 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ab2:	2025      	movs	r0, #37	; 0x25
 8002ab4:	f000 fa27 	bl	8002f06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ab8:	e074      	b.n	8002ba4 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <HAL_UART_MspInit+0x1b0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d138      	bne.n	8002b36 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ac4:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a39      	ldr	r2, [pc, #228]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ace:	61d3      	str	r3, [r2, #28]
 8002ad0:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	4a33      	ldr	r2, [pc, #204]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002ae2:	f043 0304 	orr.w	r3, r3, #4
 8002ae6:	6193      	str	r3, [r2, #24]
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002af4:	2304      	movs	r3, #4
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b04:	4619      	mov	r1, r3
 8002b06:	482e      	ldr	r0, [pc, #184]	; (8002bc0 <HAL_UART_MspInit+0x1b4>)
 8002b08:	f000 fad4 	bl	80030b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4828      	ldr	r0, [pc, #160]	; (8002bc0 <HAL_UART_MspInit+0x1b4>)
 8002b20:	f000 fac8 	bl	80030b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	2026      	movs	r0, #38	; 0x26
 8002b2a:	f000 f9d0 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b2e:	2026      	movs	r0, #38	; 0x26
 8002b30:	f000 f9e9 	bl	8002f06 <HAL_NVIC_EnableIRQ>
}
 8002b34:	e036      	b.n	8002ba4 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART3)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_UART_MspInit+0x1b8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d131      	bne.n	8002ba4 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4a:	61d3      	str	r3, [r2, #28]
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002b5e:	f043 0308 	orr.w	r3, r3, #8
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_UART_MspInit+0x1a4>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b82:	4619      	mov	r1, r3
 8002b84:	480b      	ldr	r0, [pc, #44]	; (8002bb4 <HAL_UART_MspInit+0x1a8>)
 8002b86:	f000 fa95 	bl	80030b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_UART_MspInit+0x1a8>)
 8002ba0:	f000 fa88 	bl	80030b4 <HAL_GPIO_Init>
}
 8002ba4:	bf00      	nop
 8002ba6:	3738      	adds	r7, #56	; 0x38
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013800 	.word	0x40013800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40004400 	.word	0x40004400
 8002bc0:	40010800 	.word	0x40010800
 8002bc4:	40004800 	.word	0x40004800

08002bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bc8:	480c      	ldr	r0, [pc, #48]	; (8002bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bca:	490d      	ldr	r1, [pc, #52]	; (8002c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd0:	e002      	b.n	8002bd8 <LoopCopyDataInit>

08002bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd6:	3304      	adds	r3, #4

08002bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bdc:	d3f9      	bcc.n	8002bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002be0:	4c0a      	ldr	r4, [pc, #40]	; (8002c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be4:	e001      	b.n	8002bea <LoopFillZerobss>

08002be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be8:	3204      	adds	r2, #4

08002bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bec:	d3fb      	bcc.n	8002be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bee:	f7ff fabb 	bl	8002168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f004 fe8d 	bl	8007910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bf6:	f7ff f877 	bl	8001ce8 <main>
  bx lr
 8002bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8002bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c00:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002c04:	0800bad4 	.word	0x0800bad4
  ldr r2, =_sbss
 8002c08:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002c0c:	20000ab4 	.word	0x20000ab4

08002c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC1_2_IRQHandler>
	...

08002c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_Init+0x28>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_Init+0x28>)
 8002c1e:	f043 0310 	orr.w	r3, r3, #16
 8002c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c24:	2003      	movs	r0, #3
 8002c26:	f000 f947 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c2a:	200f      	movs	r0, #15
 8002c2c:	f000 f808 	bl	8002c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c30:	f7ff f932 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40022000 	.word	0x40022000

08002c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_InitTick+0x54>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_InitTick+0x58>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f95f 	bl	8002f22 <HAL_SYSTICK_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00e      	b.n	8002c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b0f      	cmp	r3, #15
 8002c72:	d80a      	bhi.n	8002c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c74:	2200      	movs	r2, #0
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f000 f927 	bl	8002ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <HAL_InitTick+0x5c>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e000      	b.n	8002c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000001c 	.word	0x2000001c
 8002c98:	20000024 	.word	0x20000024
 8002c9c:	20000020 	.word	0x20000020

08002ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_IncTick+0x1c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_IncTick+0x20>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <HAL_IncTick+0x20>)
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000024 	.word	0x20000024
 8002cc0:	20000aa0 	.word	0x20000aa0

08002cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc8:	4b02      	ldr	r3, [pc, #8]	; (8002cd4 <HAL_GetTick+0x10>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	20000aa0 	.word	0x20000aa0

08002cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d005      	beq.n	8002cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_Delay+0x44>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cfe:	bf00      	nop
 8002d00:	f7ff ffe0 	bl	8002cc4 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8f7      	bhi.n	8002d00 <HAL_Delay+0x28>
  {
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000024 	.word	0x20000024

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4906      	ldr	r1, [pc, #24]	; (8002db8 <__NVIC_EnableIRQ+0x34>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100

08002dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	db0a      	blt.n	8002de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	490c      	ldr	r1, [pc, #48]	; (8002e08 <__NVIC_SetPriority+0x4c>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de4:	e00a      	b.n	8002dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <__NVIC_SetPriority+0x50>)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	3b04      	subs	r3, #4
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	440b      	add	r3, r1
 8002dfa:	761a      	strb	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f1c3 0307 	rsb	r3, r3, #7
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	bf28      	it	cs
 8002e2e:	2304      	movcs	r3, #4
 8002e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d902      	bls.n	8002e40 <NVIC_EncodePriority+0x30>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3b03      	subs	r3, #3
 8002e3e:	e000      	b.n	8002e42 <NVIC_EncodePriority+0x32>
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	401a      	ands	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	4313      	orrs	r3, r2
         );
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3724      	adds	r7, #36	; 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00f      	b.n	8002eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <SysTick_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	210f      	movs	r1, #15
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f7ff ff90 	bl	8002dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SysTick_Config+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Config+0x40>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff2d 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee0:	f7ff ff42 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7ff ff90 	bl	8002e10 <NVIC_EncodePriority>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff5f 	bl	8002dbc <__NVIC_SetPriority>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff35 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ffa2 	bl	8002e74 <SysTick_Config>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d008      	beq.n	8002f62 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2204      	movs	r2, #4
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e020      	b.n	8002fa4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 020e 	bic.w	r2, r2, #14
 8002f70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d005      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	e051      	b.n	8003076 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 020e 	bic.w	r2, r2, #14
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a22      	ldr	r2, [pc, #136]	; (8003080 <HAL_DMA_Abort_IT+0xd0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d029      	beq.n	8003050 <HAL_DMA_Abort_IT+0xa0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a20      	ldr	r2, [pc, #128]	; (8003084 <HAL_DMA_Abort_IT+0xd4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d022      	beq.n	800304c <HAL_DMA_Abort_IT+0x9c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_DMA_Abort_IT+0xd8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d01a      	beq.n	8003046 <HAL_DMA_Abort_IT+0x96>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_DMA_Abort_IT+0xdc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d012      	beq.n	8003040 <HAL_DMA_Abort_IT+0x90>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_DMA_Abort_IT+0xe0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00a      	beq.n	800303a <HAL_DMA_Abort_IT+0x8a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <HAL_DMA_Abort_IT+0xe4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d102      	bne.n	8003034 <HAL_DMA_Abort_IT+0x84>
 800302e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003032:	e00e      	b.n	8003052 <HAL_DMA_Abort_IT+0xa2>
 8003034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003038:	e00b      	b.n	8003052 <HAL_DMA_Abort_IT+0xa2>
 800303a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800303e:	e008      	b.n	8003052 <HAL_DMA_Abort_IT+0xa2>
 8003040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003044:	e005      	b.n	8003052 <HAL_DMA_Abort_IT+0xa2>
 8003046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800304a:	e002      	b.n	8003052 <HAL_DMA_Abort_IT+0xa2>
 800304c:	2310      	movs	r3, #16
 800304e:	e000      	b.n	8003052 <HAL_DMA_Abort_IT+0xa2>
 8003050:	2301      	movs	r3, #1
 8003052:	4a11      	ldr	r2, [pc, #68]	; (8003098 <HAL_DMA_Abort_IT+0xe8>)
 8003054:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
    } 
  }
  return status;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40020008 	.word	0x40020008
 8003084:	4002001c 	.word	0x4002001c
 8003088:	40020030 	.word	0x40020030
 800308c:	40020044 	.word	0x40020044
 8003090:	40020058 	.word	0x40020058
 8003094:	4002006c 	.word	0x4002006c
 8003098:	40020000 	.word	0x40020000

0800309c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b08b      	sub	sp, #44	; 0x2c
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c6:	e169      	b.n	800339c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030c8:	2201      	movs	r2, #1
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	f040 8158 	bne.w	8003396 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a9a      	ldr	r2, [pc, #616]	; (8003354 <HAL_GPIO_Init+0x2a0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d05e      	beq.n	80031ae <HAL_GPIO_Init+0xfa>
 80030f0:	4a98      	ldr	r2, [pc, #608]	; (8003354 <HAL_GPIO_Init+0x2a0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d875      	bhi.n	80031e2 <HAL_GPIO_Init+0x12e>
 80030f6:	4a98      	ldr	r2, [pc, #608]	; (8003358 <HAL_GPIO_Init+0x2a4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d058      	beq.n	80031ae <HAL_GPIO_Init+0xfa>
 80030fc:	4a96      	ldr	r2, [pc, #600]	; (8003358 <HAL_GPIO_Init+0x2a4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d86f      	bhi.n	80031e2 <HAL_GPIO_Init+0x12e>
 8003102:	4a96      	ldr	r2, [pc, #600]	; (800335c <HAL_GPIO_Init+0x2a8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d052      	beq.n	80031ae <HAL_GPIO_Init+0xfa>
 8003108:	4a94      	ldr	r2, [pc, #592]	; (800335c <HAL_GPIO_Init+0x2a8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d869      	bhi.n	80031e2 <HAL_GPIO_Init+0x12e>
 800310e:	4a94      	ldr	r2, [pc, #592]	; (8003360 <HAL_GPIO_Init+0x2ac>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d04c      	beq.n	80031ae <HAL_GPIO_Init+0xfa>
 8003114:	4a92      	ldr	r2, [pc, #584]	; (8003360 <HAL_GPIO_Init+0x2ac>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d863      	bhi.n	80031e2 <HAL_GPIO_Init+0x12e>
 800311a:	4a92      	ldr	r2, [pc, #584]	; (8003364 <HAL_GPIO_Init+0x2b0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d046      	beq.n	80031ae <HAL_GPIO_Init+0xfa>
 8003120:	4a90      	ldr	r2, [pc, #576]	; (8003364 <HAL_GPIO_Init+0x2b0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d85d      	bhi.n	80031e2 <HAL_GPIO_Init+0x12e>
 8003126:	2b12      	cmp	r3, #18
 8003128:	d82a      	bhi.n	8003180 <HAL_GPIO_Init+0xcc>
 800312a:	2b12      	cmp	r3, #18
 800312c:	d859      	bhi.n	80031e2 <HAL_GPIO_Init+0x12e>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <HAL_GPIO_Init+0x80>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	080031af 	.word	0x080031af
 8003138:	08003189 	.word	0x08003189
 800313c:	0800319b 	.word	0x0800319b
 8003140:	080031dd 	.word	0x080031dd
 8003144:	080031e3 	.word	0x080031e3
 8003148:	080031e3 	.word	0x080031e3
 800314c:	080031e3 	.word	0x080031e3
 8003150:	080031e3 	.word	0x080031e3
 8003154:	080031e3 	.word	0x080031e3
 8003158:	080031e3 	.word	0x080031e3
 800315c:	080031e3 	.word	0x080031e3
 8003160:	080031e3 	.word	0x080031e3
 8003164:	080031e3 	.word	0x080031e3
 8003168:	080031e3 	.word	0x080031e3
 800316c:	080031e3 	.word	0x080031e3
 8003170:	080031e3 	.word	0x080031e3
 8003174:	080031e3 	.word	0x080031e3
 8003178:	08003191 	.word	0x08003191
 800317c:	080031a5 	.word	0x080031a5
 8003180:	4a79      	ldr	r2, [pc, #484]	; (8003368 <HAL_GPIO_Init+0x2b4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003186:	e02c      	b.n	80031e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	623b      	str	r3, [r7, #32]
          break;
 800318e:	e029      	b.n	80031e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	3304      	adds	r3, #4
 8003196:	623b      	str	r3, [r7, #32]
          break;
 8003198:	e024      	b.n	80031e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	3308      	adds	r3, #8
 80031a0:	623b      	str	r3, [r7, #32]
          break;
 80031a2:	e01f      	b.n	80031e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	330c      	adds	r3, #12
 80031aa:	623b      	str	r3, [r7, #32]
          break;
 80031ac:	e01a      	b.n	80031e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031b6:	2304      	movs	r3, #4
 80031b8:	623b      	str	r3, [r7, #32]
          break;
 80031ba:	e013      	b.n	80031e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031c4:	2308      	movs	r3, #8
 80031c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	611a      	str	r2, [r3, #16]
          break;
 80031ce:	e009      	b.n	80031e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d0:	2308      	movs	r3, #8
 80031d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	615a      	str	r2, [r3, #20]
          break;
 80031da:	e003      	b.n	80031e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031dc:	2300      	movs	r3, #0
 80031de:	623b      	str	r3, [r7, #32]
          break;
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_Init+0x130>
          break;
 80031e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2bff      	cmp	r3, #255	; 0xff
 80031e8:	d801      	bhi.n	80031ee <HAL_GPIO_Init+0x13a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	e001      	b.n	80031f2 <HAL_GPIO_Init+0x13e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2bff      	cmp	r3, #255	; 0xff
 80031f8:	d802      	bhi.n	8003200 <HAL_GPIO_Init+0x14c>
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	e002      	b.n	8003206 <HAL_GPIO_Init+0x152>
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	3b08      	subs	r3, #8
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	210f      	movs	r1, #15
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	6a39      	ldr	r1, [r7, #32]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	431a      	orrs	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80b1 	beq.w	8003396 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003234:	4b4d      	ldr	r3, [pc, #308]	; (800336c <HAL_GPIO_Init+0x2b8>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4a4c      	ldr	r2, [pc, #304]	; (800336c <HAL_GPIO_Init+0x2b8>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6193      	str	r3, [r2, #24]
 8003240:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_GPIO_Init+0x2b8>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800324c:	4a48      	ldr	r2, [pc, #288]	; (8003370 <HAL_GPIO_Init+0x2bc>)
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003258:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	220f      	movs	r2, #15
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a40      	ldr	r2, [pc, #256]	; (8003374 <HAL_GPIO_Init+0x2c0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_GPIO_Init+0x1ec>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3f      	ldr	r2, [pc, #252]	; (8003378 <HAL_GPIO_Init+0x2c4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00d      	beq.n	800329c <HAL_GPIO_Init+0x1e8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3e      	ldr	r2, [pc, #248]	; (800337c <HAL_GPIO_Init+0x2c8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <HAL_GPIO_Init+0x1e4>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3d      	ldr	r2, [pc, #244]	; (8003380 <HAL_GPIO_Init+0x2cc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_GPIO_Init+0x1e0>
 8003290:	2303      	movs	r3, #3
 8003292:	e006      	b.n	80032a2 <HAL_GPIO_Init+0x1ee>
 8003294:	2304      	movs	r3, #4
 8003296:	e004      	b.n	80032a2 <HAL_GPIO_Init+0x1ee>
 8003298:	2302      	movs	r3, #2
 800329a:	e002      	b.n	80032a2 <HAL_GPIO_Init+0x1ee>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_GPIO_Init+0x1ee>
 80032a0:	2300      	movs	r3, #0
 80032a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a4:	f002 0203 	and.w	r2, r2, #3
 80032a8:	0092      	lsls	r2, r2, #2
 80032aa:	4093      	lsls	r3, r2
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032b2:	492f      	ldr	r1, [pc, #188]	; (8003370 <HAL_GPIO_Init+0x2bc>)
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	3302      	adds	r3, #2
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032cc:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	492c      	ldr	r1, [pc, #176]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032da:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	4928      	ldr	r1, [pc, #160]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d006      	beq.n	8003302 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032f4:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	4922      	ldr	r1, [pc, #136]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
 8003300:	e006      	b.n	8003310 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	43db      	mvns	r3, r3
 800330a:	491e      	ldr	r1, [pc, #120]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 800330c:	4013      	ands	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d006      	beq.n	800332a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	4918      	ldr	r1, [pc, #96]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4313      	orrs	r3, r2
 8003326:	608b      	str	r3, [r1, #8]
 8003328:	e006      	b.n	8003338 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	43db      	mvns	r3, r3
 8003332:	4914      	ldr	r1, [pc, #80]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 8003334:	4013      	ands	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d021      	beq.n	8003388 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	490e      	ldr	r1, [pc, #56]	; (8003384 <HAL_GPIO_Init+0x2d0>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	60cb      	str	r3, [r1, #12]
 8003350:	e021      	b.n	8003396 <HAL_GPIO_Init+0x2e2>
 8003352:	bf00      	nop
 8003354:	10320000 	.word	0x10320000
 8003358:	10310000 	.word	0x10310000
 800335c:	10220000 	.word	0x10220000
 8003360:	10210000 	.word	0x10210000
 8003364:	10120000 	.word	0x10120000
 8003368:	10110000 	.word	0x10110000
 800336c:	40021000 	.word	0x40021000
 8003370:	40010000 	.word	0x40010000
 8003374:	40010800 	.word	0x40010800
 8003378:	40010c00 	.word	0x40010c00
 800337c:	40011000 	.word	0x40011000
 8003380:	40011400 	.word	0x40011400
 8003384:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_GPIO_Init+0x304>)
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	43db      	mvns	r3, r3
 8003390:	4909      	ldr	r1, [pc, #36]	; (80033b8 <HAL_GPIO_Init+0x304>)
 8003392:	4013      	ands	r3, r2
 8003394:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	3301      	adds	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	fa22 f303 	lsr.w	r3, r2, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f47f ae8e 	bne.w	80030c8 <HAL_GPIO_Init+0x14>
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	372c      	adds	r7, #44	; 0x2c
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	40010400 	.word	0x40010400

080033bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e001      	b.n	80033de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	807b      	strh	r3, [r7, #2]
 80033f6:	4613      	mov	r3, r2
 80033f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033fa:	787b      	ldrb	r3, [r7, #1]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003406:	e003      	b.n	8003410 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003408:	887b      	ldrh	r3, [r7, #2]
 800340a:	041a      	lsls	r2, r3, #16
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
	...

0800341c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e12b      	b.n	8003686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fe f90e 	bl	8001664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800346e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800347e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003480:	f003 f874 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 8003484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a81      	ldr	r2, [pc, #516]	; (8003690 <HAL_I2C_Init+0x274>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d807      	bhi.n	80034a0 <HAL_I2C_Init+0x84>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a80      	ldr	r2, [pc, #512]	; (8003694 <HAL_I2C_Init+0x278>)
 8003494:	4293      	cmp	r3, r2
 8003496:	bf94      	ite	ls
 8003498:	2301      	movls	r3, #1
 800349a:	2300      	movhi	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e006      	b.n	80034ae <HAL_I2C_Init+0x92>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a7d      	ldr	r2, [pc, #500]	; (8003698 <HAL_I2C_Init+0x27c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	bf94      	ite	ls
 80034a8:	2301      	movls	r3, #1
 80034aa:	2300      	movhi	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0e7      	b.n	8003686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a78      	ldr	r2, [pc, #480]	; (800369c <HAL_I2C_Init+0x280>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0c9b      	lsrs	r3, r3, #18
 80034c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a6a      	ldr	r2, [pc, #424]	; (8003690 <HAL_I2C_Init+0x274>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d802      	bhi.n	80034f0 <HAL_I2C_Init+0xd4>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3301      	adds	r3, #1
 80034ee:	e009      	b.n	8003504 <HAL_I2C_Init+0xe8>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	4a69      	ldr	r2, [pc, #420]	; (80036a0 <HAL_I2C_Init+0x284>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	3301      	adds	r3, #1
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	430b      	orrs	r3, r1
 800350a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003516:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	495c      	ldr	r1, [pc, #368]	; (8003690 <HAL_I2C_Init+0x274>)
 8003520:	428b      	cmp	r3, r1
 8003522:	d819      	bhi.n	8003558 <HAL_I2C_Init+0x13c>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1e59      	subs	r1, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003532:	1c59      	adds	r1, r3, #1
 8003534:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003538:	400b      	ands	r3, r1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_I2C_Init+0x138>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1e59      	subs	r1, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fbb1 f3f3 	udiv	r3, r1, r3
 800354c:	3301      	adds	r3, #1
 800354e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003552:	e051      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 8003554:	2304      	movs	r3, #4
 8003556:	e04f      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <HAL_I2C_Init+0x168>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e58      	subs	r0, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	440b      	add	r3, r1
 800356e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e012      	b.n	80035aa <HAL_I2C_Init+0x18e>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e58      	subs	r0, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	0099      	lsls	r1, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	fbb0 f3f3 	udiv	r3, r0, r3
 800359a:	3301      	adds	r3, #1
 800359c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Init+0x196>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e022      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10e      	bne.n	80035d8 <HAL_I2C_Init+0x1bc>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1e58      	subs	r0, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	440b      	add	r3, r1
 80035c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d6:	e00f      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e58      	subs	r0, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	0099      	lsls	r1, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	6809      	ldr	r1, [r1, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003626:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6911      	ldr	r1, [r2, #16]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68d2      	ldr	r2, [r2, #12]
 8003632:	4311      	orrs	r1, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	430b      	orrs	r3, r1
 800363a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	000186a0 	.word	0x000186a0
 8003694:	001e847f 	.word	0x001e847f
 8003698:	003d08ff 	.word	0x003d08ff
 800369c:	431bde83 	.word	0x431bde83
 80036a0:	10624dd3 	.word	0x10624dd3

080036a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036be:	f7ff fb01 	bl	8002cc4 <HAL_GetTick>
 80036c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	f040 80d9 	bne.w	8003884 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2319      	movs	r3, #25
 80036d8:	2201      	movs	r2, #1
 80036da:	496d      	ldr	r1, [pc, #436]	; (8003890 <HAL_I2C_Mem_Write+0x1ec>)
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f002 f949 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	e0cc      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Mem_Write+0x56>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0c5      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d007      	beq.n	8003720 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2221      	movs	r2, #33	; 0x21
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a3a      	ldr	r2, [r7, #32]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a4d      	ldr	r2, [pc, #308]	; (8003894 <HAL_I2C_Mem_Write+0x1f0>)
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003762:	88f8      	ldrh	r0, [r7, #6]
 8003764:	893a      	ldrh	r2, [r7, #8]
 8003766:	8979      	ldrh	r1, [r7, #10]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	4603      	mov	r3, r0
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f001 fed8 	bl	8005528 <I2C_RequestMemoryWrite>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d052      	beq.n	8003824 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e081      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f002 f9ca 	bl	8005b20 <I2C_WaitOnTXEFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b04      	cmp	r3, #4
 8003798:	d107      	bne.n	80037aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e06b      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d11b      	bne.n	8003824 <HAL_I2C_Mem_Write+0x180>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d017      	beq.n	8003824 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1aa      	bne.n	8003782 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f002 f9b6 	bl	8005ba2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	2b04      	cmp	r3, #4
 8003842:	d107      	bne.n	8003854 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003852:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e016      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	00100002 	.word	0x00100002
 8003894:	ffff0000 	.word	0xffff0000

08003898 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	4608      	mov	r0, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	461a      	mov	r2, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	817b      	strh	r3, [r7, #10]
 80038aa:	460b      	mov	r3, r1
 80038ac:	813b      	strh	r3, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038b6:	f7ff fa05 	bl	8002cc4 <HAL_GetTick>
 80038ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	f040 8244 	bne.w	8003d52 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2319      	movs	r3, #25
 80038d0:	2201      	movs	r2, #1
 80038d2:	4982      	ldr	r1, [pc, #520]	; (8003adc <HAL_I2C_Mem_Read+0x244>)
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f002 f84d 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
 80038e2:	e237      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2C_Mem_Read+0x5a>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e230      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d007      	beq.n	8003918 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003926:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2222      	movs	r2, #34	; 0x22
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a62      	ldr	r2, [pc, #392]	; (8003ae0 <HAL_I2C_Mem_Read+0x248>)
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800395a:	88f8      	ldrh	r0, [r7, #6]
 800395c:	893a      	ldrh	r2, [r7, #8]
 800395e:	8979      	ldrh	r1, [r7, #10]
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	9301      	str	r3, [sp, #4]
 8003964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	4603      	mov	r3, r0
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f001 fe72 	bl	8005654 <I2C_RequestMemoryRead>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e1ec      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d113      	bne.n	80039aa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e1c0      	b.n	8003d2c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d11e      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039c2:	b672      	cpsid	i
}
 80039c4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039ec:	b662      	cpsie	i
}
 80039ee:	e035      	b.n	8003a5c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d11e      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a08:	b672      	cpsid	i
}
 8003a0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a32:	b662      	cpsie	i
}
 8003a34:	e012      	b.n	8003a5c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a44:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a5c:	e166      	b.n	8003d2c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	f200 811f 	bhi.w	8003ca6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d123      	bne.n	8003ab8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f002 f907 	bl	8005c88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e167      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ab6:	e139      	b.n	8003d2c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d152      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	4906      	ldr	r1, [pc, #24]	; (8003ae4 <HAL_I2C_Mem_Read+0x24c>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f001 ff52 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e13c      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
 8003ada:	bf00      	nop
 8003adc:	00100002 	.word	0x00100002
 8003ae0:	ffff0000 	.word	0xffff0000
 8003ae4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae8:	b672      	cpsid	i
}
 8003aea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b2e:	b662      	cpsie	i
}
 8003b30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b64:	e0e2      	b.n	8003d2c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	497b      	ldr	r1, [pc, #492]	; (8003d5c <HAL_I2C_Mem_Read+0x4c4>)
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f001 feff 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0e9      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b90:	b672      	cpsid	i
}
 8003b92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bc6:	4b66      	ldr	r3, [pc, #408]	; (8003d60 <HAL_I2C_Mem_Read+0x4c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	4a65      	ldr	r2, [pc, #404]	; (8003d64 <HAL_I2C_Mem_Read+0x4cc>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	0a1a      	lsrs	r2, r3, #8
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00da      	lsls	r2, r3, #3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d118      	bne.n	8003c1e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c0e:	b662      	cpsie	i
}
 8003c10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e09a      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d1d9      	bne.n	8003be0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c6e:	b662      	cpsie	i
}
 8003c70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ca4:	e042      	b.n	8003d2c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f001 ffec 	bl	8005c88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e04c      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d118      	bne.n	8003d2c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f ae94 	bne.w	8003a5e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3728      	adds	r7, #40	; 0x28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	00010004 	.word	0x00010004
 8003d60:	2000001c 	.word	0x2000001c
 8003d64:	14f8b589 	.word	0x14f8b589

08003d68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d88:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d003      	beq.n	8003da0 <HAL_I2C_EV_IRQHandler+0x38>
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	f040 80c1 	bne.w	8003f22 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10d      	bne.n	8003dd6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003dc0:	d003      	beq.n	8003dca <HAL_I2C_EV_IRQHandler+0x62>
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_EV_IRQHandler+0x66>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x68>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f000 8132 	beq.w	800403a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00c      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0x92>
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	0a5b      	lsrs	r3, r3, #9
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d006      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f001 ffcf 	bl	8005d90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fd77 	bl	80048e6 <I2C_Master_SB>
 8003df8:	e092      	b.n	8003f20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	08db      	lsrs	r3, r3, #3
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_I2C_EV_IRQHandler+0xb2>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	0a5b      	lsrs	r3, r3, #9
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fdec 	bl	80049f0 <I2C_Master_ADD10>
 8003e18:	e082      	b.n	8003f20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0xd2>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	0a5b      	lsrs	r3, r3, #9
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fe05 	bl	8004a42 <I2C_Master_ADDR>
 8003e38:	e072      	b.n	8003f20 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03b      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e54:	f000 80f3 	beq.w	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	09db      	lsrs	r3, r3, #7
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00f      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f9f1 	bl	8004264 <I2C_MasterTransmit_TXE>
 8003e82:	e04d      	b.n	8003f20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80d6 	beq.w	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80cf 	beq.w	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ea0:	7bbb      	ldrb	r3, [r7, #14]
 8003ea2:	2b21      	cmp	r3, #33	; 0x21
 8003ea4:	d103      	bne.n	8003eae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa78 	bl	800439c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eac:	e0c7      	b.n	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	f040 80c4 	bne.w	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fae6 	bl	8004488 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ebc:	e0bf      	b.n	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ecc:	f000 80b7 	beq.w	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00f      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x194>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	0a9b      	lsrs	r3, r3, #10
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x194>
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d103      	bne.n	8003efc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fb5b 	bl	80045b0 <I2C_MasterReceive_RXNE>
 8003efa:	e011      	b.n	8003f20 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 809a 	beq.w	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	0a5b      	lsrs	r3, r3, #9
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8093 	beq.w	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fbfa 	bl	8004712 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f1e:	e08e      	b.n	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f20:	e08d      	b.n	800403e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	e007      	b.n	8003f44 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d012      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x20e>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	0a5b      	lsrs	r3, r3, #9
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00c      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f6c:	69b9      	ldr	r1, [r7, #24]
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 ffbe 	bl	8004ef0 <I2C_Slave_ADDR>
 8003f74:	e066      	b.n	8004044 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_I2C_EV_IRQHandler+0x22e>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	0a5b      	lsrs	r3, r3, #9
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fff8 	bl	8004f84 <I2C_Slave_STOPF>
 8003f94:	e056      	b.n	8004044 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	2b21      	cmp	r3, #33	; 0x21
 8003f9a:	d002      	beq.n	8003fa2 <HAL_I2C_EV_IRQHandler+0x23a>
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	2b29      	cmp	r3, #41	; 0x29
 8003fa0:	d125      	bne.n	8003fee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	09db      	lsrs	r3, r3, #7
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00f      	beq.n	8003fce <HAL_I2C_EV_IRQHandler+0x266>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	0a9b      	lsrs	r3, r3, #10
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_I2C_EV_IRQHandler+0x266>
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fed6 	bl	8004d78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fcc:	e039      	b.n	8004042 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d033      	beq.n	8004042 <HAL_I2C_EV_IRQHandler+0x2da>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	0a5b      	lsrs	r3, r3, #9
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d02d      	beq.n	8004042 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 ff03 	bl	8004df2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fec:	e029      	b.n	8004042 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00f      	beq.n	800401a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	0a9b      	lsrs	r3, r3, #10
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 ff0d 	bl	8004e32 <I2C_SlaveReceive_RXNE>
 8004018:	e014      	b.n	8004044 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	0a5b      	lsrs	r3, r3, #9
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 ff3b 	bl	8004eae <I2C_SlaveReceive_BTF>
 8004038:	e004      	b.n	8004044 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004042:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b08a      	sub	sp, #40	; 0x28
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004062:	2300      	movs	r3, #0
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_I2C_ER_IRQHandler+0x5e>
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d010      	beq.n	80040a8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004096:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	0a5b      	lsrs	r3, r3, #9
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00e      	beq.n	80040d2 <HAL_I2C_ER_IRQHandler+0x88>
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80040d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	0a9b      	lsrs	r3, r3, #10
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03f      	beq.n	800415e <HAL_I2C_ER_IRQHandler+0x114>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d039      	beq.n	800415e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004104:	7ebb      	ldrb	r3, [r7, #26]
 8004106:	2b20      	cmp	r3, #32
 8004108:	d112      	bne.n	8004130 <HAL_I2C_ER_IRQHandler+0xe6>
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10f      	bne.n	8004130 <HAL_I2C_ER_IRQHandler+0xe6>
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	2b21      	cmp	r3, #33	; 0x21
 8004114:	d008      	beq.n	8004128 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b29      	cmp	r3, #41	; 0x29
 800411a:	d005      	beq.n	8004128 <HAL_I2C_ER_IRQHandler+0xde>
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	2b28      	cmp	r3, #40	; 0x28
 8004120:	d106      	bne.n	8004130 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b21      	cmp	r3, #33	; 0x21
 8004126:	d103      	bne.n	8004130 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f001 f85b 	bl	80051e4 <I2C_Slave_AF>
 800412e:	e016      	b.n	800415e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004138:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004142:	7efb      	ldrb	r3, [r7, #27]
 8004144:	2b10      	cmp	r3, #16
 8004146:	d002      	beq.n	800414e <HAL_I2C_ER_IRQHandler+0x104>
 8004148:	7efb      	ldrb	r3, [r7, #27]
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d107      	bne.n	800415e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	0adb      	lsrs	r3, r3, #11
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <HAL_I2C_ER_IRQHandler+0x13e>
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004186:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f001 f892 	bl	80052c4 <I2C_ITError>
  }
}
 80041a0:	bf00      	nop
 80041a2:	3728      	adds	r7, #40	; 0x28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
 80041fc:	4613      	mov	r3, r2
 80041fe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800427a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d150      	bne.n	800432c <I2C_MasterTransmit_TXE+0xc8>
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b21      	cmp	r3, #33	; 0x21
 800428e:	d14d      	bne.n	800432c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b08      	cmp	r3, #8
 8004294:	d01d      	beq.n	80042d2 <I2C_MasterTransmit_TXE+0x6e>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b20      	cmp	r3, #32
 800429a:	d01a      	beq.n	80042d2 <I2C_MasterTransmit_TXE+0x6e>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042a2:	d016      	beq.n	80042d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2211      	movs	r2, #17
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff6c 	bl	80041a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042d0:	e060      	b.n	8004394 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d107      	bne.n	800431c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff81 	bl	800421c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800431a:	e03b      	b.n	8004394 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff3f 	bl	80041a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800432a:	e033      	b.n	8004394 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b21      	cmp	r3, #33	; 0x21
 8004330:	d005      	beq.n	800433e <I2C_MasterTransmit_TXE+0xda>
 8004332:	7bbb      	ldrb	r3, [r7, #14]
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d12d      	bne.n	8004394 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b22      	cmp	r3, #34	; 0x22
 800433c:	d12a      	bne.n	8004394 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004356:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004358:	e01c      	b.n	8004394 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b40      	cmp	r3, #64	; 0x40
 8004364:	d103      	bne.n	800436e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f88e 	bl	8004488 <I2C_MemoryTransmit_TXE_BTF>
}
 800436c:	e012      	b.n	8004394 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004392:	e7ff      	b.n	8004394 <I2C_MasterTransmit_TXE+0x130>
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b21      	cmp	r3, #33	; 0x21
 80043b4:	d164      	bne.n	8004480 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d012      	beq.n	80043e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80043e4:	e04c      	b.n	8004480 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d01d      	beq.n	8004428 <I2C_MasterTransmit_BTF+0x8c>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d01a      	beq.n	8004428 <I2C_MasterTransmit_BTF+0x8c>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043f8:	d016      	beq.n	8004428 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004408:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2211      	movs	r2, #17
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff fec1 	bl	80041a8 <HAL_I2C_MasterTxCpltCallback>
}
 8004426:	e02b      	b.n	8004480 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004436:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d107      	bne.n	8004472 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff fed6 	bl	800421c <HAL_I2C_MemTxCpltCallback>
}
 8004470:	e006      	b.n	8004480 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff fe94 	bl	80041a8 <HAL_I2C_MasterTxCpltCallback>
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11d      	bne.n	80044dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10b      	bne.n	80044c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	1c9a      	adds	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80044be:	e073      	b.n	80045a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	121b      	asrs	r3, r3, #8
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044da:	e065      	b.n	80045a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10b      	bne.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044fa:	e055      	b.n	80045a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	2b02      	cmp	r3, #2
 8004502:	d151      	bne.n	80045a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b22      	cmp	r3, #34	; 0x22
 8004508:	d10d      	bne.n	8004526 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004518:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004524:	e040      	b.n	80045a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d015      	beq.n	800455c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b21      	cmp	r3, #33	; 0x21
 8004534:	d112      	bne.n	800455c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	781a      	ldrb	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800455a:	e025      	b.n	80045a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d120      	bne.n	80045a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b21      	cmp	r3, #33	; 0x21
 800456a:	d11d      	bne.n	80045a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800457a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fe3a 	bl	800421c <HAL_I2C_MemTxCpltCallback>
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b22      	cmp	r3, #34	; 0x22
 80045c2:	f040 80a2 	bne.w	800470a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d921      	bls.n	8004618 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b03      	cmp	r3, #3
 8004602:	f040 8082 	bne.w	800470a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004614:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004616:	e078      	b.n	800470a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	2b02      	cmp	r3, #2
 800461e:	d074      	beq.n	800470a <I2C_MasterReceive_RXNE+0x15a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d002      	beq.n	800462c <I2C_MasterReceive_RXNE+0x7c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d16e      	bne.n	800470a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 faf9 	bl	8005c24 <I2C_WaitOnSTOPRequestThroughIT>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d142      	bne.n	80046be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004646:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004656:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d10a      	bne.n	80046a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff fdc4 	bl	800422e <HAL_I2C_MemRxCpltCallback>
}
 80046a6:	e030      	b.n	800470a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2212      	movs	r2, #18
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff fd7f 	bl	80041ba <HAL_I2C_MasterRxCpltCallback>
}
 80046bc:	e025      	b.n	800470a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fd9b 	bl	8004240 <HAL_I2C_ErrorCallback>
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b04      	cmp	r3, #4
 8004728:	d11b      	bne.n	8004762 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004738:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004760:	e0bd      	b.n	80048de <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d129      	bne.n	80047c0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d00a      	beq.n	8004798 <I2C_MasterReceive_BTF+0x86>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d007      	beq.n	8004798 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004796:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047be:	e08e      	b.n	80048de <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d176      	bne.n	80048b8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d002      	beq.n	80047d6 <I2C_MasterReceive_BTF+0xc4>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d108      	bne.n	80047e8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e019      	b.n	800481c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d002      	beq.n	80047f4 <I2C_MasterReceive_BTF+0xe2>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d108      	bne.n	8004806 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e00a      	b.n	800481c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b10      	cmp	r3, #16
 800480a:	d007      	beq.n	800481c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004876:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d10a      	bne.n	80048a2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff fcc7 	bl	800422e <HAL_I2C_MemRxCpltCallback>
}
 80048a0:	e01d      	b.n	80048de <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2212      	movs	r2, #18
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fc82 	bl	80041ba <HAL_I2C_MasterRxCpltCallback>
}
 80048b6:	e012      	b.n	80048de <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d117      	bne.n	800492a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	b2db      	uxtb	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004912:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004914:	e067      	b.n	80049e6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	b2da      	uxtb	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]
}
 8004928:	e05d      	b.n	80049e6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004932:	d133      	bne.n	800499c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b21      	cmp	r3, #33	; 0x21
 800493e:	d109      	bne.n	8004954 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004950:	611a      	str	r2, [r3, #16]
 8004952:	e008      	b.n	8004966 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	b2da      	uxtb	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <I2C_Master_SB+0x92>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d108      	bne.n	800498a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	2b00      	cmp	r3, #0
 800497e:	d032      	beq.n	80049e6 <I2C_Master_SB+0x100>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d02d      	beq.n	80049e6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004998:	605a      	str	r2, [r3, #4]
}
 800499a:	e024      	b.n	80049e6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10e      	bne.n	80049c2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	11db      	asrs	r3, r3, #7
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0306 	and.w	r3, r3, #6
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f063 030f 	orn	r3, r3, #15
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]
}
 80049c0:	e011      	b.n	80049e6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10d      	bne.n	80049e6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	11db      	asrs	r3, r3, #7
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f003 0306 	and.w	r3, r3, #6
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	f063 030e 	orn	r3, r3, #14
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <I2C_Master_ADD10+0x26>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <I2C_Master_ADD10+0x48>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a36:	605a      	str	r2, [r3, #4]
  }
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b091      	sub	sp, #68	; 0x44
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b22      	cmp	r3, #34	; 0x22
 8004a6a:	f040 8174 	bne.w	8004d56 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <I2C_Master_ADDR+0x54>
 8004a76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d10b      	bne.n	8004a96 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	e16b      	b.n	8004d6e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11d      	bne.n	8004ada <I2C_Master_ADDR+0x98>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004aa6:	d118      	bne.n	8004ada <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004acc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	651a      	str	r2, [r3, #80]	; 0x50
 8004ad8:	e149      	b.n	8004d6e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e120      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f040 808a 	bne.w	8004c2c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b1e:	d137      	bne.n	8004b90 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3e:	d113      	bne.n	8004b68 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b50:	2300      	movs	r3, #0
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	e0f2      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e0de      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d02e      	beq.n	8004bf4 <I2C_Master_ADDR+0x1b2>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d02b      	beq.n	8004bf4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	2b12      	cmp	r3, #18
 8004ba0:	d102      	bne.n	8004ba8 <I2C_Master_ADDR+0x166>
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d125      	bne.n	8004bf4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d00e      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d00b      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d008      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e007      	b.n	8004bdc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bda:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	e0ac      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c02:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e090      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d158      	bne.n	8004ce8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d021      	beq.n	8004c80 <I2C_Master_ADDR+0x23e>
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d01e      	beq.n	8004c80 <I2C_Master_ADDR+0x23e>
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d01b      	beq.n	8004c80 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e012      	b.n	8004ca6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb4:	d14b      	bne.n	8004d4e <I2C_Master_ADDR+0x30c>
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cbc:	d00b      	beq.n	8004cd6 <I2C_Master_ADDR+0x294>
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d008      	beq.n	8004cd6 <I2C_Master_ADDR+0x294>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d005      	beq.n	8004cd6 <I2C_Master_ADDR+0x294>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d002      	beq.n	8004cd6 <I2C_Master_ADDR+0x294>
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d13b      	bne.n	8004d4e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	e032      	b.n	8004d4e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d06:	d117      	bne.n	8004d38 <I2C_Master_ADDR+0x2f6>
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d0e:	d00b      	beq.n	8004d28 <I2C_Master_ADDR+0x2e6>
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d008      	beq.n	8004d28 <I2C_Master_ADDR+0x2e6>
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d005      	beq.n	8004d28 <I2C_Master_ADDR+0x2e6>
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d002      	beq.n	8004d28 <I2C_Master_ADDR+0x2e6>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d107      	bne.n	8004d38 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d36:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d54:	e00b      	b.n	8004d6e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
}
 8004d6c:	e7ff      	b.n	8004d6e <I2C_Master_ADDR+0x32c>
 8004d6e:	bf00      	nop
 8004d70:	3744      	adds	r7, #68	; 0x44
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02b      	beq.n	8004dea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d114      	bne.n	8004dea <I2C_SlaveTransmit_TXE+0x72>
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b29      	cmp	r3, #41	; 0x29
 8004dc4:	d111      	bne.n	8004dea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2221      	movs	r2, #33	; 0x21
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2228      	movs	r2, #40	; 0x28
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff f9f1 	bl	80041cc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d011      	beq.n	8004e28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02c      	beq.n	8004ea6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d114      	bne.n	8004ea6 <I2C_SlaveReceive_RXNE+0x74>
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e80:	d111      	bne.n	8004ea6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2222      	movs	r2, #34	; 0x22
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2228      	movs	r2, #40	; 0x28
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff f99c 	bl	80041de <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d012      	beq.n	8004ee6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f0a:	2b28      	cmp	r3, #40	; 0x28
 8004f0c:	d127      	bne.n	8004f5e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	09db      	lsrs	r3, r3, #7
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	81bb      	strh	r3, [r7, #12]
 8004f40:	e002      	b.n	8004f48 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f50:	89ba      	ldrh	r2, [r7, #12]
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff f94a 	bl	80041f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f5c:	e00e      	b.n	8004f7c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe0:	d172      	bne.n	80050c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b22      	cmp	r3, #34	; 0x22
 8004fe6:	d002      	beq.n	8004fee <I2C_Slave_STOPF+0x6a>
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b2a      	cmp	r3, #42	; 0x2a
 8004fec:	d135      	bne.n	800505a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f043 0204 	orr.w	r2, r3, #4
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005020:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe f838 	bl	800309c <HAL_DMA_GetState>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d049      	beq.n	80050c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	4a69      	ldr	r2, [pc, #420]	; (80051dc <I2C_Slave_STOPF+0x258>)
 8005038:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd ffb6 	bl	8002fb0 <HAL_DMA_Abort_IT>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d03d      	beq.n	80050c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005054:	4610      	mov	r0, r2
 8005056:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005058:	e035      	b.n	80050c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b29a      	uxth	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0204 	orr.w	r2, r3, #4
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800508c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe f802 	bl	800309c <HAL_DMA_GetState>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d014      	beq.n	80050c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a2:	4a4e      	ldr	r2, [pc, #312]	; (80051dc <I2C_Slave_STOPF+0x258>)
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fd ff80 	bl	8002fb0 <HAL_DMA_Abort_IT>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050c0:	4610      	mov	r0, r2
 80050c2:	4798      	blx	r3
 80050c4:	e000      	b.n	80050c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d03e      	beq.n	8005150 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d112      	bne.n	8005106 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d112      	bne.n	800513a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	f043 0204 	orr.w	r2, r3, #4
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f8b3 	bl	80052c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800515e:	e039      	b.n	80051d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b2a      	cmp	r3, #42	; 0x2a
 8005164:	d109      	bne.n	800517a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2228      	movs	r2, #40	; 0x28
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff f832 	bl	80041de <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b28      	cmp	r3, #40	; 0x28
 8005184:	d111      	bne.n	80051aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <I2C_Slave_STOPF+0x25c>)
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff f831 	bl	800420a <HAL_I2C_ListenCpltCallback>
}
 80051a8:	e014      	b.n	80051d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	2b22      	cmp	r3, #34	; 0x22
 80051b0:	d002      	beq.n	80051b8 <I2C_Slave_STOPF+0x234>
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b22      	cmp	r3, #34	; 0x22
 80051b6:	d10d      	bne.n	80051d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff f805 	bl	80041de <HAL_I2C_SlaveRxCpltCallback>
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	08005825 	.word	0x08005825
 80051e0:	ffff0000 	.word	0xffff0000

080051e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d002      	beq.n	8005206 <I2C_Slave_AF+0x22>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b20      	cmp	r3, #32
 8005204:	d129      	bne.n	800525a <I2C_Slave_AF+0x76>
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b28      	cmp	r3, #40	; 0x28
 800520a:	d126      	bne.n	800525a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a2c      	ldr	r2, [pc, #176]	; (80052c0 <I2C_Slave_AF+0xdc>)
 8005210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005220:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800522a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fe ffd9 	bl	800420a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005258:	e02e      	b.n	80052b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b21      	cmp	r3, #33	; 0x21
 800525e:	d126      	bne.n	80052ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <I2C_Slave_AF+0xdc>)
 8005264:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2221      	movs	r2, #33	; 0x21
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800528a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005294:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fe ff90 	bl	80041cc <HAL_I2C_SlaveTxCpltCallback>
}
 80052ac:	e004      	b.n	80052b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052b6:	615a      	str	r2, [r3, #20]
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	ffff0000 	.word	0xffff0000

080052c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d002      	beq.n	80052e8 <I2C_ITError+0x24>
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	2b40      	cmp	r3, #64	; 0x40
 80052e6:	d10a      	bne.n	80052fe <I2C_ITError+0x3a>
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b22      	cmp	r3, #34	; 0x22
 80052ec:	d107      	bne.n	80052fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005304:	2b28      	cmp	r3, #40	; 0x28
 8005306:	d107      	bne.n	8005318 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2228      	movs	r2, #40	; 0x28
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005316:	e015      	b.n	8005344 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005326:	d00a      	beq.n	800533e <I2C_ITError+0x7a>
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b60      	cmp	r3, #96	; 0x60
 800532c:	d007      	beq.n	800533e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005352:	d161      	bne.n	8005418 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005362:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005368:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800536c:	2b01      	cmp	r3, #1
 800536e:	d020      	beq.n	80053b2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	4a6a      	ldr	r2, [pc, #424]	; (8005520 <I2C_ITError+0x25c>)
 8005376:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537c:	4618      	mov	r0, r3
 800537e:	f7fd fe17 	bl	8002fb0 <HAL_DMA_Abort_IT>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8089 	beq.w	800549c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0201 	bic.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053ac:	4610      	mov	r0, r2
 80053ae:	4798      	blx	r3
 80053b0:	e074      	b.n	800549c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	4a5a      	ldr	r2, [pc, #360]	; (8005520 <I2C_ITError+0x25c>)
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd fdf6 	bl	8002fb0 <HAL_DMA_Abort_IT>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d068      	beq.n	800549c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d10b      	bne.n	80053f0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005412:	4610      	mov	r0, r2
 8005414:	4798      	blx	r3
 8005416:	e041      	b.n	800549c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b60      	cmp	r3, #96	; 0x60
 8005422:	d125      	bne.n	8005470 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d10b      	bne.n	8005458 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fe fef2 	bl	8004252 <HAL_I2C_AbortCpltCallback>
 800546e:	e015      	b.n	800549c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d10b      	bne.n	8005496 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fe fed2 	bl	8004240 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10e      	bne.n	80054ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054d8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d113      	bne.n	8005516 <I2C_ITError+0x252>
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b28      	cmp	r3, #40	; 0x28
 80054f2:	d110      	bne.n	8005516 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <I2C_ITError+0x260>)
 80054f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fe fe7a 	bl	800420a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	08005825 	.word	0x08005825
 8005524:	ffff0000 	.word	0xffff0000

08005528 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4603      	mov	r3, r0
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	460b      	mov	r3, r1
 800553c:	813b      	strh	r3, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	2200      	movs	r2, #0
 800555a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fa08 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005578:	d103      	bne.n	8005582 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e05f      	b.n	8005646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	492d      	ldr	r1, [pc, #180]	; (8005650 <I2C_RequestMemoryWrite+0x128>)
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fa40 	bl	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e04c      	b.n	8005646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c4:	6a39      	ldr	r1, [r7, #32]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 faaa 	bl	8005b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d107      	bne.n	80055ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e02b      	b.n	8005646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055f4:	893b      	ldrh	r3, [r7, #8]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	611a      	str	r2, [r3, #16]
 80055fe:	e021      	b.n	8005644 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005600:	893b      	ldrh	r3, [r7, #8]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	b29b      	uxth	r3, r3
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	6a39      	ldr	r1, [r7, #32]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fa84 	bl	8005b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00d      	beq.n	800563a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	2b04      	cmp	r3, #4
 8005624:	d107      	bne.n	8005636 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e005      	b.n	8005646 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800563a:	893b      	ldrh	r3, [r7, #8]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	00010002 	.word	0x00010002

08005654 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	4608      	mov	r0, r1
 800565e:	4611      	mov	r1, r2
 8005660:	461a      	mov	r2, r3
 8005662:	4603      	mov	r3, r0
 8005664:	817b      	strh	r3, [r7, #10]
 8005666:	460b      	mov	r3, r1
 8005668:	813b      	strh	r3, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800567c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	2200      	movs	r2, #0
 8005696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 f96a 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00d      	beq.n	80056c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b4:	d103      	bne.n	80056be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e0aa      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056c2:	897b      	ldrh	r3, [r7, #10]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	4952      	ldr	r1, [pc, #328]	; (8005820 <I2C_RequestMemoryRead+0x1cc>)
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f9a2 	bl	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e097      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005700:	6a39      	ldr	r1, [r7, #32]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fa0c 	bl	8005b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00d      	beq.n	800572a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b04      	cmp	r3, #4
 8005714:	d107      	bne.n	8005726 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005724:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e076      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d105      	bne.n	800573c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005730:	893b      	ldrh	r3, [r7, #8]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	611a      	str	r2, [r3, #16]
 800573a:	e021      	b.n	8005780 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800573c:	893b      	ldrh	r3, [r7, #8]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	b29b      	uxth	r3, r3
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	6a39      	ldr	r1, [r7, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f9e6 	bl	8005b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b04      	cmp	r3, #4
 8005760:	d107      	bne.n	8005772 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e050      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005776:	893b      	ldrh	r3, [r7, #8]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	6a39      	ldr	r1, [r7, #32]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f9cb 	bl	8005b20 <I2C_WaitOnTXEFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	2b04      	cmp	r3, #4
 8005796:	d107      	bne.n	80057a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e035      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f8d3 	bl	8005974 <I2C_WaitOnFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e2:	d103      	bne.n	80057ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e013      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057f0:	897b      	ldrh	r3, [r7, #10]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	4906      	ldr	r1, [pc, #24]	; (8005820 <I2C_RequestMemoryRead+0x1cc>)
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 f90b 	bl	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	00010002 	.word	0x00010002

08005824 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800583e:	4b4b      	ldr	r3, [pc, #300]	; (800596c <I2C_DMAAbort+0x148>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	08db      	lsrs	r3, r3, #3
 8005844:	4a4a      	ldr	r2, [pc, #296]	; (8005970 <I2C_DMAAbort+0x14c>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	0a1a      	lsrs	r2, r3, #8
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	00da      	lsls	r2, r3, #3
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f043 0220 	orr.w	r2, r3, #32
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800586a:	e00a      	b.n	8005882 <I2C_DMAAbort+0x5e>
    }
    count--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b01      	subs	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005880:	d0ea      	beq.n	8005858 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	2200      	movs	r2, #0
 8005890:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	2200      	movs	r2, #0
 80058a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	2200      	movs	r2, #0
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	2200      	movs	r2, #0
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0201 	bic.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b60      	cmp	r3, #96	; 0x60
 80058f2:	d10e      	bne.n	8005912 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2200      	movs	r2, #0
 8005908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800590a:	6978      	ldr	r0, [r7, #20]
 800590c:	f7fe fca1 	bl	8004252 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005910:	e027      	b.n	8005962 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005912:	7cfb      	ldrb	r3, [r7, #19]
 8005914:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005918:	2b28      	cmp	r3, #40	; 0x28
 800591a:	d117      	bne.n	800594c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800593a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2228      	movs	r2, #40	; 0x28
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800594a:	e007      	b.n	800595c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800595c:	6978      	ldr	r0, [r7, #20]
 800595e:	f7fe fc6f 	bl	8004240 <HAL_I2C_ErrorCallback>
}
 8005962:	bf00      	nop
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	2000001c 	.word	0x2000001c
 8005970:	14f8b589 	.word	0x14f8b589

08005974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005984:	e025      	b.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d021      	beq.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598e:	f7fd f999 	bl	8002cc4 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d302      	bcc.n	80059a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d116      	bne.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e023      	b.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10d      	bne.n	80059f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	43da      	mvns	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4013      	ands	r3, r2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	e00c      	b.n	8005a12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	43da      	mvns	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d0b6      	beq.n	8005986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a30:	e051      	b.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a40:	d123      	bne.n	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0204 	orr.w	r2, r3, #4
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e046      	b.n	8005b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d021      	beq.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a92:	f7fd f917 	bl	8002cc4 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d302      	bcc.n	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d116      	bne.n	8005ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f043 0220 	orr.w	r2, r3, #32
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e020      	b.n	8005b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d10c      	bne.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	43da      	mvns	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4013      	ands	r3, r2
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bf14      	ite	ne
 8005af2:	2301      	movne	r3, #1
 8005af4:	2300      	moveq	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	e00b      	b.n	8005b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	43da      	mvns	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4013      	ands	r3, r2
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf14      	ite	ne
 8005b0c:	2301      	movne	r3, #1
 8005b0e:	2300      	moveq	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d18d      	bne.n	8005a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b2c:	e02d      	b.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f900 	bl	8005d34 <I2C_IsAcknowledgeFailed>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e02d      	b.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d021      	beq.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b46:	f7fd f8bd 	bl	8002cc4 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d302      	bcc.n	8005b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d116      	bne.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e007      	b.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b94:	2b80      	cmp	r3, #128	; 0x80
 8005b96:	d1ca      	bne.n	8005b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bae:	e02d      	b.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f8bf 	bl	8005d34 <I2C_IsAcknowledgeFailed>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e02d      	b.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d021      	beq.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc8:	f7fd f87c 	bl	8002cc4 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d302      	bcc.n	8005bde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d116      	bne.n	8005c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f043 0220 	orr.w	r2, r3, #32
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e007      	b.n	8005c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d1ca      	bne.n	8005bb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c30:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	0a1a      	lsrs	r2, r3, #8
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d107      	bne.n	8005c62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f043 0220 	orr.w	r2, r3, #32
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e008      	b.n	8005c74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c70:	d0e9      	beq.n	8005c46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	2000001c 	.word	0x2000001c
 8005c84:	14f8b589 	.word	0x14f8b589

08005c88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c94:	e042      	b.n	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d119      	bne.n	8005cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0210 	mvn.w	r2, #16
 8005cac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e029      	b.n	8005d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd8:	f7fc fff4 	bl	8002cc4 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d116      	bne.n	8005d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e007      	b.n	8005d2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	d1b5      	bne.n	8005c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4a:	d11b      	bne.n	8005d84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	f043 0204 	orr.w	r2, r3, #4
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005da0:	d103      	bne.n	8005daa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005da8:	e007      	b.n	8005dba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005db2:	d102      	bne.n	8005dba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2208      	movs	r2, #8
 8005db8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e26c      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8087 	beq.w	8005ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005de4:	4b92      	ldr	r3, [pc, #584]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d00c      	beq.n	8005e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005df0:	4b8f      	ldr	r3, [pc, #572]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f003 030c 	and.w	r3, r3, #12
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d112      	bne.n	8005e22 <HAL_RCC_OscConfig+0x5e>
 8005dfc:	4b8c      	ldr	r3, [pc, #560]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e08:	d10b      	bne.n	8005e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e0a:	4b89      	ldr	r3, [pc, #548]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d06c      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x12c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d168      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e246      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCC_OscConfig+0x76>
 8005e2c:	4b80      	ldr	r3, [pc, #512]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a7f      	ldr	r2, [pc, #508]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e02e      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x98>
 8005e42:	4b7b      	ldr	r3, [pc, #492]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a7a      	ldr	r2, [pc, #488]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4b78      	ldr	r3, [pc, #480]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a77      	ldr	r2, [pc, #476]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0xbc>
 8005e66:	4b72      	ldr	r3, [pc, #456]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a71      	ldr	r2, [pc, #452]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b6f      	ldr	r3, [pc, #444]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6e      	ldr	r2, [pc, #440]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xd4>
 8005e80:	4b6b      	ldr	r3, [pc, #428]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a6a      	ldr	r2, [pc, #424]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b68      	ldr	r3, [pc, #416]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a67      	ldr	r2, [pc, #412]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fc ff10 	bl	8002cc4 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fc ff0c 	bl	8002cc4 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e1fa      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b5d      	ldr	r3, [pc, #372]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xe4>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fc fefc 	bl	8002cc4 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fc fef8 	bl	8002cc4 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1e6      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee2:	4b53      	ldr	r3, [pc, #332]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x10c>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005efe:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f0a:	4b49      	ldr	r3, [pc, #292]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d11c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x18c>
 8005f16:	4b46      	ldr	r3, [pc, #280]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f22:	4b43      	ldr	r3, [pc, #268]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_RCC_OscConfig+0x176>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e1ba      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4939      	ldr	r1, [pc, #228]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4e:	e03a      	b.n	8005fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f58:	4b36      	ldr	r3, [pc, #216]	; (8006034 <HAL_RCC_OscConfig+0x270>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5e:	f7fc feb1 	bl	8002cc4 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f66:	f7fc fead 	bl	8002cc4 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e19b      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f78:	4b2d      	ldr	r3, [pc, #180]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f84:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4927      	ldr	r1, [pc, #156]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
 8005f98:	e015      	b.n	8005fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9a:	4b26      	ldr	r3, [pc, #152]	; (8006034 <HAL_RCC_OscConfig+0x270>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa0:	f7fc fe90 	bl	8002cc4 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa8:	f7fc fe8c 	bl	8002cc4 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e17a      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d03a      	beq.n	8006048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d019      	beq.n	800600e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <HAL_RCC_OscConfig+0x274>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe0:	f7fc fe70 	bl	8002cc4 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fc fe6c 	bl	8002cc4 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e15a      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <HAL_RCC_OscConfig+0x26c>)
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006006:	2001      	movs	r0, #1
 8006008:	f000 fad8 	bl	80065bc <RCC_Delay>
 800600c:	e01c      	b.n	8006048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800600e:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <HAL_RCC_OscConfig+0x274>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006014:	f7fc fe56 	bl	8002cc4 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800601a:	e00f      	b.n	800603c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800601c:	f7fc fe52 	bl	8002cc4 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d908      	bls.n	800603c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e140      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
 8006034:	42420000 	.word	0x42420000
 8006038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800603c:	4b9e      	ldr	r3, [pc, #632]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e9      	bne.n	800601c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80a6 	beq.w	80061a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006056:	2300      	movs	r3, #0
 8006058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800605a:	4b97      	ldr	r3, [pc, #604]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10d      	bne.n	8006082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006066:	4b94      	ldr	r3, [pc, #592]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4a93      	ldr	r2, [pc, #588]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800606c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006070:	61d3      	str	r3, [r2, #28]
 8006072:	4b91      	ldr	r3, [pc, #580]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607a:	60bb      	str	r3, [r7, #8]
 800607c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006082:	4b8e      	ldr	r3, [pc, #568]	; (80062bc <HAL_RCC_OscConfig+0x4f8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d118      	bne.n	80060c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800608e:	4b8b      	ldr	r3, [pc, #556]	; (80062bc <HAL_RCC_OscConfig+0x4f8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a8a      	ldr	r2, [pc, #552]	; (80062bc <HAL_RCC_OscConfig+0x4f8>)
 8006094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800609a:	f7fc fe13 	bl	8002cc4 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060a2:	f7fc fe0f 	bl	8002cc4 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b64      	cmp	r3, #100	; 0x64
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e0fd      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b4:	4b81      	ldr	r3, [pc, #516]	; (80062bc <HAL_RCC_OscConfig+0x4f8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0f0      	beq.n	80060a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d106      	bne.n	80060d6 <HAL_RCC_OscConfig+0x312>
 80060c8:	4b7b      	ldr	r3, [pc, #492]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	4a7a      	ldr	r2, [pc, #488]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	6213      	str	r3, [r2, #32]
 80060d4:	e02d      	b.n	8006132 <HAL_RCC_OscConfig+0x36e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10c      	bne.n	80060f8 <HAL_RCC_OscConfig+0x334>
 80060de:	4b76      	ldr	r3, [pc, #472]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	4a75      	ldr	r2, [pc, #468]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	6213      	str	r3, [r2, #32]
 80060ea:	4b73      	ldr	r3, [pc, #460]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	4a72      	ldr	r2, [pc, #456]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80060f0:	f023 0304 	bic.w	r3, r3, #4
 80060f4:	6213      	str	r3, [r2, #32]
 80060f6:	e01c      	b.n	8006132 <HAL_RCC_OscConfig+0x36e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d10c      	bne.n	800611a <HAL_RCC_OscConfig+0x356>
 8006100:	4b6d      	ldr	r3, [pc, #436]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	4a6c      	ldr	r2, [pc, #432]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006106:	f043 0304 	orr.w	r3, r3, #4
 800610a:	6213      	str	r3, [r2, #32]
 800610c:	4b6a      	ldr	r3, [pc, #424]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	4a69      	ldr	r2, [pc, #420]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6213      	str	r3, [r2, #32]
 8006118:	e00b      	b.n	8006132 <HAL_RCC_OscConfig+0x36e>
 800611a:	4b67      	ldr	r3, [pc, #412]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	4a66      	ldr	r2, [pc, #408]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	6213      	str	r3, [r2, #32]
 8006126:	4b64      	ldr	r3, [pc, #400]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	4a63      	ldr	r2, [pc, #396]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d015      	beq.n	8006166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613a:	f7fc fdc3 	bl	8002cc4 <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006140:	e00a      	b.n	8006158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006142:	f7fc fdbf 	bl	8002cc4 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006150:	4293      	cmp	r3, r2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e0ab      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006158:	4b57      	ldr	r3, [pc, #348]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0ee      	beq.n	8006142 <HAL_RCC_OscConfig+0x37e>
 8006164:	e014      	b.n	8006190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006166:	f7fc fdad 	bl	8002cc4 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fc fda9 	bl	8002cc4 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	; 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e095      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006184:	4b4c      	ldr	r3, [pc, #304]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1ee      	bne.n	800616e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4b48      	ldr	r3, [pc, #288]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	4a47      	ldr	r2, [pc, #284]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8081 	beq.w	80062ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061ac:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d061      	beq.n	800627c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d146      	bne.n	800624e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c0:	4b3f      	ldr	r3, [pc, #252]	; (80062c0 <HAL_RCC_OscConfig+0x4fc>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c6:	f7fc fd7d 	bl	8002cc4 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ce:	f7fc fd79 	bl	8002cc4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e067      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061e0:	4b35      	ldr	r3, [pc, #212]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d108      	bne.n	8006208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061f6:	4b30      	ldr	r3, [pc, #192]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	492d      	ldr	r1, [pc, #180]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006204:	4313      	orrs	r3, r2
 8006206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006208:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a19      	ldr	r1, [r3, #32]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	430b      	orrs	r3, r1
 800621a:	4927      	ldr	r1, [pc, #156]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800621c:	4313      	orrs	r3, r2
 800621e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <HAL_RCC_OscConfig+0x4fc>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006226:	f7fc fd4d 	bl	8002cc4 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800622e:	f7fc fd49 	bl	8002cc4 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e037      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006240:	4b1d      	ldr	r3, [pc, #116]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x46a>
 800624c:	e02f      	b.n	80062ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624e:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <HAL_RCC_OscConfig+0x4fc>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fc fd36 	bl	8002cc4 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800625c:	f7fc fd32 	bl	8002cc4 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e020      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x498>
 800627a:	e018      	b.n	80062ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e013      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006288:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <HAL_RCC_OscConfig+0x4f4>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	429a      	cmp	r2, r3
 800629a:	d106      	bne.n	80062aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d001      	beq.n	80062ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000
 80062bc:	40007000 	.word	0x40007000
 80062c0:	42420060 	.word	0x42420060

080062c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0d0      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062d8:	4b6a      	ldr	r3, [pc, #424]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d910      	bls.n	8006308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e6:	4b67      	ldr	r3, [pc, #412]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f023 0207 	bic.w	r2, r3, #7
 80062ee:	4965      	ldr	r1, [pc, #404]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f6:	4b63      	ldr	r3, [pc, #396]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d001      	beq.n	8006308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e0b8      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d020      	beq.n	8006356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006320:	4b59      	ldr	r3, [pc, #356]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a58      	ldr	r2, [pc, #352]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800632a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006338:	4b53      	ldr	r3, [pc, #332]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4a52      	ldr	r2, [pc, #328]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800633e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006344:	4b50      	ldr	r3, [pc, #320]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	494d      	ldr	r1, [pc, #308]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d040      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d107      	bne.n	800637a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	4b47      	ldr	r3, [pc, #284]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d115      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e07f      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d107      	bne.n	8006392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006382:	4b41      	ldr	r3, [pc, #260]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e073      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006392:	4b3d      	ldr	r3, [pc, #244]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e06b      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063a2:	4b39      	ldr	r3, [pc, #228]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f023 0203 	bic.w	r2, r3, #3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4936      	ldr	r1, [pc, #216]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b4:	f7fc fc86 	bl	8002cc4 <HAL_GetTick>
 80063b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ba:	e00a      	b.n	80063d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063bc:	f7fc fc82 	bl	8002cc4 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e053      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d2:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f003 020c 	and.w	r2, r3, #12
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d1eb      	bne.n	80063bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063e4:	4b27      	ldr	r3, [pc, #156]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d210      	bcs.n	8006414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 0207 	bic.w	r2, r3, #7
 80063fa:	4922      	ldr	r1, [pc, #136]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	4313      	orrs	r3, r2
 8006400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006402:	4b20      	ldr	r3, [pc, #128]	; (8006484 <HAL_RCC_ClockConfig+0x1c0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d001      	beq.n	8006414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e032      	b.n	800647a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006420:	4b19      	ldr	r3, [pc, #100]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4916      	ldr	r1, [pc, #88]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800642e:	4313      	orrs	r3, r2
 8006430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	490e      	ldr	r1, [pc, #56]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006452:	f000 f821 	bl	8006498 <HAL_RCC_GetSysClockFreq>
 8006456:	4602      	mov	r2, r0
 8006458:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <HAL_RCC_ClockConfig+0x1c4>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	490a      	ldr	r1, [pc, #40]	; (800648c <HAL_RCC_ClockConfig+0x1c8>)
 8006464:	5ccb      	ldrb	r3, [r1, r3]
 8006466:	fa22 f303 	lsr.w	r3, r2, r3
 800646a:	4a09      	ldr	r2, [pc, #36]	; (8006490 <HAL_RCC_ClockConfig+0x1cc>)
 800646c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800646e:	4b09      	ldr	r3, [pc, #36]	; (8006494 <HAL_RCC_ClockConfig+0x1d0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fc fbe4 	bl	8002c40 <HAL_InitTick>

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40022000 	.word	0x40022000
 8006488:	40021000 	.word	0x40021000
 800648c:	0800b610 	.word	0x0800b610
 8006490:	2000001c 	.word	0x2000001c
 8006494:	20000020 	.word	0x20000020

08006498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006498:	b490      	push	{r4, r7}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800649e:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80064a0:	1d3c      	adds	r4, r7, #4
 80064a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80064a8:	f240 2301 	movw	r3, #513	; 0x201
 80064ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f003 030c 	and.w	r3, r3, #12
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x40>
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d003      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x46>
 80064d6:	e02d      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064da:	623b      	str	r3, [r7, #32]
      break;
 80064dc:	e02d      	b.n	800653a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	0c9b      	lsrs	r3, r3, #18
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064ea:	4413      	add	r3, r2
 80064ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064fc:	4b13      	ldr	r3, [pc, #76]	; (800654c <HAL_RCC_GetSysClockFreq+0xb4>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	0c5b      	lsrs	r3, r3, #17
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800650a:	4413      	add	r3, r2
 800650c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006510:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	4a0e      	ldr	r2, [pc, #56]	; (8006550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006516:	fb02 f203 	mul.w	r2, r2, r3
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
 8006522:	e004      	b.n	800652e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	4a0b      	ldr	r2, [pc, #44]	; (8006554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006528:	fb02 f303 	mul.w	r3, r2, r3
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	623b      	str	r3, [r7, #32]
      break;
 8006532:	e002      	b.n	800653a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006536:	623b      	str	r3, [r7, #32]
      break;
 8006538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800653a:	6a3b      	ldr	r3, [r7, #32]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3728      	adds	r7, #40	; 0x28
 8006540:	46bd      	mov	sp, r7
 8006542:	bc90      	pop	{r4, r7}
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	0800b600 	.word	0x0800b600
 800654c:	40021000 	.word	0x40021000
 8006550:	007a1200 	.word	0x007a1200
 8006554:	003d0900 	.word	0x003d0900

08006558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800655c:	4b02      	ldr	r3, [pc, #8]	; (8006568 <HAL_RCC_GetHCLKFreq+0x10>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr
 8006568:	2000001c 	.word	0x2000001c

0800656c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006570:	f7ff fff2 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4903      	ldr	r1, [pc, #12]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006588:	4618      	mov	r0, r3
 800658a:	bd80      	pop	{r7, pc}
 800658c:	40021000 	.word	0x40021000
 8006590:	0800b620 	.word	0x0800b620

08006594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006598:	f7ff ffde 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	0adb      	lsrs	r3, r3, #11
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	4903      	ldr	r1, [pc, #12]	; (80065b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065aa:	5ccb      	ldrb	r3, [r1, r3]
 80065ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40021000 	.word	0x40021000
 80065b8:	0800b620 	.word	0x0800b620

080065bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065c4:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <RCC_Delay+0x34>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <RCC_Delay+0x38>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	0a5b      	lsrs	r3, r3, #9
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065d8:	bf00      	nop
  }
  while (Delay --);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1e5a      	subs	r2, r3, #1
 80065de:	60fa      	str	r2, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f9      	bne.n	80065d8 <RCC_Delay+0x1c>
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	2000001c 	.word	0x2000001c
 80065f4:	10624dd3 	.word	0x10624dd3

080065f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e041      	b.n	800668e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb fee6 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f000 fb0e 	bl	8006c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d001      	beq.n	80066b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e032      	b.n	8006716 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a18      	ldr	r2, [pc, #96]	; (8006720 <HAL_TIM_Base_Start+0x88>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_TIM_Base_Start+0x48>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ca:	d009      	beq.n	80066e0 <HAL_TIM_Base_Start+0x48>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a14      	ldr	r2, [pc, #80]	; (8006724 <HAL_TIM_Base_Start+0x8c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIM_Base_Start+0x48>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a13      	ldr	r2, [pc, #76]	; (8006728 <HAL_TIM_Base_Start+0x90>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d111      	bne.n	8006704 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b06      	cmp	r3, #6
 80066f0:	d010      	beq.n	8006714 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0201 	orr.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006702:	e007      	b.n	8006714 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800

0800672c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a1a      	ldr	r2, [r3, #32]
 800673a:	f241 1311 	movw	r3, #4369	; 0x1111
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10f      	bne.n	8006764 <HAL_TIM_Base_Stop+0x38>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	f240 4344 	movw	r3, #1092	; 0x444
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d107      	bne.n	8006764 <HAL_TIM_Base_Stop+0x38>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	d001      	beq.n	8006790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e03a      	b.n	8006806 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a18      	ldr	r2, [pc, #96]	; (8006810 <HAL_TIM_Base_Start_IT+0x98>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00e      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x58>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d009      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x58>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a14      	ldr	r2, [pc, #80]	; (8006814 <HAL_TIM_Base_Start_IT+0x9c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d004      	beq.n	80067d0 <HAL_TIM_Base_Start_IT+0x58>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a13      	ldr	r2, [pc, #76]	; (8006818 <HAL_TIM_Base_Start_IT+0xa0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d111      	bne.n	80067f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b06      	cmp	r3, #6
 80067e0:	d010      	beq.n	8006804 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0201 	orr.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	e007      	b.n	8006804 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800

0800681c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1a      	ldr	r2, [r3, #32]
 800683a:	f241 1311 	movw	r3, #4369	; 0x1111
 800683e:	4013      	ands	r3, r2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10f      	bne.n	8006864 <HAL_TIM_Base_Stop_IT+0x48>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6a1a      	ldr	r2, [r3, #32]
 800684a:	f240 4344 	movw	r3, #1092	; 0x444
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d107      	bne.n	8006864 <HAL_TIM_Base_Stop_IT+0x48>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d122      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d11b      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0202 	mvn.w	r2, #2
 80068a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9b1 	bl	8006c22 <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9a4 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9b3 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0204 	mvn.w	r2, #4
 80068f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f987 	bl	8006c22 <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f97a 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f989 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b08      	cmp	r3, #8
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b08      	cmp	r3, #8
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0208 	mvn.w	r2, #8
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2204      	movs	r2, #4
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f95d 	bl	8006c22 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f950 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f95f 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b10      	cmp	r3, #16
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b10      	cmp	r3, #16
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0210 	mvn.w	r2, #16
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2208      	movs	r2, #8
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f933 	bl	8006c22 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f926 	bl	8006c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f935 	bl	8006c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d10e      	bne.n	80069fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d107      	bne.n	80069fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0201 	mvn.w	r2, #1
 80069f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fb f830 	bl	8001a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d10e      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d107      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa77 	bl	8006f16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d107      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8f9 	bl	8006c46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d10e      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d107      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0220 	mvn.w	r2, #32
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa42 	bl	8006f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_TIM_ConfigClockSource+0x18>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e0b3      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x180>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ac6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad8:	d03e      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0xd0>
 8006ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ade:	f200 8087 	bhi.w	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
 8006ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae6:	f000 8085 	beq.w	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aee:	d87f      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
 8006af0:	2b70      	cmp	r3, #112	; 0x70
 8006af2:	d01a      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0xa2>
 8006af4:	2b70      	cmp	r3, #112	; 0x70
 8006af6:	d87b      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
 8006af8:	2b60      	cmp	r3, #96	; 0x60
 8006afa:	d050      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x116>
 8006afc:	2b60      	cmp	r3, #96	; 0x60
 8006afe:	d877      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
 8006b00:	2b50      	cmp	r3, #80	; 0x50
 8006b02:	d03c      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0xf6>
 8006b04:	2b50      	cmp	r3, #80	; 0x50
 8006b06:	d873      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d058      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x136>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d86f      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
 8006b10:	2b30      	cmp	r3, #48	; 0x30
 8006b12:	d064      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x156>
 8006b14:	2b30      	cmp	r3, #48	; 0x30
 8006b16:	d86b      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d060      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x156>
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d867      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d05c      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x156>
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d05a      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006b28:	e062      	b.n	8006bf0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f000 f966 	bl	8006e0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	609a      	str	r2, [r3, #8]
      break;
 8006b56:	e04e      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	6899      	ldr	r1, [r3, #8]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f000 f94f 	bl	8006e0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b7a:	609a      	str	r2, [r3, #8]
      break;
 8006b7c:	e03b      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6859      	ldr	r1, [r3, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 f8c6 	bl	8006d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2150      	movs	r1, #80	; 0x50
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 f91d 	bl	8006dd6 <TIM_ITRx_SetConfig>
      break;
 8006b9c:	e02b      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f000 f8e4 	bl	8006d78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2160      	movs	r1, #96	; 0x60
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f90d 	bl	8006dd6 <TIM_ITRx_SetConfig>
      break;
 8006bbc:	e01b      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	6859      	ldr	r1, [r3, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f000 f8a6 	bl	8006d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2140      	movs	r1, #64	; 0x40
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 f8fd 	bl	8006dd6 <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e00b      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f000 f8f4 	bl	8006dd6 <TIM_ITRx_SetConfig>
        break;
 8006bee:	e002      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e000      	b.n	8006bf6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006bf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr

08006c46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a29      	ldr	r2, [pc, #164]	; (8006d10 <TIM_Base_SetConfig+0xb8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_Base_SetConfig+0x30>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c76:	d007      	beq.n	8006c88 <TIM_Base_SetConfig+0x30>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a26      	ldr	r2, [pc, #152]	; (8006d14 <TIM_Base_SetConfig+0xbc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_Base_SetConfig+0x30>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a25      	ldr	r2, [pc, #148]	; (8006d18 <TIM_Base_SetConfig+0xc0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d108      	bne.n	8006c9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a1c      	ldr	r2, [pc, #112]	; (8006d10 <TIM_Base_SetConfig+0xb8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <TIM_Base_SetConfig+0x62>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d007      	beq.n	8006cba <TIM_Base_SetConfig+0x62>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <TIM_Base_SetConfig+0xbc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_Base_SetConfig+0x62>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <TIM_Base_SetConfig+0xc0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d108      	bne.n	8006ccc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a07      	ldr	r2, [pc, #28]	; (8006d10 <TIM_Base_SetConfig+0xb8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d103      	bne.n	8006d00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	615a      	str	r2, [r3, #20]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr
 8006d10:	40012c00 	.word	0x40012c00
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800

08006d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f023 0201 	bic.w	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 030a 	bic.w	r3, r3, #10
 8006d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	621a      	str	r2, [r3, #32]
}
 8006d6e:	bf00      	nop
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	f023 0210 	bic.w	r2, r3, #16
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006da2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	031b      	lsls	r3, r3, #12
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006db4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	621a      	str	r2, [r3, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f043 0307 	orr.w	r3, r3, #7
 8006df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	609a      	str	r2, [r3, #8]
}
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr

08006e0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b087      	sub	sp, #28
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	021a      	lsls	r2, r3, #8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	609a      	str	r2, [r3, #8]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e046      	b.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a16      	ldr	r2, [pc, #88]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eac:	d009      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a12      	ldr	r2, [pc, #72]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a10      	ldr	r2, [pc, #64]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10c      	bne.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr
 8006ef8:	40012c00 	.word	0x40012c00
 8006efc:	40000400 	.word	0x40000400
 8006f00:	40000800 	.word	0x40000800

08006f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr

08006f16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e03f      	b.n	8006fba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fb fd5c 	bl	8002a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	; 0x24
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fc13 	bl	8007798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695a      	ldr	r2, [r3, #20]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b08a      	sub	sp, #40	; 0x28
 8006fc6:	af02      	add	r7, sp, #8
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d17c      	bne.n	80070dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <HAL_UART_Transmit+0x2c>
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e075      	b.n	80070de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_UART_Transmit+0x3e>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e06e      	b.n	80070de <HAL_UART_Transmit+0x11c>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2221      	movs	r2, #33	; 0x21
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007016:	f7fb fe55 	bl	8002cc4 <HAL_GetTick>
 800701a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007030:	d108      	bne.n	8007044 <HAL_UART_Transmit+0x82>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d104      	bne.n	8007044 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	e003      	b.n	800704c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007048:	2300      	movs	r3, #0
 800704a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007054:	e02a      	b.n	80070ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2200      	movs	r2, #0
 800705e:	2180      	movs	r1, #128	; 0x80
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f9ff 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e036      	b.n	80070de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10b      	bne.n	800708e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	3302      	adds	r3, #2
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	e007      	b.n	800709e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	3301      	adds	r3, #1
 800709c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1cf      	bne.n	8007056 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2200      	movs	r2, #0
 80070be:	2140      	movs	r1, #64	; 0x40
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f9cf 	bl	8007464 <UART_WaitOnFlagUntilTimeout>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e006      	b.n	80070de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	e000      	b.n	80070de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070dc:	2302      	movs	r3, #2
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3720      	adds	r7, #32
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	; 0x28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007108:	2300      	movs	r3, #0
 800710a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <HAL_UART_IRQHandler+0x52>
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa87 	bl	8007646 <UART_Receive_IT>
      return;
 8007138:	e17b      	b.n	8007432 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 80b1 	beq.w	80072a4 <HAL_UART_IRQHandler+0x1bc>
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <HAL_UART_IRQHandler+0x70>
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80a6 	beq.w	80072a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <HAL_UART_IRQHandler+0x90>
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	f043 0201 	orr.w	r2, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	f003 0304 	and.w	r3, r3, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_UART_IRQHandler+0xb0>
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d005      	beq.n	8007198 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	f043 0202 	orr.w	r2, r3, #2
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <HAL_UART_IRQHandler+0xd0>
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	f043 0204 	orr.w	r2, r3, #4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00f      	beq.n	80071e2 <HAL_UART_IRQHandler+0xfa>
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <HAL_UART_IRQHandler+0xee>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f043 0208 	orr.w	r2, r3, #8
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 811e 	beq.w	8007428 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <HAL_UART_IRQHandler+0x11e>
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa20 	bl	8007646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	bf14      	ite	ne
 8007214:	2301      	movne	r3, #1
 8007216:	2300      	moveq	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <HAL_UART_IRQHandler+0x146>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d031      	beq.n	8007292 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f962 	bl	80074f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d023      	beq.n	800728a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	695a      	ldr	r2, [r3, #20]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007250:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	2b00      	cmp	r3, #0
 8007258:	d013      	beq.n	8007282 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	4a76      	ldr	r2, [pc, #472]	; (8007438 <HAL_UART_IRQHandler+0x350>)
 8007260:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	4618      	mov	r0, r3
 8007268:	f7fb fea2 	bl	8002fb0 <HAL_DMA_Abort_IT>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d016      	beq.n	80072a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800727c:	4610      	mov	r0, r2
 800727e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	e00e      	b.n	80072a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f8da 	bl	800743c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	e00a      	b.n	80072a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8d6 	bl	800743c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	e006      	b.n	80072a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8d2 	bl	800743c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800729e:	e0c3      	b.n	8007428 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a0:	bf00      	nop
    return;
 80072a2:	e0c1      	b.n	8007428 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	f040 80a1 	bne.w	80073f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 809b 	beq.w	80073f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 8095 	beq.w	80073f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d04e      	beq.n	8007388 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80072f4:	8a3b      	ldrh	r3, [r7, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 8098 	beq.w	800742c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007300:	8a3a      	ldrh	r2, [r7, #16]
 8007302:	429a      	cmp	r2, r3
 8007304:	f080 8092 	bcs.w	800742c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8a3a      	ldrh	r2, [r7, #16]
 800730c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	2b20      	cmp	r3, #32
 8007316:	d02b      	beq.n	8007370 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007326:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695a      	ldr	r2, [r3, #20]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007346:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0210 	bic.w	r2, r2, #16
 8007364:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	4618      	mov	r0, r3
 800736c:	f7fb fde5 	bl	8002f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007378:	b29b      	uxth	r3, r3
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	b29b      	uxth	r3, r3
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f864 	bl	800744e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007386:	e051      	b.n	800742c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007390:	b29b      	uxth	r3, r3
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d047      	beq.n	8007430 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80073a0:	8a7b      	ldrh	r3, [r7, #18]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d044      	beq.n	8007430 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695a      	ldr	r2, [r3, #20]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0201 	bic.w	r2, r2, #1
 80073c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0210 	bic.w	r2, r2, #16
 80073e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073e4:	8a7b      	ldrh	r3, [r7, #18]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f830 	bl	800744e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80073ee:	e01f      	b.n	8007430 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <HAL_UART_IRQHandler+0x324>
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f8b7 	bl	8007578 <UART_Transmit_IT>
    return;
 800740a:	e012      	b.n	8007432 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00d      	beq.n	8007432 <HAL_UART_IRQHandler+0x34a>
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8f8 	bl	8007616 <UART_EndTransmit_IT>
    return;
 8007426:	e004      	b.n	8007432 <HAL_UART_IRQHandler+0x34a>
    return;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <HAL_UART_IRQHandler+0x34a>
      return;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <HAL_UART_IRQHandler+0x34a>
      return;
 8007430:	bf00      	nop
  }
}
 8007432:	3728      	adds	r7, #40	; 0x28
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	08007551 	.word	0x08007551

0800743c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr

0800744e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr

08007464 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	4613      	mov	r3, r2
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007474:	e02c      	b.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d028      	beq.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <UART_WaitOnFlagUntilTimeout+0x30>
 8007484:	f7fb fc1e 	bl	8002cc4 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	429a      	cmp	r2, r3
 8007492:	d21d      	bcs.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e00f      	b.n	80074f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4013      	ands	r3, r2
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	429a      	cmp	r2, r3
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d0c3      	beq.n	8007476 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800750e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0201 	bic.w	r2, r2, #1
 800751e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	2b01      	cmp	r3, #1
 8007526:	d107      	bne.n	8007538 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0210 	bic.w	r2, r2, #16
 8007536:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr

08007550 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff ff66 	bl	800743c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b21      	cmp	r3, #33	; 0x21
 800758a:	d13e      	bne.n	800760a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007594:	d114      	bne.n	80075c0 <UART_Transmit_IT+0x48>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d110      	bne.n	80075c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	621a      	str	r2, [r3, #32]
 80075be:	e008      	b.n	80075d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	1c59      	adds	r1, r3, #1
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6211      	str	r1, [r2, #32]
 80075ca:	781a      	ldrb	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29b      	uxth	r3, r3
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4619      	mov	r1, r3
 80075e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10f      	bne.n	8007606 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007604:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	e000      	b.n	800760c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800760a:	2302      	movs	r3, #2
  }
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr

08007616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800762c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7f9 ff58 	bl	80014ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b22      	cmp	r3, #34	; 0x22
 8007658:	f040 8099 	bne.w	800778e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007664:	d117      	bne.n	8007696 <UART_Receive_IT+0x50>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d113      	bne.n	8007696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007684:	b29a      	uxth	r2, r3
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768e:	1c9a      	adds	r2, r3, #2
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	629a      	str	r2, [r3, #40]	; 0x28
 8007694:	e026      	b.n	80076e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800769c:	2300      	movs	r3, #0
 800769e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a8:	d007      	beq.n	80076ba <UART_Receive_IT+0x74>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <UART_Receive_IT+0x82>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	e008      	b.n	80076da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4619      	mov	r1, r3
 80076f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d148      	bne.n	800778a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0220 	bic.w	r2, r2, #32
 8007706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695a      	ldr	r2, [r3, #20]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0201 	bic.w	r2, r2, #1
 8007726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	2b01      	cmp	r3, #1
 8007736:	d123      	bne.n	8007780 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0210 	bic.w	r2, r2, #16
 800774c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b10      	cmp	r3, #16
 800775a:	d10a      	bne.n	8007772 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff fe68 	bl	800744e <HAL_UARTEx_RxEventCallback>
 800777e:	e002      	b.n	8007786 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7f9 febc 	bl	80014fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	e002      	b.n	8007790 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	e000      	b.n	8007790 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800778e:	2302      	movs	r3, #2
  }
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80077d2:	f023 030c 	bic.w	r3, r3, #12
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	68b9      	ldr	r1, [r7, #8]
 80077dc:	430b      	orrs	r3, r1
 80077de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2c      	ldr	r2, [pc, #176]	; (80078ac <UART_SetConfig+0x114>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d103      	bne.n	8007808 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007800:	f7fe fec8 	bl	8006594 <HAL_RCC_GetPCLK2Freq>
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	e002      	b.n	800780e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007808:	f7fe feb0 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800780c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	009a      	lsls	r2, r3, #2
 8007818:	441a      	add	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	4a22      	ldr	r2, [pc, #136]	; (80078b0 <UART_SetConfig+0x118>)
 8007826:	fba2 2303 	umull	r2, r3, r2, r3
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	0119      	lsls	r1, r3, #4
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009a      	lsls	r2, r3, #2
 8007838:	441a      	add	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	fbb2 f2f3 	udiv	r2, r2, r3
 8007844:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <UART_SetConfig+0x118>)
 8007846:	fba3 0302 	umull	r0, r3, r3, r2
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	2064      	movs	r0, #100	; 0x64
 800784e:	fb00 f303 	mul.w	r3, r0, r3
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	3332      	adds	r3, #50	; 0x32
 8007858:	4a15      	ldr	r2, [pc, #84]	; (80078b0 <UART_SetConfig+0x118>)
 800785a:	fba2 2303 	umull	r2, r3, r2, r3
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007864:	4419      	add	r1, r3
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009a      	lsls	r2, r3, #2
 8007870:	441a      	add	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	fbb2 f2f3 	udiv	r2, r2, r3
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <UART_SetConfig+0x118>)
 800787e:	fba3 0302 	umull	r0, r3, r3, r2
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	2064      	movs	r0, #100	; 0x64
 8007886:	fb00 f303 	mul.w	r3, r0, r3
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	011b      	lsls	r3, r3, #4
 800788e:	3332      	adds	r3, #50	; 0x32
 8007890:	4a07      	ldr	r2, [pc, #28]	; (80078b0 <UART_SetConfig+0x118>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	f003 020f 	and.w	r2, r3, #15
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	440a      	add	r2, r1
 80078a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	40013800 	.word	0x40013800
 80078b0:	51eb851f 	.word	0x51eb851f

080078b4 <atof>:
 80078b4:	2100      	movs	r1, #0
 80078b6:	f000 be6f 	b.w	8008598 <strtod>
	...

080078bc <gcvt>:
 80078bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078be:	461c      	mov	r4, r3
 80078c0:	4615      	mov	r5, r2
 80078c2:	2300      	movs	r3, #0
 80078c4:	2200      	movs	r2, #0
 80078c6:	b085      	sub	sp, #20
 80078c8:	4606      	mov	r6, r0
 80078ca:	460f      	mov	r7, r1
 80078cc:	f7f9 f876 	bl	80009bc <__aeabi_dcmplt>
 80078d0:	4623      	mov	r3, r4
 80078d2:	b118      	cbz	r0, 80078dc <gcvt+0x20>
 80078d4:	222d      	movs	r2, #45	; 0x2d
 80078d6:	3d01      	subs	r5, #1
 80078d8:	f803 2b01 	strb.w	r2, [r3], #1
 80078dc:	2267      	movs	r2, #103	; 0x67
 80078de:	2100      	movs	r1, #0
 80078e0:	e9cd 5300 	strd	r5, r3, [sp]
 80078e4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80078e8:	4905      	ldr	r1, [pc, #20]	; (8007900 <gcvt+0x44>)
 80078ea:	4632      	mov	r2, r6
 80078ec:	463b      	mov	r3, r7
 80078ee:	6808      	ldr	r0, [r1, #0]
 80078f0:	f000 fed6 	bl	80086a0 <_gcvt>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	bf14      	ite	ne
 80078f8:	4620      	movne	r0, r4
 80078fa:	2000      	moveq	r0, #0
 80078fc:	b005      	add	sp, #20
 80078fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007900:	20000028 	.word	0x20000028

08007904 <__errno>:
 8007904:	4b01      	ldr	r3, [pc, #4]	; (800790c <__errno+0x8>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	20000028 	.word	0x20000028

08007910 <__libc_init_array>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	2600      	movs	r6, #0
 8007914:	4d0c      	ldr	r5, [pc, #48]	; (8007948 <__libc_init_array+0x38>)
 8007916:	4c0d      	ldr	r4, [pc, #52]	; (800794c <__libc_init_array+0x3c>)
 8007918:	1b64      	subs	r4, r4, r5
 800791a:	10a4      	asrs	r4, r4, #2
 800791c:	42a6      	cmp	r6, r4
 800791e:	d109      	bne.n	8007934 <__libc_init_array+0x24>
 8007920:	f003 fe5c 	bl	800b5dc <_init>
 8007924:	2600      	movs	r6, #0
 8007926:	4d0a      	ldr	r5, [pc, #40]	; (8007950 <__libc_init_array+0x40>)
 8007928:	4c0a      	ldr	r4, [pc, #40]	; (8007954 <__libc_init_array+0x44>)
 800792a:	1b64      	subs	r4, r4, r5
 800792c:	10a4      	asrs	r4, r4, #2
 800792e:	42a6      	cmp	r6, r4
 8007930:	d105      	bne.n	800793e <__libc_init_array+0x2e>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	f855 3b04 	ldr.w	r3, [r5], #4
 8007938:	4798      	blx	r3
 800793a:	3601      	adds	r6, #1
 800793c:	e7ee      	b.n	800791c <__libc_init_array+0xc>
 800793e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007942:	4798      	blx	r3
 8007944:	3601      	adds	r6, #1
 8007946:	e7f2      	b.n	800792e <__libc_init_array+0x1e>
 8007948:	0800bacc 	.word	0x0800bacc
 800794c:	0800bacc 	.word	0x0800bacc
 8007950:	0800bacc 	.word	0x0800bacc
 8007954:	0800bad0 	.word	0x0800bad0

08007958 <memset>:
 8007958:	4603      	mov	r3, r0
 800795a:	4402      	add	r2, r0
 800795c:	4293      	cmp	r3, r2
 800795e:	d100      	bne.n	8007962 <memset+0xa>
 8007960:	4770      	bx	lr
 8007962:	f803 1b01 	strb.w	r1, [r3], #1
 8007966:	e7f9      	b.n	800795c <memset+0x4>

08007968 <sulp>:
 8007968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800796c:	460f      	mov	r7, r1
 800796e:	4690      	mov	r8, r2
 8007970:	f001 fe4c 	bl	800960c <__ulp>
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	f1b8 0f00 	cmp.w	r8, #0
 800797c:	d011      	beq.n	80079a2 <sulp+0x3a>
 800797e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007982:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007986:	2b00      	cmp	r3, #0
 8007988:	dd0b      	ble.n	80079a2 <sulp+0x3a>
 800798a:	2400      	movs	r4, #0
 800798c:	051b      	lsls	r3, r3, #20
 800798e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007992:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007996:	4622      	mov	r2, r4
 8007998:	462b      	mov	r3, r5
 800799a:	f7f8 fd9d 	bl	80004d8 <__aeabi_dmul>
 800799e:	4604      	mov	r4, r0
 80079a0:	460d      	mov	r5, r1
 80079a2:	4620      	mov	r0, r4
 80079a4:	4629      	mov	r1, r5
 80079a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079aa:	0000      	movs	r0, r0
 80079ac:	0000      	movs	r0, r0
	...

080079b0 <_strtod_l>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	469b      	mov	fp, r3
 80079b6:	2300      	movs	r3, #0
 80079b8:	b0a1      	sub	sp, #132	; 0x84
 80079ba:	931c      	str	r3, [sp, #112]	; 0x70
 80079bc:	4ba1      	ldr	r3, [pc, #644]	; (8007c44 <_strtod_l+0x294>)
 80079be:	4682      	mov	sl, r0
 80079c0:	681f      	ldr	r7, [r3, #0]
 80079c2:	460e      	mov	r6, r1
 80079c4:	4638      	mov	r0, r7
 80079c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80079c8:	f7f8 fbc2 	bl	8000150 <strlen>
 80079cc:	f04f 0800 	mov.w	r8, #0
 80079d0:	4604      	mov	r4, r0
 80079d2:	f04f 0900 	mov.w	r9, #0
 80079d6:	961b      	str	r6, [sp, #108]	; 0x6c
 80079d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	2a2b      	cmp	r2, #43	; 0x2b
 80079de:	d04c      	beq.n	8007a7a <_strtod_l+0xca>
 80079e0:	d83a      	bhi.n	8007a58 <_strtod_l+0xa8>
 80079e2:	2a0d      	cmp	r2, #13
 80079e4:	d833      	bhi.n	8007a4e <_strtod_l+0x9e>
 80079e6:	2a08      	cmp	r2, #8
 80079e8:	d833      	bhi.n	8007a52 <_strtod_l+0xa2>
 80079ea:	2a00      	cmp	r2, #0
 80079ec:	d03d      	beq.n	8007a6a <_strtod_l+0xba>
 80079ee:	2300      	movs	r3, #0
 80079f0:	930c      	str	r3, [sp, #48]	; 0x30
 80079f2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80079f4:	782b      	ldrb	r3, [r5, #0]
 80079f6:	2b30      	cmp	r3, #48	; 0x30
 80079f8:	f040 80af 	bne.w	8007b5a <_strtod_l+0x1aa>
 80079fc:	786b      	ldrb	r3, [r5, #1]
 80079fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a02:	2b58      	cmp	r3, #88	; 0x58
 8007a04:	d16c      	bne.n	8007ae0 <_strtod_l+0x130>
 8007a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a08:	4650      	mov	r0, sl
 8007a0a:	9301      	str	r3, [sp, #4]
 8007a0c:	ab1c      	add	r3, sp, #112	; 0x70
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4a8d      	ldr	r2, [pc, #564]	; (8007c48 <_strtod_l+0x298>)
 8007a12:	f8cd b008 	str.w	fp, [sp, #8]
 8007a16:	ab1d      	add	r3, sp, #116	; 0x74
 8007a18:	a91b      	add	r1, sp, #108	; 0x6c
 8007a1a:	f000 ff69 	bl	80088f0 <__gethex>
 8007a1e:	f010 0607 	ands.w	r6, r0, #7
 8007a22:	4604      	mov	r4, r0
 8007a24:	d005      	beq.n	8007a32 <_strtod_l+0x82>
 8007a26:	2e06      	cmp	r6, #6
 8007a28:	d129      	bne.n	8007a7e <_strtod_l+0xce>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	951b      	str	r5, [sp, #108]	; 0x6c
 8007a30:	930c      	str	r3, [sp, #48]	; 0x30
 8007a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f040 8596 	bne.w	8008566 <_strtod_l+0xbb6>
 8007a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a3c:	b1d3      	cbz	r3, 8007a74 <_strtod_l+0xc4>
 8007a3e:	4642      	mov	r2, r8
 8007a40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a44:	4610      	mov	r0, r2
 8007a46:	4619      	mov	r1, r3
 8007a48:	b021      	add	sp, #132	; 0x84
 8007a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4e:	2a20      	cmp	r2, #32
 8007a50:	d1cd      	bne.n	80079ee <_strtod_l+0x3e>
 8007a52:	3301      	adds	r3, #1
 8007a54:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a56:	e7bf      	b.n	80079d8 <_strtod_l+0x28>
 8007a58:	2a2d      	cmp	r2, #45	; 0x2d
 8007a5a:	d1c8      	bne.n	80079ee <_strtod_l+0x3e>
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	920c      	str	r2, [sp, #48]	; 0x30
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	921b      	str	r2, [sp, #108]	; 0x6c
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1c3      	bne.n	80079f2 <_strtod_l+0x42>
 8007a6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f040 8577 	bne.w	8008562 <_strtod_l+0xbb2>
 8007a74:	4642      	mov	r2, r8
 8007a76:	464b      	mov	r3, r9
 8007a78:	e7e4      	b.n	8007a44 <_strtod_l+0x94>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	e7ef      	b.n	8007a5e <_strtod_l+0xae>
 8007a7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007a80:	b13a      	cbz	r2, 8007a92 <_strtod_l+0xe2>
 8007a82:	2135      	movs	r1, #53	; 0x35
 8007a84:	a81e      	add	r0, sp, #120	; 0x78
 8007a86:	f001 fee1 	bl	800984c <__copybits>
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a8e:	f001 fa8d 	bl	8008fac <_Bfree>
 8007a92:	3e01      	subs	r6, #1
 8007a94:	2e05      	cmp	r6, #5
 8007a96:	d807      	bhi.n	8007aa8 <_strtod_l+0xf8>
 8007a98:	e8df f006 	tbb	[pc, r6]
 8007a9c:	1d180b0e 	.word	0x1d180b0e
 8007aa0:	030e      	.short	0x030e
 8007aa2:	f04f 0900 	mov.w	r9, #0
 8007aa6:	46c8      	mov	r8, r9
 8007aa8:	0721      	lsls	r1, r4, #28
 8007aaa:	d5c2      	bpl.n	8007a32 <_strtod_l+0x82>
 8007aac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007ab0:	e7bf      	b.n	8007a32 <_strtod_l+0x82>
 8007ab2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007ab6:	e7f7      	b.n	8007aa8 <_strtod_l+0xf8>
 8007ab8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007aba:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8007abe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ac2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ac6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007aca:	e7ed      	b.n	8007aa8 <_strtod_l+0xf8>
 8007acc:	f04f 0800 	mov.w	r8, #0
 8007ad0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007c4c <_strtod_l+0x29c>
 8007ad4:	e7e8      	b.n	8007aa8 <_strtod_l+0xf8>
 8007ad6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007ada:	f04f 38ff 	mov.w	r8, #4294967295
 8007ade:	e7e3      	b.n	8007aa8 <_strtod_l+0xf8>
 8007ae0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	2b30      	cmp	r3, #48	; 0x30
 8007aea:	d0f9      	beq.n	8007ae0 <_strtod_l+0x130>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0a0      	beq.n	8007a32 <_strtod_l+0x82>
 8007af0:	2301      	movs	r3, #1
 8007af2:	9307      	str	r3, [sp, #28]
 8007af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007af6:	220a      	movs	r2, #10
 8007af8:	9308      	str	r3, [sp, #32]
 8007afa:	2300      	movs	r3, #0
 8007afc:	469b      	mov	fp, r3
 8007afe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007b02:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007b04:	7805      	ldrb	r5, [r0, #0]
 8007b06:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007b0a:	b2d9      	uxtb	r1, r3
 8007b0c:	2909      	cmp	r1, #9
 8007b0e:	d926      	bls.n	8007b5e <_strtod_l+0x1ae>
 8007b10:	4622      	mov	r2, r4
 8007b12:	4639      	mov	r1, r7
 8007b14:	f001 ff64 	bl	80099e0 <strncmp>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d032      	beq.n	8007b82 <_strtod_l+0x1d2>
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	462b      	mov	r3, r5
 8007b20:	465c      	mov	r4, fp
 8007b22:	4602      	mov	r2, r0
 8007b24:	9004      	str	r0, [sp, #16]
 8007b26:	2b65      	cmp	r3, #101	; 0x65
 8007b28:	d001      	beq.n	8007b2e <_strtod_l+0x17e>
 8007b2a:	2b45      	cmp	r3, #69	; 0x45
 8007b2c:	d113      	bne.n	8007b56 <_strtod_l+0x1a6>
 8007b2e:	b91c      	cbnz	r4, 8007b38 <_strtod_l+0x188>
 8007b30:	9b07      	ldr	r3, [sp, #28]
 8007b32:	4303      	orrs	r3, r0
 8007b34:	d099      	beq.n	8007a6a <_strtod_l+0xba>
 8007b36:	2400      	movs	r4, #0
 8007b38:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007b3a:	1c73      	adds	r3, r6, #1
 8007b3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b3e:	7873      	ldrb	r3, [r6, #1]
 8007b40:	2b2b      	cmp	r3, #43	; 0x2b
 8007b42:	d078      	beq.n	8007c36 <_strtod_l+0x286>
 8007b44:	2b2d      	cmp	r3, #45	; 0x2d
 8007b46:	d07b      	beq.n	8007c40 <_strtod_l+0x290>
 8007b48:	2700      	movs	r7, #0
 8007b4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007b4e:	2909      	cmp	r1, #9
 8007b50:	f240 8082 	bls.w	8007c58 <_strtod_l+0x2a8>
 8007b54:	961b      	str	r6, [sp, #108]	; 0x6c
 8007b56:	2500      	movs	r5, #0
 8007b58:	e09e      	b.n	8007c98 <_strtod_l+0x2e8>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e7c9      	b.n	8007af2 <_strtod_l+0x142>
 8007b5e:	f1bb 0f08 	cmp.w	fp, #8
 8007b62:	bfd5      	itete	le
 8007b64:	9906      	ldrle	r1, [sp, #24]
 8007b66:	9905      	ldrgt	r1, [sp, #20]
 8007b68:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007b70:	f100 0001 	add.w	r0, r0, #1
 8007b74:	bfd4      	ite	le
 8007b76:	9306      	strle	r3, [sp, #24]
 8007b78:	9305      	strgt	r3, [sp, #20]
 8007b7a:	f10b 0b01 	add.w	fp, fp, #1
 8007b7e:	901b      	str	r0, [sp, #108]	; 0x6c
 8007b80:	e7bf      	b.n	8007b02 <_strtod_l+0x152>
 8007b82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b84:	191a      	adds	r2, r3, r4
 8007b86:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b88:	5d1b      	ldrb	r3, [r3, r4]
 8007b8a:	f1bb 0f00 	cmp.w	fp, #0
 8007b8e:	d036      	beq.n	8007bfe <_strtod_l+0x24e>
 8007b90:	465c      	mov	r4, fp
 8007b92:	9004      	str	r0, [sp, #16]
 8007b94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007b98:	2a09      	cmp	r2, #9
 8007b9a:	d912      	bls.n	8007bc2 <_strtod_l+0x212>
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	e7c2      	b.n	8007b26 <_strtod_l+0x176>
 8007ba0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ba8:	785b      	ldrb	r3, [r3, #1]
 8007baa:	2b30      	cmp	r3, #48	; 0x30
 8007bac:	d0f8      	beq.n	8007ba0 <_strtod_l+0x1f0>
 8007bae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007bb2:	2a08      	cmp	r2, #8
 8007bb4:	f200 84dc 	bhi.w	8008570 <_strtod_l+0xbc0>
 8007bb8:	9004      	str	r0, [sp, #16]
 8007bba:	2000      	movs	r0, #0
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007bc0:	9208      	str	r2, [sp, #32]
 8007bc2:	3b30      	subs	r3, #48	; 0x30
 8007bc4:	f100 0201 	add.w	r2, r0, #1
 8007bc8:	d013      	beq.n	8007bf2 <_strtod_l+0x242>
 8007bca:	9904      	ldr	r1, [sp, #16]
 8007bcc:	1905      	adds	r5, r0, r4
 8007bce:	4411      	add	r1, r2
 8007bd0:	9104      	str	r1, [sp, #16]
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	210a      	movs	r1, #10
 8007bd6:	42aa      	cmp	r2, r5
 8007bd8:	d113      	bne.n	8007c02 <_strtod_l+0x252>
 8007bda:	1822      	adds	r2, r4, r0
 8007bdc:	2a08      	cmp	r2, #8
 8007bde:	f104 0401 	add.w	r4, r4, #1
 8007be2:	4404      	add	r4, r0
 8007be4:	dc1b      	bgt.n	8007c1e <_strtod_l+0x26e>
 8007be6:	220a      	movs	r2, #10
 8007be8:	9906      	ldr	r1, [sp, #24]
 8007bea:	fb02 3301 	mla	r3, r2, r1, r3
 8007bee:	9306      	str	r3, [sp, #24]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	1c59      	adds	r1, r3, #1
 8007bf8:	911b      	str	r1, [sp, #108]	; 0x6c
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	e7ca      	b.n	8007b94 <_strtod_l+0x1e4>
 8007bfe:	4658      	mov	r0, fp
 8007c00:	e7d3      	b.n	8007baa <_strtod_l+0x1fa>
 8007c02:	2a08      	cmp	r2, #8
 8007c04:	dc04      	bgt.n	8007c10 <_strtod_l+0x260>
 8007c06:	9f06      	ldr	r7, [sp, #24]
 8007c08:	434f      	muls	r7, r1
 8007c0a:	9706      	str	r7, [sp, #24]
 8007c0c:	3201      	adds	r2, #1
 8007c0e:	e7e2      	b.n	8007bd6 <_strtod_l+0x226>
 8007c10:	1c57      	adds	r7, r2, #1
 8007c12:	2f10      	cmp	r7, #16
 8007c14:	bfde      	ittt	le
 8007c16:	9f05      	ldrle	r7, [sp, #20]
 8007c18:	434f      	mulle	r7, r1
 8007c1a:	9705      	strle	r7, [sp, #20]
 8007c1c:	e7f6      	b.n	8007c0c <_strtod_l+0x25c>
 8007c1e:	2c10      	cmp	r4, #16
 8007c20:	bfdf      	itttt	le
 8007c22:	220a      	movle	r2, #10
 8007c24:	9905      	ldrle	r1, [sp, #20]
 8007c26:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c2a:	9305      	strle	r3, [sp, #20]
 8007c2c:	e7e0      	b.n	8007bf0 <_strtod_l+0x240>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2201      	movs	r2, #1
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	e77c      	b.n	8007b30 <_strtod_l+0x180>
 8007c36:	2700      	movs	r7, #0
 8007c38:	1cb3      	adds	r3, r6, #2
 8007c3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c3c:	78b3      	ldrb	r3, [r6, #2]
 8007c3e:	e784      	b.n	8007b4a <_strtod_l+0x19a>
 8007c40:	2701      	movs	r7, #1
 8007c42:	e7f9      	b.n	8007c38 <_strtod_l+0x288>
 8007c44:	0800b704 	.word	0x0800b704
 8007c48:	0800b634 	.word	0x0800b634
 8007c4c:	7ff00000 	.word	0x7ff00000
 8007c50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c52:	1c59      	adds	r1, r3, #1
 8007c54:	911b      	str	r1, [sp, #108]	; 0x6c
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	2b30      	cmp	r3, #48	; 0x30
 8007c5a:	d0f9      	beq.n	8007c50 <_strtod_l+0x2a0>
 8007c5c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007c60:	2908      	cmp	r1, #8
 8007c62:	f63f af78 	bhi.w	8007b56 <_strtod_l+0x1a6>
 8007c66:	f04f 0e0a 	mov.w	lr, #10
 8007c6a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007c6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c70:	9309      	str	r3, [sp, #36]	; 0x24
 8007c72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c74:	1c59      	adds	r1, r3, #1
 8007c76:	911b      	str	r1, [sp, #108]	; 0x6c
 8007c78:	785b      	ldrb	r3, [r3, #1]
 8007c7a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007c7e:	2d09      	cmp	r5, #9
 8007c80:	d935      	bls.n	8007cee <_strtod_l+0x33e>
 8007c82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c84:	1b49      	subs	r1, r1, r5
 8007c86:	2908      	cmp	r1, #8
 8007c88:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007c8c:	dc02      	bgt.n	8007c94 <_strtod_l+0x2e4>
 8007c8e:	4565      	cmp	r5, ip
 8007c90:	bfa8      	it	ge
 8007c92:	4665      	movge	r5, ip
 8007c94:	b107      	cbz	r7, 8007c98 <_strtod_l+0x2e8>
 8007c96:	426d      	negs	r5, r5
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	d14c      	bne.n	8007d36 <_strtod_l+0x386>
 8007c9c:	9907      	ldr	r1, [sp, #28]
 8007c9e:	4301      	orrs	r1, r0
 8007ca0:	f47f aec7 	bne.w	8007a32 <_strtod_l+0x82>
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	f47f aee0 	bne.w	8007a6a <_strtod_l+0xba>
 8007caa:	2b69      	cmp	r3, #105	; 0x69
 8007cac:	d026      	beq.n	8007cfc <_strtod_l+0x34c>
 8007cae:	dc23      	bgt.n	8007cf8 <_strtod_l+0x348>
 8007cb0:	2b49      	cmp	r3, #73	; 0x49
 8007cb2:	d023      	beq.n	8007cfc <_strtod_l+0x34c>
 8007cb4:	2b4e      	cmp	r3, #78	; 0x4e
 8007cb6:	f47f aed8 	bne.w	8007a6a <_strtod_l+0xba>
 8007cba:	499c      	ldr	r1, [pc, #624]	; (8007f2c <_strtod_l+0x57c>)
 8007cbc:	a81b      	add	r0, sp, #108	; 0x6c
 8007cbe:	f001 f865 	bl	8008d8c <__match>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f43f aed1 	beq.w	8007a6a <_strtod_l+0xba>
 8007cc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b28      	cmp	r3, #40	; 0x28
 8007cce:	d12c      	bne.n	8007d2a <_strtod_l+0x37a>
 8007cd0:	4997      	ldr	r1, [pc, #604]	; (8007f30 <_strtod_l+0x580>)
 8007cd2:	aa1e      	add	r2, sp, #120	; 0x78
 8007cd4:	a81b      	add	r0, sp, #108	; 0x6c
 8007cd6:	f001 f86d 	bl	8008db4 <__hexnan>
 8007cda:	2805      	cmp	r0, #5
 8007cdc:	d125      	bne.n	8007d2a <_strtod_l+0x37a>
 8007cde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ce0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007ce4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007ce8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007cec:	e6a1      	b.n	8007a32 <_strtod_l+0x82>
 8007cee:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8007cf2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007cf6:	e7bc      	b.n	8007c72 <_strtod_l+0x2c2>
 8007cf8:	2b6e      	cmp	r3, #110	; 0x6e
 8007cfa:	e7dc      	b.n	8007cb6 <_strtod_l+0x306>
 8007cfc:	498d      	ldr	r1, [pc, #564]	; (8007f34 <_strtod_l+0x584>)
 8007cfe:	a81b      	add	r0, sp, #108	; 0x6c
 8007d00:	f001 f844 	bl	8008d8c <__match>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f43f aeb0 	beq.w	8007a6a <_strtod_l+0xba>
 8007d0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d0c:	498a      	ldr	r1, [pc, #552]	; (8007f38 <_strtod_l+0x588>)
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	a81b      	add	r0, sp, #108	; 0x6c
 8007d12:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d14:	f001 f83a 	bl	8008d8c <__match>
 8007d18:	b910      	cbnz	r0, 8007d20 <_strtod_l+0x370>
 8007d1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d20:	f04f 0800 	mov.w	r8, #0
 8007d24:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007f48 <_strtod_l+0x598>
 8007d28:	e683      	b.n	8007a32 <_strtod_l+0x82>
 8007d2a:	4884      	ldr	r0, [pc, #528]	; (8007f3c <_strtod_l+0x58c>)
 8007d2c:	f001 fe3a 	bl	80099a4 <nan>
 8007d30:	4680      	mov	r8, r0
 8007d32:	4689      	mov	r9, r1
 8007d34:	e67d      	b.n	8007a32 <_strtod_l+0x82>
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	f1bb 0f00 	cmp.w	fp, #0
 8007d3c:	bf08      	it	eq
 8007d3e:	46a3      	moveq	fp, r4
 8007d40:	1aeb      	subs	r3, r5, r3
 8007d42:	2c10      	cmp	r4, #16
 8007d44:	9806      	ldr	r0, [sp, #24]
 8007d46:	4626      	mov	r6, r4
 8007d48:	9307      	str	r3, [sp, #28]
 8007d4a:	bfa8      	it	ge
 8007d4c:	2610      	movge	r6, #16
 8007d4e:	f7f8 fb49 	bl	80003e4 <__aeabi_ui2d>
 8007d52:	2c09      	cmp	r4, #9
 8007d54:	4680      	mov	r8, r0
 8007d56:	4689      	mov	r9, r1
 8007d58:	dd13      	ble.n	8007d82 <_strtod_l+0x3d2>
 8007d5a:	4b79      	ldr	r3, [pc, #484]	; (8007f40 <_strtod_l+0x590>)
 8007d5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d64:	f7f8 fbb8 	bl	80004d8 <__aeabi_dmul>
 8007d68:	4680      	mov	r8, r0
 8007d6a:	9805      	ldr	r0, [sp, #20]
 8007d6c:	4689      	mov	r9, r1
 8007d6e:	f7f8 fb39 	bl	80003e4 <__aeabi_ui2d>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4640      	mov	r0, r8
 8007d78:	4649      	mov	r1, r9
 8007d7a:	f7f8 f9f7 	bl	800016c <__adddf3>
 8007d7e:	4680      	mov	r8, r0
 8007d80:	4689      	mov	r9, r1
 8007d82:	2c0f      	cmp	r4, #15
 8007d84:	dc36      	bgt.n	8007df4 <_strtod_l+0x444>
 8007d86:	9b07      	ldr	r3, [sp, #28]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f43f ae52 	beq.w	8007a32 <_strtod_l+0x82>
 8007d8e:	dd22      	ble.n	8007dd6 <_strtod_l+0x426>
 8007d90:	2b16      	cmp	r3, #22
 8007d92:	dc09      	bgt.n	8007da8 <_strtod_l+0x3f8>
 8007d94:	4c6a      	ldr	r4, [pc, #424]	; (8007f40 <_strtod_l+0x590>)
 8007d96:	4642      	mov	r2, r8
 8007d98:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007d9c:	464b      	mov	r3, r9
 8007d9e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007da2:	f7f8 fb99 	bl	80004d8 <__aeabi_dmul>
 8007da6:	e7c3      	b.n	8007d30 <_strtod_l+0x380>
 8007da8:	9a07      	ldr	r2, [sp, #28]
 8007daa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007dae:	4293      	cmp	r3, r2
 8007db0:	db20      	blt.n	8007df4 <_strtod_l+0x444>
 8007db2:	4d63      	ldr	r5, [pc, #396]	; (8007f40 <_strtod_l+0x590>)
 8007db4:	f1c4 040f 	rsb	r4, r4, #15
 8007db8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007dbc:	4642      	mov	r2, r8
 8007dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	f7f8 fb88 	bl	80004d8 <__aeabi_dmul>
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	1b1c      	subs	r4, r3, r4
 8007dcc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007dd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dd4:	e7e5      	b.n	8007da2 <_strtod_l+0x3f2>
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	3316      	adds	r3, #22
 8007dda:	db0b      	blt.n	8007df4 <_strtod_l+0x444>
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	4a58      	ldr	r2, [pc, #352]	; (8007f40 <_strtod_l+0x590>)
 8007de0:	1b5d      	subs	r5, r3, r5
 8007de2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007de6:	4640      	mov	r0, r8
 8007de8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dec:	4649      	mov	r1, r9
 8007dee:	f7f8 fc9d 	bl	800072c <__aeabi_ddiv>
 8007df2:	e79d      	b.n	8007d30 <_strtod_l+0x380>
 8007df4:	9b07      	ldr	r3, [sp, #28]
 8007df6:	1ba6      	subs	r6, r4, r6
 8007df8:	441e      	add	r6, r3
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	dd71      	ble.n	8007ee2 <_strtod_l+0x532>
 8007dfe:	f016 030f 	ands.w	r3, r6, #15
 8007e02:	d00a      	beq.n	8007e1a <_strtod_l+0x46a>
 8007e04:	494e      	ldr	r1, [pc, #312]	; (8007f40 <_strtod_l+0x590>)
 8007e06:	4642      	mov	r2, r8
 8007e08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e10:	464b      	mov	r3, r9
 8007e12:	f7f8 fb61 	bl	80004d8 <__aeabi_dmul>
 8007e16:	4680      	mov	r8, r0
 8007e18:	4689      	mov	r9, r1
 8007e1a:	f036 060f 	bics.w	r6, r6, #15
 8007e1e:	d050      	beq.n	8007ec2 <_strtod_l+0x512>
 8007e20:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007e24:	dd27      	ble.n	8007e76 <_strtod_l+0x4c6>
 8007e26:	f04f 0b00 	mov.w	fp, #0
 8007e2a:	f8cd b010 	str.w	fp, [sp, #16]
 8007e2e:	f8cd b020 	str.w	fp, [sp, #32]
 8007e32:	f8cd b018 	str.w	fp, [sp, #24]
 8007e36:	2322      	movs	r3, #34	; 0x22
 8007e38:	f04f 0800 	mov.w	r8, #0
 8007e3c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007f48 <_strtod_l+0x598>
 8007e40:	f8ca 3000 	str.w	r3, [sl]
 8007e44:	9b08      	ldr	r3, [sp, #32]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f43f adf3 	beq.w	8007a32 <_strtod_l+0x82>
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e50:	f001 f8ac 	bl	8008fac <_Bfree>
 8007e54:	4650      	mov	r0, sl
 8007e56:	9906      	ldr	r1, [sp, #24]
 8007e58:	f001 f8a8 	bl	8008fac <_Bfree>
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	9904      	ldr	r1, [sp, #16]
 8007e60:	f001 f8a4 	bl	8008fac <_Bfree>
 8007e64:	4650      	mov	r0, sl
 8007e66:	9908      	ldr	r1, [sp, #32]
 8007e68:	f001 f8a0 	bl	8008fac <_Bfree>
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	4650      	mov	r0, sl
 8007e70:	f001 f89c 	bl	8008fac <_Bfree>
 8007e74:	e5dd      	b.n	8007a32 <_strtod_l+0x82>
 8007e76:	2300      	movs	r3, #0
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	461f      	mov	r7, r3
 8007e7e:	1136      	asrs	r6, r6, #4
 8007e80:	2e01      	cmp	r6, #1
 8007e82:	dc21      	bgt.n	8007ec8 <_strtod_l+0x518>
 8007e84:	b10b      	cbz	r3, 8007e8a <_strtod_l+0x4da>
 8007e86:	4680      	mov	r8, r0
 8007e88:	4689      	mov	r9, r1
 8007e8a:	4b2e      	ldr	r3, [pc, #184]	; (8007f44 <_strtod_l+0x594>)
 8007e8c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007e90:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e94:	4642      	mov	r2, r8
 8007e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	f7f8 fb1c 	bl	80004d8 <__aeabi_dmul>
 8007ea0:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <_strtod_l+0x598>)
 8007ea2:	460a      	mov	r2, r1
 8007ea4:	400b      	ands	r3, r1
 8007ea6:	4929      	ldr	r1, [pc, #164]	; (8007f4c <_strtod_l+0x59c>)
 8007ea8:	4680      	mov	r8, r0
 8007eaa:	428b      	cmp	r3, r1
 8007eac:	d8bb      	bhi.n	8007e26 <_strtod_l+0x476>
 8007eae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007eb2:	428b      	cmp	r3, r1
 8007eb4:	bf86      	itte	hi
 8007eb6:	f04f 38ff 	movhi.w	r8, #4294967295
 8007eba:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007f50 <_strtod_l+0x5a0>
 8007ebe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	e07e      	b.n	8007fc6 <_strtod_l+0x616>
 8007ec8:	07f2      	lsls	r2, r6, #31
 8007eca:	d507      	bpl.n	8007edc <_strtod_l+0x52c>
 8007ecc:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <_strtod_l+0x594>)
 8007ece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 faff 	bl	80004d8 <__aeabi_dmul>
 8007eda:	2301      	movs	r3, #1
 8007edc:	3701      	adds	r7, #1
 8007ede:	1076      	asrs	r6, r6, #1
 8007ee0:	e7ce      	b.n	8007e80 <_strtod_l+0x4d0>
 8007ee2:	d0ee      	beq.n	8007ec2 <_strtod_l+0x512>
 8007ee4:	4276      	negs	r6, r6
 8007ee6:	f016 020f 	ands.w	r2, r6, #15
 8007eea:	d00a      	beq.n	8007f02 <_strtod_l+0x552>
 8007eec:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <_strtod_l+0x590>)
 8007eee:	4640      	mov	r0, r8
 8007ef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f7f8 fc17 	bl	800072c <__aeabi_ddiv>
 8007efe:	4680      	mov	r8, r0
 8007f00:	4689      	mov	r9, r1
 8007f02:	1136      	asrs	r6, r6, #4
 8007f04:	d0dd      	beq.n	8007ec2 <_strtod_l+0x512>
 8007f06:	2e1f      	cmp	r6, #31
 8007f08:	dd24      	ble.n	8007f54 <_strtod_l+0x5a4>
 8007f0a:	f04f 0b00 	mov.w	fp, #0
 8007f0e:	f8cd b010 	str.w	fp, [sp, #16]
 8007f12:	f8cd b020 	str.w	fp, [sp, #32]
 8007f16:	f8cd b018 	str.w	fp, [sp, #24]
 8007f1a:	2322      	movs	r3, #34	; 0x22
 8007f1c:	f04f 0800 	mov.w	r8, #0
 8007f20:	f04f 0900 	mov.w	r9, #0
 8007f24:	f8ca 3000 	str.w	r3, [sl]
 8007f28:	e78c      	b.n	8007e44 <_strtod_l+0x494>
 8007f2a:	bf00      	nop
 8007f2c:	0800b62f 	.word	0x0800b62f
 8007f30:	0800b648 	.word	0x0800b648
 8007f34:	0800b62c 	.word	0x0800b62c
 8007f38:	0800b9cc 	.word	0x0800b9cc
 8007f3c:	0800b8c7 	.word	0x0800b8c7
 8007f40:	0800b7b8 	.word	0x0800b7b8
 8007f44:	0800b790 	.word	0x0800b790
 8007f48:	7ff00000 	.word	0x7ff00000
 8007f4c:	7ca00000 	.word	0x7ca00000
 8007f50:	7fefffff 	.word	0x7fefffff
 8007f54:	f016 0310 	ands.w	r3, r6, #16
 8007f58:	bf18      	it	ne
 8007f5a:	236a      	movne	r3, #106	; 0x6a
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	9305      	str	r3, [sp, #20]
 8007f60:	4649      	mov	r1, r9
 8007f62:	2300      	movs	r3, #0
 8007f64:	4fb2      	ldr	r7, [pc, #712]	; (8008230 <_strtod_l+0x880>)
 8007f66:	07f2      	lsls	r2, r6, #31
 8007f68:	d504      	bpl.n	8007f74 <_strtod_l+0x5c4>
 8007f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f6e:	f7f8 fab3 	bl	80004d8 <__aeabi_dmul>
 8007f72:	2301      	movs	r3, #1
 8007f74:	1076      	asrs	r6, r6, #1
 8007f76:	f107 0708 	add.w	r7, r7, #8
 8007f7a:	d1f4      	bne.n	8007f66 <_strtod_l+0x5b6>
 8007f7c:	b10b      	cbz	r3, 8007f82 <_strtod_l+0x5d2>
 8007f7e:	4680      	mov	r8, r0
 8007f80:	4689      	mov	r9, r1
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	b1bb      	cbz	r3, 8007fb6 <_strtod_l+0x606>
 8007f86:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007f8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	4649      	mov	r1, r9
 8007f92:	dd10      	ble.n	8007fb6 <_strtod_l+0x606>
 8007f94:	2b1f      	cmp	r3, #31
 8007f96:	f340 812b 	ble.w	80081f0 <_strtod_l+0x840>
 8007f9a:	2b34      	cmp	r3, #52	; 0x34
 8007f9c:	bfd8      	it	le
 8007f9e:	f04f 32ff 	movle.w	r2, #4294967295
 8007fa2:	f04f 0800 	mov.w	r8, #0
 8007fa6:	bfcf      	iteee	gt
 8007fa8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007fac:	3b20      	suble	r3, #32
 8007fae:	fa02 f303 	lslle.w	r3, r2, r3
 8007fb2:	ea03 0901 	andle.w	r9, r3, r1
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 fcf3 	bl	80009a8 <__aeabi_dcmpeq>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d1a1      	bne.n	8007f0a <_strtod_l+0x55a>
 8007fc6:	9b06      	ldr	r3, [sp, #24]
 8007fc8:	465a      	mov	r2, fp
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	4650      	mov	r0, sl
 8007fce:	4623      	mov	r3, r4
 8007fd0:	9908      	ldr	r1, [sp, #32]
 8007fd2:	f001 f857 	bl	8009084 <__s2b>
 8007fd6:	9008      	str	r0, [sp, #32]
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f43f af24 	beq.w	8007e26 <_strtod_l+0x476>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	f04f 0b00 	mov.w	fp, #0
 8007fe4:	1b5d      	subs	r5, r3, r5
 8007fe6:	9b07      	ldr	r3, [sp, #28]
 8007fe8:	f8cd b010 	str.w	fp, [sp, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfb4      	ite	lt
 8007ff0:	462b      	movlt	r3, r5
 8007ff2:	2300      	movge	r3, #0
 8007ff4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ff6:	9b07      	ldr	r3, [sp, #28]
 8007ff8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ffc:	9316      	str	r3, [sp, #88]	; 0x58
 8007ffe:	9b08      	ldr	r3, [sp, #32]
 8008000:	4650      	mov	r0, sl
 8008002:	6859      	ldr	r1, [r3, #4]
 8008004:	f000 ff92 	bl	8008f2c <_Balloc>
 8008008:	9006      	str	r0, [sp, #24]
 800800a:	2800      	cmp	r0, #0
 800800c:	f43f af13 	beq.w	8007e36 <_strtod_l+0x486>
 8008010:	9b08      	ldr	r3, [sp, #32]
 8008012:	300c      	adds	r0, #12
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	f103 010c 	add.w	r1, r3, #12
 800801a:	3202      	adds	r2, #2
 800801c:	0092      	lsls	r2, r2, #2
 800801e:	f000 ff77 	bl	8008f10 <memcpy>
 8008022:	ab1e      	add	r3, sp, #120	; 0x78
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	ab1d      	add	r3, sp, #116	; 0x74
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	4642      	mov	r2, r8
 800802c:	464b      	mov	r3, r9
 800802e:	4650      	mov	r0, sl
 8008030:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8008034:	f001 fb64 	bl	8009700 <__d2b>
 8008038:	901c      	str	r0, [sp, #112]	; 0x70
 800803a:	2800      	cmp	r0, #0
 800803c:	f43f aefb 	beq.w	8007e36 <_strtod_l+0x486>
 8008040:	2101      	movs	r1, #1
 8008042:	4650      	mov	r0, sl
 8008044:	f001 f8b6 	bl	80091b4 <__i2b>
 8008048:	4603      	mov	r3, r0
 800804a:	9004      	str	r0, [sp, #16]
 800804c:	2800      	cmp	r0, #0
 800804e:	f43f aef2 	beq.w	8007e36 <_strtod_l+0x486>
 8008052:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008054:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008056:	2d00      	cmp	r5, #0
 8008058:	bfab      	itete	ge
 800805a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800805c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800805e:	18ee      	addge	r6, r5, r3
 8008060:	1b5c      	sublt	r4, r3, r5
 8008062:	9b05      	ldr	r3, [sp, #20]
 8008064:	bfa8      	it	ge
 8008066:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008068:	eba5 0503 	sub.w	r5, r5, r3
 800806c:	4415      	add	r5, r2
 800806e:	4b71      	ldr	r3, [pc, #452]	; (8008234 <_strtod_l+0x884>)
 8008070:	f105 35ff 	add.w	r5, r5, #4294967295
 8008074:	bfb8      	it	lt
 8008076:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008078:	429d      	cmp	r5, r3
 800807a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800807e:	f280 80c9 	bge.w	8008214 <_strtod_l+0x864>
 8008082:	1b5b      	subs	r3, r3, r5
 8008084:	2b1f      	cmp	r3, #31
 8008086:	f04f 0701 	mov.w	r7, #1
 800808a:	eba2 0203 	sub.w	r2, r2, r3
 800808e:	f300 80b6 	bgt.w	80081fe <_strtod_l+0x84e>
 8008092:	2500      	movs	r5, #0
 8008094:	fa07 f303 	lsl.w	r3, r7, r3
 8008098:	930f      	str	r3, [sp, #60]	; 0x3c
 800809a:	18b7      	adds	r7, r6, r2
 800809c:	9b05      	ldr	r3, [sp, #20]
 800809e:	42be      	cmp	r6, r7
 80080a0:	4414      	add	r4, r2
 80080a2:	441c      	add	r4, r3
 80080a4:	4633      	mov	r3, r6
 80080a6:	bfa8      	it	ge
 80080a8:	463b      	movge	r3, r7
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	bfa8      	it	ge
 80080ae:	4623      	movge	r3, r4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bfc2      	ittt	gt
 80080b4:	1aff      	subgt	r7, r7, r3
 80080b6:	1ae4      	subgt	r4, r4, r3
 80080b8:	1af6      	subgt	r6, r6, r3
 80080ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080bc:	2b00      	cmp	r3, #0
 80080be:	dd17      	ble.n	80080f0 <_strtod_l+0x740>
 80080c0:	461a      	mov	r2, r3
 80080c2:	4650      	mov	r0, sl
 80080c4:	9904      	ldr	r1, [sp, #16]
 80080c6:	f001 f92f 	bl	8009328 <__pow5mult>
 80080ca:	9004      	str	r0, [sp, #16]
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f43f aeb2 	beq.w	8007e36 <_strtod_l+0x486>
 80080d2:	4601      	mov	r1, r0
 80080d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080d6:	4650      	mov	r0, sl
 80080d8:	f001 f882 	bl	80091e0 <__multiply>
 80080dc:	9009      	str	r0, [sp, #36]	; 0x24
 80080de:	2800      	cmp	r0, #0
 80080e0:	f43f aea9 	beq.w	8007e36 <_strtod_l+0x486>
 80080e4:	4650      	mov	r0, sl
 80080e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80080e8:	f000 ff60 	bl	8008fac <_Bfree>
 80080ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ee:	931c      	str	r3, [sp, #112]	; 0x70
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	f300 8093 	bgt.w	800821c <_strtod_l+0x86c>
 80080f6:	9b07      	ldr	r3, [sp, #28]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dd08      	ble.n	800810e <_strtod_l+0x75e>
 80080fc:	4650      	mov	r0, sl
 80080fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008100:	9906      	ldr	r1, [sp, #24]
 8008102:	f001 f911 	bl	8009328 <__pow5mult>
 8008106:	9006      	str	r0, [sp, #24]
 8008108:	2800      	cmp	r0, #0
 800810a:	f43f ae94 	beq.w	8007e36 <_strtod_l+0x486>
 800810e:	2c00      	cmp	r4, #0
 8008110:	dd08      	ble.n	8008124 <_strtod_l+0x774>
 8008112:	4622      	mov	r2, r4
 8008114:	4650      	mov	r0, sl
 8008116:	9906      	ldr	r1, [sp, #24]
 8008118:	f001 f960 	bl	80093dc <__lshift>
 800811c:	9006      	str	r0, [sp, #24]
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f ae89 	beq.w	8007e36 <_strtod_l+0x486>
 8008124:	2e00      	cmp	r6, #0
 8008126:	dd08      	ble.n	800813a <_strtod_l+0x78a>
 8008128:	4632      	mov	r2, r6
 800812a:	4650      	mov	r0, sl
 800812c:	9904      	ldr	r1, [sp, #16]
 800812e:	f001 f955 	bl	80093dc <__lshift>
 8008132:	9004      	str	r0, [sp, #16]
 8008134:	2800      	cmp	r0, #0
 8008136:	f43f ae7e 	beq.w	8007e36 <_strtod_l+0x486>
 800813a:	4650      	mov	r0, sl
 800813c:	9a06      	ldr	r2, [sp, #24]
 800813e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008140:	f001 f9d4 	bl	80094ec <__mdiff>
 8008144:	4683      	mov	fp, r0
 8008146:	2800      	cmp	r0, #0
 8008148:	f43f ae75 	beq.w	8007e36 <_strtod_l+0x486>
 800814c:	2400      	movs	r4, #0
 800814e:	68c3      	ldr	r3, [r0, #12]
 8008150:	9904      	ldr	r1, [sp, #16]
 8008152:	60c4      	str	r4, [r0, #12]
 8008154:	930d      	str	r3, [sp, #52]	; 0x34
 8008156:	f001 f9ad 	bl	80094b4 <__mcmp>
 800815a:	42a0      	cmp	r0, r4
 800815c:	da70      	bge.n	8008240 <_strtod_l+0x890>
 800815e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008160:	ea53 0308 	orrs.w	r3, r3, r8
 8008164:	f040 8096 	bne.w	8008294 <_strtod_l+0x8e4>
 8008168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 8091 	bne.w	8008294 <_strtod_l+0x8e4>
 8008172:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008176:	0d1b      	lsrs	r3, r3, #20
 8008178:	051b      	lsls	r3, r3, #20
 800817a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800817e:	f240 8089 	bls.w	8008294 <_strtod_l+0x8e4>
 8008182:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008186:	b923      	cbnz	r3, 8008192 <_strtod_l+0x7e2>
 8008188:	f8db 3010 	ldr.w	r3, [fp, #16]
 800818c:	2b01      	cmp	r3, #1
 800818e:	f340 8081 	ble.w	8008294 <_strtod_l+0x8e4>
 8008192:	4659      	mov	r1, fp
 8008194:	2201      	movs	r2, #1
 8008196:	4650      	mov	r0, sl
 8008198:	f001 f920 	bl	80093dc <__lshift>
 800819c:	9904      	ldr	r1, [sp, #16]
 800819e:	4683      	mov	fp, r0
 80081a0:	f001 f988 	bl	80094b4 <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	dd75      	ble.n	8008294 <_strtod_l+0x8e4>
 80081a8:	9905      	ldr	r1, [sp, #20]
 80081aa:	464b      	mov	r3, r9
 80081ac:	4a22      	ldr	r2, [pc, #136]	; (8008238 <_strtod_l+0x888>)
 80081ae:	2900      	cmp	r1, #0
 80081b0:	f000 8091 	beq.w	80082d6 <_strtod_l+0x926>
 80081b4:	ea02 0109 	and.w	r1, r2, r9
 80081b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081bc:	f300 808b 	bgt.w	80082d6 <_strtod_l+0x926>
 80081c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081c4:	f77f aea9 	ble.w	8007f1a <_strtod_l+0x56a>
 80081c8:	2300      	movs	r3, #0
 80081ca:	4a1c      	ldr	r2, [pc, #112]	; (800823c <_strtod_l+0x88c>)
 80081cc:	4640      	mov	r0, r8
 80081ce:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80081d2:	4649      	mov	r1, r9
 80081d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80081d8:	f7f8 f97e 	bl	80004d8 <__aeabi_dmul>
 80081dc:	460b      	mov	r3, r1
 80081de:	4303      	orrs	r3, r0
 80081e0:	bf08      	it	eq
 80081e2:	2322      	moveq	r3, #34	; 0x22
 80081e4:	4680      	mov	r8, r0
 80081e6:	4689      	mov	r9, r1
 80081e8:	bf08      	it	eq
 80081ea:	f8ca 3000 	streq.w	r3, [sl]
 80081ee:	e62d      	b.n	8007e4c <_strtod_l+0x49c>
 80081f0:	f04f 32ff 	mov.w	r2, #4294967295
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	ea03 0808 	and.w	r8, r3, r8
 80081fc:	e6db      	b.n	8007fb6 <_strtod_l+0x606>
 80081fe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008202:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008206:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800820a:	35e2      	adds	r5, #226	; 0xe2
 800820c:	fa07 f505 	lsl.w	r5, r7, r5
 8008210:	970f      	str	r7, [sp, #60]	; 0x3c
 8008212:	e742      	b.n	800809a <_strtod_l+0x6ea>
 8008214:	2301      	movs	r3, #1
 8008216:	2500      	movs	r5, #0
 8008218:	930f      	str	r3, [sp, #60]	; 0x3c
 800821a:	e73e      	b.n	800809a <_strtod_l+0x6ea>
 800821c:	463a      	mov	r2, r7
 800821e:	4650      	mov	r0, sl
 8008220:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008222:	f001 f8db 	bl	80093dc <__lshift>
 8008226:	901c      	str	r0, [sp, #112]	; 0x70
 8008228:	2800      	cmp	r0, #0
 800822a:	f47f af64 	bne.w	80080f6 <_strtod_l+0x746>
 800822e:	e602      	b.n	8007e36 <_strtod_l+0x486>
 8008230:	0800b660 	.word	0x0800b660
 8008234:	fffffc02 	.word	0xfffffc02
 8008238:	7ff00000 	.word	0x7ff00000
 800823c:	39500000 	.word	0x39500000
 8008240:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008244:	d166      	bne.n	8008314 <_strtod_l+0x964>
 8008246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800824c:	b35a      	cbz	r2, 80082a6 <_strtod_l+0x8f6>
 800824e:	4a9c      	ldr	r2, [pc, #624]	; (80084c0 <_strtod_l+0xb10>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d12c      	bne.n	80082ae <_strtod_l+0x8fe>
 8008254:	9b05      	ldr	r3, [sp, #20]
 8008256:	4640      	mov	r0, r8
 8008258:	b303      	cbz	r3, 800829c <_strtod_l+0x8ec>
 800825a:	464b      	mov	r3, r9
 800825c:	4a99      	ldr	r2, [pc, #612]	; (80084c4 <_strtod_l+0xb14>)
 800825e:	f04f 31ff 	mov.w	r1, #4294967295
 8008262:	401a      	ands	r2, r3
 8008264:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008268:	d81b      	bhi.n	80082a2 <_strtod_l+0x8f2>
 800826a:	0d12      	lsrs	r2, r2, #20
 800826c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008270:	fa01 f303 	lsl.w	r3, r1, r3
 8008274:	4298      	cmp	r0, r3
 8008276:	d11a      	bne.n	80082ae <_strtod_l+0x8fe>
 8008278:	4b93      	ldr	r3, [pc, #588]	; (80084c8 <_strtod_l+0xb18>)
 800827a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800827c:	429a      	cmp	r2, r3
 800827e:	d102      	bne.n	8008286 <_strtod_l+0x8d6>
 8008280:	3001      	adds	r0, #1
 8008282:	f43f add8 	beq.w	8007e36 <_strtod_l+0x486>
 8008286:	f04f 0800 	mov.w	r8, #0
 800828a:	4b8e      	ldr	r3, [pc, #568]	; (80084c4 <_strtod_l+0xb14>)
 800828c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800828e:	401a      	ands	r2, r3
 8008290:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008294:	9b05      	ldr	r3, [sp, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d196      	bne.n	80081c8 <_strtod_l+0x818>
 800829a:	e5d7      	b.n	8007e4c <_strtod_l+0x49c>
 800829c:	f04f 33ff 	mov.w	r3, #4294967295
 80082a0:	e7e8      	b.n	8008274 <_strtod_l+0x8c4>
 80082a2:	460b      	mov	r3, r1
 80082a4:	e7e6      	b.n	8008274 <_strtod_l+0x8c4>
 80082a6:	ea53 0308 	orrs.w	r3, r3, r8
 80082aa:	f43f af7d 	beq.w	80081a8 <_strtod_l+0x7f8>
 80082ae:	b1e5      	cbz	r5, 80082ea <_strtod_l+0x93a>
 80082b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b2:	421d      	tst	r5, r3
 80082b4:	d0ee      	beq.n	8008294 <_strtod_l+0x8e4>
 80082b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082b8:	4640      	mov	r0, r8
 80082ba:	4649      	mov	r1, r9
 80082bc:	9a05      	ldr	r2, [sp, #20]
 80082be:	b1c3      	cbz	r3, 80082f2 <_strtod_l+0x942>
 80082c0:	f7ff fb52 	bl	8007968 <sulp>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082cc:	f7f7 ff4e 	bl	800016c <__adddf3>
 80082d0:	4680      	mov	r8, r0
 80082d2:	4689      	mov	r9, r1
 80082d4:	e7de      	b.n	8008294 <_strtod_l+0x8e4>
 80082d6:	4013      	ands	r3, r2
 80082d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80082dc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80082e0:	f04f 38ff 	mov.w	r8, #4294967295
 80082e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80082e8:	e7d4      	b.n	8008294 <_strtod_l+0x8e4>
 80082ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ec:	ea13 0f08 	tst.w	r3, r8
 80082f0:	e7e0      	b.n	80082b4 <_strtod_l+0x904>
 80082f2:	f7ff fb39 	bl	8007968 <sulp>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082fe:	f7f7 ff33 	bl	8000168 <__aeabi_dsub>
 8008302:	2200      	movs	r2, #0
 8008304:	2300      	movs	r3, #0
 8008306:	4680      	mov	r8, r0
 8008308:	4689      	mov	r9, r1
 800830a:	f7f8 fb4d 	bl	80009a8 <__aeabi_dcmpeq>
 800830e:	2800      	cmp	r0, #0
 8008310:	d0c0      	beq.n	8008294 <_strtod_l+0x8e4>
 8008312:	e602      	b.n	8007f1a <_strtod_l+0x56a>
 8008314:	4658      	mov	r0, fp
 8008316:	9904      	ldr	r1, [sp, #16]
 8008318:	f001 fa4e 	bl	80097b8 <__ratio>
 800831c:	2200      	movs	r2, #0
 800831e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	f7f8 fb53 	bl	80009d0 <__aeabi_dcmple>
 800832a:	2800      	cmp	r0, #0
 800832c:	d075      	beq.n	800841a <_strtod_l+0xa6a>
 800832e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008330:	2b00      	cmp	r3, #0
 8008332:	d047      	beq.n	80083c4 <_strtod_l+0xa14>
 8008334:	2600      	movs	r6, #0
 8008336:	4f65      	ldr	r7, [pc, #404]	; (80084cc <_strtod_l+0xb1c>)
 8008338:	4d64      	ldr	r5, [pc, #400]	; (80084cc <_strtod_l+0xb1c>)
 800833a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008340:	0d1b      	lsrs	r3, r3, #20
 8008342:	051b      	lsls	r3, r3, #20
 8008344:	930f      	str	r3, [sp, #60]	; 0x3c
 8008346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008348:	4b61      	ldr	r3, [pc, #388]	; (80084d0 <_strtod_l+0xb20>)
 800834a:	429a      	cmp	r2, r3
 800834c:	f040 80c8 	bne.w	80084e0 <_strtod_l+0xb30>
 8008350:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008354:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835a:	4640      	mov	r0, r8
 800835c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008360:	4649      	mov	r1, r9
 8008362:	f001 f953 	bl	800960c <__ulp>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4630      	mov	r0, r6
 800836c:	4639      	mov	r1, r7
 800836e:	f7f8 f8b3 	bl	80004d8 <__aeabi_dmul>
 8008372:	4642      	mov	r2, r8
 8008374:	464b      	mov	r3, r9
 8008376:	f7f7 fef9 	bl	800016c <__adddf3>
 800837a:	460b      	mov	r3, r1
 800837c:	4951      	ldr	r1, [pc, #324]	; (80084c4 <_strtod_l+0xb14>)
 800837e:	4a55      	ldr	r2, [pc, #340]	; (80084d4 <_strtod_l+0xb24>)
 8008380:	4019      	ands	r1, r3
 8008382:	4291      	cmp	r1, r2
 8008384:	4680      	mov	r8, r0
 8008386:	d95e      	bls.n	8008446 <_strtod_l+0xa96>
 8008388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800838e:	4293      	cmp	r3, r2
 8008390:	d103      	bne.n	800839a <_strtod_l+0x9ea>
 8008392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008394:	3301      	adds	r3, #1
 8008396:	f43f ad4e 	beq.w	8007e36 <_strtod_l+0x486>
 800839a:	f04f 38ff 	mov.w	r8, #4294967295
 800839e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80084c8 <_strtod_l+0xb18>
 80083a2:	4650      	mov	r0, sl
 80083a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083a6:	f000 fe01 	bl	8008fac <_Bfree>
 80083aa:	4650      	mov	r0, sl
 80083ac:	9906      	ldr	r1, [sp, #24]
 80083ae:	f000 fdfd 	bl	8008fac <_Bfree>
 80083b2:	4650      	mov	r0, sl
 80083b4:	9904      	ldr	r1, [sp, #16]
 80083b6:	f000 fdf9 	bl	8008fac <_Bfree>
 80083ba:	4659      	mov	r1, fp
 80083bc:	4650      	mov	r0, sl
 80083be:	f000 fdf5 	bl	8008fac <_Bfree>
 80083c2:	e61c      	b.n	8007ffe <_strtod_l+0x64e>
 80083c4:	f1b8 0f00 	cmp.w	r8, #0
 80083c8:	d119      	bne.n	80083fe <_strtod_l+0xa4e>
 80083ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d0:	b9e3      	cbnz	r3, 800840c <_strtod_l+0xa5c>
 80083d2:	2200      	movs	r2, #0
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	4b3c      	ldr	r3, [pc, #240]	; (80084cc <_strtod_l+0xb1c>)
 80083da:	f7f8 faef 	bl	80009bc <__aeabi_dcmplt>
 80083de:	b9c8      	cbnz	r0, 8008414 <_strtod_l+0xa64>
 80083e0:	2200      	movs	r2, #0
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	4b3c      	ldr	r3, [pc, #240]	; (80084d8 <_strtod_l+0xb28>)
 80083e8:	f7f8 f876 	bl	80004d8 <__aeabi_dmul>
 80083ec:	4604      	mov	r4, r0
 80083ee:	460d      	mov	r5, r1
 80083f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80083f4:	9418      	str	r4, [sp, #96]	; 0x60
 80083f6:	9319      	str	r3, [sp, #100]	; 0x64
 80083f8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80083fc:	e79d      	b.n	800833a <_strtod_l+0x98a>
 80083fe:	f1b8 0f01 	cmp.w	r8, #1
 8008402:	d103      	bne.n	800840c <_strtod_l+0xa5c>
 8008404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	f43f ad87 	beq.w	8007f1a <_strtod_l+0x56a>
 800840c:	2600      	movs	r6, #0
 800840e:	2400      	movs	r4, #0
 8008410:	4f32      	ldr	r7, [pc, #200]	; (80084dc <_strtod_l+0xb2c>)
 8008412:	e791      	b.n	8008338 <_strtod_l+0x988>
 8008414:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008416:	4d30      	ldr	r5, [pc, #192]	; (80084d8 <_strtod_l+0xb28>)
 8008418:	e7ea      	b.n	80083f0 <_strtod_l+0xa40>
 800841a:	4b2f      	ldr	r3, [pc, #188]	; (80084d8 <_strtod_l+0xb28>)
 800841c:	2200      	movs	r2, #0
 800841e:	4630      	mov	r0, r6
 8008420:	4639      	mov	r1, r7
 8008422:	f7f8 f859 	bl	80004d8 <__aeabi_dmul>
 8008426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
 800842c:	b933      	cbnz	r3, 800843c <_strtod_l+0xa8c>
 800842e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008432:	9010      	str	r0, [sp, #64]	; 0x40
 8008434:	9311      	str	r3, [sp, #68]	; 0x44
 8008436:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800843a:	e77e      	b.n	800833a <_strtod_l+0x98a>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008444:	e7f7      	b.n	8008436 <_strtod_l+0xa86>
 8008446:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800844a:	9b05      	ldr	r3, [sp, #20]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1a8      	bne.n	80083a2 <_strtod_l+0x9f2>
 8008450:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008454:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008456:	0d1b      	lsrs	r3, r3, #20
 8008458:	051b      	lsls	r3, r3, #20
 800845a:	429a      	cmp	r2, r3
 800845c:	d1a1      	bne.n	80083a2 <_strtod_l+0x9f2>
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f7f8 fc79 	bl	8000d58 <__aeabi_d2lz>
 8008466:	f7f8 f809 	bl	800047c <__aeabi_l2d>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f7 fe79 	bl	8000168 <__aeabi_dsub>
 8008476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800847c:	ea43 0308 	orr.w	r3, r3, r8
 8008480:	4313      	orrs	r3, r2
 8008482:	4604      	mov	r4, r0
 8008484:	460d      	mov	r5, r1
 8008486:	d066      	beq.n	8008556 <_strtod_l+0xba6>
 8008488:	a309      	add	r3, pc, #36	; (adr r3, 80084b0 <_strtod_l+0xb00>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f8 fa95 	bl	80009bc <__aeabi_dcmplt>
 8008492:	2800      	cmp	r0, #0
 8008494:	f47f acda 	bne.w	8007e4c <_strtod_l+0x49c>
 8008498:	a307      	add	r3, pc, #28	; (adr r3, 80084b8 <_strtod_l+0xb08>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	4620      	mov	r0, r4
 80084a0:	4629      	mov	r1, r5
 80084a2:	f7f8 faa9 	bl	80009f8 <__aeabi_dcmpgt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f af7b 	beq.w	80083a2 <_strtod_l+0x9f2>
 80084ac:	e4ce      	b.n	8007e4c <_strtod_l+0x49c>
 80084ae:	bf00      	nop
 80084b0:	94a03595 	.word	0x94a03595
 80084b4:	3fdfffff 	.word	0x3fdfffff
 80084b8:	35afe535 	.word	0x35afe535
 80084bc:	3fe00000 	.word	0x3fe00000
 80084c0:	000fffff 	.word	0x000fffff
 80084c4:	7ff00000 	.word	0x7ff00000
 80084c8:	7fefffff 	.word	0x7fefffff
 80084cc:	3ff00000 	.word	0x3ff00000
 80084d0:	7fe00000 	.word	0x7fe00000
 80084d4:	7c9fffff 	.word	0x7c9fffff
 80084d8:	3fe00000 	.word	0x3fe00000
 80084dc:	bff00000 	.word	0xbff00000
 80084e0:	9b05      	ldr	r3, [sp, #20]
 80084e2:	b313      	cbz	r3, 800852a <_strtod_l+0xb7a>
 80084e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084ea:	d81e      	bhi.n	800852a <_strtod_l+0xb7a>
 80084ec:	a326      	add	r3, pc, #152	; (adr r3, 8008588 <_strtod_l+0xbd8>)
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7f8 fa6b 	bl	80009d0 <__aeabi_dcmple>
 80084fa:	b190      	cbz	r0, 8008522 <_strtod_l+0xb72>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4620      	mov	r0, r4
 8008500:	f7f8 faac 	bl	8000a5c <__aeabi_d2uiz>
 8008504:	2801      	cmp	r0, #1
 8008506:	bf38      	it	cc
 8008508:	2001      	movcc	r0, #1
 800850a:	f7f7 ff6b 	bl	80003e4 <__aeabi_ui2d>
 800850e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008510:	4604      	mov	r4, r0
 8008512:	460d      	mov	r5, r1
 8008514:	b9d3      	cbnz	r3, 800854c <_strtod_l+0xb9c>
 8008516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800851a:	9012      	str	r0, [sp, #72]	; 0x48
 800851c:	9313      	str	r3, [sp, #76]	; 0x4c
 800851e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008522:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008524:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008528:	1a9f      	subs	r7, r3, r2
 800852a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800852e:	f001 f86d 	bl	800960c <__ulp>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	4630      	mov	r0, r6
 8008538:	4639      	mov	r1, r7
 800853a:	f7f7 ffcd 	bl	80004d8 <__aeabi_dmul>
 800853e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008542:	f7f7 fe13 	bl	800016c <__adddf3>
 8008546:	4680      	mov	r8, r0
 8008548:	4689      	mov	r9, r1
 800854a:	e77e      	b.n	800844a <_strtod_l+0xa9a>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008554:	e7e3      	b.n	800851e <_strtod_l+0xb6e>
 8008556:	a30e      	add	r3, pc, #56	; (adr r3, 8008590 <_strtod_l+0xbe0>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f8 fa2e 	bl	80009bc <__aeabi_dcmplt>
 8008560:	e7a1      	b.n	80084a6 <_strtod_l+0xaf6>
 8008562:	2300      	movs	r3, #0
 8008564:	930c      	str	r3, [sp, #48]	; 0x30
 8008566:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008568:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	f7ff ba65 	b.w	8007a3a <_strtod_l+0x8a>
 8008570:	2b65      	cmp	r3, #101	; 0x65
 8008572:	f43f ab5c 	beq.w	8007c2e <_strtod_l+0x27e>
 8008576:	2b45      	cmp	r3, #69	; 0x45
 8008578:	f43f ab59 	beq.w	8007c2e <_strtod_l+0x27e>
 800857c:	2201      	movs	r2, #1
 800857e:	f7ff bb8d 	b.w	8007c9c <_strtod_l+0x2ec>
 8008582:	bf00      	nop
 8008584:	f3af 8000 	nop.w
 8008588:	ffc00000 	.word	0xffc00000
 800858c:	41dfffff 	.word	0x41dfffff
 8008590:	94a03595 	.word	0x94a03595
 8008594:	3fcfffff 	.word	0x3fcfffff

08008598 <strtod>:
 8008598:	460a      	mov	r2, r1
 800859a:	4601      	mov	r1, r0
 800859c:	4802      	ldr	r0, [pc, #8]	; (80085a8 <strtod+0x10>)
 800859e:	4b03      	ldr	r3, [pc, #12]	; (80085ac <strtod+0x14>)
 80085a0:	6800      	ldr	r0, [r0, #0]
 80085a2:	f7ff ba05 	b.w	80079b0 <_strtod_l>
 80085a6:	bf00      	nop
 80085a8:	20000028 	.word	0x20000028
 80085ac:	20000090 	.word	0x20000090

080085b0 <print_e>:
 80085b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b2:	b08b      	sub	sp, #44	; 0x2c
 80085b4:	460d      	mov	r5, r1
 80085b6:	a908      	add	r1, sp, #32
 80085b8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80085ba:	9104      	str	r1, [sp, #16]
 80085bc:	a907      	add	r1, sp, #28
 80085be:	9103      	str	r1, [sp, #12]
 80085c0:	a909      	add	r1, sp, #36	; 0x24
 80085c2:	9102      	str	r1, [sp, #8]
 80085c4:	1c71      	adds	r1, r6, #1
 80085c6:	9101      	str	r1, [sp, #4]
 80085c8:	2102      	movs	r1, #2
 80085ca:	9100      	str	r1, [sp, #0]
 80085cc:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80085d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80085d2:	f001 fad1 	bl	8009b78 <_dtoa_r>
 80085d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80085da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085dc:	4601      	mov	r1, r0
 80085de:	429a      	cmp	r2, r3
 80085e0:	d104      	bne.n	80085ec <print_e+0x3c>
 80085e2:	4628      	mov	r0, r5
 80085e4:	f001 f9f4 	bl	80099d0 <strcpy>
 80085e8:	b00b      	add	sp, #44	; 0x2c
 80085ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ec:	462b      	mov	r3, r5
 80085ee:	7800      	ldrb	r0, [r0, #0]
 80085f0:	2e00      	cmp	r6, #0
 80085f2:	f803 0b01 	strb.w	r0, [r3], #1
 80085f6:	bfc8      	it	gt
 80085f8:	2401      	movgt	r4, #1
 80085fa:	4608      	mov	r0, r1
 80085fc:	212e      	movs	r1, #46	; 0x2e
 80085fe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008602:	b10d      	cbz	r5, 8008608 <print_e+0x58>
 8008604:	2e00      	cmp	r6, #0
 8008606:	dc36      	bgt.n	8008676 <print_e+0xc6>
 8008608:	2f67      	cmp	r7, #103	; 0x67
 800860a:	d045      	beq.n	8008698 <print_e+0xe8>
 800860c:	2f47      	cmp	r7, #71	; 0x47
 800860e:	d045      	beq.n	800869c <print_e+0xec>
 8008610:	212e      	movs	r1, #46	; 0x2e
 8008612:	2030      	movs	r0, #48	; 0x30
 8008614:	2e00      	cmp	r6, #0
 8008616:	dc37      	bgt.n	8008688 <print_e+0xd8>
 8008618:	1e51      	subs	r1, r2, #1
 800861a:	2900      	cmp	r1, #0
 800861c:	9109      	str	r1, [sp, #36]	; 0x24
 800861e:	4618      	mov	r0, r3
 8008620:	bfb7      	itett	lt
 8008622:	212d      	movlt	r1, #45	; 0x2d
 8008624:	222b      	movge	r2, #43	; 0x2b
 8008626:	f1c2 0201 	rsblt	r2, r2, #1
 800862a:	9209      	strlt	r2, [sp, #36]	; 0x24
 800862c:	f800 7b02 	strb.w	r7, [r0], #2
 8008630:	bfb8      	it	lt
 8008632:	7059      	strblt	r1, [r3, #1]
 8008634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008636:	bfa8      	it	ge
 8008638:	705a      	strbge	r2, [r3, #1]
 800863a:	2963      	cmp	r1, #99	; 0x63
 800863c:	dd0b      	ble.n	8008656 <print_e+0xa6>
 800863e:	2264      	movs	r2, #100	; 0x64
 8008640:	fb91 f2f2 	sdiv	r2, r1, r2
 8008644:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8008648:	1cd8      	adds	r0, r3, #3
 800864a:	709c      	strb	r4, [r3, #2]
 800864c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008650:	fb03 1202 	mla	r2, r3, r2, r1
 8008654:	9209      	str	r2, [sp, #36]	; 0x24
 8008656:	230a      	movs	r3, #10
 8008658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800865a:	fb92 f3f3 	sdiv	r3, r2, r3
 800865e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008662:	7001      	strb	r1, [r0, #0]
 8008664:	f06f 0109 	mvn.w	r1, #9
 8008668:	fb01 2303 	mla	r3, r1, r3, r2
 800866c:	3330      	adds	r3, #48	; 0x30
 800866e:	7043      	strb	r3, [r0, #1]
 8008670:	2300      	movs	r3, #0
 8008672:	7083      	strb	r3, [r0, #2]
 8008674:	e7b8      	b.n	80085e8 <print_e+0x38>
 8008676:	b10c      	cbz	r4, 800867c <print_e+0xcc>
 8008678:	f803 1b01 	strb.w	r1, [r3], #1
 800867c:	7804      	ldrb	r4, [r0, #0]
 800867e:	3e01      	subs	r6, #1
 8008680:	f803 4b01 	strb.w	r4, [r3], #1
 8008684:	2400      	movs	r4, #0
 8008686:	e7ba      	b.n	80085fe <print_e+0x4e>
 8008688:	b10c      	cbz	r4, 800868e <print_e+0xde>
 800868a:	f803 1b01 	strb.w	r1, [r3], #1
 800868e:	2400      	movs	r4, #0
 8008690:	f803 0b01 	strb.w	r0, [r3], #1
 8008694:	3e01      	subs	r6, #1
 8008696:	e7bd      	b.n	8008614 <print_e+0x64>
 8008698:	2765      	movs	r7, #101	; 0x65
 800869a:	e7bd      	b.n	8008618 <print_e+0x68>
 800869c:	2745      	movs	r7, #69	; 0x45
 800869e:	e7bb      	b.n	8008618 <print_e+0x68>

080086a0 <_gcvt>:
 80086a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086a4:	4690      	mov	r8, r2
 80086a6:	461c      	mov	r4, r3
 80086a8:	b08b      	sub	sp, #44	; 0x2c
 80086aa:	4681      	mov	r9, r0
 80086ac:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	4640      	mov	r0, r8
 80086b6:	4621      	mov	r1, r4
 80086b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80086ba:	f7f8 f97f 	bl	80009bc <__aeabi_dcmplt>
 80086be:	b108      	cbz	r0, 80086c4 <_gcvt+0x24>
 80086c0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80086c4:	2200      	movs	r2, #0
 80086c6:	2300      	movs	r3, #0
 80086c8:	4640      	mov	r0, r8
 80086ca:	4621      	mov	r1, r4
 80086cc:	f7f8 f96c 	bl	80009a8 <__aeabi_dcmpeq>
 80086d0:	b138      	cbz	r0, 80086e2 <_gcvt+0x42>
 80086d2:	2330      	movs	r3, #48	; 0x30
 80086d4:	702b      	strb	r3, [r5, #0]
 80086d6:	2300      	movs	r3, #0
 80086d8:	706b      	strb	r3, [r5, #1]
 80086da:	4628      	mov	r0, r5
 80086dc:	b00b      	add	sp, #44	; 0x2c
 80086de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e2:	4640      	mov	r0, r8
 80086e4:	a34c      	add	r3, pc, #304	; (adr r3, 8008818 <_gcvt+0x178>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	4621      	mov	r1, r4
 80086ec:	f7f8 f970 	bl	80009d0 <__aeabi_dcmple>
 80086f0:	b160      	cbz	r0, 800870c <_gcvt+0x6c>
 80086f2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80086f6:	3f01      	subs	r7, #1
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	4642      	mov	r2, r8
 80086fc:	4623      	mov	r3, r4
 80086fe:	4629      	mov	r1, r5
 8008700:	4648      	mov	r0, r9
 8008702:	9602      	str	r6, [sp, #8]
 8008704:	9700      	str	r7, [sp, #0]
 8008706:	f7ff ff53 	bl	80085b0 <print_e>
 800870a:	e7e6      	b.n	80086da <_gcvt+0x3a>
 800870c:	4638      	mov	r0, r7
 800870e:	f001 f881 	bl	8009814 <_mprec_log10>
 8008712:	4642      	mov	r2, r8
 8008714:	4623      	mov	r3, r4
 8008716:	f7f8 f95b 	bl	80009d0 <__aeabi_dcmple>
 800871a:	2800      	cmp	r0, #0
 800871c:	d1e9      	bne.n	80086f2 <_gcvt+0x52>
 800871e:	ab09      	add	r3, sp, #36	; 0x24
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	ab08      	add	r3, sp, #32
 8008724:	9303      	str	r3, [sp, #12]
 8008726:	ab07      	add	r3, sp, #28
 8008728:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800872c:	2302      	movs	r3, #2
 800872e:	4642      	mov	r2, r8
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	4648      	mov	r0, r9
 8008734:	4623      	mov	r3, r4
 8008736:	f001 fa1f 	bl	8009b78 <_dtoa_r>
 800873a:	f242 730f 	movw	r3, #9999	; 0x270f
 800873e:	9a07      	ldr	r2, [sp, #28]
 8008740:	4601      	mov	r1, r0
 8008742:	429a      	cmp	r2, r3
 8008744:	d00f      	beq.n	8008766 <_gcvt+0xc6>
 8008746:	462b      	mov	r3, r5
 8008748:	442f      	add	r7, r5
 800874a:	4608      	mov	r0, r1
 800874c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008750:	9a07      	ldr	r2, [sp, #28]
 8008752:	1afc      	subs	r4, r7, r3
 8008754:	f1bc 0f00 	cmp.w	ip, #0
 8008758:	d001      	beq.n	800875e <_gcvt+0xbe>
 800875a:	2a00      	cmp	r2, #0
 800875c:	dc07      	bgt.n	800876e <_gcvt+0xce>
 800875e:	2100      	movs	r1, #0
 8008760:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008764:	e00c      	b.n	8008780 <_gcvt+0xe0>
 8008766:	4628      	mov	r0, r5
 8008768:	f001 f932 	bl	80099d0 <strcpy>
 800876c:	e7b5      	b.n	80086da <_gcvt+0x3a>
 800876e:	3a01      	subs	r2, #1
 8008770:	f803 cb01 	strb.w	ip, [r3], #1
 8008774:	9207      	str	r2, [sp, #28]
 8008776:	e7e8      	b.n	800874a <_gcvt+0xaa>
 8008778:	2101      	movs	r1, #1
 800877a:	f803 cb01 	strb.w	ip, [r3], #1
 800877e:	3c01      	subs	r4, #1
 8008780:	2a00      	cmp	r2, #0
 8008782:	4617      	mov	r7, r2
 8008784:	dc2a      	bgt.n	80087dc <_gcvt+0x13c>
 8008786:	b101      	cbz	r1, 800878a <_gcvt+0xea>
 8008788:	9207      	str	r2, [sp, #28]
 800878a:	b90e      	cbnz	r6, 8008790 <_gcvt+0xf0>
 800878c:	7802      	ldrb	r2, [r0, #0]
 800878e:	b312      	cbz	r2, 80087d6 <_gcvt+0x136>
 8008790:	42ab      	cmp	r3, r5
 8008792:	bf04      	itt	eq
 8008794:	2230      	moveq	r2, #48	; 0x30
 8008796:	f803 2b01 	strbeq.w	r2, [r3], #1
 800879a:	222e      	movs	r2, #46	; 0x2e
 800879c:	4619      	mov	r1, r3
 800879e:	2700      	movs	r7, #0
 80087a0:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80087a4:	701a      	strb	r2, [r3, #0]
 80087a6:	9a07      	ldr	r2, [sp, #28]
 80087a8:	eba2 0c03 	sub.w	ip, r2, r3
 80087ac:	eb1c 0f01 	cmn.w	ip, r1
 80087b0:	d41c      	bmi.n	80087ec <_gcvt+0x14c>
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	f1c2 0100 	rsb	r1, r2, #0
 80087b8:	bfc8      	it	gt
 80087ba:	2100      	movgt	r1, #0
 80087bc:	f101 0c01 	add.w	ip, r1, #1
 80087c0:	4463      	add	r3, ip
 80087c2:	440a      	add	r2, r1
 80087c4:	b107      	cbz	r7, 80087c8 <_gcvt+0x128>
 80087c6:	9207      	str	r2, [sp, #28]
 80087c8:	1e42      	subs	r2, r0, #1
 80087ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80087ce:	b109      	cbz	r1, 80087d4 <_gcvt+0x134>
 80087d0:	2c00      	cmp	r4, #0
 80087d2:	dc0f      	bgt.n	80087f4 <_gcvt+0x154>
 80087d4:	b9de      	cbnz	r6, 800880e <_gcvt+0x16e>
 80087d6:	2200      	movs	r2, #0
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	e77e      	b.n	80086da <_gcvt+0x3a>
 80087dc:	2c00      	cmp	r4, #0
 80087de:	f102 32ff 	add.w	r2, r2, #4294967295
 80087e2:	dcc9      	bgt.n	8008778 <_gcvt+0xd8>
 80087e4:	2900      	cmp	r1, #0
 80087e6:	d0d0      	beq.n	800878a <_gcvt+0xea>
 80087e8:	9707      	str	r7, [sp, #28]
 80087ea:	e7ce      	b.n	800878a <_gcvt+0xea>
 80087ec:	2701      	movs	r7, #1
 80087ee:	f801 ef01 	strb.w	lr, [r1, #1]!
 80087f2:	e7db      	b.n	80087ac <_gcvt+0x10c>
 80087f4:	f803 1b01 	strb.w	r1, [r3], #1
 80087f8:	3c01      	subs	r4, #1
 80087fa:	e7e6      	b.n	80087ca <_gcvt+0x12a>
 80087fc:	f802 6b01 	strb.w	r6, [r2], #1
 8008800:	1a81      	subs	r1, r0, r2
 8008802:	2900      	cmp	r1, #0
 8008804:	dcfa      	bgt.n	80087fc <_gcvt+0x15c>
 8008806:	2c00      	cmp	r4, #0
 8008808:	bfa8      	it	ge
 800880a:	191b      	addge	r3, r3, r4
 800880c:	e7e3      	b.n	80087d6 <_gcvt+0x136>
 800880e:	461a      	mov	r2, r3
 8008810:	2630      	movs	r6, #48	; 0x30
 8008812:	1918      	adds	r0, r3, r4
 8008814:	e7f4      	b.n	8008800 <_gcvt+0x160>
 8008816:	bf00      	nop
 8008818:	eb1c432d 	.word	0xeb1c432d
 800881c:	3f1a36e2 	.word	0x3f1a36e2

08008820 <rshift>:
 8008820:	6903      	ldr	r3, [r0, #16]
 8008822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008826:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800882a:	f100 0414 	add.w	r4, r0, #20
 800882e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008832:	dd46      	ble.n	80088c2 <rshift+0xa2>
 8008834:	f011 011f 	ands.w	r1, r1, #31
 8008838:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800883c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008840:	d10c      	bne.n	800885c <rshift+0x3c>
 8008842:	4629      	mov	r1, r5
 8008844:	f100 0710 	add.w	r7, r0, #16
 8008848:	42b1      	cmp	r1, r6
 800884a:	d335      	bcc.n	80088b8 <rshift+0x98>
 800884c:	1a9b      	subs	r3, r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	1eea      	subs	r2, r5, #3
 8008852:	4296      	cmp	r6, r2
 8008854:	bf38      	it	cc
 8008856:	2300      	movcc	r3, #0
 8008858:	4423      	add	r3, r4
 800885a:	e015      	b.n	8008888 <rshift+0x68>
 800885c:	46a1      	mov	r9, r4
 800885e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008862:	f1c1 0820 	rsb	r8, r1, #32
 8008866:	40cf      	lsrs	r7, r1
 8008868:	f105 0e04 	add.w	lr, r5, #4
 800886c:	4576      	cmp	r6, lr
 800886e:	46f4      	mov	ip, lr
 8008870:	d816      	bhi.n	80088a0 <rshift+0x80>
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	009a      	lsls	r2, r3, #2
 8008876:	3a04      	subs	r2, #4
 8008878:	3501      	adds	r5, #1
 800887a:	42ae      	cmp	r6, r5
 800887c:	bf38      	it	cc
 800887e:	2200      	movcc	r2, #0
 8008880:	18a3      	adds	r3, r4, r2
 8008882:	50a7      	str	r7, [r4, r2]
 8008884:	b107      	cbz	r7, 8008888 <rshift+0x68>
 8008886:	3304      	adds	r3, #4
 8008888:	42a3      	cmp	r3, r4
 800888a:	eba3 0204 	sub.w	r2, r3, r4
 800888e:	bf08      	it	eq
 8008890:	2300      	moveq	r3, #0
 8008892:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008896:	6102      	str	r2, [r0, #16]
 8008898:	bf08      	it	eq
 800889a:	6143      	streq	r3, [r0, #20]
 800889c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088a0:	f8dc c000 	ldr.w	ip, [ip]
 80088a4:	fa0c fc08 	lsl.w	ip, ip, r8
 80088a8:	ea4c 0707 	orr.w	r7, ip, r7
 80088ac:	f849 7b04 	str.w	r7, [r9], #4
 80088b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088b4:	40cf      	lsrs	r7, r1
 80088b6:	e7d9      	b.n	800886c <rshift+0x4c>
 80088b8:	f851 cb04 	ldr.w	ip, [r1], #4
 80088bc:	f847 cf04 	str.w	ip, [r7, #4]!
 80088c0:	e7c2      	b.n	8008848 <rshift+0x28>
 80088c2:	4623      	mov	r3, r4
 80088c4:	e7e0      	b.n	8008888 <rshift+0x68>

080088c6 <__hexdig_fun>:
 80088c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80088ca:	2b09      	cmp	r3, #9
 80088cc:	d802      	bhi.n	80088d4 <__hexdig_fun+0xe>
 80088ce:	3820      	subs	r0, #32
 80088d0:	b2c0      	uxtb	r0, r0
 80088d2:	4770      	bx	lr
 80088d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80088d8:	2b05      	cmp	r3, #5
 80088da:	d801      	bhi.n	80088e0 <__hexdig_fun+0x1a>
 80088dc:	3847      	subs	r0, #71	; 0x47
 80088de:	e7f7      	b.n	80088d0 <__hexdig_fun+0xa>
 80088e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d801      	bhi.n	80088ec <__hexdig_fun+0x26>
 80088e8:	3827      	subs	r0, #39	; 0x27
 80088ea:	e7f1      	b.n	80088d0 <__hexdig_fun+0xa>
 80088ec:	2000      	movs	r0, #0
 80088ee:	4770      	bx	lr

080088f0 <__gethex>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	b08b      	sub	sp, #44	; 0x2c
 80088f6:	9306      	str	r3, [sp, #24]
 80088f8:	4bb9      	ldr	r3, [pc, #740]	; (8008be0 <__gethex+0x2f0>)
 80088fa:	9002      	str	r0, [sp, #8]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	468b      	mov	fp, r1
 8008900:	4618      	mov	r0, r3
 8008902:	4690      	mov	r8, r2
 8008904:	9303      	str	r3, [sp, #12]
 8008906:	f7f7 fc23 	bl	8000150 <strlen>
 800890a:	4682      	mov	sl, r0
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	f8db 2000 	ldr.w	r2, [fp]
 8008912:	4403      	add	r3, r0
 8008914:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008918:	9307      	str	r3, [sp, #28]
 800891a:	1c93      	adds	r3, r2, #2
 800891c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008920:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008924:	32fe      	adds	r2, #254	; 0xfe
 8008926:	18d1      	adds	r1, r2, r3
 8008928:	461f      	mov	r7, r3
 800892a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800892e:	9101      	str	r1, [sp, #4]
 8008930:	2830      	cmp	r0, #48	; 0x30
 8008932:	d0f8      	beq.n	8008926 <__gethex+0x36>
 8008934:	f7ff ffc7 	bl	80088c6 <__hexdig_fun>
 8008938:	4604      	mov	r4, r0
 800893a:	2800      	cmp	r0, #0
 800893c:	d13a      	bne.n	80089b4 <__gethex+0xc4>
 800893e:	4652      	mov	r2, sl
 8008940:	4638      	mov	r0, r7
 8008942:	9903      	ldr	r1, [sp, #12]
 8008944:	f001 f84c 	bl	80099e0 <strncmp>
 8008948:	4605      	mov	r5, r0
 800894a:	2800      	cmp	r0, #0
 800894c:	d166      	bne.n	8008a1c <__gethex+0x12c>
 800894e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008952:	eb07 060a 	add.w	r6, r7, sl
 8008956:	f7ff ffb6 	bl	80088c6 <__hexdig_fun>
 800895a:	2800      	cmp	r0, #0
 800895c:	d060      	beq.n	8008a20 <__gethex+0x130>
 800895e:	4633      	mov	r3, r6
 8008960:	7818      	ldrb	r0, [r3, #0]
 8008962:	461f      	mov	r7, r3
 8008964:	2830      	cmp	r0, #48	; 0x30
 8008966:	f103 0301 	add.w	r3, r3, #1
 800896a:	d0f9      	beq.n	8008960 <__gethex+0x70>
 800896c:	f7ff ffab 	bl	80088c6 <__hexdig_fun>
 8008970:	2301      	movs	r3, #1
 8008972:	fab0 f480 	clz	r4, r0
 8008976:	4635      	mov	r5, r6
 8008978:	0964      	lsrs	r4, r4, #5
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	463a      	mov	r2, r7
 800897e:	4616      	mov	r6, r2
 8008980:	7830      	ldrb	r0, [r6, #0]
 8008982:	3201      	adds	r2, #1
 8008984:	f7ff ff9f 	bl	80088c6 <__hexdig_fun>
 8008988:	2800      	cmp	r0, #0
 800898a:	d1f8      	bne.n	800897e <__gethex+0x8e>
 800898c:	4652      	mov	r2, sl
 800898e:	4630      	mov	r0, r6
 8008990:	9903      	ldr	r1, [sp, #12]
 8008992:	f001 f825 	bl	80099e0 <strncmp>
 8008996:	b980      	cbnz	r0, 80089ba <__gethex+0xca>
 8008998:	b94d      	cbnz	r5, 80089ae <__gethex+0xbe>
 800899a:	eb06 050a 	add.w	r5, r6, sl
 800899e:	462a      	mov	r2, r5
 80089a0:	4616      	mov	r6, r2
 80089a2:	7830      	ldrb	r0, [r6, #0]
 80089a4:	3201      	adds	r2, #1
 80089a6:	f7ff ff8e 	bl	80088c6 <__hexdig_fun>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d1f8      	bne.n	80089a0 <__gethex+0xb0>
 80089ae:	1bad      	subs	r5, r5, r6
 80089b0:	00ad      	lsls	r5, r5, #2
 80089b2:	e004      	b.n	80089be <__gethex+0xce>
 80089b4:	2400      	movs	r4, #0
 80089b6:	4625      	mov	r5, r4
 80089b8:	e7e0      	b.n	800897c <__gethex+0x8c>
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	d1f7      	bne.n	80089ae <__gethex+0xbe>
 80089be:	7833      	ldrb	r3, [r6, #0]
 80089c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089c4:	2b50      	cmp	r3, #80	; 0x50
 80089c6:	d139      	bne.n	8008a3c <__gethex+0x14c>
 80089c8:	7873      	ldrb	r3, [r6, #1]
 80089ca:	2b2b      	cmp	r3, #43	; 0x2b
 80089cc:	d02a      	beq.n	8008a24 <__gethex+0x134>
 80089ce:	2b2d      	cmp	r3, #45	; 0x2d
 80089d0:	d02c      	beq.n	8008a2c <__gethex+0x13c>
 80089d2:	f04f 0900 	mov.w	r9, #0
 80089d6:	1c71      	adds	r1, r6, #1
 80089d8:	7808      	ldrb	r0, [r1, #0]
 80089da:	f7ff ff74 	bl	80088c6 <__hexdig_fun>
 80089de:	1e43      	subs	r3, r0, #1
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b18      	cmp	r3, #24
 80089e4:	d82a      	bhi.n	8008a3c <__gethex+0x14c>
 80089e6:	f1a0 0210 	sub.w	r2, r0, #16
 80089ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089ee:	f7ff ff6a 	bl	80088c6 <__hexdig_fun>
 80089f2:	1e43      	subs	r3, r0, #1
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b18      	cmp	r3, #24
 80089f8:	d91b      	bls.n	8008a32 <__gethex+0x142>
 80089fa:	f1b9 0f00 	cmp.w	r9, #0
 80089fe:	d000      	beq.n	8008a02 <__gethex+0x112>
 8008a00:	4252      	negs	r2, r2
 8008a02:	4415      	add	r5, r2
 8008a04:	f8cb 1000 	str.w	r1, [fp]
 8008a08:	b1d4      	cbz	r4, 8008a40 <__gethex+0x150>
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bf14      	ite	ne
 8008a10:	2700      	movne	r7, #0
 8008a12:	2706      	moveq	r7, #6
 8008a14:	4638      	mov	r0, r7
 8008a16:	b00b      	add	sp, #44	; 0x2c
 8008a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1c:	463e      	mov	r6, r7
 8008a1e:	4625      	mov	r5, r4
 8008a20:	2401      	movs	r4, #1
 8008a22:	e7cc      	b.n	80089be <__gethex+0xce>
 8008a24:	f04f 0900 	mov.w	r9, #0
 8008a28:	1cb1      	adds	r1, r6, #2
 8008a2a:	e7d5      	b.n	80089d8 <__gethex+0xe8>
 8008a2c:	f04f 0901 	mov.w	r9, #1
 8008a30:	e7fa      	b.n	8008a28 <__gethex+0x138>
 8008a32:	230a      	movs	r3, #10
 8008a34:	fb03 0202 	mla	r2, r3, r2, r0
 8008a38:	3a10      	subs	r2, #16
 8008a3a:	e7d6      	b.n	80089ea <__gethex+0xfa>
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	e7e1      	b.n	8008a04 <__gethex+0x114>
 8008a40:	4621      	mov	r1, r4
 8008a42:	1bf3      	subs	r3, r6, r7
 8008a44:	3b01      	subs	r3, #1
 8008a46:	2b07      	cmp	r3, #7
 8008a48:	dc0a      	bgt.n	8008a60 <__gethex+0x170>
 8008a4a:	9802      	ldr	r0, [sp, #8]
 8008a4c:	f000 fa6e 	bl	8008f2c <_Balloc>
 8008a50:	4604      	mov	r4, r0
 8008a52:	b940      	cbnz	r0, 8008a66 <__gethex+0x176>
 8008a54:	4602      	mov	r2, r0
 8008a56:	21de      	movs	r1, #222	; 0xde
 8008a58:	4b62      	ldr	r3, [pc, #392]	; (8008be4 <__gethex+0x2f4>)
 8008a5a:	4863      	ldr	r0, [pc, #396]	; (8008be8 <__gethex+0x2f8>)
 8008a5c:	f000 ffe0 	bl	8009a20 <__assert_func>
 8008a60:	3101      	adds	r1, #1
 8008a62:	105b      	asrs	r3, r3, #1
 8008a64:	e7ef      	b.n	8008a46 <__gethex+0x156>
 8008a66:	f04f 0b00 	mov.w	fp, #0
 8008a6a:	f100 0914 	add.w	r9, r0, #20
 8008a6e:	f1ca 0301 	rsb	r3, sl, #1
 8008a72:	f8cd 9010 	str.w	r9, [sp, #16]
 8008a76:	f8cd b004 	str.w	fp, [sp, #4]
 8008a7a:	9308      	str	r3, [sp, #32]
 8008a7c:	42b7      	cmp	r7, r6
 8008a7e:	d33f      	bcc.n	8008b00 <__gethex+0x210>
 8008a80:	9f04      	ldr	r7, [sp, #16]
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	f847 3b04 	str.w	r3, [r7], #4
 8008a88:	eba7 0709 	sub.w	r7, r7, r9
 8008a8c:	10bf      	asrs	r7, r7, #2
 8008a8e:	6127      	str	r7, [r4, #16]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fb41 	bl	8009118 <__hi0bits>
 8008a96:	017f      	lsls	r7, r7, #5
 8008a98:	f8d8 6000 	ldr.w	r6, [r8]
 8008a9c:	1a3f      	subs	r7, r7, r0
 8008a9e:	42b7      	cmp	r7, r6
 8008aa0:	dd62      	ble.n	8008b68 <__gethex+0x278>
 8008aa2:	1bbf      	subs	r7, r7, r6
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 fef3 	bl	8009892 <__any_on>
 8008aac:	4682      	mov	sl, r0
 8008aae:	b1a8      	cbz	r0, 8008adc <__gethex+0x1ec>
 8008ab0:	f04f 0a01 	mov.w	sl, #1
 8008ab4:	1e7b      	subs	r3, r7, #1
 8008ab6:	1159      	asrs	r1, r3, #5
 8008ab8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008abc:	f003 021f 	and.w	r2, r3, #31
 8008ac0:	fa0a f202 	lsl.w	r2, sl, r2
 8008ac4:	420a      	tst	r2, r1
 8008ac6:	d009      	beq.n	8008adc <__gethex+0x1ec>
 8008ac8:	4553      	cmp	r3, sl
 8008aca:	dd05      	ble.n	8008ad8 <__gethex+0x1e8>
 8008acc:	4620      	mov	r0, r4
 8008ace:	1eb9      	subs	r1, r7, #2
 8008ad0:	f000 fedf 	bl	8009892 <__any_on>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d144      	bne.n	8008b62 <__gethex+0x272>
 8008ad8:	f04f 0a02 	mov.w	sl, #2
 8008adc:	4639      	mov	r1, r7
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7ff fe9e 	bl	8008820 <rshift>
 8008ae4:	443d      	add	r5, r7
 8008ae6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008aea:	42ab      	cmp	r3, r5
 8008aec:	da4a      	bge.n	8008b84 <__gethex+0x294>
 8008aee:	4621      	mov	r1, r4
 8008af0:	9802      	ldr	r0, [sp, #8]
 8008af2:	f000 fa5b 	bl	8008fac <_Bfree>
 8008af6:	2300      	movs	r3, #0
 8008af8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008afa:	27a3      	movs	r7, #163	; 0xa3
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e789      	b.n	8008a14 <__gethex+0x124>
 8008b00:	1e73      	subs	r3, r6, #1
 8008b02:	9a07      	ldr	r2, [sp, #28]
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d019      	beq.n	8008b42 <__gethex+0x252>
 8008b0e:	f1bb 0f20 	cmp.w	fp, #32
 8008b12:	d107      	bne.n	8008b24 <__gethex+0x234>
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	9a01      	ldr	r2, [sp, #4]
 8008b18:	f843 2b04 	str.w	r2, [r3], #4
 8008b1c:	9304      	str	r3, [sp, #16]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	469b      	mov	fp, r3
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008b28:	f7ff fecd 	bl	80088c6 <__hexdig_fun>
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	f000 000f 	and.w	r0, r0, #15
 8008b32:	fa00 f00b 	lsl.w	r0, r0, fp
 8008b36:	4303      	orrs	r3, r0
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	f10b 0b04 	add.w	fp, fp, #4
 8008b3e:	9b05      	ldr	r3, [sp, #20]
 8008b40:	e00d      	b.n	8008b5e <__gethex+0x26e>
 8008b42:	9b05      	ldr	r3, [sp, #20]
 8008b44:	9a08      	ldr	r2, [sp, #32]
 8008b46:	4413      	add	r3, r2
 8008b48:	42bb      	cmp	r3, r7
 8008b4a:	d3e0      	bcc.n	8008b0e <__gethex+0x21e>
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	4652      	mov	r2, sl
 8008b50:	9903      	ldr	r1, [sp, #12]
 8008b52:	9309      	str	r3, [sp, #36]	; 0x24
 8008b54:	f000 ff44 	bl	80099e0 <strncmp>
 8008b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d1d7      	bne.n	8008b0e <__gethex+0x21e>
 8008b5e:	461e      	mov	r6, r3
 8008b60:	e78c      	b.n	8008a7c <__gethex+0x18c>
 8008b62:	f04f 0a03 	mov.w	sl, #3
 8008b66:	e7b9      	b.n	8008adc <__gethex+0x1ec>
 8008b68:	da09      	bge.n	8008b7e <__gethex+0x28e>
 8008b6a:	1bf7      	subs	r7, r6, r7
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	463a      	mov	r2, r7
 8008b70:	9802      	ldr	r0, [sp, #8]
 8008b72:	f000 fc33 	bl	80093dc <__lshift>
 8008b76:	4604      	mov	r4, r0
 8008b78:	1bed      	subs	r5, r5, r7
 8008b7a:	f100 0914 	add.w	r9, r0, #20
 8008b7e:	f04f 0a00 	mov.w	sl, #0
 8008b82:	e7b0      	b.n	8008ae6 <__gethex+0x1f6>
 8008b84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b88:	42a8      	cmp	r0, r5
 8008b8a:	dd71      	ble.n	8008c70 <__gethex+0x380>
 8008b8c:	1b45      	subs	r5, r0, r5
 8008b8e:	42ae      	cmp	r6, r5
 8008b90:	dc34      	bgt.n	8008bfc <__gethex+0x30c>
 8008b92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d028      	beq.n	8008bec <__gethex+0x2fc>
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d02a      	beq.n	8008bf4 <__gethex+0x304>
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d115      	bne.n	8008bce <__gethex+0x2de>
 8008ba2:	42ae      	cmp	r6, r5
 8008ba4:	d113      	bne.n	8008bce <__gethex+0x2de>
 8008ba6:	2e01      	cmp	r6, #1
 8008ba8:	d10b      	bne.n	8008bc2 <__gethex+0x2d2>
 8008baa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008bae:	9a06      	ldr	r2, [sp, #24]
 8008bb0:	2762      	movs	r7, #98	; 0x62
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	6123      	str	r3, [r4, #16]
 8008bb8:	f8c9 3000 	str.w	r3, [r9]
 8008bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bbe:	601c      	str	r4, [r3, #0]
 8008bc0:	e728      	b.n	8008a14 <__gethex+0x124>
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	1e71      	subs	r1, r6, #1
 8008bc6:	f000 fe64 	bl	8009892 <__any_on>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d1ed      	bne.n	8008baa <__gethex+0x2ba>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	9802      	ldr	r0, [sp, #8]
 8008bd2:	f000 f9eb 	bl	8008fac <_Bfree>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bda:	2750      	movs	r7, #80	; 0x50
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	e719      	b.n	8008a14 <__gethex+0x124>
 8008be0:	0800b704 	.word	0x0800b704
 8008be4:	0800b688 	.word	0x0800b688
 8008be8:	0800b699 	.word	0x0800b699
 8008bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1ed      	bne.n	8008bce <__gethex+0x2de>
 8008bf2:	e7da      	b.n	8008baa <__gethex+0x2ba>
 8008bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1d7      	bne.n	8008baa <__gethex+0x2ba>
 8008bfa:	e7e8      	b.n	8008bce <__gethex+0x2de>
 8008bfc:	1e6f      	subs	r7, r5, #1
 8008bfe:	f1ba 0f00 	cmp.w	sl, #0
 8008c02:	d132      	bne.n	8008c6a <__gethex+0x37a>
 8008c04:	b127      	cbz	r7, 8008c10 <__gethex+0x320>
 8008c06:	4639      	mov	r1, r7
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fe42 	bl	8009892 <__any_on>
 8008c0e:	4682      	mov	sl, r0
 8008c10:	2101      	movs	r1, #1
 8008c12:	117b      	asrs	r3, r7, #5
 8008c14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008c18:	f007 071f 	and.w	r7, r7, #31
 8008c1c:	fa01 f707 	lsl.w	r7, r1, r7
 8008c20:	421f      	tst	r7, r3
 8008c22:	f04f 0702 	mov.w	r7, #2
 8008c26:	4629      	mov	r1, r5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	bf18      	it	ne
 8008c2c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c30:	1b76      	subs	r6, r6, r5
 8008c32:	f7ff fdf5 	bl	8008820 <rshift>
 8008c36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c3a:	f1ba 0f00 	cmp.w	sl, #0
 8008c3e:	d048      	beq.n	8008cd2 <__gethex+0x3e2>
 8008c40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d015      	beq.n	8008c74 <__gethex+0x384>
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d017      	beq.n	8008c7c <__gethex+0x38c>
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d109      	bne.n	8008c64 <__gethex+0x374>
 8008c50:	f01a 0f02 	tst.w	sl, #2
 8008c54:	d006      	beq.n	8008c64 <__gethex+0x374>
 8008c56:	f8d9 0000 	ldr.w	r0, [r9]
 8008c5a:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c5e:	f01a 0f01 	tst.w	sl, #1
 8008c62:	d10e      	bne.n	8008c82 <__gethex+0x392>
 8008c64:	f047 0710 	orr.w	r7, r7, #16
 8008c68:	e033      	b.n	8008cd2 <__gethex+0x3e2>
 8008c6a:	f04f 0a01 	mov.w	sl, #1
 8008c6e:	e7cf      	b.n	8008c10 <__gethex+0x320>
 8008c70:	2701      	movs	r7, #1
 8008c72:	e7e2      	b.n	8008c3a <__gethex+0x34a>
 8008c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c76:	f1c3 0301 	rsb	r3, r3, #1
 8008c7a:	9315      	str	r3, [sp, #84]	; 0x54
 8008c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0f0      	beq.n	8008c64 <__gethex+0x374>
 8008c82:	f04f 0c00 	mov.w	ip, #0
 8008c86:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c8a:	f104 0314 	add.w	r3, r4, #20
 8008c8e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c92:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ca0:	d01c      	beq.n	8008cdc <__gethex+0x3ec>
 8008ca2:	3201      	adds	r2, #1
 8008ca4:	6002      	str	r2, [r0, #0]
 8008ca6:	2f02      	cmp	r7, #2
 8008ca8:	f104 0314 	add.w	r3, r4, #20
 8008cac:	d13d      	bne.n	8008d2a <__gethex+0x43a>
 8008cae:	f8d8 2000 	ldr.w	r2, [r8]
 8008cb2:	3a01      	subs	r2, #1
 8008cb4:	42b2      	cmp	r2, r6
 8008cb6:	d10a      	bne.n	8008cce <__gethex+0x3de>
 8008cb8:	2201      	movs	r2, #1
 8008cba:	1171      	asrs	r1, r6, #5
 8008cbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cc0:	f006 061f 	and.w	r6, r6, #31
 8008cc4:	fa02 f606 	lsl.w	r6, r2, r6
 8008cc8:	421e      	tst	r6, r3
 8008cca:	bf18      	it	ne
 8008ccc:	4617      	movne	r7, r2
 8008cce:	f047 0720 	orr.w	r7, r7, #32
 8008cd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cd4:	601c      	str	r4, [r3, #0]
 8008cd6:	9b06      	ldr	r3, [sp, #24]
 8008cd8:	601d      	str	r5, [r3, #0]
 8008cda:	e69b      	b.n	8008a14 <__gethex+0x124>
 8008cdc:	4299      	cmp	r1, r3
 8008cde:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ce2:	d8d8      	bhi.n	8008c96 <__gethex+0x3a6>
 8008ce4:	68a3      	ldr	r3, [r4, #8]
 8008ce6:	459b      	cmp	fp, r3
 8008ce8:	db17      	blt.n	8008d1a <__gethex+0x42a>
 8008cea:	6861      	ldr	r1, [r4, #4]
 8008cec:	9802      	ldr	r0, [sp, #8]
 8008cee:	3101      	adds	r1, #1
 8008cf0:	f000 f91c 	bl	8008f2c <_Balloc>
 8008cf4:	4681      	mov	r9, r0
 8008cf6:	b918      	cbnz	r0, 8008d00 <__gethex+0x410>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	2184      	movs	r1, #132	; 0x84
 8008cfc:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <__gethex+0x474>)
 8008cfe:	e6ac      	b.n	8008a5a <__gethex+0x16a>
 8008d00:	6922      	ldr	r2, [r4, #16]
 8008d02:	f104 010c 	add.w	r1, r4, #12
 8008d06:	3202      	adds	r2, #2
 8008d08:	0092      	lsls	r2, r2, #2
 8008d0a:	300c      	adds	r0, #12
 8008d0c:	f000 f900 	bl	8008f10 <memcpy>
 8008d10:	4621      	mov	r1, r4
 8008d12:	9802      	ldr	r0, [sp, #8]
 8008d14:	f000 f94a 	bl	8008fac <_Bfree>
 8008d18:	464c      	mov	r4, r9
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	6122      	str	r2, [r4, #16]
 8008d20:	2201      	movs	r2, #1
 8008d22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d26:	615a      	str	r2, [r3, #20]
 8008d28:	e7bd      	b.n	8008ca6 <__gethex+0x3b6>
 8008d2a:	6922      	ldr	r2, [r4, #16]
 8008d2c:	455a      	cmp	r2, fp
 8008d2e:	dd0b      	ble.n	8008d48 <__gethex+0x458>
 8008d30:	2101      	movs	r1, #1
 8008d32:	4620      	mov	r0, r4
 8008d34:	f7ff fd74 	bl	8008820 <rshift>
 8008d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d3c:	3501      	adds	r5, #1
 8008d3e:	42ab      	cmp	r3, r5
 8008d40:	f6ff aed5 	blt.w	8008aee <__gethex+0x1fe>
 8008d44:	2701      	movs	r7, #1
 8008d46:	e7c2      	b.n	8008cce <__gethex+0x3de>
 8008d48:	f016 061f 	ands.w	r6, r6, #31
 8008d4c:	d0fa      	beq.n	8008d44 <__gethex+0x454>
 8008d4e:	449a      	add	sl, r3
 8008d50:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008d54:	f000 f9e0 	bl	8009118 <__hi0bits>
 8008d58:	f1c6 0620 	rsb	r6, r6, #32
 8008d5c:	42b0      	cmp	r0, r6
 8008d5e:	dbe7      	blt.n	8008d30 <__gethex+0x440>
 8008d60:	e7f0      	b.n	8008d44 <__gethex+0x454>
 8008d62:	bf00      	nop
 8008d64:	0800b688 	.word	0x0800b688

08008d68 <L_shift>:
 8008d68:	f1c2 0208 	rsb	r2, r2, #8
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	b570      	push	{r4, r5, r6, lr}
 8008d70:	f1c2 0620 	rsb	r6, r2, #32
 8008d74:	6843      	ldr	r3, [r0, #4]
 8008d76:	6804      	ldr	r4, [r0, #0]
 8008d78:	fa03 f506 	lsl.w	r5, r3, r6
 8008d7c:	432c      	orrs	r4, r5
 8008d7e:	40d3      	lsrs	r3, r2
 8008d80:	6004      	str	r4, [r0, #0]
 8008d82:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d86:	4288      	cmp	r0, r1
 8008d88:	d3f4      	bcc.n	8008d74 <L_shift+0xc>
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}

08008d8c <__match>:
 8008d8c:	b530      	push	{r4, r5, lr}
 8008d8e:	6803      	ldr	r3, [r0, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d96:	b914      	cbnz	r4, 8008d9e <__match+0x12>
 8008d98:	6003      	str	r3, [r0, #0]
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	bd30      	pop	{r4, r5, pc}
 8008d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008da2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008da6:	2d19      	cmp	r5, #25
 8008da8:	bf98      	it	ls
 8008daa:	3220      	addls	r2, #32
 8008dac:	42a2      	cmp	r2, r4
 8008dae:	d0f0      	beq.n	8008d92 <__match+0x6>
 8008db0:	2000      	movs	r0, #0
 8008db2:	e7f3      	b.n	8008d9c <__match+0x10>

08008db4 <__hexnan>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	2500      	movs	r5, #0
 8008dba:	680b      	ldr	r3, [r1, #0]
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	115e      	asrs	r6, r3, #5
 8008dc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008dc4:	f013 031f 	ands.w	r3, r3, #31
 8008dc8:	bf18      	it	ne
 8008dca:	3604      	addne	r6, #4
 8008dcc:	1f37      	subs	r7, r6, #4
 8008dce:	4690      	mov	r8, r2
 8008dd0:	46b9      	mov	r9, r7
 8008dd2:	463c      	mov	r4, r7
 8008dd4:	46ab      	mov	fp, r5
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	6801      	ldr	r1, [r0, #0]
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	f846 5c04 	str.w	r5, [r6, #-4]
 8008de0:	9502      	str	r5, [sp, #8]
 8008de2:	784a      	ldrb	r2, [r1, #1]
 8008de4:	1c4b      	adds	r3, r1, #1
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	b342      	cbz	r2, 8008e3c <__hexnan+0x88>
 8008dea:	4610      	mov	r0, r2
 8008dec:	9105      	str	r1, [sp, #20]
 8008dee:	9204      	str	r2, [sp, #16]
 8008df0:	f7ff fd69 	bl	80088c6 <__hexdig_fun>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d14f      	bne.n	8008e98 <__hexnan+0xe4>
 8008df8:	9a04      	ldr	r2, [sp, #16]
 8008dfa:	9905      	ldr	r1, [sp, #20]
 8008dfc:	2a20      	cmp	r2, #32
 8008dfe:	d818      	bhi.n	8008e32 <__hexnan+0x7e>
 8008e00:	9b02      	ldr	r3, [sp, #8]
 8008e02:	459b      	cmp	fp, r3
 8008e04:	dd13      	ble.n	8008e2e <__hexnan+0x7a>
 8008e06:	454c      	cmp	r4, r9
 8008e08:	d206      	bcs.n	8008e18 <__hexnan+0x64>
 8008e0a:	2d07      	cmp	r5, #7
 8008e0c:	dc04      	bgt.n	8008e18 <__hexnan+0x64>
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4649      	mov	r1, r9
 8008e12:	4620      	mov	r0, r4
 8008e14:	f7ff ffa8 	bl	8008d68 <L_shift>
 8008e18:	4544      	cmp	r4, r8
 8008e1a:	d950      	bls.n	8008ebe <__hexnan+0x10a>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f1a4 0904 	sub.w	r9, r4, #4
 8008e22:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e26:	461d      	mov	r5, r3
 8008e28:	464c      	mov	r4, r9
 8008e2a:	f8cd b008 	str.w	fp, [sp, #8]
 8008e2e:	9903      	ldr	r1, [sp, #12]
 8008e30:	e7d7      	b.n	8008de2 <__hexnan+0x2e>
 8008e32:	2a29      	cmp	r2, #41	; 0x29
 8008e34:	d156      	bne.n	8008ee4 <__hexnan+0x130>
 8008e36:	3102      	adds	r1, #2
 8008e38:	f8ca 1000 	str.w	r1, [sl]
 8008e3c:	f1bb 0f00 	cmp.w	fp, #0
 8008e40:	d050      	beq.n	8008ee4 <__hexnan+0x130>
 8008e42:	454c      	cmp	r4, r9
 8008e44:	d206      	bcs.n	8008e54 <__hexnan+0xa0>
 8008e46:	2d07      	cmp	r5, #7
 8008e48:	dc04      	bgt.n	8008e54 <__hexnan+0xa0>
 8008e4a:	462a      	mov	r2, r5
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f7ff ff8a 	bl	8008d68 <L_shift>
 8008e54:	4544      	cmp	r4, r8
 8008e56:	d934      	bls.n	8008ec2 <__hexnan+0x10e>
 8008e58:	4623      	mov	r3, r4
 8008e5a:	f1a8 0204 	sub.w	r2, r8, #4
 8008e5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e62:	429f      	cmp	r7, r3
 8008e64:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e68:	d2f9      	bcs.n	8008e5e <__hexnan+0xaa>
 8008e6a:	1b3b      	subs	r3, r7, r4
 8008e6c:	f023 0303 	bic.w	r3, r3, #3
 8008e70:	3304      	adds	r3, #4
 8008e72:	3401      	adds	r4, #1
 8008e74:	3e03      	subs	r6, #3
 8008e76:	42b4      	cmp	r4, r6
 8008e78:	bf88      	it	hi
 8008e7a:	2304      	movhi	r3, #4
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4443      	add	r3, r8
 8008e80:	f843 2b04 	str.w	r2, [r3], #4
 8008e84:	429f      	cmp	r7, r3
 8008e86:	d2fb      	bcs.n	8008e80 <__hexnan+0xcc>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	b91b      	cbnz	r3, 8008e94 <__hexnan+0xe0>
 8008e8c:	4547      	cmp	r7, r8
 8008e8e:	d127      	bne.n	8008ee0 <__hexnan+0x12c>
 8008e90:	2301      	movs	r3, #1
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	2005      	movs	r0, #5
 8008e96:	e026      	b.n	8008ee6 <__hexnan+0x132>
 8008e98:	3501      	adds	r5, #1
 8008e9a:	2d08      	cmp	r5, #8
 8008e9c:	f10b 0b01 	add.w	fp, fp, #1
 8008ea0:	dd06      	ble.n	8008eb0 <__hexnan+0xfc>
 8008ea2:	4544      	cmp	r4, r8
 8008ea4:	d9c3      	bls.n	8008e2e <__hexnan+0x7a>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2501      	movs	r5, #1
 8008eaa:	f844 3c04 	str.w	r3, [r4, #-4]
 8008eae:	3c04      	subs	r4, #4
 8008eb0:	6822      	ldr	r2, [r4, #0]
 8008eb2:	f000 000f 	and.w	r0, r0, #15
 8008eb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008eba:	6022      	str	r2, [r4, #0]
 8008ebc:	e7b7      	b.n	8008e2e <__hexnan+0x7a>
 8008ebe:	2508      	movs	r5, #8
 8008ec0:	e7b5      	b.n	8008e2e <__hexnan+0x7a>
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0df      	beq.n	8008e88 <__hexnan+0xd4>
 8008ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ecc:	f1c3 0320 	rsb	r3, r3, #32
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ed8:	401a      	ands	r2, r3
 8008eda:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ede:	e7d3      	b.n	8008e88 <__hexnan+0xd4>
 8008ee0:	3f04      	subs	r7, #4
 8008ee2:	e7d1      	b.n	8008e88 <__hexnan+0xd4>
 8008ee4:	2004      	movs	r0, #4
 8008ee6:	b007      	add	sp, #28
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008eec <__ascii_mbtowc>:
 8008eec:	b082      	sub	sp, #8
 8008eee:	b901      	cbnz	r1, 8008ef2 <__ascii_mbtowc+0x6>
 8008ef0:	a901      	add	r1, sp, #4
 8008ef2:	b142      	cbz	r2, 8008f06 <__ascii_mbtowc+0x1a>
 8008ef4:	b14b      	cbz	r3, 8008f0a <__ascii_mbtowc+0x1e>
 8008ef6:	7813      	ldrb	r3, [r2, #0]
 8008ef8:	600b      	str	r3, [r1, #0]
 8008efa:	7812      	ldrb	r2, [r2, #0]
 8008efc:	1e10      	subs	r0, r2, #0
 8008efe:	bf18      	it	ne
 8008f00:	2001      	movne	r0, #1
 8008f02:	b002      	add	sp, #8
 8008f04:	4770      	bx	lr
 8008f06:	4610      	mov	r0, r2
 8008f08:	e7fb      	b.n	8008f02 <__ascii_mbtowc+0x16>
 8008f0a:	f06f 0001 	mvn.w	r0, #1
 8008f0e:	e7f8      	b.n	8008f02 <__ascii_mbtowc+0x16>

08008f10 <memcpy>:
 8008f10:	440a      	add	r2, r1
 8008f12:	4291      	cmp	r1, r2
 8008f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f18:	d100      	bne.n	8008f1c <memcpy+0xc>
 8008f1a:	4770      	bx	lr
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f22:	4291      	cmp	r1, r2
 8008f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f28:	d1f9      	bne.n	8008f1e <memcpy+0xe>
 8008f2a:	bd10      	pop	{r4, pc}

08008f2c <_Balloc>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	b976      	cbnz	r6, 8008f54 <_Balloc+0x28>
 8008f36:	2010      	movs	r0, #16
 8008f38:	f001 fc1e 	bl	800a778 <malloc>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f40:	b920      	cbnz	r0, 8008f4c <_Balloc+0x20>
 8008f42:	2166      	movs	r1, #102	; 0x66
 8008f44:	4b17      	ldr	r3, [pc, #92]	; (8008fa4 <_Balloc+0x78>)
 8008f46:	4818      	ldr	r0, [pc, #96]	; (8008fa8 <_Balloc+0x7c>)
 8008f48:	f000 fd6a 	bl	8009a20 <__assert_func>
 8008f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f50:	6006      	str	r6, [r0, #0]
 8008f52:	60c6      	str	r6, [r0, #12]
 8008f54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f56:	68f3      	ldr	r3, [r6, #12]
 8008f58:	b183      	cbz	r3, 8008f7c <_Balloc+0x50>
 8008f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f62:	b9b8      	cbnz	r0, 8008f94 <_Balloc+0x68>
 8008f64:	2101      	movs	r1, #1
 8008f66:	fa01 f605 	lsl.w	r6, r1, r5
 8008f6a:	1d72      	adds	r2, r6, #5
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	0092      	lsls	r2, r2, #2
 8008f70:	f000 fcb0 	bl	80098d4 <_calloc_r>
 8008f74:	b160      	cbz	r0, 8008f90 <_Balloc+0x64>
 8008f76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f7a:	e00e      	b.n	8008f9a <_Balloc+0x6e>
 8008f7c:	2221      	movs	r2, #33	; 0x21
 8008f7e:	2104      	movs	r1, #4
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fca7 	bl	80098d4 <_calloc_r>
 8008f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f88:	60f0      	str	r0, [r6, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e4      	bne.n	8008f5a <_Balloc+0x2e>
 8008f90:	2000      	movs	r0, #0
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	6802      	ldr	r2, [r0, #0]
 8008f96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fa0:	e7f7      	b.n	8008f92 <_Balloc+0x66>
 8008fa2:	bf00      	nop
 8008fa4:	0800b718 	.word	0x0800b718
 8008fa8:	0800b72f 	.word	0x0800b72f

08008fac <_Bfree>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	b976      	cbnz	r6, 8008fd4 <_Bfree+0x28>
 8008fb6:	2010      	movs	r0, #16
 8008fb8:	f001 fbde 	bl	800a778 <malloc>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6268      	str	r0, [r5, #36]	; 0x24
 8008fc0:	b920      	cbnz	r0, 8008fcc <_Bfree+0x20>
 8008fc2:	218a      	movs	r1, #138	; 0x8a
 8008fc4:	4b08      	ldr	r3, [pc, #32]	; (8008fe8 <_Bfree+0x3c>)
 8008fc6:	4809      	ldr	r0, [pc, #36]	; (8008fec <_Bfree+0x40>)
 8008fc8:	f000 fd2a 	bl	8009a20 <__assert_func>
 8008fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd0:	6006      	str	r6, [r0, #0]
 8008fd2:	60c6      	str	r6, [r0, #12]
 8008fd4:	b13c      	cbz	r4, 8008fe6 <_Bfree+0x3a>
 8008fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fd8:	6862      	ldr	r2, [r4, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe0:	6021      	str	r1, [r4, #0]
 8008fe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	0800b718 	.word	0x0800b718
 8008fec:	0800b72f 	.word	0x0800b72f

08008ff0 <__multadd>:
 8008ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff4:	4698      	mov	r8, r3
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	690e      	ldr	r6, [r1, #16]
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	f101 0014 	add.w	r0, r1, #20
 8009002:	6805      	ldr	r5, [r0, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	b2a9      	uxth	r1, r5
 8009008:	fb02 8101 	mla	r1, r2, r1, r8
 800900c:	0c2d      	lsrs	r5, r5, #16
 800900e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009012:	fb02 c505 	mla	r5, r2, r5, ip
 8009016:	b289      	uxth	r1, r1
 8009018:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800901c:	429e      	cmp	r6, r3
 800901e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009022:	f840 1b04 	str.w	r1, [r0], #4
 8009026:	dcec      	bgt.n	8009002 <__multadd+0x12>
 8009028:	f1b8 0f00 	cmp.w	r8, #0
 800902c:	d022      	beq.n	8009074 <__multadd+0x84>
 800902e:	68a3      	ldr	r3, [r4, #8]
 8009030:	42b3      	cmp	r3, r6
 8009032:	dc19      	bgt.n	8009068 <__multadd+0x78>
 8009034:	6861      	ldr	r1, [r4, #4]
 8009036:	4638      	mov	r0, r7
 8009038:	3101      	adds	r1, #1
 800903a:	f7ff ff77 	bl	8008f2c <_Balloc>
 800903e:	4605      	mov	r5, r0
 8009040:	b928      	cbnz	r0, 800904e <__multadd+0x5e>
 8009042:	4602      	mov	r2, r0
 8009044:	21b5      	movs	r1, #181	; 0xb5
 8009046:	4b0d      	ldr	r3, [pc, #52]	; (800907c <__multadd+0x8c>)
 8009048:	480d      	ldr	r0, [pc, #52]	; (8009080 <__multadd+0x90>)
 800904a:	f000 fce9 	bl	8009a20 <__assert_func>
 800904e:	6922      	ldr	r2, [r4, #16]
 8009050:	f104 010c 	add.w	r1, r4, #12
 8009054:	3202      	adds	r2, #2
 8009056:	0092      	lsls	r2, r2, #2
 8009058:	300c      	adds	r0, #12
 800905a:	f7ff ff59 	bl	8008f10 <memcpy>
 800905e:	4621      	mov	r1, r4
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff ffa3 	bl	8008fac <_Bfree>
 8009066:	462c      	mov	r4, r5
 8009068:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800906c:	3601      	adds	r6, #1
 800906e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009072:	6126      	str	r6, [r4, #16]
 8009074:	4620      	mov	r0, r4
 8009076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800907a:	bf00      	nop
 800907c:	0800b688 	.word	0x0800b688
 8009080:	0800b72f 	.word	0x0800b72f

08009084 <__s2b>:
 8009084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009088:	4615      	mov	r5, r2
 800908a:	2209      	movs	r2, #9
 800908c:	461f      	mov	r7, r3
 800908e:	3308      	adds	r3, #8
 8009090:	460c      	mov	r4, r1
 8009092:	fb93 f3f2 	sdiv	r3, r3, r2
 8009096:	4606      	mov	r6, r0
 8009098:	2201      	movs	r2, #1
 800909a:	2100      	movs	r1, #0
 800909c:	429a      	cmp	r2, r3
 800909e:	db09      	blt.n	80090b4 <__s2b+0x30>
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7ff ff43 	bl	8008f2c <_Balloc>
 80090a6:	b940      	cbnz	r0, 80090ba <__s2b+0x36>
 80090a8:	4602      	mov	r2, r0
 80090aa:	21ce      	movs	r1, #206	; 0xce
 80090ac:	4b18      	ldr	r3, [pc, #96]	; (8009110 <__s2b+0x8c>)
 80090ae:	4819      	ldr	r0, [pc, #100]	; (8009114 <__s2b+0x90>)
 80090b0:	f000 fcb6 	bl	8009a20 <__assert_func>
 80090b4:	0052      	lsls	r2, r2, #1
 80090b6:	3101      	adds	r1, #1
 80090b8:	e7f0      	b.n	800909c <__s2b+0x18>
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	2d09      	cmp	r5, #9
 80090be:	6143      	str	r3, [r0, #20]
 80090c0:	f04f 0301 	mov.w	r3, #1
 80090c4:	6103      	str	r3, [r0, #16]
 80090c6:	dd16      	ble.n	80090f6 <__s2b+0x72>
 80090c8:	f104 0909 	add.w	r9, r4, #9
 80090cc:	46c8      	mov	r8, r9
 80090ce:	442c      	add	r4, r5
 80090d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090d4:	4601      	mov	r1, r0
 80090d6:	220a      	movs	r2, #10
 80090d8:	4630      	mov	r0, r6
 80090da:	3b30      	subs	r3, #48	; 0x30
 80090dc:	f7ff ff88 	bl	8008ff0 <__multadd>
 80090e0:	45a0      	cmp	r8, r4
 80090e2:	d1f5      	bne.n	80090d0 <__s2b+0x4c>
 80090e4:	f1a5 0408 	sub.w	r4, r5, #8
 80090e8:	444c      	add	r4, r9
 80090ea:	1b2d      	subs	r5, r5, r4
 80090ec:	1963      	adds	r3, r4, r5
 80090ee:	42bb      	cmp	r3, r7
 80090f0:	db04      	blt.n	80090fc <__s2b+0x78>
 80090f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f6:	2509      	movs	r5, #9
 80090f8:	340a      	adds	r4, #10
 80090fa:	e7f6      	b.n	80090ea <__s2b+0x66>
 80090fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009100:	4601      	mov	r1, r0
 8009102:	220a      	movs	r2, #10
 8009104:	4630      	mov	r0, r6
 8009106:	3b30      	subs	r3, #48	; 0x30
 8009108:	f7ff ff72 	bl	8008ff0 <__multadd>
 800910c:	e7ee      	b.n	80090ec <__s2b+0x68>
 800910e:	bf00      	nop
 8009110:	0800b688 	.word	0x0800b688
 8009114:	0800b72f 	.word	0x0800b72f

08009118 <__hi0bits>:
 8009118:	0c02      	lsrs	r2, r0, #16
 800911a:	0412      	lsls	r2, r2, #16
 800911c:	4603      	mov	r3, r0
 800911e:	b9ca      	cbnz	r2, 8009154 <__hi0bits+0x3c>
 8009120:	0403      	lsls	r3, r0, #16
 8009122:	2010      	movs	r0, #16
 8009124:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009128:	bf04      	itt	eq
 800912a:	021b      	lsleq	r3, r3, #8
 800912c:	3008      	addeq	r0, #8
 800912e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009132:	bf04      	itt	eq
 8009134:	011b      	lsleq	r3, r3, #4
 8009136:	3004      	addeq	r0, #4
 8009138:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800913c:	bf04      	itt	eq
 800913e:	009b      	lsleq	r3, r3, #2
 8009140:	3002      	addeq	r0, #2
 8009142:	2b00      	cmp	r3, #0
 8009144:	db05      	blt.n	8009152 <__hi0bits+0x3a>
 8009146:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800914a:	f100 0001 	add.w	r0, r0, #1
 800914e:	bf08      	it	eq
 8009150:	2020      	moveq	r0, #32
 8009152:	4770      	bx	lr
 8009154:	2000      	movs	r0, #0
 8009156:	e7e5      	b.n	8009124 <__hi0bits+0xc>

08009158 <__lo0bits>:
 8009158:	6803      	ldr	r3, [r0, #0]
 800915a:	4602      	mov	r2, r0
 800915c:	f013 0007 	ands.w	r0, r3, #7
 8009160:	d00b      	beq.n	800917a <__lo0bits+0x22>
 8009162:	07d9      	lsls	r1, r3, #31
 8009164:	d422      	bmi.n	80091ac <__lo0bits+0x54>
 8009166:	0798      	lsls	r0, r3, #30
 8009168:	bf49      	itett	mi
 800916a:	085b      	lsrmi	r3, r3, #1
 800916c:	089b      	lsrpl	r3, r3, #2
 800916e:	2001      	movmi	r0, #1
 8009170:	6013      	strmi	r3, [r2, #0]
 8009172:	bf5c      	itt	pl
 8009174:	2002      	movpl	r0, #2
 8009176:	6013      	strpl	r3, [r2, #0]
 8009178:	4770      	bx	lr
 800917a:	b299      	uxth	r1, r3
 800917c:	b909      	cbnz	r1, 8009182 <__lo0bits+0x2a>
 800917e:	2010      	movs	r0, #16
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009186:	bf04      	itt	eq
 8009188:	0a1b      	lsreq	r3, r3, #8
 800918a:	3008      	addeq	r0, #8
 800918c:	0719      	lsls	r1, r3, #28
 800918e:	bf04      	itt	eq
 8009190:	091b      	lsreq	r3, r3, #4
 8009192:	3004      	addeq	r0, #4
 8009194:	0799      	lsls	r1, r3, #30
 8009196:	bf04      	itt	eq
 8009198:	089b      	lsreq	r3, r3, #2
 800919a:	3002      	addeq	r0, #2
 800919c:	07d9      	lsls	r1, r3, #31
 800919e:	d403      	bmi.n	80091a8 <__lo0bits+0x50>
 80091a0:	085b      	lsrs	r3, r3, #1
 80091a2:	f100 0001 	add.w	r0, r0, #1
 80091a6:	d003      	beq.n	80091b0 <__lo0bits+0x58>
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	4770      	bx	lr
 80091ac:	2000      	movs	r0, #0
 80091ae:	4770      	bx	lr
 80091b0:	2020      	movs	r0, #32
 80091b2:	4770      	bx	lr

080091b4 <__i2b>:
 80091b4:	b510      	push	{r4, lr}
 80091b6:	460c      	mov	r4, r1
 80091b8:	2101      	movs	r1, #1
 80091ba:	f7ff feb7 	bl	8008f2c <_Balloc>
 80091be:	4602      	mov	r2, r0
 80091c0:	b928      	cbnz	r0, 80091ce <__i2b+0x1a>
 80091c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091c6:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <__i2b+0x24>)
 80091c8:	4804      	ldr	r0, [pc, #16]	; (80091dc <__i2b+0x28>)
 80091ca:	f000 fc29 	bl	8009a20 <__assert_func>
 80091ce:	2301      	movs	r3, #1
 80091d0:	6144      	str	r4, [r0, #20]
 80091d2:	6103      	str	r3, [r0, #16]
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	bf00      	nop
 80091d8:	0800b688 	.word	0x0800b688
 80091dc:	0800b72f 	.word	0x0800b72f

080091e0 <__multiply>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	4614      	mov	r4, r2
 80091e6:	690a      	ldr	r2, [r1, #16]
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	460d      	mov	r5, r1
 80091ec:	429a      	cmp	r2, r3
 80091ee:	bfbe      	ittt	lt
 80091f0:	460b      	movlt	r3, r1
 80091f2:	4625      	movlt	r5, r4
 80091f4:	461c      	movlt	r4, r3
 80091f6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80091fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091fe:	68ab      	ldr	r3, [r5, #8]
 8009200:	6869      	ldr	r1, [r5, #4]
 8009202:	eb0a 0709 	add.w	r7, sl, r9
 8009206:	42bb      	cmp	r3, r7
 8009208:	b085      	sub	sp, #20
 800920a:	bfb8      	it	lt
 800920c:	3101      	addlt	r1, #1
 800920e:	f7ff fe8d 	bl	8008f2c <_Balloc>
 8009212:	b930      	cbnz	r0, 8009222 <__multiply+0x42>
 8009214:	4602      	mov	r2, r0
 8009216:	f240 115d 	movw	r1, #349	; 0x15d
 800921a:	4b41      	ldr	r3, [pc, #260]	; (8009320 <__multiply+0x140>)
 800921c:	4841      	ldr	r0, [pc, #260]	; (8009324 <__multiply+0x144>)
 800921e:	f000 fbff 	bl	8009a20 <__assert_func>
 8009222:	f100 0614 	add.w	r6, r0, #20
 8009226:	4633      	mov	r3, r6
 8009228:	2200      	movs	r2, #0
 800922a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800922e:	4543      	cmp	r3, r8
 8009230:	d31e      	bcc.n	8009270 <__multiply+0x90>
 8009232:	f105 0c14 	add.w	ip, r5, #20
 8009236:	f104 0314 	add.w	r3, r4, #20
 800923a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800923e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009242:	9202      	str	r2, [sp, #8]
 8009244:	ebac 0205 	sub.w	r2, ip, r5
 8009248:	3a15      	subs	r2, #21
 800924a:	f022 0203 	bic.w	r2, r2, #3
 800924e:	3204      	adds	r2, #4
 8009250:	f105 0115 	add.w	r1, r5, #21
 8009254:	458c      	cmp	ip, r1
 8009256:	bf38      	it	cc
 8009258:	2204      	movcc	r2, #4
 800925a:	9201      	str	r2, [sp, #4]
 800925c:	9a02      	ldr	r2, [sp, #8]
 800925e:	9303      	str	r3, [sp, #12]
 8009260:	429a      	cmp	r2, r3
 8009262:	d808      	bhi.n	8009276 <__multiply+0x96>
 8009264:	2f00      	cmp	r7, #0
 8009266:	dc55      	bgt.n	8009314 <__multiply+0x134>
 8009268:	6107      	str	r7, [r0, #16]
 800926a:	b005      	add	sp, #20
 800926c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009270:	f843 2b04 	str.w	r2, [r3], #4
 8009274:	e7db      	b.n	800922e <__multiply+0x4e>
 8009276:	f8b3 a000 	ldrh.w	sl, [r3]
 800927a:	f1ba 0f00 	cmp.w	sl, #0
 800927e:	d020      	beq.n	80092c2 <__multiply+0xe2>
 8009280:	46b1      	mov	r9, r6
 8009282:	2200      	movs	r2, #0
 8009284:	f105 0e14 	add.w	lr, r5, #20
 8009288:	f85e 4b04 	ldr.w	r4, [lr], #4
 800928c:	f8d9 b000 	ldr.w	fp, [r9]
 8009290:	b2a1      	uxth	r1, r4
 8009292:	fa1f fb8b 	uxth.w	fp, fp
 8009296:	fb0a b101 	mla	r1, sl, r1, fp
 800929a:	4411      	add	r1, r2
 800929c:	f8d9 2000 	ldr.w	r2, [r9]
 80092a0:	0c24      	lsrs	r4, r4, #16
 80092a2:	0c12      	lsrs	r2, r2, #16
 80092a4:	fb0a 2404 	mla	r4, sl, r4, r2
 80092a8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80092ac:	b289      	uxth	r1, r1
 80092ae:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80092b2:	45f4      	cmp	ip, lr
 80092b4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80092b8:	f849 1b04 	str.w	r1, [r9], #4
 80092bc:	d8e4      	bhi.n	8009288 <__multiply+0xa8>
 80092be:	9901      	ldr	r1, [sp, #4]
 80092c0:	5072      	str	r2, [r6, r1]
 80092c2:	9a03      	ldr	r2, [sp, #12]
 80092c4:	3304      	adds	r3, #4
 80092c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092ca:	f1b9 0f00 	cmp.w	r9, #0
 80092ce:	d01f      	beq.n	8009310 <__multiply+0x130>
 80092d0:	46b6      	mov	lr, r6
 80092d2:	f04f 0a00 	mov.w	sl, #0
 80092d6:	6834      	ldr	r4, [r6, #0]
 80092d8:	f105 0114 	add.w	r1, r5, #20
 80092dc:	880a      	ldrh	r2, [r1, #0]
 80092de:	f8be b002 	ldrh.w	fp, [lr, #2]
 80092e2:	b2a4      	uxth	r4, r4
 80092e4:	fb09 b202 	mla	r2, r9, r2, fp
 80092e8:	4492      	add	sl, r2
 80092ea:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80092ee:	f84e 4b04 	str.w	r4, [lr], #4
 80092f2:	f851 4b04 	ldr.w	r4, [r1], #4
 80092f6:	f8be 2000 	ldrh.w	r2, [lr]
 80092fa:	0c24      	lsrs	r4, r4, #16
 80092fc:	fb09 2404 	mla	r4, r9, r4, r2
 8009300:	458c      	cmp	ip, r1
 8009302:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009306:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800930a:	d8e7      	bhi.n	80092dc <__multiply+0xfc>
 800930c:	9a01      	ldr	r2, [sp, #4]
 800930e:	50b4      	str	r4, [r6, r2]
 8009310:	3604      	adds	r6, #4
 8009312:	e7a3      	b.n	800925c <__multiply+0x7c>
 8009314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1a5      	bne.n	8009268 <__multiply+0x88>
 800931c:	3f01      	subs	r7, #1
 800931e:	e7a1      	b.n	8009264 <__multiply+0x84>
 8009320:	0800b688 	.word	0x0800b688
 8009324:	0800b72f 	.word	0x0800b72f

08009328 <__pow5mult>:
 8009328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800932c:	4615      	mov	r5, r2
 800932e:	f012 0203 	ands.w	r2, r2, #3
 8009332:	4606      	mov	r6, r0
 8009334:	460f      	mov	r7, r1
 8009336:	d007      	beq.n	8009348 <__pow5mult+0x20>
 8009338:	4c25      	ldr	r4, [pc, #148]	; (80093d0 <__pow5mult+0xa8>)
 800933a:	3a01      	subs	r2, #1
 800933c:	2300      	movs	r3, #0
 800933e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009342:	f7ff fe55 	bl	8008ff0 <__multadd>
 8009346:	4607      	mov	r7, r0
 8009348:	10ad      	asrs	r5, r5, #2
 800934a:	d03d      	beq.n	80093c8 <__pow5mult+0xa0>
 800934c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800934e:	b97c      	cbnz	r4, 8009370 <__pow5mult+0x48>
 8009350:	2010      	movs	r0, #16
 8009352:	f001 fa11 	bl	800a778 <malloc>
 8009356:	4602      	mov	r2, r0
 8009358:	6270      	str	r0, [r6, #36]	; 0x24
 800935a:	b928      	cbnz	r0, 8009368 <__pow5mult+0x40>
 800935c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009360:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <__pow5mult+0xac>)
 8009362:	481d      	ldr	r0, [pc, #116]	; (80093d8 <__pow5mult+0xb0>)
 8009364:	f000 fb5c 	bl	8009a20 <__assert_func>
 8009368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800936c:	6004      	str	r4, [r0, #0]
 800936e:	60c4      	str	r4, [r0, #12]
 8009370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009378:	b94c      	cbnz	r4, 800938e <__pow5mult+0x66>
 800937a:	f240 2171 	movw	r1, #625	; 0x271
 800937e:	4630      	mov	r0, r6
 8009380:	f7ff ff18 	bl	80091b4 <__i2b>
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	f8c8 0008 	str.w	r0, [r8, #8]
 800938c:	6003      	str	r3, [r0, #0]
 800938e:	f04f 0900 	mov.w	r9, #0
 8009392:	07eb      	lsls	r3, r5, #31
 8009394:	d50a      	bpl.n	80093ac <__pow5mult+0x84>
 8009396:	4639      	mov	r1, r7
 8009398:	4622      	mov	r2, r4
 800939a:	4630      	mov	r0, r6
 800939c:	f7ff ff20 	bl	80091e0 <__multiply>
 80093a0:	4680      	mov	r8, r0
 80093a2:	4639      	mov	r1, r7
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff fe01 	bl	8008fac <_Bfree>
 80093aa:	4647      	mov	r7, r8
 80093ac:	106d      	asrs	r5, r5, #1
 80093ae:	d00b      	beq.n	80093c8 <__pow5mult+0xa0>
 80093b0:	6820      	ldr	r0, [r4, #0]
 80093b2:	b938      	cbnz	r0, 80093c4 <__pow5mult+0x9c>
 80093b4:	4622      	mov	r2, r4
 80093b6:	4621      	mov	r1, r4
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7ff ff11 	bl	80091e0 <__multiply>
 80093be:	6020      	str	r0, [r4, #0]
 80093c0:	f8c0 9000 	str.w	r9, [r0]
 80093c4:	4604      	mov	r4, r0
 80093c6:	e7e4      	b.n	8009392 <__pow5mult+0x6a>
 80093c8:	4638      	mov	r0, r7
 80093ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ce:	bf00      	nop
 80093d0:	0800b880 	.word	0x0800b880
 80093d4:	0800b718 	.word	0x0800b718
 80093d8:	0800b72f 	.word	0x0800b72f

080093dc <__lshift>:
 80093dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	460c      	mov	r4, r1
 80093e2:	4607      	mov	r7, r0
 80093e4:	4691      	mov	r9, r2
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	6849      	ldr	r1, [r1, #4]
 80093ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093ee:	68a3      	ldr	r3, [r4, #8]
 80093f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093f4:	f108 0601 	add.w	r6, r8, #1
 80093f8:	42b3      	cmp	r3, r6
 80093fa:	db0b      	blt.n	8009414 <__lshift+0x38>
 80093fc:	4638      	mov	r0, r7
 80093fe:	f7ff fd95 	bl	8008f2c <_Balloc>
 8009402:	4605      	mov	r5, r0
 8009404:	b948      	cbnz	r0, 800941a <__lshift+0x3e>
 8009406:	4602      	mov	r2, r0
 8009408:	f240 11d9 	movw	r1, #473	; 0x1d9
 800940c:	4b27      	ldr	r3, [pc, #156]	; (80094ac <__lshift+0xd0>)
 800940e:	4828      	ldr	r0, [pc, #160]	; (80094b0 <__lshift+0xd4>)
 8009410:	f000 fb06 	bl	8009a20 <__assert_func>
 8009414:	3101      	adds	r1, #1
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	e7ee      	b.n	80093f8 <__lshift+0x1c>
 800941a:	2300      	movs	r3, #0
 800941c:	f100 0114 	add.w	r1, r0, #20
 8009420:	f100 0210 	add.w	r2, r0, #16
 8009424:	4618      	mov	r0, r3
 8009426:	4553      	cmp	r3, sl
 8009428:	db33      	blt.n	8009492 <__lshift+0xb6>
 800942a:	6920      	ldr	r0, [r4, #16]
 800942c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009430:	f104 0314 	add.w	r3, r4, #20
 8009434:	f019 091f 	ands.w	r9, r9, #31
 8009438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800943c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009440:	d02b      	beq.n	800949a <__lshift+0xbe>
 8009442:	468a      	mov	sl, r1
 8009444:	2200      	movs	r2, #0
 8009446:	f1c9 0e20 	rsb	lr, r9, #32
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	fa00 f009 	lsl.w	r0, r0, r9
 8009450:	4302      	orrs	r2, r0
 8009452:	f84a 2b04 	str.w	r2, [sl], #4
 8009456:	f853 2b04 	ldr.w	r2, [r3], #4
 800945a:	459c      	cmp	ip, r3
 800945c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009460:	d8f3      	bhi.n	800944a <__lshift+0x6e>
 8009462:	ebac 0304 	sub.w	r3, ip, r4
 8009466:	3b15      	subs	r3, #21
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	3304      	adds	r3, #4
 800946e:	f104 0015 	add.w	r0, r4, #21
 8009472:	4584      	cmp	ip, r0
 8009474:	bf38      	it	cc
 8009476:	2304      	movcc	r3, #4
 8009478:	50ca      	str	r2, [r1, r3]
 800947a:	b10a      	cbz	r2, 8009480 <__lshift+0xa4>
 800947c:	f108 0602 	add.w	r6, r8, #2
 8009480:	3e01      	subs	r6, #1
 8009482:	4638      	mov	r0, r7
 8009484:	4621      	mov	r1, r4
 8009486:	612e      	str	r6, [r5, #16]
 8009488:	f7ff fd90 	bl	8008fac <_Bfree>
 800948c:	4628      	mov	r0, r5
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	f842 0f04 	str.w	r0, [r2, #4]!
 8009496:	3301      	adds	r3, #1
 8009498:	e7c5      	b.n	8009426 <__lshift+0x4a>
 800949a:	3904      	subs	r1, #4
 800949c:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a0:	459c      	cmp	ip, r3
 80094a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80094a6:	d8f9      	bhi.n	800949c <__lshift+0xc0>
 80094a8:	e7ea      	b.n	8009480 <__lshift+0xa4>
 80094aa:	bf00      	nop
 80094ac:	0800b688 	.word	0x0800b688
 80094b0:	0800b72f 	.word	0x0800b72f

080094b4 <__mcmp>:
 80094b4:	4603      	mov	r3, r0
 80094b6:	690a      	ldr	r2, [r1, #16]
 80094b8:	6900      	ldr	r0, [r0, #16]
 80094ba:	b530      	push	{r4, r5, lr}
 80094bc:	1a80      	subs	r0, r0, r2
 80094be:	d10d      	bne.n	80094dc <__mcmp+0x28>
 80094c0:	3314      	adds	r3, #20
 80094c2:	3114      	adds	r1, #20
 80094c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094d4:	4295      	cmp	r5, r2
 80094d6:	d002      	beq.n	80094de <__mcmp+0x2a>
 80094d8:	d304      	bcc.n	80094e4 <__mcmp+0x30>
 80094da:	2001      	movs	r0, #1
 80094dc:	bd30      	pop	{r4, r5, pc}
 80094de:	42a3      	cmp	r3, r4
 80094e0:	d3f4      	bcc.n	80094cc <__mcmp+0x18>
 80094e2:	e7fb      	b.n	80094dc <__mcmp+0x28>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	e7f8      	b.n	80094dc <__mcmp+0x28>
	...

080094ec <__mdiff>:
 80094ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	4606      	mov	r6, r0
 80094f4:	4611      	mov	r1, r2
 80094f6:	4620      	mov	r0, r4
 80094f8:	4692      	mov	sl, r2
 80094fa:	f7ff ffdb 	bl	80094b4 <__mcmp>
 80094fe:	1e05      	subs	r5, r0, #0
 8009500:	d111      	bne.n	8009526 <__mdiff+0x3a>
 8009502:	4629      	mov	r1, r5
 8009504:	4630      	mov	r0, r6
 8009506:	f7ff fd11 	bl	8008f2c <_Balloc>
 800950a:	4602      	mov	r2, r0
 800950c:	b928      	cbnz	r0, 800951a <__mdiff+0x2e>
 800950e:	f240 2132 	movw	r1, #562	; 0x232
 8009512:	4b3c      	ldr	r3, [pc, #240]	; (8009604 <__mdiff+0x118>)
 8009514:	483c      	ldr	r0, [pc, #240]	; (8009608 <__mdiff+0x11c>)
 8009516:	f000 fa83 	bl	8009a20 <__assert_func>
 800951a:	2301      	movs	r3, #1
 800951c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009520:	4610      	mov	r0, r2
 8009522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	bfa4      	itt	ge
 8009528:	4653      	movge	r3, sl
 800952a:	46a2      	movge	sl, r4
 800952c:	4630      	mov	r0, r6
 800952e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009532:	bfa6      	itte	ge
 8009534:	461c      	movge	r4, r3
 8009536:	2500      	movge	r5, #0
 8009538:	2501      	movlt	r5, #1
 800953a:	f7ff fcf7 	bl	8008f2c <_Balloc>
 800953e:	4602      	mov	r2, r0
 8009540:	b918      	cbnz	r0, 800954a <__mdiff+0x5e>
 8009542:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009546:	4b2f      	ldr	r3, [pc, #188]	; (8009604 <__mdiff+0x118>)
 8009548:	e7e4      	b.n	8009514 <__mdiff+0x28>
 800954a:	f100 0814 	add.w	r8, r0, #20
 800954e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009552:	60c5      	str	r5, [r0, #12]
 8009554:	f04f 0c00 	mov.w	ip, #0
 8009558:	f10a 0514 	add.w	r5, sl, #20
 800955c:	f10a 0010 	add.w	r0, sl, #16
 8009560:	46c2      	mov	sl, r8
 8009562:	6926      	ldr	r6, [r4, #16]
 8009564:	f104 0914 	add.w	r9, r4, #20
 8009568:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800956c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009570:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009574:	f859 3b04 	ldr.w	r3, [r9], #4
 8009578:	fa1f f18b 	uxth.w	r1, fp
 800957c:	4461      	add	r1, ip
 800957e:	fa1f fc83 	uxth.w	ip, r3
 8009582:	0c1b      	lsrs	r3, r3, #16
 8009584:	eba1 010c 	sub.w	r1, r1, ip
 8009588:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800958c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009590:	b289      	uxth	r1, r1
 8009592:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009596:	454e      	cmp	r6, r9
 8009598:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800959c:	f84a 3b04 	str.w	r3, [sl], #4
 80095a0:	d8e6      	bhi.n	8009570 <__mdiff+0x84>
 80095a2:	1b33      	subs	r3, r6, r4
 80095a4:	3b15      	subs	r3, #21
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	3415      	adds	r4, #21
 80095ac:	3304      	adds	r3, #4
 80095ae:	42a6      	cmp	r6, r4
 80095b0:	bf38      	it	cc
 80095b2:	2304      	movcc	r3, #4
 80095b4:	441d      	add	r5, r3
 80095b6:	4443      	add	r3, r8
 80095b8:	461e      	mov	r6, r3
 80095ba:	462c      	mov	r4, r5
 80095bc:	4574      	cmp	r4, lr
 80095be:	d30e      	bcc.n	80095de <__mdiff+0xf2>
 80095c0:	f10e 0103 	add.w	r1, lr, #3
 80095c4:	1b49      	subs	r1, r1, r5
 80095c6:	f021 0103 	bic.w	r1, r1, #3
 80095ca:	3d03      	subs	r5, #3
 80095cc:	45ae      	cmp	lr, r5
 80095ce:	bf38      	it	cc
 80095d0:	2100      	movcc	r1, #0
 80095d2:	4419      	add	r1, r3
 80095d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80095d8:	b18b      	cbz	r3, 80095fe <__mdiff+0x112>
 80095da:	6117      	str	r7, [r2, #16]
 80095dc:	e7a0      	b.n	8009520 <__mdiff+0x34>
 80095de:	f854 8b04 	ldr.w	r8, [r4], #4
 80095e2:	fa1f f188 	uxth.w	r1, r8
 80095e6:	4461      	add	r1, ip
 80095e8:	1408      	asrs	r0, r1, #16
 80095ea:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80095ee:	b289      	uxth	r1, r1
 80095f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095f8:	f846 1b04 	str.w	r1, [r6], #4
 80095fc:	e7de      	b.n	80095bc <__mdiff+0xd0>
 80095fe:	3f01      	subs	r7, #1
 8009600:	e7e8      	b.n	80095d4 <__mdiff+0xe8>
 8009602:	bf00      	nop
 8009604:	0800b688 	.word	0x0800b688
 8009608:	0800b72f 	.word	0x0800b72f

0800960c <__ulp>:
 800960c:	4b11      	ldr	r3, [pc, #68]	; (8009654 <__ulp+0x48>)
 800960e:	400b      	ands	r3, r1
 8009610:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009614:	2b00      	cmp	r3, #0
 8009616:	dd02      	ble.n	800961e <__ulp+0x12>
 8009618:	2000      	movs	r0, #0
 800961a:	4619      	mov	r1, r3
 800961c:	4770      	bx	lr
 800961e:	425b      	negs	r3, r3
 8009620:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009624:	f04f 0000 	mov.w	r0, #0
 8009628:	f04f 0100 	mov.w	r1, #0
 800962c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009630:	da04      	bge.n	800963c <__ulp+0x30>
 8009632:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009636:	fa43 f102 	asr.w	r1, r3, r2
 800963a:	4770      	bx	lr
 800963c:	f1a2 0314 	sub.w	r3, r2, #20
 8009640:	2b1e      	cmp	r3, #30
 8009642:	bfd6      	itet	le
 8009644:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009648:	2301      	movgt	r3, #1
 800964a:	fa22 f303 	lsrle.w	r3, r2, r3
 800964e:	4618      	mov	r0, r3
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	7ff00000 	.word	0x7ff00000

08009658 <__b2d>:
 8009658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800965c:	6907      	ldr	r7, [r0, #16]
 800965e:	f100 0914 	add.w	r9, r0, #20
 8009662:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009666:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800966a:	f1a7 0804 	sub.w	r8, r7, #4
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff fd52 	bl	8009118 <__hi0bits>
 8009674:	f1c0 0320 	rsb	r3, r0, #32
 8009678:	280a      	cmp	r0, #10
 800967a:	600b      	str	r3, [r1, #0]
 800967c:	491f      	ldr	r1, [pc, #124]	; (80096fc <__b2d+0xa4>)
 800967e:	dc17      	bgt.n	80096b0 <__b2d+0x58>
 8009680:	45c1      	cmp	r9, r8
 8009682:	bf28      	it	cs
 8009684:	2200      	movcs	r2, #0
 8009686:	f1c0 0c0b 	rsb	ip, r0, #11
 800968a:	fa26 f30c 	lsr.w	r3, r6, ip
 800968e:	bf38      	it	cc
 8009690:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009694:	ea43 0501 	orr.w	r5, r3, r1
 8009698:	f100 0315 	add.w	r3, r0, #21
 800969c:	fa06 f303 	lsl.w	r3, r6, r3
 80096a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80096a4:	ea43 0402 	orr.w	r4, r3, r2
 80096a8:	4620      	mov	r0, r4
 80096aa:	4629      	mov	r1, r5
 80096ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b0:	45c1      	cmp	r9, r8
 80096b2:	bf2e      	itee	cs
 80096b4:	2200      	movcs	r2, #0
 80096b6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80096ba:	f1a7 0808 	subcc.w	r8, r7, #8
 80096be:	f1b0 030b 	subs.w	r3, r0, #11
 80096c2:	d016      	beq.n	80096f2 <__b2d+0x9a>
 80096c4:	f1c3 0720 	rsb	r7, r3, #32
 80096c8:	fa22 f107 	lsr.w	r1, r2, r7
 80096cc:	45c8      	cmp	r8, r9
 80096ce:	fa06 f603 	lsl.w	r6, r6, r3
 80096d2:	ea46 0601 	orr.w	r6, r6, r1
 80096d6:	bf94      	ite	ls
 80096d8:	2100      	movls	r1, #0
 80096da:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80096de:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80096e2:	fa02 f003 	lsl.w	r0, r2, r3
 80096e6:	40f9      	lsrs	r1, r7
 80096e8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80096ec:	ea40 0401 	orr.w	r4, r0, r1
 80096f0:	e7da      	b.n	80096a8 <__b2d+0x50>
 80096f2:	4614      	mov	r4, r2
 80096f4:	ea46 0501 	orr.w	r5, r6, r1
 80096f8:	e7d6      	b.n	80096a8 <__b2d+0x50>
 80096fa:	bf00      	nop
 80096fc:	3ff00000 	.word	0x3ff00000

08009700 <__d2b>:
 8009700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009704:	2101      	movs	r1, #1
 8009706:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800970a:	4690      	mov	r8, r2
 800970c:	461d      	mov	r5, r3
 800970e:	f7ff fc0d 	bl	8008f2c <_Balloc>
 8009712:	4604      	mov	r4, r0
 8009714:	b930      	cbnz	r0, 8009724 <__d2b+0x24>
 8009716:	4602      	mov	r2, r0
 8009718:	f240 310a 	movw	r1, #778	; 0x30a
 800971c:	4b24      	ldr	r3, [pc, #144]	; (80097b0 <__d2b+0xb0>)
 800971e:	4825      	ldr	r0, [pc, #148]	; (80097b4 <__d2b+0xb4>)
 8009720:	f000 f97e 	bl	8009a20 <__assert_func>
 8009724:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009728:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800972c:	bb2d      	cbnz	r5, 800977a <__d2b+0x7a>
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	f1b8 0300 	subs.w	r3, r8, #0
 8009734:	d026      	beq.n	8009784 <__d2b+0x84>
 8009736:	4668      	mov	r0, sp
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	f7ff fd0d 	bl	8009158 <__lo0bits>
 800973e:	9900      	ldr	r1, [sp, #0]
 8009740:	b1f0      	cbz	r0, 8009780 <__d2b+0x80>
 8009742:	9a01      	ldr	r2, [sp, #4]
 8009744:	f1c0 0320 	rsb	r3, r0, #32
 8009748:	fa02 f303 	lsl.w	r3, r2, r3
 800974c:	430b      	orrs	r3, r1
 800974e:	40c2      	lsrs	r2, r0
 8009750:	6163      	str	r3, [r4, #20]
 8009752:	9201      	str	r2, [sp, #4]
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	bf14      	ite	ne
 800975a:	2102      	movne	r1, #2
 800975c:	2101      	moveq	r1, #1
 800975e:	61a3      	str	r3, [r4, #24]
 8009760:	6121      	str	r1, [r4, #16]
 8009762:	b1c5      	cbz	r5, 8009796 <__d2b+0x96>
 8009764:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009768:	4405      	add	r5, r0
 800976a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800976e:	603d      	str	r5, [r7, #0]
 8009770:	6030      	str	r0, [r6, #0]
 8009772:	4620      	mov	r0, r4
 8009774:	b002      	add	sp, #8
 8009776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800977e:	e7d6      	b.n	800972e <__d2b+0x2e>
 8009780:	6161      	str	r1, [r4, #20]
 8009782:	e7e7      	b.n	8009754 <__d2b+0x54>
 8009784:	a801      	add	r0, sp, #4
 8009786:	f7ff fce7 	bl	8009158 <__lo0bits>
 800978a:	2101      	movs	r1, #1
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	6121      	str	r1, [r4, #16]
 8009790:	6163      	str	r3, [r4, #20]
 8009792:	3020      	adds	r0, #32
 8009794:	e7e5      	b.n	8009762 <__d2b+0x62>
 8009796:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800979a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800979e:	6038      	str	r0, [r7, #0]
 80097a0:	6918      	ldr	r0, [r3, #16]
 80097a2:	f7ff fcb9 	bl	8009118 <__hi0bits>
 80097a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80097aa:	6031      	str	r1, [r6, #0]
 80097ac:	e7e1      	b.n	8009772 <__d2b+0x72>
 80097ae:	bf00      	nop
 80097b0:	0800b688 	.word	0x0800b688
 80097b4:	0800b72f 	.word	0x0800b72f

080097b8 <__ratio>:
 80097b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4688      	mov	r8, r1
 80097be:	4669      	mov	r1, sp
 80097c0:	4681      	mov	r9, r0
 80097c2:	f7ff ff49 	bl	8009658 <__b2d>
 80097c6:	460f      	mov	r7, r1
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	4640      	mov	r0, r8
 80097ce:	a901      	add	r1, sp, #4
 80097d0:	f7ff ff42 	bl	8009658 <__b2d>
 80097d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097dc:	468b      	mov	fp, r1
 80097de:	eba3 0c02 	sub.w	ip, r3, r2
 80097e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097e6:	1a9b      	subs	r3, r3, r2
 80097e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bfd5      	itete	le
 80097f0:	460a      	movle	r2, r1
 80097f2:	462a      	movgt	r2, r5
 80097f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097f8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80097fc:	bfd8      	it	le
 80097fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009802:	465b      	mov	r3, fp
 8009804:	4602      	mov	r2, r0
 8009806:	4639      	mov	r1, r7
 8009808:	4620      	mov	r0, r4
 800980a:	f7f6 ff8f 	bl	800072c <__aeabi_ddiv>
 800980e:	b003      	add	sp, #12
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009814 <_mprec_log10>:
 8009814:	2817      	cmp	r0, #23
 8009816:	b5d0      	push	{r4, r6, r7, lr}
 8009818:	4604      	mov	r4, r0
 800981a:	dc05      	bgt.n	8009828 <_mprec_log10+0x14>
 800981c:	4808      	ldr	r0, [pc, #32]	; (8009840 <_mprec_log10+0x2c>)
 800981e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8009822:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009826:	bdd0      	pop	{r4, r6, r7, pc}
 8009828:	2000      	movs	r0, #0
 800982a:	2600      	movs	r6, #0
 800982c:	4905      	ldr	r1, [pc, #20]	; (8009844 <_mprec_log10+0x30>)
 800982e:	4f06      	ldr	r7, [pc, #24]	; (8009848 <_mprec_log10+0x34>)
 8009830:	4632      	mov	r2, r6
 8009832:	463b      	mov	r3, r7
 8009834:	f7f6 fe50 	bl	80004d8 <__aeabi_dmul>
 8009838:	3c01      	subs	r4, #1
 800983a:	d1f9      	bne.n	8009830 <_mprec_log10+0x1c>
 800983c:	e7f3      	b.n	8009826 <_mprec_log10+0x12>
 800983e:	bf00      	nop
 8009840:	0800b7b8 	.word	0x0800b7b8
 8009844:	3ff00000 	.word	0x3ff00000
 8009848:	40240000 	.word	0x40240000

0800984c <__copybits>:
 800984c:	3901      	subs	r1, #1
 800984e:	b570      	push	{r4, r5, r6, lr}
 8009850:	1149      	asrs	r1, r1, #5
 8009852:	6914      	ldr	r4, [r2, #16]
 8009854:	3101      	adds	r1, #1
 8009856:	f102 0314 	add.w	r3, r2, #20
 800985a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800985e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009862:	1f05      	subs	r5, r0, #4
 8009864:	42a3      	cmp	r3, r4
 8009866:	d30c      	bcc.n	8009882 <__copybits+0x36>
 8009868:	1aa3      	subs	r3, r4, r2
 800986a:	3b11      	subs	r3, #17
 800986c:	f023 0303 	bic.w	r3, r3, #3
 8009870:	3211      	adds	r2, #17
 8009872:	42a2      	cmp	r2, r4
 8009874:	bf88      	it	hi
 8009876:	2300      	movhi	r3, #0
 8009878:	4418      	add	r0, r3
 800987a:	2300      	movs	r3, #0
 800987c:	4288      	cmp	r0, r1
 800987e:	d305      	bcc.n	800988c <__copybits+0x40>
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	f853 6b04 	ldr.w	r6, [r3], #4
 8009886:	f845 6f04 	str.w	r6, [r5, #4]!
 800988a:	e7eb      	b.n	8009864 <__copybits+0x18>
 800988c:	f840 3b04 	str.w	r3, [r0], #4
 8009890:	e7f4      	b.n	800987c <__copybits+0x30>

08009892 <__any_on>:
 8009892:	f100 0214 	add.w	r2, r0, #20
 8009896:	6900      	ldr	r0, [r0, #16]
 8009898:	114b      	asrs	r3, r1, #5
 800989a:	4298      	cmp	r0, r3
 800989c:	b510      	push	{r4, lr}
 800989e:	db11      	blt.n	80098c4 <__any_on+0x32>
 80098a0:	dd0a      	ble.n	80098b8 <__any_on+0x26>
 80098a2:	f011 011f 	ands.w	r1, r1, #31
 80098a6:	d007      	beq.n	80098b8 <__any_on+0x26>
 80098a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098ac:	fa24 f001 	lsr.w	r0, r4, r1
 80098b0:	fa00 f101 	lsl.w	r1, r0, r1
 80098b4:	428c      	cmp	r4, r1
 80098b6:	d10b      	bne.n	80098d0 <__any_on+0x3e>
 80098b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098bc:	4293      	cmp	r3, r2
 80098be:	d803      	bhi.n	80098c8 <__any_on+0x36>
 80098c0:	2000      	movs	r0, #0
 80098c2:	bd10      	pop	{r4, pc}
 80098c4:	4603      	mov	r3, r0
 80098c6:	e7f7      	b.n	80098b8 <__any_on+0x26>
 80098c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098cc:	2900      	cmp	r1, #0
 80098ce:	d0f5      	beq.n	80098bc <__any_on+0x2a>
 80098d0:	2001      	movs	r0, #1
 80098d2:	e7f6      	b.n	80098c2 <__any_on+0x30>

080098d4 <_calloc_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	fb02 f501 	mul.w	r5, r2, r1
 80098da:	4629      	mov	r1, r5
 80098dc:	f000 f808 	bl	80098f0 <_malloc_r>
 80098e0:	4604      	mov	r4, r0
 80098e2:	b118      	cbz	r0, 80098ec <_calloc_r+0x18>
 80098e4:	462a      	mov	r2, r5
 80098e6:	2100      	movs	r1, #0
 80098e8:	f7fe f836 	bl	8007958 <memset>
 80098ec:	4620      	mov	r0, r4
 80098ee:	bd38      	pop	{r3, r4, r5, pc}

080098f0 <_malloc_r>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	1ccd      	adds	r5, r1, #3
 80098f4:	f025 0503 	bic.w	r5, r5, #3
 80098f8:	3508      	adds	r5, #8
 80098fa:	2d0c      	cmp	r5, #12
 80098fc:	bf38      	it	cc
 80098fe:	250c      	movcc	r5, #12
 8009900:	2d00      	cmp	r5, #0
 8009902:	4606      	mov	r6, r0
 8009904:	db01      	blt.n	800990a <_malloc_r+0x1a>
 8009906:	42a9      	cmp	r1, r5
 8009908:	d903      	bls.n	8009912 <_malloc_r+0x22>
 800990a:	230c      	movs	r3, #12
 800990c:	6033      	str	r3, [r6, #0]
 800990e:	2000      	movs	r0, #0
 8009910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009912:	f000 ff39 	bl	800a788 <__malloc_lock>
 8009916:	4921      	ldr	r1, [pc, #132]	; (800999c <_malloc_r+0xac>)
 8009918:	680a      	ldr	r2, [r1, #0]
 800991a:	4614      	mov	r4, r2
 800991c:	b99c      	cbnz	r4, 8009946 <_malloc_r+0x56>
 800991e:	4f20      	ldr	r7, [pc, #128]	; (80099a0 <_malloc_r+0xb0>)
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	b923      	cbnz	r3, 800992e <_malloc_r+0x3e>
 8009924:	4621      	mov	r1, r4
 8009926:	4630      	mov	r0, r6
 8009928:	f000 f842 	bl	80099b0 <_sbrk_r>
 800992c:	6038      	str	r0, [r7, #0]
 800992e:	4629      	mov	r1, r5
 8009930:	4630      	mov	r0, r6
 8009932:	f000 f83d 	bl	80099b0 <_sbrk_r>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d123      	bne.n	8009982 <_malloc_r+0x92>
 800993a:	230c      	movs	r3, #12
 800993c:	4630      	mov	r0, r6
 800993e:	6033      	str	r3, [r6, #0]
 8009940:	f000 ff28 	bl	800a794 <__malloc_unlock>
 8009944:	e7e3      	b.n	800990e <_malloc_r+0x1e>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	1b5b      	subs	r3, r3, r5
 800994a:	d417      	bmi.n	800997c <_malloc_r+0x8c>
 800994c:	2b0b      	cmp	r3, #11
 800994e:	d903      	bls.n	8009958 <_malloc_r+0x68>
 8009950:	6023      	str	r3, [r4, #0]
 8009952:	441c      	add	r4, r3
 8009954:	6025      	str	r5, [r4, #0]
 8009956:	e004      	b.n	8009962 <_malloc_r+0x72>
 8009958:	6863      	ldr	r3, [r4, #4]
 800995a:	42a2      	cmp	r2, r4
 800995c:	bf0c      	ite	eq
 800995e:	600b      	streq	r3, [r1, #0]
 8009960:	6053      	strne	r3, [r2, #4]
 8009962:	4630      	mov	r0, r6
 8009964:	f000 ff16 	bl	800a794 <__malloc_unlock>
 8009968:	f104 000b 	add.w	r0, r4, #11
 800996c:	1d23      	adds	r3, r4, #4
 800996e:	f020 0007 	bic.w	r0, r0, #7
 8009972:	1ac2      	subs	r2, r0, r3
 8009974:	d0cc      	beq.n	8009910 <_malloc_r+0x20>
 8009976:	1a1b      	subs	r3, r3, r0
 8009978:	50a3      	str	r3, [r4, r2]
 800997a:	e7c9      	b.n	8009910 <_malloc_r+0x20>
 800997c:	4622      	mov	r2, r4
 800997e:	6864      	ldr	r4, [r4, #4]
 8009980:	e7cc      	b.n	800991c <_malloc_r+0x2c>
 8009982:	1cc4      	adds	r4, r0, #3
 8009984:	f024 0403 	bic.w	r4, r4, #3
 8009988:	42a0      	cmp	r0, r4
 800998a:	d0e3      	beq.n	8009954 <_malloc_r+0x64>
 800998c:	1a21      	subs	r1, r4, r0
 800998e:	4630      	mov	r0, r6
 8009990:	f000 f80e 	bl	80099b0 <_sbrk_r>
 8009994:	3001      	adds	r0, #1
 8009996:	d1dd      	bne.n	8009954 <_malloc_r+0x64>
 8009998:	e7cf      	b.n	800993a <_malloc_r+0x4a>
 800999a:	bf00      	nop
 800999c:	20000658 	.word	0x20000658
 80099a0:	2000065c 	.word	0x2000065c

080099a4 <nan>:
 80099a4:	2000      	movs	r0, #0
 80099a6:	4901      	ldr	r1, [pc, #4]	; (80099ac <nan+0x8>)
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	7ff80000 	.word	0x7ff80000

080099b0 <_sbrk_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	2300      	movs	r3, #0
 80099b4:	4d05      	ldr	r5, [pc, #20]	; (80099cc <_sbrk_r+0x1c>)
 80099b6:	4604      	mov	r4, r0
 80099b8:	4608      	mov	r0, r1
 80099ba:	602b      	str	r3, [r5, #0]
 80099bc:	f7f8 fb9e 	bl	80020fc <_sbrk>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d102      	bne.n	80099ca <_sbrk_r+0x1a>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	b103      	cbz	r3, 80099ca <_sbrk_r+0x1a>
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	20000aa4 	.word	0x20000aa4

080099d0 <strcpy>:
 80099d0:	4603      	mov	r3, r0
 80099d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099d6:	f803 2b01 	strb.w	r2, [r3], #1
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d1f9      	bne.n	80099d2 <strcpy+0x2>
 80099de:	4770      	bx	lr

080099e0 <strncmp>:
 80099e0:	b510      	push	{r4, lr}
 80099e2:	b16a      	cbz	r2, 8009a00 <strncmp+0x20>
 80099e4:	3901      	subs	r1, #1
 80099e6:	1884      	adds	r4, r0, r2
 80099e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80099ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d103      	bne.n	80099fc <strncmp+0x1c>
 80099f4:	42a0      	cmp	r0, r4
 80099f6:	d001      	beq.n	80099fc <strncmp+0x1c>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1f5      	bne.n	80099e8 <strncmp+0x8>
 80099fc:	1a98      	subs	r0, r3, r2
 80099fe:	bd10      	pop	{r4, pc}
 8009a00:	4610      	mov	r0, r2
 8009a02:	e7fc      	b.n	80099fe <strncmp+0x1e>

08009a04 <__ascii_wctomb>:
 8009a04:	4603      	mov	r3, r0
 8009a06:	4608      	mov	r0, r1
 8009a08:	b141      	cbz	r1, 8009a1c <__ascii_wctomb+0x18>
 8009a0a:	2aff      	cmp	r2, #255	; 0xff
 8009a0c:	d904      	bls.n	8009a18 <__ascii_wctomb+0x14>
 8009a0e:	228a      	movs	r2, #138	; 0x8a
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	4770      	bx	lr
 8009a18:	2001      	movs	r0, #1
 8009a1a:	700a      	strb	r2, [r1, #0]
 8009a1c:	4770      	bx	lr
	...

08009a20 <__assert_func>:
 8009a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a22:	4614      	mov	r4, r2
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <__assert_func+0x2c>)
 8009a28:	4605      	mov	r5, r0
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68d8      	ldr	r0, [r3, #12]
 8009a2e:	b14c      	cbz	r4, 8009a44 <__assert_func+0x24>
 8009a30:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <__assert_func+0x30>)
 8009a32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a36:	9100      	str	r1, [sp, #0]
 8009a38:	462b      	mov	r3, r5
 8009a3a:	4906      	ldr	r1, [pc, #24]	; (8009a54 <__assert_func+0x34>)
 8009a3c:	f000 fe8a 	bl	800a754 <fiprintf>
 8009a40:	f001 faa8 	bl	800af94 <abort>
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <__assert_func+0x38>)
 8009a46:	461c      	mov	r4, r3
 8009a48:	e7f3      	b.n	8009a32 <__assert_func+0x12>
 8009a4a:	bf00      	nop
 8009a4c:	20000028 	.word	0x20000028
 8009a50:	0800b88c 	.word	0x0800b88c
 8009a54:	0800b899 	.word	0x0800b899
 8009a58:	0800b8c7 	.word	0x0800b8c7

08009a5c <quorem>:
 8009a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	6903      	ldr	r3, [r0, #16]
 8009a62:	690c      	ldr	r4, [r1, #16]
 8009a64:	4607      	mov	r7, r0
 8009a66:	42a3      	cmp	r3, r4
 8009a68:	f2c0 8083 	blt.w	8009b72 <quorem+0x116>
 8009a6c:	3c01      	subs	r4, #1
 8009a6e:	f100 0514 	add.w	r5, r0, #20
 8009a72:	f101 0814 	add.w	r8, r1, #20
 8009a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a84:	3301      	adds	r3, #1
 8009a86:	429a      	cmp	r2, r3
 8009a88:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a94:	d332      	bcc.n	8009afc <quorem+0xa0>
 8009a96:	f04f 0e00 	mov.w	lr, #0
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	46ac      	mov	ip, r5
 8009a9e:	46f2      	mov	sl, lr
 8009aa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009aa4:	b293      	uxth	r3, r2
 8009aa6:	fb06 e303 	mla	r3, r6, r3, lr
 8009aaa:	0c12      	lsrs	r2, r2, #16
 8009aac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ab0:	fb06 e202 	mla	r2, r6, r2, lr
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	ebaa 0303 	sub.w	r3, sl, r3
 8009aba:	f8dc a000 	ldr.w	sl, [ip]
 8009abe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ac2:	fa1f fa8a 	uxth.w	sl, sl
 8009ac6:	4453      	add	r3, sl
 8009ac8:	fa1f fa82 	uxth.w	sl, r2
 8009acc:	f8dc 2000 	ldr.w	r2, [ip]
 8009ad0:	4581      	cmp	r9, r0
 8009ad2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009ad6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ae4:	f84c 3b04 	str.w	r3, [ip], #4
 8009ae8:	d2da      	bcs.n	8009aa0 <quorem+0x44>
 8009aea:	f855 300b 	ldr.w	r3, [r5, fp]
 8009aee:	b92b      	cbnz	r3, 8009afc <quorem+0xa0>
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	3b04      	subs	r3, #4
 8009af4:	429d      	cmp	r5, r3
 8009af6:	461a      	mov	r2, r3
 8009af8:	d32f      	bcc.n	8009b5a <quorem+0xfe>
 8009afa:	613c      	str	r4, [r7, #16]
 8009afc:	4638      	mov	r0, r7
 8009afe:	f7ff fcd9 	bl	80094b4 <__mcmp>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	db25      	blt.n	8009b52 <quorem+0xf6>
 8009b06:	4628      	mov	r0, r5
 8009b08:	f04f 0c00 	mov.w	ip, #0
 8009b0c:	3601      	adds	r6, #1
 8009b0e:	f858 1b04 	ldr.w	r1, [r8], #4
 8009b12:	f8d0 e000 	ldr.w	lr, [r0]
 8009b16:	b28b      	uxth	r3, r1
 8009b18:	ebac 0303 	sub.w	r3, ip, r3
 8009b1c:	fa1f f28e 	uxth.w	r2, lr
 8009b20:	4413      	add	r3, r2
 8009b22:	0c0a      	lsrs	r2, r1, #16
 8009b24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b32:	45c1      	cmp	r9, r8
 8009b34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b38:	f840 3b04 	str.w	r3, [r0], #4
 8009b3c:	d2e7      	bcs.n	8009b0e <quorem+0xb2>
 8009b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b46:	b922      	cbnz	r2, 8009b52 <quorem+0xf6>
 8009b48:	3b04      	subs	r3, #4
 8009b4a:	429d      	cmp	r5, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	d30a      	bcc.n	8009b66 <quorem+0x10a>
 8009b50:	613c      	str	r4, [r7, #16]
 8009b52:	4630      	mov	r0, r6
 8009b54:	b003      	add	sp, #12
 8009b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5a:	6812      	ldr	r2, [r2, #0]
 8009b5c:	3b04      	subs	r3, #4
 8009b5e:	2a00      	cmp	r2, #0
 8009b60:	d1cb      	bne.n	8009afa <quorem+0x9e>
 8009b62:	3c01      	subs	r4, #1
 8009b64:	e7c6      	b.n	8009af4 <quorem+0x98>
 8009b66:	6812      	ldr	r2, [r2, #0]
 8009b68:	3b04      	subs	r3, #4
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	d1f0      	bne.n	8009b50 <quorem+0xf4>
 8009b6e:	3c01      	subs	r4, #1
 8009b70:	e7eb      	b.n	8009b4a <quorem+0xee>
 8009b72:	2000      	movs	r0, #0
 8009b74:	e7ee      	b.n	8009b54 <quorem+0xf8>
	...

08009b78 <_dtoa_r>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	4616      	mov	r6, r2
 8009b7e:	461f      	mov	r7, r3
 8009b80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b82:	b099      	sub	sp, #100	; 0x64
 8009b84:	4605      	mov	r5, r0
 8009b86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009b8e:	b974      	cbnz	r4, 8009bae <_dtoa_r+0x36>
 8009b90:	2010      	movs	r0, #16
 8009b92:	f000 fdf1 	bl	800a778 <malloc>
 8009b96:	4602      	mov	r2, r0
 8009b98:	6268      	str	r0, [r5, #36]	; 0x24
 8009b9a:	b920      	cbnz	r0, 8009ba6 <_dtoa_r+0x2e>
 8009b9c:	21ea      	movs	r1, #234	; 0xea
 8009b9e:	4bae      	ldr	r3, [pc, #696]	; (8009e58 <_dtoa_r+0x2e0>)
 8009ba0:	48ae      	ldr	r0, [pc, #696]	; (8009e5c <_dtoa_r+0x2e4>)
 8009ba2:	f7ff ff3d 	bl	8009a20 <__assert_func>
 8009ba6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009baa:	6004      	str	r4, [r0, #0]
 8009bac:	60c4      	str	r4, [r0, #12]
 8009bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bb0:	6819      	ldr	r1, [r3, #0]
 8009bb2:	b151      	cbz	r1, 8009bca <_dtoa_r+0x52>
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4093      	lsls	r3, r2
 8009bba:	604a      	str	r2, [r1, #4]
 8009bbc:	608b      	str	r3, [r1, #8]
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f7ff f9f4 	bl	8008fac <_Bfree>
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	1e3b      	subs	r3, r7, #0
 8009bcc:	bfaf      	iteee	ge
 8009bce:	2300      	movge	r3, #0
 8009bd0:	2201      	movlt	r2, #1
 8009bd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bd6:	9305      	strlt	r3, [sp, #20]
 8009bd8:	bfa8      	it	ge
 8009bda:	f8c8 3000 	strge.w	r3, [r8]
 8009bde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009be2:	4b9f      	ldr	r3, [pc, #636]	; (8009e60 <_dtoa_r+0x2e8>)
 8009be4:	bfb8      	it	lt
 8009be6:	f8c8 2000 	strlt.w	r2, [r8]
 8009bea:	ea33 0309 	bics.w	r3, r3, r9
 8009bee:	d119      	bne.n	8009c24 <_dtoa_r+0xac>
 8009bf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bfc:	4333      	orrs	r3, r6
 8009bfe:	f000 8580 	beq.w	800a702 <_dtoa_r+0xb8a>
 8009c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c04:	b953      	cbnz	r3, 8009c1c <_dtoa_r+0xa4>
 8009c06:	4b97      	ldr	r3, [pc, #604]	; (8009e64 <_dtoa_r+0x2ec>)
 8009c08:	e022      	b.n	8009c50 <_dtoa_r+0xd8>
 8009c0a:	4b97      	ldr	r3, [pc, #604]	; (8009e68 <_dtoa_r+0x2f0>)
 8009c0c:	9308      	str	r3, [sp, #32]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	9808      	ldr	r0, [sp, #32]
 8009c16:	b019      	add	sp, #100	; 0x64
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1c:	4b91      	ldr	r3, [pc, #580]	; (8009e64 <_dtoa_r+0x2ec>)
 8009c1e:	9308      	str	r3, [sp, #32]
 8009c20:	3303      	adds	r3, #3
 8009c22:	e7f5      	b.n	8009c10 <_dtoa_r+0x98>
 8009c24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009c28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c30:	2200      	movs	r2, #0
 8009c32:	2300      	movs	r3, #0
 8009c34:	f7f6 feb8 	bl	80009a8 <__aeabi_dcmpeq>
 8009c38:	4680      	mov	r8, r0
 8009c3a:	b158      	cbz	r0, 8009c54 <_dtoa_r+0xdc>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c40:	6013      	str	r3, [r2, #0]
 8009c42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 8559 	beq.w	800a6fc <_dtoa_r+0xb84>
 8009c4a:	4888      	ldr	r0, [pc, #544]	; (8009e6c <_dtoa_r+0x2f4>)
 8009c4c:	6018      	str	r0, [r3, #0]
 8009c4e:	1e43      	subs	r3, r0, #1
 8009c50:	9308      	str	r3, [sp, #32]
 8009c52:	e7df      	b.n	8009c14 <_dtoa_r+0x9c>
 8009c54:	ab16      	add	r3, sp, #88	; 0x58
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	ab17      	add	r3, sp, #92	; 0x5c
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009c62:	f7ff fd4d 	bl	8009700 <__d2b>
 8009c66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009c6a:	4682      	mov	sl, r0
 8009c6c:	2c00      	cmp	r4, #0
 8009c6e:	d07e      	beq.n	8009d6e <_dtoa_r+0x1f6>
 8009c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009c7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009c82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009c86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4b78      	ldr	r3, [pc, #480]	; (8009e70 <_dtoa_r+0x2f8>)
 8009c8e:	f7f6 fa6b 	bl	8000168 <__aeabi_dsub>
 8009c92:	a36b      	add	r3, pc, #428	; (adr r3, 8009e40 <_dtoa_r+0x2c8>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 fc1e 	bl	80004d8 <__aeabi_dmul>
 8009c9c:	a36a      	add	r3, pc, #424	; (adr r3, 8009e48 <_dtoa_r+0x2d0>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f7f6 fa63 	bl	800016c <__adddf3>
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	4620      	mov	r0, r4
 8009caa:	460f      	mov	r7, r1
 8009cac:	f7f6 fbaa 	bl	8000404 <__aeabi_i2d>
 8009cb0:	a367      	add	r3, pc, #412	; (adr r3, 8009e50 <_dtoa_r+0x2d8>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7f6 fc0f 	bl	80004d8 <__aeabi_dmul>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	4639      	mov	r1, r7
 8009cc2:	f7f6 fa53 	bl	800016c <__adddf3>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460f      	mov	r7, r1
 8009cca:	f7f6 fe9f 	bl	8000a0c <__aeabi_d2iz>
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4681      	mov	r9, r0
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	f7f6 fe70 	bl	80009bc <__aeabi_dcmplt>
 8009cdc:	b148      	cbz	r0, 8009cf2 <_dtoa_r+0x17a>
 8009cde:	4648      	mov	r0, r9
 8009ce0:	f7f6 fb90 	bl	8000404 <__aeabi_i2d>
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	f7f6 fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 8009cec:	b908      	cbnz	r0, 8009cf2 <_dtoa_r+0x17a>
 8009cee:	f109 39ff 	add.w	r9, r9, #4294967295
 8009cf2:	f1b9 0f16 	cmp.w	r9, #22
 8009cf6:	d857      	bhi.n	8009da8 <_dtoa_r+0x230>
 8009cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cfc:	4b5d      	ldr	r3, [pc, #372]	; (8009e74 <_dtoa_r+0x2fc>)
 8009cfe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	f7f6 fe59 	bl	80009bc <__aeabi_dcmplt>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d04e      	beq.n	8009dac <_dtoa_r+0x234>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f109 39ff 	add.w	r9, r9, #4294967295
 8009d14:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d18:	1b1c      	subs	r4, r3, r4
 8009d1a:	1e63      	subs	r3, r4, #1
 8009d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1e:	bf49      	itett	mi
 8009d20:	f1c4 0301 	rsbmi	r3, r4, #1
 8009d24:	2300      	movpl	r3, #0
 8009d26:	9306      	strmi	r3, [sp, #24]
 8009d28:	2300      	movmi	r3, #0
 8009d2a:	bf54      	ite	pl
 8009d2c:	9306      	strpl	r3, [sp, #24]
 8009d2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009d30:	f1b9 0f00 	cmp.w	r9, #0
 8009d34:	db3c      	blt.n	8009db0 <_dtoa_r+0x238>
 8009d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d38:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009d3c:	444b      	add	r3, r9
 8009d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d40:	2300      	movs	r3, #0
 8009d42:	930a      	str	r3, [sp, #40]	; 0x28
 8009d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d86c      	bhi.n	8009e24 <_dtoa_r+0x2ac>
 8009d4a:	2b05      	cmp	r3, #5
 8009d4c:	bfc4      	itt	gt
 8009d4e:	3b04      	subgt	r3, #4
 8009d50:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009d52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d54:	bfc8      	it	gt
 8009d56:	2400      	movgt	r4, #0
 8009d58:	f1a3 0302 	sub.w	r3, r3, #2
 8009d5c:	bfd8      	it	le
 8009d5e:	2401      	movle	r4, #1
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	f200 808b 	bhi.w	8009e7c <_dtoa_r+0x304>
 8009d66:	e8df f003 	tbb	[pc, r3]
 8009d6a:	4f2d      	.short	0x4f2d
 8009d6c:	5b4d      	.short	0x5b4d
 8009d6e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009d72:	441c      	add	r4, r3
 8009d74:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009d78:	2b20      	cmp	r3, #32
 8009d7a:	bfc3      	ittte	gt
 8009d7c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d80:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009d84:	fa09 f303 	lslgt.w	r3, r9, r3
 8009d88:	f1c3 0320 	rsble	r3, r3, #32
 8009d8c:	bfc6      	itte	gt
 8009d8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d92:	4318      	orrgt	r0, r3
 8009d94:	fa06 f003 	lslle.w	r0, r6, r3
 8009d98:	f7f6 fb24 	bl	80003e4 <__aeabi_ui2d>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009da2:	3c01      	subs	r4, #1
 8009da4:	9313      	str	r3, [sp, #76]	; 0x4c
 8009da6:	e770      	b.n	8009c8a <_dtoa_r+0x112>
 8009da8:	2301      	movs	r3, #1
 8009daa:	e7b3      	b.n	8009d14 <_dtoa_r+0x19c>
 8009dac:	900f      	str	r0, [sp, #60]	; 0x3c
 8009dae:	e7b2      	b.n	8009d16 <_dtoa_r+0x19e>
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	eba3 0309 	sub.w	r3, r3, r9
 8009db6:	9306      	str	r3, [sp, #24]
 8009db8:	f1c9 0300 	rsb	r3, r9, #0
 8009dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	930e      	str	r3, [sp, #56]	; 0x38
 8009dc2:	e7bf      	b.n	8009d44 <_dtoa_r+0x1cc>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	dc59      	bgt.n	8009e82 <_dtoa_r+0x30a>
 8009dce:	f04f 0b01 	mov.w	fp, #1
 8009dd2:	465b      	mov	r3, fp
 8009dd4:	f8cd b008 	str.w	fp, [sp, #8]
 8009dd8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009ddc:	2200      	movs	r2, #0
 8009dde:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009de0:	6042      	str	r2, [r0, #4]
 8009de2:	2204      	movs	r2, #4
 8009de4:	f102 0614 	add.w	r6, r2, #20
 8009de8:	429e      	cmp	r6, r3
 8009dea:	6841      	ldr	r1, [r0, #4]
 8009dec:	d94f      	bls.n	8009e8e <_dtoa_r+0x316>
 8009dee:	4628      	mov	r0, r5
 8009df0:	f7ff f89c 	bl	8008f2c <_Balloc>
 8009df4:	9008      	str	r0, [sp, #32]
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d14d      	bne.n	8009e96 <_dtoa_r+0x31e>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009e00:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <_dtoa_r+0x300>)
 8009e02:	e6cd      	b.n	8009ba0 <_dtoa_r+0x28>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e7de      	b.n	8009dc6 <_dtoa_r+0x24e>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e0e:	eb09 0b03 	add.w	fp, r9, r3
 8009e12:	f10b 0301 	add.w	r3, fp, #1
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	bfb8      	it	lt
 8009e1c:	2301      	movlt	r3, #1
 8009e1e:	e7dd      	b.n	8009ddc <_dtoa_r+0x264>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e7f2      	b.n	8009e0a <_dtoa_r+0x292>
 8009e24:	2401      	movs	r4, #1
 8009e26:	2300      	movs	r3, #0
 8009e28:	940b      	str	r4, [sp, #44]	; 0x2c
 8009e2a:	9322      	str	r3, [sp, #136]	; 0x88
 8009e2c:	f04f 3bff 	mov.w	fp, #4294967295
 8009e30:	2200      	movs	r2, #0
 8009e32:	2312      	movs	r3, #18
 8009e34:	f8cd b008 	str.w	fp, [sp, #8]
 8009e38:	9223      	str	r2, [sp, #140]	; 0x8c
 8009e3a:	e7cf      	b.n	8009ddc <_dtoa_r+0x264>
 8009e3c:	f3af 8000 	nop.w
 8009e40:	636f4361 	.word	0x636f4361
 8009e44:	3fd287a7 	.word	0x3fd287a7
 8009e48:	8b60c8b3 	.word	0x8b60c8b3
 8009e4c:	3fc68a28 	.word	0x3fc68a28
 8009e50:	509f79fb 	.word	0x509f79fb
 8009e54:	3fd34413 	.word	0x3fd34413
 8009e58:	0800b718 	.word	0x0800b718
 8009e5c:	0800b9d8 	.word	0x0800b9d8
 8009e60:	7ff00000 	.word	0x7ff00000
 8009e64:	0800b9d2 	.word	0x0800b9d2
 8009e68:	0800b9c9 	.word	0x0800b9c9
 8009e6c:	0800b9d7 	.word	0x0800b9d7
 8009e70:	3ff80000 	.word	0x3ff80000
 8009e74:	0800b7b8 	.word	0x0800b7b8
 8009e78:	0800b688 	.word	0x0800b688
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e80:	e7d4      	b.n	8009e2c <_dtoa_r+0x2b4>
 8009e82:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009e86:	465b      	mov	r3, fp
 8009e88:	f8cd b008 	str.w	fp, [sp, #8]
 8009e8c:	e7a6      	b.n	8009ddc <_dtoa_r+0x264>
 8009e8e:	3101      	adds	r1, #1
 8009e90:	6041      	str	r1, [r0, #4]
 8009e92:	0052      	lsls	r2, r2, #1
 8009e94:	e7a6      	b.n	8009de4 <_dtoa_r+0x26c>
 8009e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e98:	9a08      	ldr	r2, [sp, #32]
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	9b02      	ldr	r3, [sp, #8]
 8009e9e:	2b0e      	cmp	r3, #14
 8009ea0:	f200 80a8 	bhi.w	8009ff4 <_dtoa_r+0x47c>
 8009ea4:	2c00      	cmp	r4, #0
 8009ea6:	f000 80a5 	beq.w	8009ff4 <_dtoa_r+0x47c>
 8009eaa:	f1b9 0f00 	cmp.w	r9, #0
 8009eae:	dd34      	ble.n	8009f1a <_dtoa_r+0x3a2>
 8009eb0:	4a9a      	ldr	r2, [pc, #616]	; (800a11c <_dtoa_r+0x5a4>)
 8009eb2:	f009 030f 	and.w	r3, r9, #15
 8009eb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009eba:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009ebe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ec2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ec6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009eca:	d016      	beq.n	8009efa <_dtoa_r+0x382>
 8009ecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ed0:	4b93      	ldr	r3, [pc, #588]	; (800a120 <_dtoa_r+0x5a8>)
 8009ed2:	2703      	movs	r7, #3
 8009ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ed8:	f7f6 fc28 	bl	800072c <__aeabi_ddiv>
 8009edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ee0:	f004 040f 	and.w	r4, r4, #15
 8009ee4:	4e8e      	ldr	r6, [pc, #568]	; (800a120 <_dtoa_r+0x5a8>)
 8009ee6:	b954      	cbnz	r4, 8009efe <_dtoa_r+0x386>
 8009ee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ef0:	f7f6 fc1c 	bl	800072c <__aeabi_ddiv>
 8009ef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ef8:	e029      	b.n	8009f4e <_dtoa_r+0x3d6>
 8009efa:	2702      	movs	r7, #2
 8009efc:	e7f2      	b.n	8009ee4 <_dtoa_r+0x36c>
 8009efe:	07e1      	lsls	r1, r4, #31
 8009f00:	d508      	bpl.n	8009f14 <_dtoa_r+0x39c>
 8009f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f0a:	f7f6 fae5 	bl	80004d8 <__aeabi_dmul>
 8009f0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f12:	3701      	adds	r7, #1
 8009f14:	1064      	asrs	r4, r4, #1
 8009f16:	3608      	adds	r6, #8
 8009f18:	e7e5      	b.n	8009ee6 <_dtoa_r+0x36e>
 8009f1a:	f000 80a5 	beq.w	800a068 <_dtoa_r+0x4f0>
 8009f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f22:	f1c9 0400 	rsb	r4, r9, #0
 8009f26:	4b7d      	ldr	r3, [pc, #500]	; (800a11c <_dtoa_r+0x5a4>)
 8009f28:	f004 020f 	and.w	r2, r4, #15
 8009f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f7f6 fad0 	bl	80004d8 <__aeabi_dmul>
 8009f38:	2702      	movs	r7, #2
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f40:	4e77      	ldr	r6, [pc, #476]	; (800a120 <_dtoa_r+0x5a8>)
 8009f42:	1124      	asrs	r4, r4, #4
 8009f44:	2c00      	cmp	r4, #0
 8009f46:	f040 8084 	bne.w	800a052 <_dtoa_r+0x4da>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1d2      	bne.n	8009ef4 <_dtoa_r+0x37c>
 8009f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 808b 	beq.w	800a06c <_dtoa_r+0x4f4>
 8009f56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009f5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009f5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f62:	2200      	movs	r2, #0
 8009f64:	4b6f      	ldr	r3, [pc, #444]	; (800a124 <_dtoa_r+0x5ac>)
 8009f66:	f7f6 fd29 	bl	80009bc <__aeabi_dcmplt>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d07e      	beq.n	800a06c <_dtoa_r+0x4f4>
 8009f6e:	9b02      	ldr	r3, [sp, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d07b      	beq.n	800a06c <_dtoa_r+0x4f4>
 8009f74:	f1bb 0f00 	cmp.w	fp, #0
 8009f78:	dd38      	ble.n	8009fec <_dtoa_r+0x474>
 8009f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f7e:	2200      	movs	r2, #0
 8009f80:	4b69      	ldr	r3, [pc, #420]	; (800a128 <_dtoa_r+0x5b0>)
 8009f82:	f7f6 faa9 	bl	80004d8 <__aeabi_dmul>
 8009f86:	465c      	mov	r4, fp
 8009f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f8c:	f109 38ff 	add.w	r8, r9, #4294967295
 8009f90:	3701      	adds	r7, #1
 8009f92:	4638      	mov	r0, r7
 8009f94:	f7f6 fa36 	bl	8000404 <__aeabi_i2d>
 8009f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f9c:	f7f6 fa9c 	bl	80004d8 <__aeabi_dmul>
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4b62      	ldr	r3, [pc, #392]	; (800a12c <_dtoa_r+0x5b4>)
 8009fa4:	f7f6 f8e2 	bl	800016c <__adddf3>
 8009fa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009fac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fb0:	9611      	str	r6, [sp, #68]	; 0x44
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	d15d      	bne.n	800a072 <_dtoa_r+0x4fa>
 8009fb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4b5c      	ldr	r3, [pc, #368]	; (800a130 <_dtoa_r+0x5b8>)
 8009fbe:	f7f6 f8d3 	bl	8000168 <__aeabi_dsub>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fca:	4633      	mov	r3, r6
 8009fcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fce:	f7f6 fd13 	bl	80009f8 <__aeabi_dcmpgt>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	f040 829e 	bne.w	800a514 <_dtoa_r+0x99c>
 8009fd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009fde:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009fe2:	f7f6 fceb 	bl	80009bc <__aeabi_dcmplt>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f040 8292 	bne.w	800a510 <_dtoa_r+0x998>
 8009fec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009ff0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f2c0 8153 	blt.w	800a2a2 <_dtoa_r+0x72a>
 8009ffc:	f1b9 0f0e 	cmp.w	r9, #14
 800a000:	f300 814f 	bgt.w	800a2a2 <_dtoa_r+0x72a>
 800a004:	4b45      	ldr	r3, [pc, #276]	; (800a11c <_dtoa_r+0x5a4>)
 800a006:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a00a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a00e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a012:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a014:	2b00      	cmp	r3, #0
 800a016:	f280 80db 	bge.w	800a1d0 <_dtoa_r+0x658>
 800a01a:	9b02      	ldr	r3, [sp, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f300 80d7 	bgt.w	800a1d0 <_dtoa_r+0x658>
 800a022:	f040 8274 	bne.w	800a50e <_dtoa_r+0x996>
 800a026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a02a:	2200      	movs	r2, #0
 800a02c:	4b40      	ldr	r3, [pc, #256]	; (800a130 <_dtoa_r+0x5b8>)
 800a02e:	f7f6 fa53 	bl	80004d8 <__aeabi_dmul>
 800a032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a036:	f7f6 fcd5 	bl	80009e4 <__aeabi_dcmpge>
 800a03a:	9c02      	ldr	r4, [sp, #8]
 800a03c:	4626      	mov	r6, r4
 800a03e:	2800      	cmp	r0, #0
 800a040:	f040 824a 	bne.w	800a4d8 <_dtoa_r+0x960>
 800a044:	2331      	movs	r3, #49	; 0x31
 800a046:	9f08      	ldr	r7, [sp, #32]
 800a048:	f109 0901 	add.w	r9, r9, #1
 800a04c:	f807 3b01 	strb.w	r3, [r7], #1
 800a050:	e246      	b.n	800a4e0 <_dtoa_r+0x968>
 800a052:	07e2      	lsls	r2, r4, #31
 800a054:	d505      	bpl.n	800a062 <_dtoa_r+0x4ea>
 800a056:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a05a:	f7f6 fa3d 	bl	80004d8 <__aeabi_dmul>
 800a05e:	2301      	movs	r3, #1
 800a060:	3701      	adds	r7, #1
 800a062:	1064      	asrs	r4, r4, #1
 800a064:	3608      	adds	r6, #8
 800a066:	e76d      	b.n	8009f44 <_dtoa_r+0x3cc>
 800a068:	2702      	movs	r7, #2
 800a06a:	e770      	b.n	8009f4e <_dtoa_r+0x3d6>
 800a06c:	46c8      	mov	r8, r9
 800a06e:	9c02      	ldr	r4, [sp, #8]
 800a070:	e78f      	b.n	8009f92 <_dtoa_r+0x41a>
 800a072:	9908      	ldr	r1, [sp, #32]
 800a074:	4b29      	ldr	r3, [pc, #164]	; (800a11c <_dtoa_r+0x5a4>)
 800a076:	4421      	add	r1, r4
 800a078:	9112      	str	r1, [sp, #72]	; 0x48
 800a07a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a07c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a080:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a084:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a088:	2900      	cmp	r1, #0
 800a08a:	d055      	beq.n	800a138 <_dtoa_r+0x5c0>
 800a08c:	2000      	movs	r0, #0
 800a08e:	4929      	ldr	r1, [pc, #164]	; (800a134 <_dtoa_r+0x5bc>)
 800a090:	f7f6 fb4c 	bl	800072c <__aeabi_ddiv>
 800a094:	463b      	mov	r3, r7
 800a096:	4632      	mov	r2, r6
 800a098:	f7f6 f866 	bl	8000168 <__aeabi_dsub>
 800a09c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0a0:	9f08      	ldr	r7, [sp, #32]
 800a0a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0a6:	f7f6 fcb1 	bl	8000a0c <__aeabi_d2iz>
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	f7f6 f9aa 	bl	8000404 <__aeabi_i2d>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0b8:	f7f6 f856 	bl	8000168 <__aeabi_dsub>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	3430      	adds	r4, #48	; 0x30
 800a0c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0ca:	f807 4b01 	strb.w	r4, [r7], #1
 800a0ce:	f7f6 fc75 	bl	80009bc <__aeabi_dcmplt>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d174      	bne.n	800a1c0 <_dtoa_r+0x648>
 800a0d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0da:	2000      	movs	r0, #0
 800a0dc:	4911      	ldr	r1, [pc, #68]	; (800a124 <_dtoa_r+0x5ac>)
 800a0de:	f7f6 f843 	bl	8000168 <__aeabi_dsub>
 800a0e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0e6:	f7f6 fc69 	bl	80009bc <__aeabi_dcmplt>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	f040 80b6 	bne.w	800a25c <_dtoa_r+0x6e4>
 800a0f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0f2:	429f      	cmp	r7, r3
 800a0f4:	f43f af7a 	beq.w	8009fec <_dtoa_r+0x474>
 800a0f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <_dtoa_r+0x5b0>)
 800a100:	f7f6 f9ea 	bl	80004d8 <__aeabi_dmul>
 800a104:	2200      	movs	r2, #0
 800a106:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a10a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a10e:	4b06      	ldr	r3, [pc, #24]	; (800a128 <_dtoa_r+0x5b0>)
 800a110:	f7f6 f9e2 	bl	80004d8 <__aeabi_dmul>
 800a114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a118:	e7c3      	b.n	800a0a2 <_dtoa_r+0x52a>
 800a11a:	bf00      	nop
 800a11c:	0800b7b8 	.word	0x0800b7b8
 800a120:	0800b790 	.word	0x0800b790
 800a124:	3ff00000 	.word	0x3ff00000
 800a128:	40240000 	.word	0x40240000
 800a12c:	401c0000 	.word	0x401c0000
 800a130:	40140000 	.word	0x40140000
 800a134:	3fe00000 	.word	0x3fe00000
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f7f6 f9cc 	bl	80004d8 <__aeabi_dmul>
 800a140:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a142:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a146:	9c08      	ldr	r4, [sp, #32]
 800a148:	9314      	str	r3, [sp, #80]	; 0x50
 800a14a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a14e:	f7f6 fc5d 	bl	8000a0c <__aeabi_d2iz>
 800a152:	9015      	str	r0, [sp, #84]	; 0x54
 800a154:	f7f6 f956 	bl	8000404 <__aeabi_i2d>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a160:	f7f6 f802 	bl	8000168 <__aeabi_dsub>
 800a164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a166:	4606      	mov	r6, r0
 800a168:	3330      	adds	r3, #48	; 0x30
 800a16a:	f804 3b01 	strb.w	r3, [r4], #1
 800a16e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a170:	460f      	mov	r7, r1
 800a172:	429c      	cmp	r4, r3
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	d124      	bne.n	800a1c4 <_dtoa_r+0x64c>
 800a17a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a17e:	4bb3      	ldr	r3, [pc, #716]	; (800a44c <_dtoa_r+0x8d4>)
 800a180:	f7f5 fff4 	bl	800016c <__adddf3>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4630      	mov	r0, r6
 800a18a:	4639      	mov	r1, r7
 800a18c:	f7f6 fc34 	bl	80009f8 <__aeabi_dcmpgt>
 800a190:	2800      	cmp	r0, #0
 800a192:	d162      	bne.n	800a25a <_dtoa_r+0x6e2>
 800a194:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a198:	2000      	movs	r0, #0
 800a19a:	49ac      	ldr	r1, [pc, #688]	; (800a44c <_dtoa_r+0x8d4>)
 800a19c:	f7f5 ffe4 	bl	8000168 <__aeabi_dsub>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	f7f6 fc08 	bl	80009bc <__aeabi_dcmplt>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f43f af1d 	beq.w	8009fec <_dtoa_r+0x474>
 800a1b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a1b4:	1e7b      	subs	r3, r7, #1
 800a1b6:	9314      	str	r3, [sp, #80]	; 0x50
 800a1b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a1bc:	2b30      	cmp	r3, #48	; 0x30
 800a1be:	d0f8      	beq.n	800a1b2 <_dtoa_r+0x63a>
 800a1c0:	46c1      	mov	r9, r8
 800a1c2:	e03a      	b.n	800a23a <_dtoa_r+0x6c2>
 800a1c4:	4ba2      	ldr	r3, [pc, #648]	; (800a450 <_dtoa_r+0x8d8>)
 800a1c6:	f7f6 f987 	bl	80004d8 <__aeabi_dmul>
 800a1ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1ce:	e7bc      	b.n	800a14a <_dtoa_r+0x5d2>
 800a1d0:	9f08      	ldr	r7, [sp, #32]
 800a1d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1da:	f7f6 faa7 	bl	800072c <__aeabi_ddiv>
 800a1de:	f7f6 fc15 	bl	8000a0c <__aeabi_d2iz>
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	f7f6 f90e 	bl	8000404 <__aeabi_i2d>
 800a1e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1ec:	f7f6 f974 	bl	80004d8 <__aeabi_dmul>
 800a1f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1fc:	f7f5 ffb4 	bl	8000168 <__aeabi_dsub>
 800a200:	f807 6b01 	strb.w	r6, [r7], #1
 800a204:	9e08      	ldr	r6, [sp, #32]
 800a206:	9b02      	ldr	r3, [sp, #8]
 800a208:	1bbe      	subs	r6, r7, r6
 800a20a:	42b3      	cmp	r3, r6
 800a20c:	d13a      	bne.n	800a284 <_dtoa_r+0x70c>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	f7f5 ffab 	bl	800016c <__adddf3>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a21e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a222:	f7f6 fbe9 	bl	80009f8 <__aeabi_dcmpgt>
 800a226:	bb58      	cbnz	r0, 800a280 <_dtoa_r+0x708>
 800a228:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a22c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a230:	f7f6 fbba 	bl	80009a8 <__aeabi_dcmpeq>
 800a234:	b108      	cbz	r0, 800a23a <_dtoa_r+0x6c2>
 800a236:	07e1      	lsls	r1, r4, #31
 800a238:	d422      	bmi.n	800a280 <_dtoa_r+0x708>
 800a23a:	4628      	mov	r0, r5
 800a23c:	4651      	mov	r1, sl
 800a23e:	f7fe feb5 	bl	8008fac <_Bfree>
 800a242:	2300      	movs	r3, #0
 800a244:	703b      	strb	r3, [r7, #0]
 800a246:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a248:	f109 0001 	add.w	r0, r9, #1
 800a24c:	6018      	str	r0, [r3, #0]
 800a24e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a250:	2b00      	cmp	r3, #0
 800a252:	f43f acdf 	beq.w	8009c14 <_dtoa_r+0x9c>
 800a256:	601f      	str	r7, [r3, #0]
 800a258:	e4dc      	b.n	8009c14 <_dtoa_r+0x9c>
 800a25a:	4627      	mov	r7, r4
 800a25c:	463b      	mov	r3, r7
 800a25e:	461f      	mov	r7, r3
 800a260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a264:	2a39      	cmp	r2, #57	; 0x39
 800a266:	d107      	bne.n	800a278 <_dtoa_r+0x700>
 800a268:	9a08      	ldr	r2, [sp, #32]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d1f7      	bne.n	800a25e <_dtoa_r+0x6e6>
 800a26e:	2230      	movs	r2, #48	; 0x30
 800a270:	9908      	ldr	r1, [sp, #32]
 800a272:	f108 0801 	add.w	r8, r8, #1
 800a276:	700a      	strb	r2, [r1, #0]
 800a278:	781a      	ldrb	r2, [r3, #0]
 800a27a:	3201      	adds	r2, #1
 800a27c:	701a      	strb	r2, [r3, #0]
 800a27e:	e79f      	b.n	800a1c0 <_dtoa_r+0x648>
 800a280:	46c8      	mov	r8, r9
 800a282:	e7eb      	b.n	800a25c <_dtoa_r+0x6e4>
 800a284:	2200      	movs	r2, #0
 800a286:	4b72      	ldr	r3, [pc, #456]	; (800a450 <_dtoa_r+0x8d8>)
 800a288:	f7f6 f926 	bl	80004d8 <__aeabi_dmul>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a294:	2200      	movs	r2, #0
 800a296:	2300      	movs	r3, #0
 800a298:	f7f6 fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d098      	beq.n	800a1d2 <_dtoa_r+0x65a>
 800a2a0:	e7cb      	b.n	800a23a <_dtoa_r+0x6c2>
 800a2a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	f000 80cd 	beq.w	800a444 <_dtoa_r+0x8cc>
 800a2aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a2ac:	2a01      	cmp	r2, #1
 800a2ae:	f300 80af 	bgt.w	800a410 <_dtoa_r+0x898>
 800a2b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	f000 80a7 	beq.w	800a408 <_dtoa_r+0x890>
 800a2ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a2c0:	9f06      	ldr	r7, [sp, #24]
 800a2c2:	9a06      	ldr	r2, [sp, #24]
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	441a      	add	r2, r3
 800a2c8:	9206      	str	r2, [sp, #24]
 800a2ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	441a      	add	r2, r3
 800a2d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a2d2:	f7fe ff6f 	bl	80091b4 <__i2b>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	2f00      	cmp	r7, #0
 800a2da:	dd0c      	ble.n	800a2f6 <_dtoa_r+0x77e>
 800a2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	dd09      	ble.n	800a2f6 <_dtoa_r+0x77e>
 800a2e2:	42bb      	cmp	r3, r7
 800a2e4:	bfa8      	it	ge
 800a2e6:	463b      	movge	r3, r7
 800a2e8:	9a06      	ldr	r2, [sp, #24]
 800a2ea:	1aff      	subs	r7, r7, r3
 800a2ec:	1ad2      	subs	r2, r2, r3
 800a2ee:	9206      	str	r2, [sp, #24]
 800a2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f8:	b1f3      	cbz	r3, 800a338 <_dtoa_r+0x7c0>
 800a2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 80a9 	beq.w	800a454 <_dtoa_r+0x8dc>
 800a302:	2c00      	cmp	r4, #0
 800a304:	dd10      	ble.n	800a328 <_dtoa_r+0x7b0>
 800a306:	4631      	mov	r1, r6
 800a308:	4622      	mov	r2, r4
 800a30a:	4628      	mov	r0, r5
 800a30c:	f7ff f80c 	bl	8009328 <__pow5mult>
 800a310:	4652      	mov	r2, sl
 800a312:	4601      	mov	r1, r0
 800a314:	4606      	mov	r6, r0
 800a316:	4628      	mov	r0, r5
 800a318:	f7fe ff62 	bl	80091e0 <__multiply>
 800a31c:	4680      	mov	r8, r0
 800a31e:	4651      	mov	r1, sl
 800a320:	4628      	mov	r0, r5
 800a322:	f7fe fe43 	bl	8008fac <_Bfree>
 800a326:	46c2      	mov	sl, r8
 800a328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a32a:	1b1a      	subs	r2, r3, r4
 800a32c:	d004      	beq.n	800a338 <_dtoa_r+0x7c0>
 800a32e:	4651      	mov	r1, sl
 800a330:	4628      	mov	r0, r5
 800a332:	f7fe fff9 	bl	8009328 <__pow5mult>
 800a336:	4682      	mov	sl, r0
 800a338:	2101      	movs	r1, #1
 800a33a:	4628      	mov	r0, r5
 800a33c:	f7fe ff3a 	bl	80091b4 <__i2b>
 800a340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a342:	4604      	mov	r4, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	f340 8087 	ble.w	800a458 <_dtoa_r+0x8e0>
 800a34a:	461a      	mov	r2, r3
 800a34c:	4601      	mov	r1, r0
 800a34e:	4628      	mov	r0, r5
 800a350:	f7fe ffea 	bl	8009328 <__pow5mult>
 800a354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a356:	4604      	mov	r4, r0
 800a358:	2b01      	cmp	r3, #1
 800a35a:	f340 8080 	ble.w	800a45e <_dtoa_r+0x8e6>
 800a35e:	f04f 0800 	mov.w	r8, #0
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a368:	6918      	ldr	r0, [r3, #16]
 800a36a:	f7fe fed5 	bl	8009118 <__hi0bits>
 800a36e:	f1c0 0020 	rsb	r0, r0, #32
 800a372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a374:	4418      	add	r0, r3
 800a376:	f010 001f 	ands.w	r0, r0, #31
 800a37a:	f000 8092 	beq.w	800a4a2 <_dtoa_r+0x92a>
 800a37e:	f1c0 0320 	rsb	r3, r0, #32
 800a382:	2b04      	cmp	r3, #4
 800a384:	f340 808a 	ble.w	800a49c <_dtoa_r+0x924>
 800a388:	f1c0 001c 	rsb	r0, r0, #28
 800a38c:	9b06      	ldr	r3, [sp, #24]
 800a38e:	4407      	add	r7, r0
 800a390:	4403      	add	r3, r0
 800a392:	9306      	str	r3, [sp, #24]
 800a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a396:	4403      	add	r3, r0
 800a398:	9309      	str	r3, [sp, #36]	; 0x24
 800a39a:	9b06      	ldr	r3, [sp, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dd05      	ble.n	800a3ac <_dtoa_r+0x834>
 800a3a0:	4651      	mov	r1, sl
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	f7ff f819 	bl	80093dc <__lshift>
 800a3aa:	4682      	mov	sl, r0
 800a3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	dd05      	ble.n	800a3be <_dtoa_r+0x846>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f7ff f810 	bl	80093dc <__lshift>
 800a3bc:	4604      	mov	r4, r0
 800a3be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d070      	beq.n	800a4a6 <_dtoa_r+0x92e>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4650      	mov	r0, sl
 800a3c8:	f7ff f874 	bl	80094b4 <__mcmp>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	da6a      	bge.n	800a4a6 <_dtoa_r+0x92e>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4651      	mov	r1, sl
 800a3d4:	220a      	movs	r2, #10
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f7fe fe0a 	bl	8008ff0 <__multadd>
 800a3dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3de:	4682      	mov	sl, r0
 800a3e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 8193 	beq.w	800a710 <_dtoa_r+0xb98>
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	220a      	movs	r2, #10
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f7fe fdfd 	bl	8008ff0 <__multadd>
 800a3f6:	f1bb 0f00 	cmp.w	fp, #0
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	f300 8093 	bgt.w	800a526 <_dtoa_r+0x9ae>
 800a400:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a402:	2b02      	cmp	r3, #2
 800a404:	dc57      	bgt.n	800a4b6 <_dtoa_r+0x93e>
 800a406:	e08e      	b.n	800a526 <_dtoa_r+0x9ae>
 800a408:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a40a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a40e:	e756      	b.n	800a2be <_dtoa_r+0x746>
 800a410:	9b02      	ldr	r3, [sp, #8]
 800a412:	1e5c      	subs	r4, r3, #1
 800a414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a416:	42a3      	cmp	r3, r4
 800a418:	bfb7      	itett	lt
 800a41a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a41c:	1b1c      	subge	r4, r3, r4
 800a41e:	1ae2      	sublt	r2, r4, r3
 800a420:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a422:	bfbe      	ittt	lt
 800a424:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a426:	189b      	addlt	r3, r3, r2
 800a428:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a42a:	9b02      	ldr	r3, [sp, #8]
 800a42c:	bfb8      	it	lt
 800a42e:	2400      	movlt	r4, #0
 800a430:	2b00      	cmp	r3, #0
 800a432:	bfbb      	ittet	lt
 800a434:	9b06      	ldrlt	r3, [sp, #24]
 800a436:	9a02      	ldrlt	r2, [sp, #8]
 800a438:	9f06      	ldrge	r7, [sp, #24]
 800a43a:	1a9f      	sublt	r7, r3, r2
 800a43c:	bfac      	ite	ge
 800a43e:	9b02      	ldrge	r3, [sp, #8]
 800a440:	2300      	movlt	r3, #0
 800a442:	e73e      	b.n	800a2c2 <_dtoa_r+0x74a>
 800a444:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a446:	9f06      	ldr	r7, [sp, #24]
 800a448:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a44a:	e745      	b.n	800a2d8 <_dtoa_r+0x760>
 800a44c:	3fe00000 	.word	0x3fe00000
 800a450:	40240000 	.word	0x40240000
 800a454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a456:	e76a      	b.n	800a32e <_dtoa_r+0x7b6>
 800a458:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	dc19      	bgt.n	800a492 <_dtoa_r+0x91a>
 800a45e:	9b04      	ldr	r3, [sp, #16]
 800a460:	b9bb      	cbnz	r3, 800a492 <_dtoa_r+0x91a>
 800a462:	9b05      	ldr	r3, [sp, #20]
 800a464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a468:	b99b      	cbnz	r3, 800a492 <_dtoa_r+0x91a>
 800a46a:	9b05      	ldr	r3, [sp, #20]
 800a46c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a470:	0d1b      	lsrs	r3, r3, #20
 800a472:	051b      	lsls	r3, r3, #20
 800a474:	b183      	cbz	r3, 800a498 <_dtoa_r+0x920>
 800a476:	f04f 0801 	mov.w	r8, #1
 800a47a:	9b06      	ldr	r3, [sp, #24]
 800a47c:	3301      	adds	r3, #1
 800a47e:	9306      	str	r3, [sp, #24]
 800a480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a482:	3301      	adds	r3, #1
 800a484:	9309      	str	r3, [sp, #36]	; 0x24
 800a486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f47f af6a 	bne.w	800a362 <_dtoa_r+0x7ea>
 800a48e:	2001      	movs	r0, #1
 800a490:	e76f      	b.n	800a372 <_dtoa_r+0x7fa>
 800a492:	f04f 0800 	mov.w	r8, #0
 800a496:	e7f6      	b.n	800a486 <_dtoa_r+0x90e>
 800a498:	4698      	mov	r8, r3
 800a49a:	e7f4      	b.n	800a486 <_dtoa_r+0x90e>
 800a49c:	f43f af7d 	beq.w	800a39a <_dtoa_r+0x822>
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	301c      	adds	r0, #28
 800a4a4:	e772      	b.n	800a38c <_dtoa_r+0x814>
 800a4a6:	9b02      	ldr	r3, [sp, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	dc36      	bgt.n	800a51a <_dtoa_r+0x9a2>
 800a4ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	dd33      	ble.n	800a51a <_dtoa_r+0x9a2>
 800a4b2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a4b6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ba:	d10d      	bne.n	800a4d8 <_dtoa_r+0x960>
 800a4bc:	4621      	mov	r1, r4
 800a4be:	465b      	mov	r3, fp
 800a4c0:	2205      	movs	r2, #5
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f7fe fd94 	bl	8008ff0 <__multadd>
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4650      	mov	r0, sl
 800a4ce:	f7fe fff1 	bl	80094b4 <__mcmp>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f73f adb6 	bgt.w	800a044 <_dtoa_r+0x4cc>
 800a4d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4da:	9f08      	ldr	r7, [sp, #32]
 800a4dc:	ea6f 0903 	mvn.w	r9, r3
 800a4e0:	f04f 0800 	mov.w	r8, #0
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f7fe fd60 	bl	8008fac <_Bfree>
 800a4ec:	2e00      	cmp	r6, #0
 800a4ee:	f43f aea4 	beq.w	800a23a <_dtoa_r+0x6c2>
 800a4f2:	f1b8 0f00 	cmp.w	r8, #0
 800a4f6:	d005      	beq.n	800a504 <_dtoa_r+0x98c>
 800a4f8:	45b0      	cmp	r8, r6
 800a4fa:	d003      	beq.n	800a504 <_dtoa_r+0x98c>
 800a4fc:	4641      	mov	r1, r8
 800a4fe:	4628      	mov	r0, r5
 800a500:	f7fe fd54 	bl	8008fac <_Bfree>
 800a504:	4631      	mov	r1, r6
 800a506:	4628      	mov	r0, r5
 800a508:	f7fe fd50 	bl	8008fac <_Bfree>
 800a50c:	e695      	b.n	800a23a <_dtoa_r+0x6c2>
 800a50e:	2400      	movs	r4, #0
 800a510:	4626      	mov	r6, r4
 800a512:	e7e1      	b.n	800a4d8 <_dtoa_r+0x960>
 800a514:	46c1      	mov	r9, r8
 800a516:	4626      	mov	r6, r4
 800a518:	e594      	b.n	800a044 <_dtoa_r+0x4cc>
 800a51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a51c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 80fc 	beq.w	800a71e <_dtoa_r+0xba6>
 800a526:	2f00      	cmp	r7, #0
 800a528:	dd05      	ble.n	800a536 <_dtoa_r+0x9be>
 800a52a:	4631      	mov	r1, r6
 800a52c:	463a      	mov	r2, r7
 800a52e:	4628      	mov	r0, r5
 800a530:	f7fe ff54 	bl	80093dc <__lshift>
 800a534:	4606      	mov	r6, r0
 800a536:	f1b8 0f00 	cmp.w	r8, #0
 800a53a:	d05c      	beq.n	800a5f6 <_dtoa_r+0xa7e>
 800a53c:	4628      	mov	r0, r5
 800a53e:	6871      	ldr	r1, [r6, #4]
 800a540:	f7fe fcf4 	bl	8008f2c <_Balloc>
 800a544:	4607      	mov	r7, r0
 800a546:	b928      	cbnz	r0, 800a554 <_dtoa_r+0x9dc>
 800a548:	4602      	mov	r2, r0
 800a54a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a54e:	4b7e      	ldr	r3, [pc, #504]	; (800a748 <_dtoa_r+0xbd0>)
 800a550:	f7ff bb26 	b.w	8009ba0 <_dtoa_r+0x28>
 800a554:	6932      	ldr	r2, [r6, #16]
 800a556:	f106 010c 	add.w	r1, r6, #12
 800a55a:	3202      	adds	r2, #2
 800a55c:	0092      	lsls	r2, r2, #2
 800a55e:	300c      	adds	r0, #12
 800a560:	f7fe fcd6 	bl	8008f10 <memcpy>
 800a564:	2201      	movs	r2, #1
 800a566:	4639      	mov	r1, r7
 800a568:	4628      	mov	r0, r5
 800a56a:	f7fe ff37 	bl	80093dc <__lshift>
 800a56e:	46b0      	mov	r8, r6
 800a570:	4606      	mov	r6, r0
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	3301      	adds	r3, #1
 800a576:	9302      	str	r3, [sp, #8]
 800a578:	9b08      	ldr	r3, [sp, #32]
 800a57a:	445b      	add	r3, fp
 800a57c:	930a      	str	r3, [sp, #40]	; 0x28
 800a57e:	9b04      	ldr	r3, [sp, #16]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	9309      	str	r3, [sp, #36]	; 0x24
 800a586:	9b02      	ldr	r3, [sp, #8]
 800a588:	4621      	mov	r1, r4
 800a58a:	4650      	mov	r0, sl
 800a58c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a590:	f7ff fa64 	bl	8009a5c <quorem>
 800a594:	4603      	mov	r3, r0
 800a596:	4641      	mov	r1, r8
 800a598:	3330      	adds	r3, #48	; 0x30
 800a59a:	9004      	str	r0, [sp, #16]
 800a59c:	4650      	mov	r0, sl
 800a59e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5a0:	f7fe ff88 	bl	80094b4 <__mcmp>
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	9006      	str	r0, [sp, #24]
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f7fe ff9e 	bl	80094ec <__mdiff>
 800a5b0:	68c2      	ldr	r2, [r0, #12]
 800a5b2:	4607      	mov	r7, r0
 800a5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5b6:	bb02      	cbnz	r2, 800a5fa <_dtoa_r+0xa82>
 800a5b8:	4601      	mov	r1, r0
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	f7fe ff7a 	bl	80094b4 <__mcmp>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a5cc:	f7fe fcee 	bl	8008fac <_Bfree>
 800a5d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5d4:	9f02      	ldr	r7, [sp, #8]
 800a5d6:	ea43 0102 	orr.w	r1, r3, r2
 800a5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5dc:	430b      	orrs	r3, r1
 800a5de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e0:	d10d      	bne.n	800a5fe <_dtoa_r+0xa86>
 800a5e2:	2b39      	cmp	r3, #57	; 0x39
 800a5e4:	d027      	beq.n	800a636 <_dtoa_r+0xabe>
 800a5e6:	9a06      	ldr	r2, [sp, #24]
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	dd01      	ble.n	800a5f0 <_dtoa_r+0xa78>
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	3331      	adds	r3, #49	; 0x31
 800a5f0:	f88b 3000 	strb.w	r3, [fp]
 800a5f4:	e776      	b.n	800a4e4 <_dtoa_r+0x96c>
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	e7b9      	b.n	800a56e <_dtoa_r+0x9f6>
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	e7e2      	b.n	800a5c4 <_dtoa_r+0xa4c>
 800a5fe:	9906      	ldr	r1, [sp, #24]
 800a600:	2900      	cmp	r1, #0
 800a602:	db04      	blt.n	800a60e <_dtoa_r+0xa96>
 800a604:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a606:	4301      	orrs	r1, r0
 800a608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a60a:	4301      	orrs	r1, r0
 800a60c:	d120      	bne.n	800a650 <_dtoa_r+0xad8>
 800a60e:	2a00      	cmp	r2, #0
 800a610:	ddee      	ble.n	800a5f0 <_dtoa_r+0xa78>
 800a612:	4651      	mov	r1, sl
 800a614:	2201      	movs	r2, #1
 800a616:	4628      	mov	r0, r5
 800a618:	9302      	str	r3, [sp, #8]
 800a61a:	f7fe fedf 	bl	80093dc <__lshift>
 800a61e:	4621      	mov	r1, r4
 800a620:	4682      	mov	sl, r0
 800a622:	f7fe ff47 	bl	80094b4 <__mcmp>
 800a626:	2800      	cmp	r0, #0
 800a628:	9b02      	ldr	r3, [sp, #8]
 800a62a:	dc02      	bgt.n	800a632 <_dtoa_r+0xaba>
 800a62c:	d1e0      	bne.n	800a5f0 <_dtoa_r+0xa78>
 800a62e:	07da      	lsls	r2, r3, #31
 800a630:	d5de      	bpl.n	800a5f0 <_dtoa_r+0xa78>
 800a632:	2b39      	cmp	r3, #57	; 0x39
 800a634:	d1da      	bne.n	800a5ec <_dtoa_r+0xa74>
 800a636:	2339      	movs	r3, #57	; 0x39
 800a638:	f88b 3000 	strb.w	r3, [fp]
 800a63c:	463b      	mov	r3, r7
 800a63e:	461f      	mov	r7, r3
 800a640:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a644:	3b01      	subs	r3, #1
 800a646:	2a39      	cmp	r2, #57	; 0x39
 800a648:	d050      	beq.n	800a6ec <_dtoa_r+0xb74>
 800a64a:	3201      	adds	r2, #1
 800a64c:	701a      	strb	r2, [r3, #0]
 800a64e:	e749      	b.n	800a4e4 <_dtoa_r+0x96c>
 800a650:	2a00      	cmp	r2, #0
 800a652:	dd03      	ble.n	800a65c <_dtoa_r+0xae4>
 800a654:	2b39      	cmp	r3, #57	; 0x39
 800a656:	d0ee      	beq.n	800a636 <_dtoa_r+0xabe>
 800a658:	3301      	adds	r3, #1
 800a65a:	e7c9      	b.n	800a5f0 <_dtoa_r+0xa78>
 800a65c:	9a02      	ldr	r2, [sp, #8]
 800a65e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a660:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a664:	428a      	cmp	r2, r1
 800a666:	d02a      	beq.n	800a6be <_dtoa_r+0xb46>
 800a668:	4651      	mov	r1, sl
 800a66a:	2300      	movs	r3, #0
 800a66c:	220a      	movs	r2, #10
 800a66e:	4628      	mov	r0, r5
 800a670:	f7fe fcbe 	bl	8008ff0 <__multadd>
 800a674:	45b0      	cmp	r8, r6
 800a676:	4682      	mov	sl, r0
 800a678:	f04f 0300 	mov.w	r3, #0
 800a67c:	f04f 020a 	mov.w	r2, #10
 800a680:	4641      	mov	r1, r8
 800a682:	4628      	mov	r0, r5
 800a684:	d107      	bne.n	800a696 <_dtoa_r+0xb1e>
 800a686:	f7fe fcb3 	bl	8008ff0 <__multadd>
 800a68a:	4680      	mov	r8, r0
 800a68c:	4606      	mov	r6, r0
 800a68e:	9b02      	ldr	r3, [sp, #8]
 800a690:	3301      	adds	r3, #1
 800a692:	9302      	str	r3, [sp, #8]
 800a694:	e777      	b.n	800a586 <_dtoa_r+0xa0e>
 800a696:	f7fe fcab 	bl	8008ff0 <__multadd>
 800a69a:	4631      	mov	r1, r6
 800a69c:	4680      	mov	r8, r0
 800a69e:	2300      	movs	r3, #0
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f7fe fca4 	bl	8008ff0 <__multadd>
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	e7f0      	b.n	800a68e <_dtoa_r+0xb16>
 800a6ac:	f1bb 0f00 	cmp.w	fp, #0
 800a6b0:	bfcc      	ite	gt
 800a6b2:	465f      	movgt	r7, fp
 800a6b4:	2701      	movle	r7, #1
 800a6b6:	f04f 0800 	mov.w	r8, #0
 800a6ba:	9a08      	ldr	r2, [sp, #32]
 800a6bc:	4417      	add	r7, r2
 800a6be:	4651      	mov	r1, sl
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	9302      	str	r3, [sp, #8]
 800a6c6:	f7fe fe89 	bl	80093dc <__lshift>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4682      	mov	sl, r0
 800a6ce:	f7fe fef1 	bl	80094b4 <__mcmp>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	dcb2      	bgt.n	800a63c <_dtoa_r+0xac4>
 800a6d6:	d102      	bne.n	800a6de <_dtoa_r+0xb66>
 800a6d8:	9b02      	ldr	r3, [sp, #8]
 800a6da:	07db      	lsls	r3, r3, #31
 800a6dc:	d4ae      	bmi.n	800a63c <_dtoa_r+0xac4>
 800a6de:	463b      	mov	r3, r7
 800a6e0:	461f      	mov	r7, r3
 800a6e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6e6:	2a30      	cmp	r2, #48	; 0x30
 800a6e8:	d0fa      	beq.n	800a6e0 <_dtoa_r+0xb68>
 800a6ea:	e6fb      	b.n	800a4e4 <_dtoa_r+0x96c>
 800a6ec:	9a08      	ldr	r2, [sp, #32]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d1a5      	bne.n	800a63e <_dtoa_r+0xac6>
 800a6f2:	2331      	movs	r3, #49	; 0x31
 800a6f4:	f109 0901 	add.w	r9, r9, #1
 800a6f8:	7013      	strb	r3, [r2, #0]
 800a6fa:	e6f3      	b.n	800a4e4 <_dtoa_r+0x96c>
 800a6fc:	4b13      	ldr	r3, [pc, #76]	; (800a74c <_dtoa_r+0xbd4>)
 800a6fe:	f7ff baa7 	b.w	8009c50 <_dtoa_r+0xd8>
 800a702:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a704:	2b00      	cmp	r3, #0
 800a706:	f47f aa80 	bne.w	8009c0a <_dtoa_r+0x92>
 800a70a:	4b11      	ldr	r3, [pc, #68]	; (800a750 <_dtoa_r+0xbd8>)
 800a70c:	f7ff baa0 	b.w	8009c50 <_dtoa_r+0xd8>
 800a710:	f1bb 0f00 	cmp.w	fp, #0
 800a714:	dc03      	bgt.n	800a71e <_dtoa_r+0xba6>
 800a716:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a718:	2b02      	cmp	r3, #2
 800a71a:	f73f aecc 	bgt.w	800a4b6 <_dtoa_r+0x93e>
 800a71e:	9f08      	ldr	r7, [sp, #32]
 800a720:	4621      	mov	r1, r4
 800a722:	4650      	mov	r0, sl
 800a724:	f7ff f99a 	bl	8009a5c <quorem>
 800a728:	9a08      	ldr	r2, [sp, #32]
 800a72a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a72e:	f807 3b01 	strb.w	r3, [r7], #1
 800a732:	1aba      	subs	r2, r7, r2
 800a734:	4593      	cmp	fp, r2
 800a736:	ddb9      	ble.n	800a6ac <_dtoa_r+0xb34>
 800a738:	4651      	mov	r1, sl
 800a73a:	2300      	movs	r3, #0
 800a73c:	220a      	movs	r2, #10
 800a73e:	4628      	mov	r0, r5
 800a740:	f7fe fc56 	bl	8008ff0 <__multadd>
 800a744:	4682      	mov	sl, r0
 800a746:	e7eb      	b.n	800a720 <_dtoa_r+0xba8>
 800a748:	0800b688 	.word	0x0800b688
 800a74c:	0800b9d6 	.word	0x0800b9d6
 800a750:	0800b9c9 	.word	0x0800b9c9

0800a754 <fiprintf>:
 800a754:	b40e      	push	{r1, r2, r3}
 800a756:	b503      	push	{r0, r1, lr}
 800a758:	4601      	mov	r1, r0
 800a75a:	ab03      	add	r3, sp, #12
 800a75c:	4805      	ldr	r0, [pc, #20]	; (800a774 <fiprintf+0x20>)
 800a75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a762:	6800      	ldr	r0, [r0, #0]
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	f000 f88f 	bl	800a888 <_vfiprintf_r>
 800a76a:	b002      	add	sp, #8
 800a76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a770:	b003      	add	sp, #12
 800a772:	4770      	bx	lr
 800a774:	20000028 	.word	0x20000028

0800a778 <malloc>:
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <malloc+0xc>)
 800a77a:	4601      	mov	r1, r0
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	f7ff b8b7 	b.w	80098f0 <_malloc_r>
 800a782:	bf00      	nop
 800a784:	20000028 	.word	0x20000028

0800a788 <__malloc_lock>:
 800a788:	4801      	ldr	r0, [pc, #4]	; (800a790 <__malloc_lock+0x8>)
 800a78a:	f000 bdc3 	b.w	800b314 <__retarget_lock_acquire_recursive>
 800a78e:	bf00      	nop
 800a790:	20000aac 	.word	0x20000aac

0800a794 <__malloc_unlock>:
 800a794:	4801      	ldr	r0, [pc, #4]	; (800a79c <__malloc_unlock+0x8>)
 800a796:	f000 bdbe 	b.w	800b316 <__retarget_lock_release_recursive>
 800a79a:	bf00      	nop
 800a79c:	20000aac 	.word	0x20000aac

0800a7a0 <_free_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	2900      	cmp	r1, #0
 800a7a6:	d043      	beq.n	800a830 <_free_r+0x90>
 800a7a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ac:	1f0c      	subs	r4, r1, #4
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	bfb8      	it	lt
 800a7b2:	18e4      	addlt	r4, r4, r3
 800a7b4:	f7ff ffe8 	bl	800a788 <__malloc_lock>
 800a7b8:	4a1e      	ldr	r2, [pc, #120]	; (800a834 <_free_r+0x94>)
 800a7ba:	6813      	ldr	r3, [r2, #0]
 800a7bc:	4610      	mov	r0, r2
 800a7be:	b933      	cbnz	r3, 800a7ce <_free_r+0x2e>
 800a7c0:	6063      	str	r3, [r4, #4]
 800a7c2:	6014      	str	r4, [r2, #0]
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ca:	f7ff bfe3 	b.w	800a794 <__malloc_unlock>
 800a7ce:	42a3      	cmp	r3, r4
 800a7d0:	d90a      	bls.n	800a7e8 <_free_r+0x48>
 800a7d2:	6821      	ldr	r1, [r4, #0]
 800a7d4:	1862      	adds	r2, r4, r1
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	bf01      	itttt	eq
 800a7da:	681a      	ldreq	r2, [r3, #0]
 800a7dc:	685b      	ldreq	r3, [r3, #4]
 800a7de:	1852      	addeq	r2, r2, r1
 800a7e0:	6022      	streq	r2, [r4, #0]
 800a7e2:	6063      	str	r3, [r4, #4]
 800a7e4:	6004      	str	r4, [r0, #0]
 800a7e6:	e7ed      	b.n	800a7c4 <_free_r+0x24>
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	b10b      	cbz	r3, 800a7f2 <_free_r+0x52>
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	d9fa      	bls.n	800a7e8 <_free_r+0x48>
 800a7f2:	6811      	ldr	r1, [r2, #0]
 800a7f4:	1850      	adds	r0, r2, r1
 800a7f6:	42a0      	cmp	r0, r4
 800a7f8:	d10b      	bne.n	800a812 <_free_r+0x72>
 800a7fa:	6820      	ldr	r0, [r4, #0]
 800a7fc:	4401      	add	r1, r0
 800a7fe:	1850      	adds	r0, r2, r1
 800a800:	4283      	cmp	r3, r0
 800a802:	6011      	str	r1, [r2, #0]
 800a804:	d1de      	bne.n	800a7c4 <_free_r+0x24>
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	4401      	add	r1, r0
 800a80c:	6011      	str	r1, [r2, #0]
 800a80e:	6053      	str	r3, [r2, #4]
 800a810:	e7d8      	b.n	800a7c4 <_free_r+0x24>
 800a812:	d902      	bls.n	800a81a <_free_r+0x7a>
 800a814:	230c      	movs	r3, #12
 800a816:	602b      	str	r3, [r5, #0]
 800a818:	e7d4      	b.n	800a7c4 <_free_r+0x24>
 800a81a:	6820      	ldr	r0, [r4, #0]
 800a81c:	1821      	adds	r1, r4, r0
 800a81e:	428b      	cmp	r3, r1
 800a820:	bf01      	itttt	eq
 800a822:	6819      	ldreq	r1, [r3, #0]
 800a824:	685b      	ldreq	r3, [r3, #4]
 800a826:	1809      	addeq	r1, r1, r0
 800a828:	6021      	streq	r1, [r4, #0]
 800a82a:	6063      	str	r3, [r4, #4]
 800a82c:	6054      	str	r4, [r2, #4]
 800a82e:	e7c9      	b.n	800a7c4 <_free_r+0x24>
 800a830:	bd38      	pop	{r3, r4, r5, pc}
 800a832:	bf00      	nop
 800a834:	20000658 	.word	0x20000658

0800a838 <__sfputc_r>:
 800a838:	6893      	ldr	r3, [r2, #8]
 800a83a:	b410      	push	{r4}
 800a83c:	3b01      	subs	r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	6093      	str	r3, [r2, #8]
 800a842:	da07      	bge.n	800a854 <__sfputc_r+0x1c>
 800a844:	6994      	ldr	r4, [r2, #24]
 800a846:	42a3      	cmp	r3, r4
 800a848:	db01      	blt.n	800a84e <__sfputc_r+0x16>
 800a84a:	290a      	cmp	r1, #10
 800a84c:	d102      	bne.n	800a854 <__sfputc_r+0x1c>
 800a84e:	bc10      	pop	{r4}
 800a850:	f000 bae0 	b.w	800ae14 <__swbuf_r>
 800a854:	6813      	ldr	r3, [r2, #0]
 800a856:	1c58      	adds	r0, r3, #1
 800a858:	6010      	str	r0, [r2, #0]
 800a85a:	7019      	strb	r1, [r3, #0]
 800a85c:	4608      	mov	r0, r1
 800a85e:	bc10      	pop	{r4}
 800a860:	4770      	bx	lr

0800a862 <__sfputs_r>:
 800a862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	18d5      	adds	r5, r2, r3
 800a86c:	42ac      	cmp	r4, r5
 800a86e:	d101      	bne.n	800a874 <__sfputs_r+0x12>
 800a870:	2000      	movs	r0, #0
 800a872:	e007      	b.n	800a884 <__sfputs_r+0x22>
 800a874:	463a      	mov	r2, r7
 800a876:	4630      	mov	r0, r6
 800a878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a87c:	f7ff ffdc 	bl	800a838 <__sfputc_r>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d1f3      	bne.n	800a86c <__sfputs_r+0xa>
 800a884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a888 <_vfiprintf_r>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	460d      	mov	r5, r1
 800a88e:	4614      	mov	r4, r2
 800a890:	4698      	mov	r8, r3
 800a892:	4606      	mov	r6, r0
 800a894:	b09d      	sub	sp, #116	; 0x74
 800a896:	b118      	cbz	r0, 800a8a0 <_vfiprintf_r+0x18>
 800a898:	6983      	ldr	r3, [r0, #24]
 800a89a:	b90b      	cbnz	r3, 800a8a0 <_vfiprintf_r+0x18>
 800a89c:	f000 fc9c 	bl	800b1d8 <__sinit>
 800a8a0:	4b89      	ldr	r3, [pc, #548]	; (800aac8 <_vfiprintf_r+0x240>)
 800a8a2:	429d      	cmp	r5, r3
 800a8a4:	d11b      	bne.n	800a8de <_vfiprintf_r+0x56>
 800a8a6:	6875      	ldr	r5, [r6, #4]
 800a8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8aa:	07d9      	lsls	r1, r3, #31
 800a8ac:	d405      	bmi.n	800a8ba <_vfiprintf_r+0x32>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	059a      	lsls	r2, r3, #22
 800a8b2:	d402      	bmi.n	800a8ba <_vfiprintf_r+0x32>
 800a8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b6:	f000 fd2d 	bl	800b314 <__retarget_lock_acquire_recursive>
 800a8ba:	89ab      	ldrh	r3, [r5, #12]
 800a8bc:	071b      	lsls	r3, r3, #28
 800a8be:	d501      	bpl.n	800a8c4 <_vfiprintf_r+0x3c>
 800a8c0:	692b      	ldr	r3, [r5, #16]
 800a8c2:	b9eb      	cbnz	r3, 800a900 <_vfiprintf_r+0x78>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 faf6 	bl	800aeb8 <__swsetup_r>
 800a8cc:	b1c0      	cbz	r0, 800a900 <_vfiprintf_r+0x78>
 800a8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d0:	07dc      	lsls	r4, r3, #31
 800a8d2:	d50e      	bpl.n	800a8f2 <_vfiprintf_r+0x6a>
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	b01d      	add	sp, #116	; 0x74
 800a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8de:	4b7b      	ldr	r3, [pc, #492]	; (800aacc <_vfiprintf_r+0x244>)
 800a8e0:	429d      	cmp	r5, r3
 800a8e2:	d101      	bne.n	800a8e8 <_vfiprintf_r+0x60>
 800a8e4:	68b5      	ldr	r5, [r6, #8]
 800a8e6:	e7df      	b.n	800a8a8 <_vfiprintf_r+0x20>
 800a8e8:	4b79      	ldr	r3, [pc, #484]	; (800aad0 <_vfiprintf_r+0x248>)
 800a8ea:	429d      	cmp	r5, r3
 800a8ec:	bf08      	it	eq
 800a8ee:	68f5      	ldreq	r5, [r6, #12]
 800a8f0:	e7da      	b.n	800a8a8 <_vfiprintf_r+0x20>
 800a8f2:	89ab      	ldrh	r3, [r5, #12]
 800a8f4:	0598      	lsls	r0, r3, #22
 800a8f6:	d4ed      	bmi.n	800a8d4 <_vfiprintf_r+0x4c>
 800a8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8fa:	f000 fd0c 	bl	800b316 <__retarget_lock_release_recursive>
 800a8fe:	e7e9      	b.n	800a8d4 <_vfiprintf_r+0x4c>
 800a900:	2300      	movs	r3, #0
 800a902:	9309      	str	r3, [sp, #36]	; 0x24
 800a904:	2320      	movs	r3, #32
 800a906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a90a:	2330      	movs	r3, #48	; 0x30
 800a90c:	f04f 0901 	mov.w	r9, #1
 800a910:	f8cd 800c 	str.w	r8, [sp, #12]
 800a914:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aad4 <_vfiprintf_r+0x24c>
 800a918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a91c:	4623      	mov	r3, r4
 800a91e:	469a      	mov	sl, r3
 800a920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a924:	b10a      	cbz	r2, 800a92a <_vfiprintf_r+0xa2>
 800a926:	2a25      	cmp	r2, #37	; 0x25
 800a928:	d1f9      	bne.n	800a91e <_vfiprintf_r+0x96>
 800a92a:	ebba 0b04 	subs.w	fp, sl, r4
 800a92e:	d00b      	beq.n	800a948 <_vfiprintf_r+0xc0>
 800a930:	465b      	mov	r3, fp
 800a932:	4622      	mov	r2, r4
 800a934:	4629      	mov	r1, r5
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ff93 	bl	800a862 <__sfputs_r>
 800a93c:	3001      	adds	r0, #1
 800a93e:	f000 80aa 	beq.w	800aa96 <_vfiprintf_r+0x20e>
 800a942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a944:	445a      	add	r2, fp
 800a946:	9209      	str	r2, [sp, #36]	; 0x24
 800a948:	f89a 3000 	ldrb.w	r3, [sl]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f000 80a2 	beq.w	800aa96 <_vfiprintf_r+0x20e>
 800a952:	2300      	movs	r3, #0
 800a954:	f04f 32ff 	mov.w	r2, #4294967295
 800a958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a95c:	f10a 0a01 	add.w	sl, sl, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a968:	931a      	str	r3, [sp, #104]	; 0x68
 800a96a:	4654      	mov	r4, sl
 800a96c:	2205      	movs	r2, #5
 800a96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a972:	4858      	ldr	r0, [pc, #352]	; (800aad4 <_vfiprintf_r+0x24c>)
 800a974:	f000 fd34 	bl	800b3e0 <memchr>
 800a978:	9a04      	ldr	r2, [sp, #16]
 800a97a:	b9d8      	cbnz	r0, 800a9b4 <_vfiprintf_r+0x12c>
 800a97c:	06d1      	lsls	r1, r2, #27
 800a97e:	bf44      	itt	mi
 800a980:	2320      	movmi	r3, #32
 800a982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a986:	0713      	lsls	r3, r2, #28
 800a988:	bf44      	itt	mi
 800a98a:	232b      	movmi	r3, #43	; 0x2b
 800a98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a990:	f89a 3000 	ldrb.w	r3, [sl]
 800a994:	2b2a      	cmp	r3, #42	; 0x2a
 800a996:	d015      	beq.n	800a9c4 <_vfiprintf_r+0x13c>
 800a998:	4654      	mov	r4, sl
 800a99a:	2000      	movs	r0, #0
 800a99c:	f04f 0c0a 	mov.w	ip, #10
 800a9a0:	9a07      	ldr	r2, [sp, #28]
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9a8:	3b30      	subs	r3, #48	; 0x30
 800a9aa:	2b09      	cmp	r3, #9
 800a9ac:	d94e      	bls.n	800aa4c <_vfiprintf_r+0x1c4>
 800a9ae:	b1b0      	cbz	r0, 800a9de <_vfiprintf_r+0x156>
 800a9b0:	9207      	str	r2, [sp, #28]
 800a9b2:	e014      	b.n	800a9de <_vfiprintf_r+0x156>
 800a9b4:	eba0 0308 	sub.w	r3, r0, r8
 800a9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	46a2      	mov	sl, r4
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	e7d2      	b.n	800a96a <_vfiprintf_r+0xe2>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	1d19      	adds	r1, r3, #4
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	9103      	str	r1, [sp, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bfbb      	ittet	lt
 800a9d0:	425b      	neglt	r3, r3
 800a9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9d6:	9307      	strge	r3, [sp, #28]
 800a9d8:	9307      	strlt	r3, [sp, #28]
 800a9da:	bfb8      	it	lt
 800a9dc:	9204      	strlt	r2, [sp, #16]
 800a9de:	7823      	ldrb	r3, [r4, #0]
 800a9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e2:	d10c      	bne.n	800a9fe <_vfiprintf_r+0x176>
 800a9e4:	7863      	ldrb	r3, [r4, #1]
 800a9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e8:	d135      	bne.n	800aa56 <_vfiprintf_r+0x1ce>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	3402      	adds	r4, #2
 800a9ee:	1d1a      	adds	r2, r3, #4
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	9203      	str	r2, [sp, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	bfb8      	it	lt
 800a9f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9fc:	9305      	str	r3, [sp, #20]
 800a9fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aae4 <_vfiprintf_r+0x25c>
 800aa02:	2203      	movs	r2, #3
 800aa04:	4650      	mov	r0, sl
 800aa06:	7821      	ldrb	r1, [r4, #0]
 800aa08:	f000 fcea 	bl	800b3e0 <memchr>
 800aa0c:	b140      	cbz	r0, 800aa20 <_vfiprintf_r+0x198>
 800aa0e:	2340      	movs	r3, #64	; 0x40
 800aa10:	eba0 000a 	sub.w	r0, r0, sl
 800aa14:	fa03 f000 	lsl.w	r0, r3, r0
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	3401      	adds	r4, #1
 800aa1c:	4303      	orrs	r3, r0
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa24:	2206      	movs	r2, #6
 800aa26:	482c      	ldr	r0, [pc, #176]	; (800aad8 <_vfiprintf_r+0x250>)
 800aa28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa2c:	f000 fcd8 	bl	800b3e0 <memchr>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d03f      	beq.n	800aab4 <_vfiprintf_r+0x22c>
 800aa34:	4b29      	ldr	r3, [pc, #164]	; (800aadc <_vfiprintf_r+0x254>)
 800aa36:	bb1b      	cbnz	r3, 800aa80 <_vfiprintf_r+0x1f8>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	3307      	adds	r3, #7
 800aa3c:	f023 0307 	bic.w	r3, r3, #7
 800aa40:	3308      	adds	r3, #8
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	443b      	add	r3, r7
 800aa48:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4a:	e767      	b.n	800a91c <_vfiprintf_r+0x94>
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	2001      	movs	r0, #1
 800aa50:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa54:	e7a5      	b.n	800a9a2 <_vfiprintf_r+0x11a>
 800aa56:	2300      	movs	r3, #0
 800aa58:	f04f 0c0a 	mov.w	ip, #10
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	3401      	adds	r4, #1
 800aa60:	9305      	str	r3, [sp, #20]
 800aa62:	4620      	mov	r0, r4
 800aa64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa68:	3a30      	subs	r2, #48	; 0x30
 800aa6a:	2a09      	cmp	r2, #9
 800aa6c:	d903      	bls.n	800aa76 <_vfiprintf_r+0x1ee>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0c5      	beq.n	800a9fe <_vfiprintf_r+0x176>
 800aa72:	9105      	str	r1, [sp, #20]
 800aa74:	e7c3      	b.n	800a9fe <_vfiprintf_r+0x176>
 800aa76:	4604      	mov	r4, r0
 800aa78:	2301      	movs	r3, #1
 800aa7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa7e:	e7f0      	b.n	800aa62 <_vfiprintf_r+0x1da>
 800aa80:	ab03      	add	r3, sp, #12
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	462a      	mov	r2, r5
 800aa86:	4630      	mov	r0, r6
 800aa88:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <_vfiprintf_r+0x258>)
 800aa8a:	a904      	add	r1, sp, #16
 800aa8c:	f3af 8000 	nop.w
 800aa90:	4607      	mov	r7, r0
 800aa92:	1c78      	adds	r0, r7, #1
 800aa94:	d1d6      	bne.n	800aa44 <_vfiprintf_r+0x1bc>
 800aa96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa98:	07d9      	lsls	r1, r3, #31
 800aa9a:	d405      	bmi.n	800aaa8 <_vfiprintf_r+0x220>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	059a      	lsls	r2, r3, #22
 800aaa0:	d402      	bmi.n	800aaa8 <_vfiprintf_r+0x220>
 800aaa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa4:	f000 fc37 	bl	800b316 <__retarget_lock_release_recursive>
 800aaa8:	89ab      	ldrh	r3, [r5, #12]
 800aaaa:	065b      	lsls	r3, r3, #25
 800aaac:	f53f af12 	bmi.w	800a8d4 <_vfiprintf_r+0x4c>
 800aab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab2:	e711      	b.n	800a8d8 <_vfiprintf_r+0x50>
 800aab4:	ab03      	add	r3, sp, #12
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4630      	mov	r0, r6
 800aabc:	4b08      	ldr	r3, [pc, #32]	; (800aae0 <_vfiprintf_r+0x258>)
 800aabe:	a904      	add	r1, sp, #16
 800aac0:	f000 f882 	bl	800abc8 <_printf_i>
 800aac4:	e7e4      	b.n	800aa90 <_vfiprintf_r+0x208>
 800aac6:	bf00      	nop
 800aac8:	0800ba8c 	.word	0x0800ba8c
 800aacc:	0800baac 	.word	0x0800baac
 800aad0:	0800ba6c 	.word	0x0800ba6c
 800aad4:	0800ba37 	.word	0x0800ba37
 800aad8:	0800ba41 	.word	0x0800ba41
 800aadc:	00000000 	.word	0x00000000
 800aae0:	0800a863 	.word	0x0800a863
 800aae4:	0800ba3d 	.word	0x0800ba3d

0800aae8 <_printf_common>:
 800aae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaec:	4616      	mov	r6, r2
 800aaee:	4699      	mov	r9, r3
 800aaf0:	688a      	ldr	r2, [r1, #8]
 800aaf2:	690b      	ldr	r3, [r1, #16]
 800aaf4:	4607      	mov	r7, r0
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	bfb8      	it	lt
 800aafa:	4613      	movlt	r3, r2
 800aafc:	6033      	str	r3, [r6, #0]
 800aafe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab02:	460c      	mov	r4, r1
 800ab04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab08:	b10a      	cbz	r2, 800ab0e <_printf_common+0x26>
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	6033      	str	r3, [r6, #0]
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	0699      	lsls	r1, r3, #26
 800ab12:	bf42      	ittt	mi
 800ab14:	6833      	ldrmi	r3, [r6, #0]
 800ab16:	3302      	addmi	r3, #2
 800ab18:	6033      	strmi	r3, [r6, #0]
 800ab1a:	6825      	ldr	r5, [r4, #0]
 800ab1c:	f015 0506 	ands.w	r5, r5, #6
 800ab20:	d106      	bne.n	800ab30 <_printf_common+0x48>
 800ab22:	f104 0a19 	add.w	sl, r4, #25
 800ab26:	68e3      	ldr	r3, [r4, #12]
 800ab28:	6832      	ldr	r2, [r6, #0]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	42ab      	cmp	r3, r5
 800ab2e:	dc28      	bgt.n	800ab82 <_printf_common+0x9a>
 800ab30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab34:	1e13      	subs	r3, r2, #0
 800ab36:	6822      	ldr	r2, [r4, #0]
 800ab38:	bf18      	it	ne
 800ab3a:	2301      	movne	r3, #1
 800ab3c:	0692      	lsls	r2, r2, #26
 800ab3e:	d42d      	bmi.n	800ab9c <_printf_common+0xb4>
 800ab40:	4649      	mov	r1, r9
 800ab42:	4638      	mov	r0, r7
 800ab44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab48:	47c0      	blx	r8
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d020      	beq.n	800ab90 <_printf_common+0xa8>
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	68e5      	ldr	r5, [r4, #12]
 800ab52:	f003 0306 	and.w	r3, r3, #6
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	bf18      	it	ne
 800ab5a:	2500      	movne	r5, #0
 800ab5c:	6832      	ldr	r2, [r6, #0]
 800ab5e:	f04f 0600 	mov.w	r6, #0
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	bf08      	it	eq
 800ab66:	1aad      	subeq	r5, r5, r2
 800ab68:	6922      	ldr	r2, [r4, #16]
 800ab6a:	bf08      	it	eq
 800ab6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab70:	4293      	cmp	r3, r2
 800ab72:	bfc4      	itt	gt
 800ab74:	1a9b      	subgt	r3, r3, r2
 800ab76:	18ed      	addgt	r5, r5, r3
 800ab78:	341a      	adds	r4, #26
 800ab7a:	42b5      	cmp	r5, r6
 800ab7c:	d11a      	bne.n	800abb4 <_printf_common+0xcc>
 800ab7e:	2000      	movs	r0, #0
 800ab80:	e008      	b.n	800ab94 <_printf_common+0xac>
 800ab82:	2301      	movs	r3, #1
 800ab84:	4652      	mov	r2, sl
 800ab86:	4649      	mov	r1, r9
 800ab88:	4638      	mov	r0, r7
 800ab8a:	47c0      	blx	r8
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d103      	bne.n	800ab98 <_printf_common+0xb0>
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295
 800ab94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab98:	3501      	adds	r5, #1
 800ab9a:	e7c4      	b.n	800ab26 <_printf_common+0x3e>
 800ab9c:	2030      	movs	r0, #48	; 0x30
 800ab9e:	18e1      	adds	r1, r4, r3
 800aba0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aba4:	1c5a      	adds	r2, r3, #1
 800aba6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abaa:	4422      	add	r2, r4
 800abac:	3302      	adds	r3, #2
 800abae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abb2:	e7c5      	b.n	800ab40 <_printf_common+0x58>
 800abb4:	2301      	movs	r3, #1
 800abb6:	4622      	mov	r2, r4
 800abb8:	4649      	mov	r1, r9
 800abba:	4638      	mov	r0, r7
 800abbc:	47c0      	blx	r8
 800abbe:	3001      	adds	r0, #1
 800abc0:	d0e6      	beq.n	800ab90 <_printf_common+0xa8>
 800abc2:	3601      	adds	r6, #1
 800abc4:	e7d9      	b.n	800ab7a <_printf_common+0x92>
	...

0800abc8 <_printf_i>:
 800abc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abcc:	460c      	mov	r4, r1
 800abce:	7e27      	ldrb	r7, [r4, #24]
 800abd0:	4691      	mov	r9, r2
 800abd2:	2f78      	cmp	r7, #120	; 0x78
 800abd4:	4680      	mov	r8, r0
 800abd6:	469a      	mov	sl, r3
 800abd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abde:	d807      	bhi.n	800abf0 <_printf_i+0x28>
 800abe0:	2f62      	cmp	r7, #98	; 0x62
 800abe2:	d80a      	bhi.n	800abfa <_printf_i+0x32>
 800abe4:	2f00      	cmp	r7, #0
 800abe6:	f000 80d9 	beq.w	800ad9c <_printf_i+0x1d4>
 800abea:	2f58      	cmp	r7, #88	; 0x58
 800abec:	f000 80a4 	beq.w	800ad38 <_printf_i+0x170>
 800abf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abf8:	e03a      	b.n	800ac70 <_printf_i+0xa8>
 800abfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abfe:	2b15      	cmp	r3, #21
 800ac00:	d8f6      	bhi.n	800abf0 <_printf_i+0x28>
 800ac02:	a001      	add	r0, pc, #4	; (adr r0, 800ac08 <_printf_i+0x40>)
 800ac04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac08:	0800ac61 	.word	0x0800ac61
 800ac0c:	0800ac75 	.word	0x0800ac75
 800ac10:	0800abf1 	.word	0x0800abf1
 800ac14:	0800abf1 	.word	0x0800abf1
 800ac18:	0800abf1 	.word	0x0800abf1
 800ac1c:	0800abf1 	.word	0x0800abf1
 800ac20:	0800ac75 	.word	0x0800ac75
 800ac24:	0800abf1 	.word	0x0800abf1
 800ac28:	0800abf1 	.word	0x0800abf1
 800ac2c:	0800abf1 	.word	0x0800abf1
 800ac30:	0800abf1 	.word	0x0800abf1
 800ac34:	0800ad83 	.word	0x0800ad83
 800ac38:	0800aca5 	.word	0x0800aca5
 800ac3c:	0800ad65 	.word	0x0800ad65
 800ac40:	0800abf1 	.word	0x0800abf1
 800ac44:	0800abf1 	.word	0x0800abf1
 800ac48:	0800ada5 	.word	0x0800ada5
 800ac4c:	0800abf1 	.word	0x0800abf1
 800ac50:	0800aca5 	.word	0x0800aca5
 800ac54:	0800abf1 	.word	0x0800abf1
 800ac58:	0800abf1 	.word	0x0800abf1
 800ac5c:	0800ad6d 	.word	0x0800ad6d
 800ac60:	680b      	ldr	r3, [r1, #0]
 800ac62:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac66:	1d1a      	adds	r2, r3, #4
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	600a      	str	r2, [r1, #0]
 800ac6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac70:	2301      	movs	r3, #1
 800ac72:	e0a4      	b.n	800adbe <_printf_i+0x1f6>
 800ac74:	6825      	ldr	r5, [r4, #0]
 800ac76:	6808      	ldr	r0, [r1, #0]
 800ac78:	062e      	lsls	r6, r5, #24
 800ac7a:	f100 0304 	add.w	r3, r0, #4
 800ac7e:	d50a      	bpl.n	800ac96 <_printf_i+0xce>
 800ac80:	6805      	ldr	r5, [r0, #0]
 800ac82:	600b      	str	r3, [r1, #0]
 800ac84:	2d00      	cmp	r5, #0
 800ac86:	da03      	bge.n	800ac90 <_printf_i+0xc8>
 800ac88:	232d      	movs	r3, #45	; 0x2d
 800ac8a:	426d      	negs	r5, r5
 800ac8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac90:	230a      	movs	r3, #10
 800ac92:	485e      	ldr	r0, [pc, #376]	; (800ae0c <_printf_i+0x244>)
 800ac94:	e019      	b.n	800acca <_printf_i+0x102>
 800ac96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac9a:	6805      	ldr	r5, [r0, #0]
 800ac9c:	600b      	str	r3, [r1, #0]
 800ac9e:	bf18      	it	ne
 800aca0:	b22d      	sxthne	r5, r5
 800aca2:	e7ef      	b.n	800ac84 <_printf_i+0xbc>
 800aca4:	680b      	ldr	r3, [r1, #0]
 800aca6:	6825      	ldr	r5, [r4, #0]
 800aca8:	1d18      	adds	r0, r3, #4
 800acaa:	6008      	str	r0, [r1, #0]
 800acac:	0628      	lsls	r0, r5, #24
 800acae:	d501      	bpl.n	800acb4 <_printf_i+0xec>
 800acb0:	681d      	ldr	r5, [r3, #0]
 800acb2:	e002      	b.n	800acba <_printf_i+0xf2>
 800acb4:	0669      	lsls	r1, r5, #25
 800acb6:	d5fb      	bpl.n	800acb0 <_printf_i+0xe8>
 800acb8:	881d      	ldrh	r5, [r3, #0]
 800acba:	2f6f      	cmp	r7, #111	; 0x6f
 800acbc:	bf0c      	ite	eq
 800acbe:	2308      	moveq	r3, #8
 800acc0:	230a      	movne	r3, #10
 800acc2:	4852      	ldr	r0, [pc, #328]	; (800ae0c <_printf_i+0x244>)
 800acc4:	2100      	movs	r1, #0
 800acc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acca:	6866      	ldr	r6, [r4, #4]
 800accc:	2e00      	cmp	r6, #0
 800acce:	bfa8      	it	ge
 800acd0:	6821      	ldrge	r1, [r4, #0]
 800acd2:	60a6      	str	r6, [r4, #8]
 800acd4:	bfa4      	itt	ge
 800acd6:	f021 0104 	bicge.w	r1, r1, #4
 800acda:	6021      	strge	r1, [r4, #0]
 800acdc:	b90d      	cbnz	r5, 800ace2 <_printf_i+0x11a>
 800acde:	2e00      	cmp	r6, #0
 800ace0:	d04d      	beq.n	800ad7e <_printf_i+0x1b6>
 800ace2:	4616      	mov	r6, r2
 800ace4:	fbb5 f1f3 	udiv	r1, r5, r3
 800ace8:	fb03 5711 	mls	r7, r3, r1, r5
 800acec:	5dc7      	ldrb	r7, [r0, r7]
 800acee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acf2:	462f      	mov	r7, r5
 800acf4:	42bb      	cmp	r3, r7
 800acf6:	460d      	mov	r5, r1
 800acf8:	d9f4      	bls.n	800ace4 <_printf_i+0x11c>
 800acfa:	2b08      	cmp	r3, #8
 800acfc:	d10b      	bne.n	800ad16 <_printf_i+0x14e>
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	07df      	lsls	r7, r3, #31
 800ad02:	d508      	bpl.n	800ad16 <_printf_i+0x14e>
 800ad04:	6923      	ldr	r3, [r4, #16]
 800ad06:	6861      	ldr	r1, [r4, #4]
 800ad08:	4299      	cmp	r1, r3
 800ad0a:	bfde      	ittt	le
 800ad0c:	2330      	movle	r3, #48	; 0x30
 800ad0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad12:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad16:	1b92      	subs	r2, r2, r6
 800ad18:	6122      	str	r2, [r4, #16]
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	4640      	mov	r0, r8
 800ad20:	f8cd a000 	str.w	sl, [sp]
 800ad24:	aa03      	add	r2, sp, #12
 800ad26:	f7ff fedf 	bl	800aae8 <_printf_common>
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d14c      	bne.n	800adc8 <_printf_i+0x200>
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	b004      	add	sp, #16
 800ad34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad38:	4834      	ldr	r0, [pc, #208]	; (800ae0c <_printf_i+0x244>)
 800ad3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad3e:	680e      	ldr	r6, [r1, #0]
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad46:	061f      	lsls	r7, r3, #24
 800ad48:	600e      	str	r6, [r1, #0]
 800ad4a:	d514      	bpl.n	800ad76 <_printf_i+0x1ae>
 800ad4c:	07d9      	lsls	r1, r3, #31
 800ad4e:	bf44      	itt	mi
 800ad50:	f043 0320 	orrmi.w	r3, r3, #32
 800ad54:	6023      	strmi	r3, [r4, #0]
 800ad56:	b91d      	cbnz	r5, 800ad60 <_printf_i+0x198>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	f023 0320 	bic.w	r3, r3, #32
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	2310      	movs	r3, #16
 800ad62:	e7af      	b.n	800acc4 <_printf_i+0xfc>
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	f043 0320 	orr.w	r3, r3, #32
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	2378      	movs	r3, #120	; 0x78
 800ad6e:	4828      	ldr	r0, [pc, #160]	; (800ae10 <_printf_i+0x248>)
 800ad70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad74:	e7e3      	b.n	800ad3e <_printf_i+0x176>
 800ad76:	065e      	lsls	r6, r3, #25
 800ad78:	bf48      	it	mi
 800ad7a:	b2ad      	uxthmi	r5, r5
 800ad7c:	e7e6      	b.n	800ad4c <_printf_i+0x184>
 800ad7e:	4616      	mov	r6, r2
 800ad80:	e7bb      	b.n	800acfa <_printf_i+0x132>
 800ad82:	680b      	ldr	r3, [r1, #0]
 800ad84:	6826      	ldr	r6, [r4, #0]
 800ad86:	1d1d      	adds	r5, r3, #4
 800ad88:	6960      	ldr	r0, [r4, #20]
 800ad8a:	600d      	str	r5, [r1, #0]
 800ad8c:	0635      	lsls	r5, r6, #24
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	d501      	bpl.n	800ad96 <_printf_i+0x1ce>
 800ad92:	6018      	str	r0, [r3, #0]
 800ad94:	e002      	b.n	800ad9c <_printf_i+0x1d4>
 800ad96:	0671      	lsls	r1, r6, #25
 800ad98:	d5fb      	bpl.n	800ad92 <_printf_i+0x1ca>
 800ad9a:	8018      	strh	r0, [r3, #0]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	4616      	mov	r6, r2
 800ada0:	6123      	str	r3, [r4, #16]
 800ada2:	e7ba      	b.n	800ad1a <_printf_i+0x152>
 800ada4:	680b      	ldr	r3, [r1, #0]
 800ada6:	1d1a      	adds	r2, r3, #4
 800ada8:	600a      	str	r2, [r1, #0]
 800adaa:	681e      	ldr	r6, [r3, #0]
 800adac:	2100      	movs	r1, #0
 800adae:	4630      	mov	r0, r6
 800adb0:	6862      	ldr	r2, [r4, #4]
 800adb2:	f000 fb15 	bl	800b3e0 <memchr>
 800adb6:	b108      	cbz	r0, 800adbc <_printf_i+0x1f4>
 800adb8:	1b80      	subs	r0, r0, r6
 800adba:	6060      	str	r0, [r4, #4]
 800adbc:	6863      	ldr	r3, [r4, #4]
 800adbe:	6123      	str	r3, [r4, #16]
 800adc0:	2300      	movs	r3, #0
 800adc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adc6:	e7a8      	b.n	800ad1a <_printf_i+0x152>
 800adc8:	4632      	mov	r2, r6
 800adca:	4649      	mov	r1, r9
 800adcc:	4640      	mov	r0, r8
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	47d0      	blx	sl
 800add2:	3001      	adds	r0, #1
 800add4:	d0ab      	beq.n	800ad2e <_printf_i+0x166>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	079b      	lsls	r3, r3, #30
 800adda:	d413      	bmi.n	800ae04 <_printf_i+0x23c>
 800addc:	68e0      	ldr	r0, [r4, #12]
 800adde:	9b03      	ldr	r3, [sp, #12]
 800ade0:	4298      	cmp	r0, r3
 800ade2:	bfb8      	it	lt
 800ade4:	4618      	movlt	r0, r3
 800ade6:	e7a4      	b.n	800ad32 <_printf_i+0x16a>
 800ade8:	2301      	movs	r3, #1
 800adea:	4632      	mov	r2, r6
 800adec:	4649      	mov	r1, r9
 800adee:	4640      	mov	r0, r8
 800adf0:	47d0      	blx	sl
 800adf2:	3001      	adds	r0, #1
 800adf4:	d09b      	beq.n	800ad2e <_printf_i+0x166>
 800adf6:	3501      	adds	r5, #1
 800adf8:	68e3      	ldr	r3, [r4, #12]
 800adfa:	9903      	ldr	r1, [sp, #12]
 800adfc:	1a5b      	subs	r3, r3, r1
 800adfe:	42ab      	cmp	r3, r5
 800ae00:	dcf2      	bgt.n	800ade8 <_printf_i+0x220>
 800ae02:	e7eb      	b.n	800addc <_printf_i+0x214>
 800ae04:	2500      	movs	r5, #0
 800ae06:	f104 0619 	add.w	r6, r4, #25
 800ae0a:	e7f5      	b.n	800adf8 <_printf_i+0x230>
 800ae0c:	0800ba48 	.word	0x0800ba48
 800ae10:	0800ba59 	.word	0x0800ba59

0800ae14 <__swbuf_r>:
 800ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae16:	460e      	mov	r6, r1
 800ae18:	4614      	mov	r4, r2
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	b118      	cbz	r0, 800ae26 <__swbuf_r+0x12>
 800ae1e:	6983      	ldr	r3, [r0, #24]
 800ae20:	b90b      	cbnz	r3, 800ae26 <__swbuf_r+0x12>
 800ae22:	f000 f9d9 	bl	800b1d8 <__sinit>
 800ae26:	4b21      	ldr	r3, [pc, #132]	; (800aeac <__swbuf_r+0x98>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	d12b      	bne.n	800ae84 <__swbuf_r+0x70>
 800ae2c:	686c      	ldr	r4, [r5, #4]
 800ae2e:	69a3      	ldr	r3, [r4, #24]
 800ae30:	60a3      	str	r3, [r4, #8]
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	071a      	lsls	r2, r3, #28
 800ae36:	d52f      	bpl.n	800ae98 <__swbuf_r+0x84>
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	b36b      	cbz	r3, 800ae98 <__swbuf_r+0x84>
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	6820      	ldr	r0, [r4, #0]
 800ae40:	b2f6      	uxtb	r6, r6
 800ae42:	1ac0      	subs	r0, r0, r3
 800ae44:	6963      	ldr	r3, [r4, #20]
 800ae46:	4637      	mov	r7, r6
 800ae48:	4283      	cmp	r3, r0
 800ae4a:	dc04      	bgt.n	800ae56 <__swbuf_r+0x42>
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 f92e 	bl	800b0b0 <_fflush_r>
 800ae54:	bb30      	cbnz	r0, 800aea4 <__swbuf_r+0x90>
 800ae56:	68a3      	ldr	r3, [r4, #8]
 800ae58:	3001      	adds	r0, #1
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	60a3      	str	r3, [r4, #8]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	1c5a      	adds	r2, r3, #1
 800ae62:	6022      	str	r2, [r4, #0]
 800ae64:	701e      	strb	r6, [r3, #0]
 800ae66:	6963      	ldr	r3, [r4, #20]
 800ae68:	4283      	cmp	r3, r0
 800ae6a:	d004      	beq.n	800ae76 <__swbuf_r+0x62>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	07db      	lsls	r3, r3, #31
 800ae70:	d506      	bpl.n	800ae80 <__swbuf_r+0x6c>
 800ae72:	2e0a      	cmp	r6, #10
 800ae74:	d104      	bne.n	800ae80 <__swbuf_r+0x6c>
 800ae76:	4621      	mov	r1, r4
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f000 f919 	bl	800b0b0 <_fflush_r>
 800ae7e:	b988      	cbnz	r0, 800aea4 <__swbuf_r+0x90>
 800ae80:	4638      	mov	r0, r7
 800ae82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae84:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <__swbuf_r+0x9c>)
 800ae86:	429c      	cmp	r4, r3
 800ae88:	d101      	bne.n	800ae8e <__swbuf_r+0x7a>
 800ae8a:	68ac      	ldr	r4, [r5, #8]
 800ae8c:	e7cf      	b.n	800ae2e <__swbuf_r+0x1a>
 800ae8e:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <__swbuf_r+0xa0>)
 800ae90:	429c      	cmp	r4, r3
 800ae92:	bf08      	it	eq
 800ae94:	68ec      	ldreq	r4, [r5, #12]
 800ae96:	e7ca      	b.n	800ae2e <__swbuf_r+0x1a>
 800ae98:	4621      	mov	r1, r4
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f000 f80c 	bl	800aeb8 <__swsetup_r>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d0cb      	beq.n	800ae3c <__swbuf_r+0x28>
 800aea4:	f04f 37ff 	mov.w	r7, #4294967295
 800aea8:	e7ea      	b.n	800ae80 <__swbuf_r+0x6c>
 800aeaa:	bf00      	nop
 800aeac:	0800ba8c 	.word	0x0800ba8c
 800aeb0:	0800baac 	.word	0x0800baac
 800aeb4:	0800ba6c 	.word	0x0800ba6c

0800aeb8 <__swsetup_r>:
 800aeb8:	4b32      	ldr	r3, [pc, #200]	; (800af84 <__swsetup_r+0xcc>)
 800aeba:	b570      	push	{r4, r5, r6, lr}
 800aebc:	681d      	ldr	r5, [r3, #0]
 800aebe:	4606      	mov	r6, r0
 800aec0:	460c      	mov	r4, r1
 800aec2:	b125      	cbz	r5, 800aece <__swsetup_r+0x16>
 800aec4:	69ab      	ldr	r3, [r5, #24]
 800aec6:	b913      	cbnz	r3, 800aece <__swsetup_r+0x16>
 800aec8:	4628      	mov	r0, r5
 800aeca:	f000 f985 	bl	800b1d8 <__sinit>
 800aece:	4b2e      	ldr	r3, [pc, #184]	; (800af88 <__swsetup_r+0xd0>)
 800aed0:	429c      	cmp	r4, r3
 800aed2:	d10f      	bne.n	800aef4 <__swsetup_r+0x3c>
 800aed4:	686c      	ldr	r4, [r5, #4]
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aedc:	0719      	lsls	r1, r3, #28
 800aede:	d42c      	bmi.n	800af3a <__swsetup_r+0x82>
 800aee0:	06dd      	lsls	r5, r3, #27
 800aee2:	d411      	bmi.n	800af08 <__swsetup_r+0x50>
 800aee4:	2309      	movs	r3, #9
 800aee6:	6033      	str	r3, [r6, #0]
 800aee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aeec:	f04f 30ff 	mov.w	r0, #4294967295
 800aef0:	81a3      	strh	r3, [r4, #12]
 800aef2:	e03e      	b.n	800af72 <__swsetup_r+0xba>
 800aef4:	4b25      	ldr	r3, [pc, #148]	; (800af8c <__swsetup_r+0xd4>)
 800aef6:	429c      	cmp	r4, r3
 800aef8:	d101      	bne.n	800aefe <__swsetup_r+0x46>
 800aefa:	68ac      	ldr	r4, [r5, #8]
 800aefc:	e7eb      	b.n	800aed6 <__swsetup_r+0x1e>
 800aefe:	4b24      	ldr	r3, [pc, #144]	; (800af90 <__swsetup_r+0xd8>)
 800af00:	429c      	cmp	r4, r3
 800af02:	bf08      	it	eq
 800af04:	68ec      	ldreq	r4, [r5, #12]
 800af06:	e7e6      	b.n	800aed6 <__swsetup_r+0x1e>
 800af08:	0758      	lsls	r0, r3, #29
 800af0a:	d512      	bpl.n	800af32 <__swsetup_r+0x7a>
 800af0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af0e:	b141      	cbz	r1, 800af22 <__swsetup_r+0x6a>
 800af10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af14:	4299      	cmp	r1, r3
 800af16:	d002      	beq.n	800af1e <__swsetup_r+0x66>
 800af18:	4630      	mov	r0, r6
 800af1a:	f7ff fc41 	bl	800a7a0 <_free_r>
 800af1e:	2300      	movs	r3, #0
 800af20:	6363      	str	r3, [r4, #52]	; 0x34
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	2300      	movs	r3, #0
 800af2c:	6063      	str	r3, [r4, #4]
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f043 0308 	orr.w	r3, r3, #8
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	b94b      	cbnz	r3, 800af52 <__swsetup_r+0x9a>
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af48:	d003      	beq.n	800af52 <__swsetup_r+0x9a>
 800af4a:	4621      	mov	r1, r4
 800af4c:	4630      	mov	r0, r6
 800af4e:	f000 fa07 	bl	800b360 <__smakebuf_r>
 800af52:	89a0      	ldrh	r0, [r4, #12]
 800af54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af58:	f010 0301 	ands.w	r3, r0, #1
 800af5c:	d00a      	beq.n	800af74 <__swsetup_r+0xbc>
 800af5e:	2300      	movs	r3, #0
 800af60:	60a3      	str	r3, [r4, #8]
 800af62:	6963      	ldr	r3, [r4, #20]
 800af64:	425b      	negs	r3, r3
 800af66:	61a3      	str	r3, [r4, #24]
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	b943      	cbnz	r3, 800af7e <__swsetup_r+0xc6>
 800af6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af70:	d1ba      	bne.n	800aee8 <__swsetup_r+0x30>
 800af72:	bd70      	pop	{r4, r5, r6, pc}
 800af74:	0781      	lsls	r1, r0, #30
 800af76:	bf58      	it	pl
 800af78:	6963      	ldrpl	r3, [r4, #20]
 800af7a:	60a3      	str	r3, [r4, #8]
 800af7c:	e7f4      	b.n	800af68 <__swsetup_r+0xb0>
 800af7e:	2000      	movs	r0, #0
 800af80:	e7f7      	b.n	800af72 <__swsetup_r+0xba>
 800af82:	bf00      	nop
 800af84:	20000028 	.word	0x20000028
 800af88:	0800ba8c 	.word	0x0800ba8c
 800af8c:	0800baac 	.word	0x0800baac
 800af90:	0800ba6c 	.word	0x0800ba6c

0800af94 <abort>:
 800af94:	2006      	movs	r0, #6
 800af96:	b508      	push	{r3, lr}
 800af98:	f000 fa58 	bl	800b44c <raise>
 800af9c:	2001      	movs	r0, #1
 800af9e:	f7f7 f83a 	bl	8002016 <_exit>
	...

0800afa4 <__sflush_r>:
 800afa4:	898a      	ldrh	r2, [r1, #12]
 800afa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afaa:	4605      	mov	r5, r0
 800afac:	0710      	lsls	r0, r2, #28
 800afae:	460c      	mov	r4, r1
 800afb0:	d458      	bmi.n	800b064 <__sflush_r+0xc0>
 800afb2:	684b      	ldr	r3, [r1, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dc05      	bgt.n	800afc4 <__sflush_r+0x20>
 800afb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afba:	2b00      	cmp	r3, #0
 800afbc:	dc02      	bgt.n	800afc4 <__sflush_r+0x20>
 800afbe:	2000      	movs	r0, #0
 800afc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	d0f9      	beq.n	800afbe <__sflush_r+0x1a>
 800afca:	2300      	movs	r3, #0
 800afcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afd0:	682f      	ldr	r7, [r5, #0]
 800afd2:	602b      	str	r3, [r5, #0]
 800afd4:	d032      	beq.n	800b03c <__sflush_r+0x98>
 800afd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	075a      	lsls	r2, r3, #29
 800afdc:	d505      	bpl.n	800afea <__sflush_r+0x46>
 800afde:	6863      	ldr	r3, [r4, #4]
 800afe0:	1ac0      	subs	r0, r0, r3
 800afe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afe4:	b10b      	cbz	r3, 800afea <__sflush_r+0x46>
 800afe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afe8:	1ac0      	subs	r0, r0, r3
 800afea:	2300      	movs	r3, #0
 800afec:	4602      	mov	r2, r0
 800afee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aff0:	4628      	mov	r0, r5
 800aff2:	6a21      	ldr	r1, [r4, #32]
 800aff4:	47b0      	blx	r6
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	d106      	bne.n	800b00a <__sflush_r+0x66>
 800affc:	6829      	ldr	r1, [r5, #0]
 800affe:	291d      	cmp	r1, #29
 800b000:	d82c      	bhi.n	800b05c <__sflush_r+0xb8>
 800b002:	4a2a      	ldr	r2, [pc, #168]	; (800b0ac <__sflush_r+0x108>)
 800b004:	40ca      	lsrs	r2, r1
 800b006:	07d6      	lsls	r6, r2, #31
 800b008:	d528      	bpl.n	800b05c <__sflush_r+0xb8>
 800b00a:	2200      	movs	r2, #0
 800b00c:	6062      	str	r2, [r4, #4]
 800b00e:	6922      	ldr	r2, [r4, #16]
 800b010:	04d9      	lsls	r1, r3, #19
 800b012:	6022      	str	r2, [r4, #0]
 800b014:	d504      	bpl.n	800b020 <__sflush_r+0x7c>
 800b016:	1c42      	adds	r2, r0, #1
 800b018:	d101      	bne.n	800b01e <__sflush_r+0x7a>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	b903      	cbnz	r3, 800b020 <__sflush_r+0x7c>
 800b01e:	6560      	str	r0, [r4, #84]	; 0x54
 800b020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b022:	602f      	str	r7, [r5, #0]
 800b024:	2900      	cmp	r1, #0
 800b026:	d0ca      	beq.n	800afbe <__sflush_r+0x1a>
 800b028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b02c:	4299      	cmp	r1, r3
 800b02e:	d002      	beq.n	800b036 <__sflush_r+0x92>
 800b030:	4628      	mov	r0, r5
 800b032:	f7ff fbb5 	bl	800a7a0 <_free_r>
 800b036:	2000      	movs	r0, #0
 800b038:	6360      	str	r0, [r4, #52]	; 0x34
 800b03a:	e7c1      	b.n	800afc0 <__sflush_r+0x1c>
 800b03c:	6a21      	ldr	r1, [r4, #32]
 800b03e:	2301      	movs	r3, #1
 800b040:	4628      	mov	r0, r5
 800b042:	47b0      	blx	r6
 800b044:	1c41      	adds	r1, r0, #1
 800b046:	d1c7      	bne.n	800afd8 <__sflush_r+0x34>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0c4      	beq.n	800afd8 <__sflush_r+0x34>
 800b04e:	2b1d      	cmp	r3, #29
 800b050:	d001      	beq.n	800b056 <__sflush_r+0xb2>
 800b052:	2b16      	cmp	r3, #22
 800b054:	d101      	bne.n	800b05a <__sflush_r+0xb6>
 800b056:	602f      	str	r7, [r5, #0]
 800b058:	e7b1      	b.n	800afbe <__sflush_r+0x1a>
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b060:	81a3      	strh	r3, [r4, #12]
 800b062:	e7ad      	b.n	800afc0 <__sflush_r+0x1c>
 800b064:	690f      	ldr	r7, [r1, #16]
 800b066:	2f00      	cmp	r7, #0
 800b068:	d0a9      	beq.n	800afbe <__sflush_r+0x1a>
 800b06a:	0793      	lsls	r3, r2, #30
 800b06c:	bf18      	it	ne
 800b06e:	2300      	movne	r3, #0
 800b070:	680e      	ldr	r6, [r1, #0]
 800b072:	bf08      	it	eq
 800b074:	694b      	ldreq	r3, [r1, #20]
 800b076:	eba6 0807 	sub.w	r8, r6, r7
 800b07a:	600f      	str	r7, [r1, #0]
 800b07c:	608b      	str	r3, [r1, #8]
 800b07e:	f1b8 0f00 	cmp.w	r8, #0
 800b082:	dd9c      	ble.n	800afbe <__sflush_r+0x1a>
 800b084:	4643      	mov	r3, r8
 800b086:	463a      	mov	r2, r7
 800b088:	4628      	mov	r0, r5
 800b08a:	6a21      	ldr	r1, [r4, #32]
 800b08c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b08e:	47b0      	blx	r6
 800b090:	2800      	cmp	r0, #0
 800b092:	dc06      	bgt.n	800b0a2 <__sflush_r+0xfe>
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	f04f 30ff 	mov.w	r0, #4294967295
 800b09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09e:	81a3      	strh	r3, [r4, #12]
 800b0a0:	e78e      	b.n	800afc0 <__sflush_r+0x1c>
 800b0a2:	4407      	add	r7, r0
 800b0a4:	eba8 0800 	sub.w	r8, r8, r0
 800b0a8:	e7e9      	b.n	800b07e <__sflush_r+0xda>
 800b0aa:	bf00      	nop
 800b0ac:	20400001 	.word	0x20400001

0800b0b0 <_fflush_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	690b      	ldr	r3, [r1, #16]
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	b913      	cbnz	r3, 800b0c0 <_fflush_r+0x10>
 800b0ba:	2500      	movs	r5, #0
 800b0bc:	4628      	mov	r0, r5
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	b118      	cbz	r0, 800b0ca <_fflush_r+0x1a>
 800b0c2:	6983      	ldr	r3, [r0, #24]
 800b0c4:	b90b      	cbnz	r3, 800b0ca <_fflush_r+0x1a>
 800b0c6:	f000 f887 	bl	800b1d8 <__sinit>
 800b0ca:	4b14      	ldr	r3, [pc, #80]	; (800b11c <_fflush_r+0x6c>)
 800b0cc:	429c      	cmp	r4, r3
 800b0ce:	d11b      	bne.n	800b108 <_fflush_r+0x58>
 800b0d0:	686c      	ldr	r4, [r5, #4]
 800b0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0ef      	beq.n	800b0ba <_fflush_r+0xa>
 800b0da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0dc:	07d0      	lsls	r0, r2, #31
 800b0de:	d404      	bmi.n	800b0ea <_fflush_r+0x3a>
 800b0e0:	0599      	lsls	r1, r3, #22
 800b0e2:	d402      	bmi.n	800b0ea <_fflush_r+0x3a>
 800b0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0e6:	f000 f915 	bl	800b314 <__retarget_lock_acquire_recursive>
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	f7ff ff59 	bl	800afa4 <__sflush_r>
 800b0f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	07da      	lsls	r2, r3, #31
 800b0f8:	d4e0      	bmi.n	800b0bc <_fflush_r+0xc>
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	059b      	lsls	r3, r3, #22
 800b0fe:	d4dd      	bmi.n	800b0bc <_fflush_r+0xc>
 800b100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b102:	f000 f908 	bl	800b316 <__retarget_lock_release_recursive>
 800b106:	e7d9      	b.n	800b0bc <_fflush_r+0xc>
 800b108:	4b05      	ldr	r3, [pc, #20]	; (800b120 <_fflush_r+0x70>)
 800b10a:	429c      	cmp	r4, r3
 800b10c:	d101      	bne.n	800b112 <_fflush_r+0x62>
 800b10e:	68ac      	ldr	r4, [r5, #8]
 800b110:	e7df      	b.n	800b0d2 <_fflush_r+0x22>
 800b112:	4b04      	ldr	r3, [pc, #16]	; (800b124 <_fflush_r+0x74>)
 800b114:	429c      	cmp	r4, r3
 800b116:	bf08      	it	eq
 800b118:	68ec      	ldreq	r4, [r5, #12]
 800b11a:	e7da      	b.n	800b0d2 <_fflush_r+0x22>
 800b11c:	0800ba8c 	.word	0x0800ba8c
 800b120:	0800baac 	.word	0x0800baac
 800b124:	0800ba6c 	.word	0x0800ba6c

0800b128 <std>:
 800b128:	2300      	movs	r3, #0
 800b12a:	b510      	push	{r4, lr}
 800b12c:	4604      	mov	r4, r0
 800b12e:	e9c0 3300 	strd	r3, r3, [r0]
 800b132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b136:	6083      	str	r3, [r0, #8]
 800b138:	8181      	strh	r1, [r0, #12]
 800b13a:	6643      	str	r3, [r0, #100]	; 0x64
 800b13c:	81c2      	strh	r2, [r0, #14]
 800b13e:	6183      	str	r3, [r0, #24]
 800b140:	4619      	mov	r1, r3
 800b142:	2208      	movs	r2, #8
 800b144:	305c      	adds	r0, #92	; 0x5c
 800b146:	f7fc fc07 	bl	8007958 <memset>
 800b14a:	4b05      	ldr	r3, [pc, #20]	; (800b160 <std+0x38>)
 800b14c:	6224      	str	r4, [r4, #32]
 800b14e:	6263      	str	r3, [r4, #36]	; 0x24
 800b150:	4b04      	ldr	r3, [pc, #16]	; (800b164 <std+0x3c>)
 800b152:	62a3      	str	r3, [r4, #40]	; 0x28
 800b154:	4b04      	ldr	r3, [pc, #16]	; (800b168 <std+0x40>)
 800b156:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b158:	4b04      	ldr	r3, [pc, #16]	; (800b16c <std+0x44>)
 800b15a:	6323      	str	r3, [r4, #48]	; 0x30
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	bf00      	nop
 800b160:	0800b485 	.word	0x0800b485
 800b164:	0800b4a7 	.word	0x0800b4a7
 800b168:	0800b4df 	.word	0x0800b4df
 800b16c:	0800b503 	.word	0x0800b503

0800b170 <_cleanup_r>:
 800b170:	4901      	ldr	r1, [pc, #4]	; (800b178 <_cleanup_r+0x8>)
 800b172:	f000 b8af 	b.w	800b2d4 <_fwalk_reent>
 800b176:	bf00      	nop
 800b178:	0800b0b1 	.word	0x0800b0b1

0800b17c <__sfmoreglue>:
 800b17c:	b570      	push	{r4, r5, r6, lr}
 800b17e:	2568      	movs	r5, #104	; 0x68
 800b180:	1e4a      	subs	r2, r1, #1
 800b182:	4355      	muls	r5, r2
 800b184:	460e      	mov	r6, r1
 800b186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b18a:	f7fe fbb1 	bl	80098f0 <_malloc_r>
 800b18e:	4604      	mov	r4, r0
 800b190:	b140      	cbz	r0, 800b1a4 <__sfmoreglue+0x28>
 800b192:	2100      	movs	r1, #0
 800b194:	e9c0 1600 	strd	r1, r6, [r0]
 800b198:	300c      	adds	r0, #12
 800b19a:	60a0      	str	r0, [r4, #8]
 800b19c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1a0:	f7fc fbda 	bl	8007958 <memset>
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}

0800b1a8 <__sfp_lock_acquire>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__sfp_lock_acquire+0x8>)
 800b1aa:	f000 b8b3 	b.w	800b314 <__retarget_lock_acquire_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	20000ab0 	.word	0x20000ab0

0800b1b4 <__sfp_lock_release>:
 800b1b4:	4801      	ldr	r0, [pc, #4]	; (800b1bc <__sfp_lock_release+0x8>)
 800b1b6:	f000 b8ae 	b.w	800b316 <__retarget_lock_release_recursive>
 800b1ba:	bf00      	nop
 800b1bc:	20000ab0 	.word	0x20000ab0

0800b1c0 <__sinit_lock_acquire>:
 800b1c0:	4801      	ldr	r0, [pc, #4]	; (800b1c8 <__sinit_lock_acquire+0x8>)
 800b1c2:	f000 b8a7 	b.w	800b314 <__retarget_lock_acquire_recursive>
 800b1c6:	bf00      	nop
 800b1c8:	20000aab 	.word	0x20000aab

0800b1cc <__sinit_lock_release>:
 800b1cc:	4801      	ldr	r0, [pc, #4]	; (800b1d4 <__sinit_lock_release+0x8>)
 800b1ce:	f000 b8a2 	b.w	800b316 <__retarget_lock_release_recursive>
 800b1d2:	bf00      	nop
 800b1d4:	20000aab 	.word	0x20000aab

0800b1d8 <__sinit>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	4604      	mov	r4, r0
 800b1dc:	f7ff fff0 	bl	800b1c0 <__sinit_lock_acquire>
 800b1e0:	69a3      	ldr	r3, [r4, #24]
 800b1e2:	b11b      	cbz	r3, 800b1ec <__sinit+0x14>
 800b1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e8:	f7ff bff0 	b.w	800b1cc <__sinit_lock_release>
 800b1ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1f0:	6523      	str	r3, [r4, #80]	; 0x50
 800b1f2:	4b13      	ldr	r3, [pc, #76]	; (800b240 <__sinit+0x68>)
 800b1f4:	4a13      	ldr	r2, [pc, #76]	; (800b244 <__sinit+0x6c>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1fa:	42a3      	cmp	r3, r4
 800b1fc:	bf08      	it	eq
 800b1fe:	2301      	moveq	r3, #1
 800b200:	4620      	mov	r0, r4
 800b202:	bf08      	it	eq
 800b204:	61a3      	streq	r3, [r4, #24]
 800b206:	f000 f81f 	bl	800b248 <__sfp>
 800b20a:	6060      	str	r0, [r4, #4]
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 f81b 	bl	800b248 <__sfp>
 800b212:	60a0      	str	r0, [r4, #8]
 800b214:	4620      	mov	r0, r4
 800b216:	f000 f817 	bl	800b248 <__sfp>
 800b21a:	2200      	movs	r2, #0
 800b21c:	2104      	movs	r1, #4
 800b21e:	60e0      	str	r0, [r4, #12]
 800b220:	6860      	ldr	r0, [r4, #4]
 800b222:	f7ff ff81 	bl	800b128 <std>
 800b226:	2201      	movs	r2, #1
 800b228:	2109      	movs	r1, #9
 800b22a:	68a0      	ldr	r0, [r4, #8]
 800b22c:	f7ff ff7c 	bl	800b128 <std>
 800b230:	2202      	movs	r2, #2
 800b232:	2112      	movs	r1, #18
 800b234:	68e0      	ldr	r0, [r4, #12]
 800b236:	f7ff ff77 	bl	800b128 <std>
 800b23a:	2301      	movs	r3, #1
 800b23c:	61a3      	str	r3, [r4, #24]
 800b23e:	e7d1      	b.n	800b1e4 <__sinit+0xc>
 800b240:	0800b628 	.word	0x0800b628
 800b244:	0800b171 	.word	0x0800b171

0800b248 <__sfp>:
 800b248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24a:	4607      	mov	r7, r0
 800b24c:	f7ff ffac 	bl	800b1a8 <__sfp_lock_acquire>
 800b250:	4b1e      	ldr	r3, [pc, #120]	; (800b2cc <__sfp+0x84>)
 800b252:	681e      	ldr	r6, [r3, #0]
 800b254:	69b3      	ldr	r3, [r6, #24]
 800b256:	b913      	cbnz	r3, 800b25e <__sfp+0x16>
 800b258:	4630      	mov	r0, r6
 800b25a:	f7ff ffbd 	bl	800b1d8 <__sinit>
 800b25e:	3648      	adds	r6, #72	; 0x48
 800b260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b264:	3b01      	subs	r3, #1
 800b266:	d503      	bpl.n	800b270 <__sfp+0x28>
 800b268:	6833      	ldr	r3, [r6, #0]
 800b26a:	b30b      	cbz	r3, 800b2b0 <__sfp+0x68>
 800b26c:	6836      	ldr	r6, [r6, #0]
 800b26e:	e7f7      	b.n	800b260 <__sfp+0x18>
 800b270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b274:	b9d5      	cbnz	r5, 800b2ac <__sfp+0x64>
 800b276:	4b16      	ldr	r3, [pc, #88]	; (800b2d0 <__sfp+0x88>)
 800b278:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b27c:	60e3      	str	r3, [r4, #12]
 800b27e:	6665      	str	r5, [r4, #100]	; 0x64
 800b280:	f000 f847 	bl	800b312 <__retarget_lock_init_recursive>
 800b284:	f7ff ff96 	bl	800b1b4 <__sfp_lock_release>
 800b288:	2208      	movs	r2, #8
 800b28a:	4629      	mov	r1, r5
 800b28c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b294:	6025      	str	r5, [r4, #0]
 800b296:	61a5      	str	r5, [r4, #24]
 800b298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b29c:	f7fc fb5c 	bl	8007958 <memset>
 800b2a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ac:	3468      	adds	r4, #104	; 0x68
 800b2ae:	e7d9      	b.n	800b264 <__sfp+0x1c>
 800b2b0:	2104      	movs	r1, #4
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	f7ff ff62 	bl	800b17c <__sfmoreglue>
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	6030      	str	r0, [r6, #0]
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d1d5      	bne.n	800b26c <__sfp+0x24>
 800b2c0:	f7ff ff78 	bl	800b1b4 <__sfp_lock_release>
 800b2c4:	230c      	movs	r3, #12
 800b2c6:	603b      	str	r3, [r7, #0]
 800b2c8:	e7ee      	b.n	800b2a8 <__sfp+0x60>
 800b2ca:	bf00      	nop
 800b2cc:	0800b628 	.word	0x0800b628
 800b2d0:	ffff0001 	.word	0xffff0001

0800b2d4 <_fwalk_reent>:
 800b2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d8:	4606      	mov	r6, r0
 800b2da:	4688      	mov	r8, r1
 800b2dc:	2700      	movs	r7, #0
 800b2de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2e6:	f1b9 0901 	subs.w	r9, r9, #1
 800b2ea:	d505      	bpl.n	800b2f8 <_fwalk_reent+0x24>
 800b2ec:	6824      	ldr	r4, [r4, #0]
 800b2ee:	2c00      	cmp	r4, #0
 800b2f0:	d1f7      	bne.n	800b2e2 <_fwalk_reent+0xe>
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f8:	89ab      	ldrh	r3, [r5, #12]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d907      	bls.n	800b30e <_fwalk_reent+0x3a>
 800b2fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b302:	3301      	adds	r3, #1
 800b304:	d003      	beq.n	800b30e <_fwalk_reent+0x3a>
 800b306:	4629      	mov	r1, r5
 800b308:	4630      	mov	r0, r6
 800b30a:	47c0      	blx	r8
 800b30c:	4307      	orrs	r7, r0
 800b30e:	3568      	adds	r5, #104	; 0x68
 800b310:	e7e9      	b.n	800b2e6 <_fwalk_reent+0x12>

0800b312 <__retarget_lock_init_recursive>:
 800b312:	4770      	bx	lr

0800b314 <__retarget_lock_acquire_recursive>:
 800b314:	4770      	bx	lr

0800b316 <__retarget_lock_release_recursive>:
 800b316:	4770      	bx	lr

0800b318 <__swhatbuf_r>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	460e      	mov	r6, r1
 800b31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b320:	4614      	mov	r4, r2
 800b322:	2900      	cmp	r1, #0
 800b324:	461d      	mov	r5, r3
 800b326:	b096      	sub	sp, #88	; 0x58
 800b328:	da07      	bge.n	800b33a <__swhatbuf_r+0x22>
 800b32a:	2300      	movs	r3, #0
 800b32c:	602b      	str	r3, [r5, #0]
 800b32e:	89b3      	ldrh	r3, [r6, #12]
 800b330:	061a      	lsls	r2, r3, #24
 800b332:	d410      	bmi.n	800b356 <__swhatbuf_r+0x3e>
 800b334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b338:	e00e      	b.n	800b358 <__swhatbuf_r+0x40>
 800b33a:	466a      	mov	r2, sp
 800b33c:	f000 f908 	bl	800b550 <_fstat_r>
 800b340:	2800      	cmp	r0, #0
 800b342:	dbf2      	blt.n	800b32a <__swhatbuf_r+0x12>
 800b344:	9a01      	ldr	r2, [sp, #4]
 800b346:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b34a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b34e:	425a      	negs	r2, r3
 800b350:	415a      	adcs	r2, r3
 800b352:	602a      	str	r2, [r5, #0]
 800b354:	e7ee      	b.n	800b334 <__swhatbuf_r+0x1c>
 800b356:	2340      	movs	r3, #64	; 0x40
 800b358:	2000      	movs	r0, #0
 800b35a:	6023      	str	r3, [r4, #0]
 800b35c:	b016      	add	sp, #88	; 0x58
 800b35e:	bd70      	pop	{r4, r5, r6, pc}

0800b360 <__smakebuf_r>:
 800b360:	898b      	ldrh	r3, [r1, #12]
 800b362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b364:	079d      	lsls	r5, r3, #30
 800b366:	4606      	mov	r6, r0
 800b368:	460c      	mov	r4, r1
 800b36a:	d507      	bpl.n	800b37c <__smakebuf_r+0x1c>
 800b36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	6123      	str	r3, [r4, #16]
 800b374:	2301      	movs	r3, #1
 800b376:	6163      	str	r3, [r4, #20]
 800b378:	b002      	add	sp, #8
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	466a      	mov	r2, sp
 800b37e:	ab01      	add	r3, sp, #4
 800b380:	f7ff ffca 	bl	800b318 <__swhatbuf_r>
 800b384:	9900      	ldr	r1, [sp, #0]
 800b386:	4605      	mov	r5, r0
 800b388:	4630      	mov	r0, r6
 800b38a:	f7fe fab1 	bl	80098f0 <_malloc_r>
 800b38e:	b948      	cbnz	r0, 800b3a4 <__smakebuf_r+0x44>
 800b390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b394:	059a      	lsls	r2, r3, #22
 800b396:	d4ef      	bmi.n	800b378 <__smakebuf_r+0x18>
 800b398:	f023 0303 	bic.w	r3, r3, #3
 800b39c:	f043 0302 	orr.w	r3, r3, #2
 800b3a0:	81a3      	strh	r3, [r4, #12]
 800b3a2:	e7e3      	b.n	800b36c <__smakebuf_r+0xc>
 800b3a4:	4b0d      	ldr	r3, [pc, #52]	; (800b3dc <__smakebuf_r+0x7c>)
 800b3a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	6020      	str	r0, [r4, #0]
 800b3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	9b00      	ldr	r3, [sp, #0]
 800b3b4:	6120      	str	r0, [r4, #16]
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	9b01      	ldr	r3, [sp, #4]
 800b3ba:	b15b      	cbz	r3, 800b3d4 <__smakebuf_r+0x74>
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3c2:	f000 f8d7 	bl	800b574 <_isatty_r>
 800b3c6:	b128      	cbz	r0, 800b3d4 <__smakebuf_r+0x74>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	f023 0303 	bic.w	r3, r3, #3
 800b3ce:	f043 0301 	orr.w	r3, r3, #1
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	89a0      	ldrh	r0, [r4, #12]
 800b3d6:	4305      	orrs	r5, r0
 800b3d8:	81a5      	strh	r5, [r4, #12]
 800b3da:	e7cd      	b.n	800b378 <__smakebuf_r+0x18>
 800b3dc:	0800b171 	.word	0x0800b171

0800b3e0 <memchr>:
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	b2c9      	uxtb	r1, r1
 800b3e6:	4402      	add	r2, r0
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	d101      	bne.n	800b3f2 <memchr+0x12>
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	e003      	b.n	800b3fa <memchr+0x1a>
 800b3f2:	7804      	ldrb	r4, [r0, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	428c      	cmp	r4, r1
 800b3f8:	d1f6      	bne.n	800b3e8 <memchr+0x8>
 800b3fa:	bd10      	pop	{r4, pc}

0800b3fc <_raise_r>:
 800b3fc:	291f      	cmp	r1, #31
 800b3fe:	b538      	push	{r3, r4, r5, lr}
 800b400:	4604      	mov	r4, r0
 800b402:	460d      	mov	r5, r1
 800b404:	d904      	bls.n	800b410 <_raise_r+0x14>
 800b406:	2316      	movs	r3, #22
 800b408:	6003      	str	r3, [r0, #0]
 800b40a:	f04f 30ff 	mov.w	r0, #4294967295
 800b40e:	bd38      	pop	{r3, r4, r5, pc}
 800b410:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b412:	b112      	cbz	r2, 800b41a <_raise_r+0x1e>
 800b414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b418:	b94b      	cbnz	r3, 800b42e <_raise_r+0x32>
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 f830 	bl	800b480 <_getpid_r>
 800b420:	462a      	mov	r2, r5
 800b422:	4601      	mov	r1, r0
 800b424:	4620      	mov	r0, r4
 800b426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b42a:	f000 b817 	b.w	800b45c <_kill_r>
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d00a      	beq.n	800b448 <_raise_r+0x4c>
 800b432:	1c59      	adds	r1, r3, #1
 800b434:	d103      	bne.n	800b43e <_raise_r+0x42>
 800b436:	2316      	movs	r3, #22
 800b438:	6003      	str	r3, [r0, #0]
 800b43a:	2001      	movs	r0, #1
 800b43c:	e7e7      	b.n	800b40e <_raise_r+0x12>
 800b43e:	2400      	movs	r4, #0
 800b440:	4628      	mov	r0, r5
 800b442:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b446:	4798      	blx	r3
 800b448:	2000      	movs	r0, #0
 800b44a:	e7e0      	b.n	800b40e <_raise_r+0x12>

0800b44c <raise>:
 800b44c:	4b02      	ldr	r3, [pc, #8]	; (800b458 <raise+0xc>)
 800b44e:	4601      	mov	r1, r0
 800b450:	6818      	ldr	r0, [r3, #0]
 800b452:	f7ff bfd3 	b.w	800b3fc <_raise_r>
 800b456:	bf00      	nop
 800b458:	20000028 	.word	0x20000028

0800b45c <_kill_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	2300      	movs	r3, #0
 800b460:	4d06      	ldr	r5, [pc, #24]	; (800b47c <_kill_r+0x20>)
 800b462:	4604      	mov	r4, r0
 800b464:	4608      	mov	r0, r1
 800b466:	4611      	mov	r1, r2
 800b468:	602b      	str	r3, [r5, #0]
 800b46a:	f7f6 fdc4 	bl	8001ff6 <_kill>
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	d102      	bne.n	800b478 <_kill_r+0x1c>
 800b472:	682b      	ldr	r3, [r5, #0]
 800b474:	b103      	cbz	r3, 800b478 <_kill_r+0x1c>
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	bd38      	pop	{r3, r4, r5, pc}
 800b47a:	bf00      	nop
 800b47c:	20000aa4 	.word	0x20000aa4

0800b480 <_getpid_r>:
 800b480:	f7f6 bdb2 	b.w	8001fe8 <_getpid>

0800b484 <__sread>:
 800b484:	b510      	push	{r4, lr}
 800b486:	460c      	mov	r4, r1
 800b488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48c:	f000 f894 	bl	800b5b8 <_read_r>
 800b490:	2800      	cmp	r0, #0
 800b492:	bfab      	itete	ge
 800b494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b496:	89a3      	ldrhlt	r3, [r4, #12]
 800b498:	181b      	addge	r3, r3, r0
 800b49a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b49e:	bfac      	ite	ge
 800b4a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4a2:	81a3      	strhlt	r3, [r4, #12]
 800b4a4:	bd10      	pop	{r4, pc}

0800b4a6 <__swrite>:
 800b4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4aa:	461f      	mov	r7, r3
 800b4ac:	898b      	ldrh	r3, [r1, #12]
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	05db      	lsls	r3, r3, #23
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	4616      	mov	r6, r2
 800b4b6:	d505      	bpl.n	800b4c4 <__swrite+0x1e>
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c0:	f000 f868 	bl	800b594 <_lseek_r>
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	4632      	mov	r2, r6
 800b4c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4cc:	81a3      	strh	r3, [r4, #12]
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	463b      	mov	r3, r7
 800b4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4da:	f000 b817 	b.w	800b50c <_write_r>

0800b4de <__sseek>:
 800b4de:	b510      	push	{r4, lr}
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e6:	f000 f855 	bl	800b594 <_lseek_r>
 800b4ea:	1c43      	adds	r3, r0, #1
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	bf15      	itete	ne
 800b4f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4fa:	81a3      	strheq	r3, [r4, #12]
 800b4fc:	bf18      	it	ne
 800b4fe:	81a3      	strhne	r3, [r4, #12]
 800b500:	bd10      	pop	{r4, pc}

0800b502 <__sclose>:
 800b502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b506:	f000 b813 	b.w	800b530 <_close_r>
	...

0800b50c <_write_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	4611      	mov	r1, r2
 800b514:	2200      	movs	r2, #0
 800b516:	4d05      	ldr	r5, [pc, #20]	; (800b52c <_write_r+0x20>)
 800b518:	602a      	str	r2, [r5, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	f7f6 fda2 	bl	8002064 <_write>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_write_r+0x1e>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_write_r+0x1e>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	20000aa4 	.word	0x20000aa4

0800b530 <_close_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	2300      	movs	r3, #0
 800b534:	4d05      	ldr	r5, [pc, #20]	; (800b54c <_close_r+0x1c>)
 800b536:	4604      	mov	r4, r0
 800b538:	4608      	mov	r0, r1
 800b53a:	602b      	str	r3, [r5, #0]
 800b53c:	f7f6 fdae 	bl	800209c <_close>
 800b540:	1c43      	adds	r3, r0, #1
 800b542:	d102      	bne.n	800b54a <_close_r+0x1a>
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	b103      	cbz	r3, 800b54a <_close_r+0x1a>
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	20000aa4 	.word	0x20000aa4

0800b550 <_fstat_r>:
 800b550:	b538      	push	{r3, r4, r5, lr}
 800b552:	2300      	movs	r3, #0
 800b554:	4d06      	ldr	r5, [pc, #24]	; (800b570 <_fstat_r+0x20>)
 800b556:	4604      	mov	r4, r0
 800b558:	4608      	mov	r0, r1
 800b55a:	4611      	mov	r1, r2
 800b55c:	602b      	str	r3, [r5, #0]
 800b55e:	f7f6 fda8 	bl	80020b2 <_fstat>
 800b562:	1c43      	adds	r3, r0, #1
 800b564:	d102      	bne.n	800b56c <_fstat_r+0x1c>
 800b566:	682b      	ldr	r3, [r5, #0]
 800b568:	b103      	cbz	r3, 800b56c <_fstat_r+0x1c>
 800b56a:	6023      	str	r3, [r4, #0]
 800b56c:	bd38      	pop	{r3, r4, r5, pc}
 800b56e:	bf00      	nop
 800b570:	20000aa4 	.word	0x20000aa4

0800b574 <_isatty_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	2300      	movs	r3, #0
 800b578:	4d05      	ldr	r5, [pc, #20]	; (800b590 <_isatty_r+0x1c>)
 800b57a:	4604      	mov	r4, r0
 800b57c:	4608      	mov	r0, r1
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	f7f6 fda6 	bl	80020d0 <_isatty>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_isatty_r+0x1a>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_isatty_r+0x1a>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	20000aa4 	.word	0x20000aa4

0800b594 <_lseek_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	4611      	mov	r1, r2
 800b59c:	2200      	movs	r2, #0
 800b59e:	4d05      	ldr	r5, [pc, #20]	; (800b5b4 <_lseek_r+0x20>)
 800b5a0:	602a      	str	r2, [r5, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f7f6 fd9e 	bl	80020e4 <_lseek>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_lseek_r+0x1e>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_lseek_r+0x1e>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	20000aa4 	.word	0x20000aa4

0800b5b8 <_read_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	4608      	mov	r0, r1
 800b5be:	4611      	mov	r1, r2
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4d05      	ldr	r5, [pc, #20]	; (800b5d8 <_read_r+0x20>)
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f7f6 fd2f 	bl	800202a <_read>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_read_r+0x1e>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_read_r+0x1e>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20000aa4 	.word	0x20000aa4

0800b5dc <_init>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	bf00      	nop
 800b5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e2:	bc08      	pop	{r3}
 800b5e4:	469e      	mov	lr, r3
 800b5e6:	4770      	bx	lr

0800b5e8 <_fini>:
 800b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ea:	bf00      	nop
 800b5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ee:	bc08      	pop	{r3}
 800b5f0:	469e      	mov	lr, r3
 800b5f2:	4770      	bx	lr
