
V2V_Unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006834  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006948  08006948  00016948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e0  080069e0  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  080069e0  080069e0  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069e0  080069e0  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  080069e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000348  08006d2c  00020348  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  08006d2c  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110e9  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285c  00000000  00000000  00031456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00033cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00034c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001892a  00000000  00000000  00035b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135fd  00000000  00000000  0004e4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cbc6  00000000  00000000  00061a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000457c  00000000  00000000  000ee6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800692c 	.word	0x0800692c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800692c 	.word	0x0800692c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	; 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ae8:	d2ed      	bcs.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c96:	2afd      	cmp	r2, #253	; 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	; 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	; 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	; 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af04      	add	r7, sp, #16
 8000eea:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000eec:	2364      	movs	r3, #100	; 0x64
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f107 030f 	add.w	r3, r7, #15
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	2275      	movs	r2, #117	; 0x75
 8000efe:	21d0      	movs	r1, #208	; 0xd0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f002 fc79 	bl	80037f8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b68      	cmp	r3, #104	; 0x68
 8000f0a:	d13d      	bne.n	8000f88 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000f10:	2364      	movs	r3, #100	; 0x64
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	2301      	movs	r3, #1
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f107 030e 	add.w	r3, r7, #14
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	226b      	movs	r2, #107	; 0x6b
 8000f22:	21d0      	movs	r1, #208	; 0xd0
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f002 fb6d 	bl	8003604 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	2301      	movs	r3, #1
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	f107 030e 	add.w	r3, r7, #14
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2219      	movs	r2, #25
 8000f40:	21d0      	movs	r1, #208	; 0xd0
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f002 fb5e 	bl	8003604 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f107 030e 	add.w	r3, r7, #14
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	221c      	movs	r2, #28
 8000f5e:	21d0      	movs	r1, #208	; 0xd0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f002 fb4f 	bl	8003604 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	f107 030e 	add.w	r3, r7, #14
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	221b      	movs	r2, #27
 8000f7c:	21d0      	movs	r1, #208	; 0xd0
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f002 fb40 	bl	8003604 <HAL_I2C_Mem_Write>
        return 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e000      	b.n	8000f8a <MPU6050_Init+0xa6>
    }
    return 1;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	0000      	movs	r0, r0
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f9c:	b094      	sub	sp, #80	; 0x50
 8000f9e:	af04      	add	r7, sp, #16
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	230e      	movs	r3, #14
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	223b      	movs	r2, #59	; 0x3b
 8000fb6:	21d0      	movs	r1, #208	; 0xd0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f002 fc1d 	bl	80037f8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000fbe:	7a3b      	ldrb	r3, [r7, #8]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	7a7b      	ldrb	r3, [r7, #9]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000fd0:	7abb      	ldrb	r3, [r7, #10]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000fe2:	7b3b      	ldrb	r3, [r7, #12]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	7b7b      	ldrb	r3, [r7, #13]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001002:	7c3b      	ldrb	r3, [r7, #16]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	7c7b      	ldrb	r3, [r7, #17]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21a      	sxth	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001014:	7cbb      	ldrb	r3, [r7, #18]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	7cfb      	ldrb	r3, [r7, #19]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21a      	sxth	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001026:	7d3b      	ldrb	r3, [r7, #20]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	7d7b      	ldrb	r3, [r7, #21]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21a      	sxth	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f9d8 	bl	80003f4 <__aeabi_i2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4bb7      	ldr	r3, [pc, #732]	; (8001328 <MPU6050_Read_All+0x390>)
 800104a:	f7ff fb67 	bl	800071c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	6839      	ldr	r1, [r7, #0]
 8001054:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f9c8 	bl	80003f4 <__aeabi_i2d>
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4baf      	ldr	r3, [pc, #700]	; (8001328 <MPU6050_Read_All+0x390>)
 800106a:	f7ff fb57 	bl	800071c <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	6839      	ldr	r1, [r7, #0]
 8001074:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9b8 	bl	80003f4 <__aeabi_i2d>
 8001084:	a3a2      	add	r3, pc, #648	; (adr r3, 8001310 <MPU6050_Read_All+0x378>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fb47 	bl	800071c <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001098:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fd7d 	bl	8000b9c <__aeabi_i2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	49a1      	ldr	r1, [pc, #644]	; (800132c <MPU6050_Read_All+0x394>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fe80 	bl	8000dac <__aeabi_fdiv>
 80010ac:	4603      	mov	r3, r0
 80010ae:	49a0      	ldr	r1, [pc, #640]	; (8001330 <MPU6050_Read_All+0x398>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fcbf 	bl	8000a34 <__addsf3>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f995 	bl	80003f4 <__aeabi_i2d>
 80010ca:	a393      	add	r3, pc, #588	; (adr r3, 8001318 <MPU6050_Read_All+0x380>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fb24 	bl	800071c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f985 	bl	80003f4 <__aeabi_i2d>
 80010ea:	a38b      	add	r3, pc, #556	; (adr r3, 8001318 <MPU6050_Read_All+0x380>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff fb14 	bl	800071c <__aeabi_ddiv>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f975 	bl	80003f4 <__aeabi_i2d>
 800110a:	a383      	add	r3, pc, #524	; (adr r3, 8001318 <MPU6050_Read_All+0x380>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fb04 	bl	800071c <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	6839      	ldr	r1, [r7, #0]
 800111a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800111e:	f001 fdaf 	bl	8002c80 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	4b83      	ldr	r3, [pc, #524]	; (8001334 <MPU6050_Read_All+0x39c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f952 	bl	80003d4 <__aeabi_ui2d>
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b80      	ldr	r3, [pc, #512]	; (8001338 <MPU6050_Read_All+0x3a0>)
 8001136:	f7ff faf1 	bl	800071c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001142:	f001 fd9d 	bl	8002c80 <HAL_GetTick>
 8001146:	4603      	mov	r3, r0
 8001148:	4a7a      	ldr	r2, [pc, #488]	; (8001334 <MPU6050_Read_All+0x39c>)
 800114a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	461a      	mov	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	fb03 f202 	mul.w	r2, r3, r2
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001164:	4619      	mov	r1, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800116c:	fb03 f301 	mul.w	r3, r3, r1
 8001170:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f93e 	bl	80003f4 <__aeabi_i2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f005 fa2a 	bl	80065d8 <sqrt>
 8001184:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001194:	f7ff fc00 	bl	8000998 <__aeabi_dcmpeq>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d119      	bne.n	80011d2 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f925 	bl	80003f4 <__aeabi_i2d>
 80011aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011ae:	f7ff fab5 	bl	800071c <__aeabi_ddiv>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f005 f87d 	bl	80062b8 <atan>
 80011be:	a358      	add	r3, pc, #352	; (adr r3, 8001320 <MPU6050_Read_All+0x388>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff f980 	bl	80004c8 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80011d0:	e005      	b.n	80011de <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	425b      	negs	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f904 	bl	80003f4 <__aeabi_i2d>
 80011ec:	4682      	mov	sl, r0
 80011ee:	468b      	mov	fp, r1
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f8fc 	bl	80003f4 <__aeabi_i2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4650      	mov	r0, sl
 8001202:	4659      	mov	r1, fp
 8001204:	f005 f9e5 	bl	80065d2 <atan2>
 8001208:	a345      	add	r3, pc, #276	; (adr r3, 8001320 <MPU6050_Read_All+0x388>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f95b 	bl	80004c8 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <MPU6050_Read_All+0x3a4>)
 8001220:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001224:	f7ff fbc2 	bl	80009ac <__aeabi_dcmplt>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00a      	beq.n	8001244 <MPU6050_Read_All+0x2ac>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <MPU6050_Read_All+0x3a8>)
 800123a:	f7ff fbd5 	bl	80009e8 <__aeabi_dcmpgt>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d114      	bne.n	800126e <MPU6050_Read_All+0x2d6>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <MPU6050_Read_All+0x3a8>)
 800124a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800124e:	f7ff fbcb 	bl	80009e8 <__aeabi_dcmpgt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d015      	beq.n	8001284 <MPU6050_Read_All+0x2ec>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b36      	ldr	r3, [pc, #216]	; (800133c <MPU6050_Read_All+0x3a4>)
 8001264:	f7ff fba2 	bl	80009ac <__aeabi_dcmplt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00a      	beq.n	8001284 <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 800126e:	4935      	ldr	r1, [pc, #212]	; (8001344 <MPU6050_Read_All+0x3ac>)
 8001270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001274:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800127e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001282:	e012      	b.n	80012aa <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800128a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800128e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001292:	e9cd 2300 	strd	r2, r3, [sp]
 8001296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800129a:	482a      	ldr	r0, [pc, #168]	; (8001344 <MPU6050_Read_All+0x3ac>)
 800129c:	f000 f856 	bl	800134c <Kalman_getAngle>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80012b0:	4690      	mov	r8, r2
 80012b2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MPU6050_Read_All+0x3a8>)
 80012bc:	4640      	mov	r0, r8
 80012be:	4649      	mov	r1, r9
 80012c0:	f7ff fb92 	bl	80009e8 <__aeabi_dcmpgt>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d008      	beq.n	80012dc <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80012d0:	4614      	mov	r4, r2
 80012d2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80012e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012ea:	e9cd 2300 	strd	r2, r3, [sp]
 80012ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012f2:	4815      	ldr	r0, [pc, #84]	; (8001348 <MPU6050_Read_All+0x3b0>)
 80012f4:	f000 f82a 	bl	800134c <Kalman_getAngle>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8001302:	bf00      	nop
 8001304:	3740      	adds	r7, #64	; 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800130c:	f3af 8000 	nop.w
 8001310:	00000000 	.word	0x00000000
 8001314:	40cc2900 	.word	0x40cc2900
 8001318:	00000000 	.word	0x00000000
 800131c:	40606000 	.word	0x40606000
 8001320:	1a63c1f8 	.word	0x1a63c1f8
 8001324:	404ca5dc 	.word	0x404ca5dc
 8001328:	40d00000 	.word	0x40d00000
 800132c:	43aa0000 	.word	0x43aa0000
 8001330:	42121eb8 	.word	0x42121eb8
 8001334:	20000384 	.word	0x20000384
 8001338:	408f4000 	.word	0x408f4000
 800133c:	c0568000 	.word	0xc0568000
 8001340:	40568000 	.word	0x40568000
 8001344:	20000048 	.word	0x20000048
 8001348:	20000000 	.word	0x20000000

0800134c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b092      	sub	sp, #72	; 0x48
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800135e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001362:	f7fe fef9 	bl	8000158 <__aeabi_dsub>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001374:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001378:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800137c:	f7ff f8a4 	bl	80004c8 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	f7fe fee8 	bl	800015c <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	68f9      	ldr	r1, [r7, #12]
 8001392:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80013a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80013a6:	f7ff f88f 	bl	80004c8 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80013b8:	f7fe fece 	bl	8000158 <__aeabi_dsub>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80013ca:	f7fe fec5 	bl	8000158 <__aeabi_dsub>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7fe febe 	bl	800015c <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80013ec:	f7ff f86c 	bl	80004c8 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7fe feb0 	bl	800015c <__adddf3>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	68f9      	ldr	r1, [r7, #12]
 8001402:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001412:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001416:	f7ff f857 	bl	80004c8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4620      	mov	r0, r4
 8001420:	4629      	mov	r1, r5
 8001422:	f7fe fe99 	bl	8000158 <__aeabi_dsub>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	68f9      	ldr	r1, [r7, #12]
 800142c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800143c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001440:	f7ff f842 	bl	80004c8 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe fe84 	bl	8000158 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	68f9      	ldr	r1, [r7, #12]
 8001456:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001466:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800146a:	f7ff f82d 	bl	80004c8 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7fe fe71 	bl	800015c <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	68f9      	ldr	r1, [r7, #12]
 8001480:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001490:	f7fe fe64 	bl	800015c <__adddf3>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80014a6:	f7ff f939 	bl	800071c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80014b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80014bc:	f7ff f92e 	bl	800071c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014d2:	f7fe fe41 	bl	8000158 <__aeabi_dsub>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80014e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014ec:	f7fe ffec 	bl	80004c8 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7fe fe30 	bl	800015c <__adddf3>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800150c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001510:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001514:	f7fe ffd8 	bl	80004c8 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4620      	mov	r0, r4
 800151e:	4629      	mov	r1, r5
 8001520:	f7fe fe1c 	bl	800015c <__adddf3>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	68f9      	ldr	r1, [r7, #12]
 800152a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001534:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800153e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001548:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800154c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001550:	f7fe ffba 	bl	80004c8 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7fe fdfc 	bl	8000158 <__aeabi_dsub>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	68f9      	ldr	r1, [r7, #12]
 8001566:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001570:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001578:	f7fe ffa6 	bl	80004c8 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4620      	mov	r0, r4
 8001582:	4629      	mov	r1, r5
 8001584:	f7fe fde8 	bl	8000158 <__aeabi_dsub>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	68f9      	ldr	r1, [r7, #12]
 800158e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001598:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800159c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015a0:	f7fe ff92 	bl	80004c8 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7fe fdd4 	bl	8000158 <__aeabi_dsub>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	68f9      	ldr	r1, [r7, #12]
 80015b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80015c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015c8:	f7fe ff7e 	bl	80004c8 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4620      	mov	r0, r4
 80015d2:	4629      	mov	r1, r5
 80015d4:	f7fe fdc0 	bl	8000158 <__aeabi_dsub>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	68f9      	ldr	r1, [r7, #12]
 80015de:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	3748      	adds	r7, #72	; 0x48
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080015f4 <calculateValue>:
int8_t carYAxis = 0;


								/*** Functions Definitions. ***/
uint8_t calculateValue(int indexOfRXBuffer)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	long power = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
    uint8_t result = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	72fb      	strb	r3, [r7, #11]
	while(bufferRX[indexOfRXBuffer] != '=' && bufferRX[indexOfRXBuffer] != '+' && bufferRX[indexOfRXBuffer] != '-')
 8001604:	e016      	b.n	8001634 <calculateValue+0x40>
	{
		result += (bufferRX[indexOfRXBuffer] - '0') * power;
 8001606:	4a17      	ldr	r2, [pc, #92]	; (8001664 <calculateValue+0x70>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	3b30      	subs	r3, #48	; 0x30
 8001610:	b2db      	uxtb	r3, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	b2da      	uxtb	r2, r3
 800161c:	7afb      	ldrb	r3, [r7, #11]
 800161e:	4413      	add	r3, r2
 8001620:	72fb      	strb	r3, [r7, #11]
		power *= 10;
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
		indexOfRXBuffer--;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3b01      	subs	r3, #1
 8001632:	607b      	str	r3, [r7, #4]
	while(bufferRX[indexOfRXBuffer] != '=' && bufferRX[indexOfRXBuffer] != '+' && bufferRX[indexOfRXBuffer] != '-')
 8001634:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <calculateValue+0x70>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b3d      	cmp	r3, #61	; 0x3d
 800163e:	d00b      	beq.n	8001658 <calculateValue+0x64>
 8001640:	4a08      	ldr	r2, [pc, #32]	; (8001664 <calculateValue+0x70>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b2b      	cmp	r3, #43	; 0x2b
 800164a:	d005      	beq.n	8001658 <calculateValue+0x64>
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <calculateValue+0x70>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b2d      	cmp	r3, #45	; 0x2d
 8001656:	d1d6      	bne.n	8001606 <calculateValue+0x12>
	}
	return result;
 8001658:	7afb      	ldrb	r3, [r7, #11]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000450 	.word	0x20000450

08001668 <takeAbsoulute>:

uint8_t takeAbsoulute(int8_t value)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	if(value < 0) return value*-1;
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	da03      	bge.n	8001682 <takeAbsoulute+0x1a>
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	425b      	negs	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	e000      	b.n	8001684 <takeAbsoulute+0x1c>
	return value;
 8001682:	79fb      	ldrb	r3, [r7, #7]
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
	...

08001690 <convertIntToChars>:

void convertIntToChars(uint8_t maxDigit, uint8_t value)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	4613      	mov	r3, r2
 800169e:	71bb      	strb	r3, [r7, #6]
	long power = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
	int index;
	for(index = 1; index < maxDigit; index++) power *= 10;
 80016a4:	2301      	movs	r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	e008      	b.n	80016bc <convertIntToChars+0x2c>
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf2      	blt.n	80016aa <convertIntToChars+0x1a>

	for(index = maxDigit; index > 0; index --)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	e028      	b.n	800171c <convertIntToChars+0x8c>
	{
		bufferTX[indexOfTXBuffer] = (value/power) + '0';
 80016ca:	79ba      	ldrb	r2, [r7, #6]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <convertIntToChars+0xa0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3230      	adds	r2, #48	; 0x30
 80016da:	b2d1      	uxtb	r1, r2
 80016dc:	4a15      	ldr	r2, [pc, #84]	; (8001734 <convertIntToChars+0xa4>)
 80016de:	54d1      	strb	r1, [r2, r3]
		value -= (bufferTX[indexOfTXBuffer] - '0') * power;
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <convertIntToChars+0xa0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a13      	ldr	r2, [pc, #76]	; (8001734 <convertIntToChars+0xa4>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	3b30      	subs	r3, #48	; 0x30
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	79ba      	ldrb	r2, [r7, #6]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	71bb      	strb	r3, [r7, #6]
		indexOfTXBuffer++;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <convertIntToChars+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <convertIntToChars+0xa0>)
 8001704:	6013      	str	r3, [r2, #0]
		power /= 10;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <convertIntToChars+0xa8>)
 800170a:	fb82 1203 	smull	r1, r2, r2, r3
 800170e:	1092      	asrs	r2, r2, #2
 8001710:	17db      	asrs	r3, r3, #31
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	60fb      	str	r3, [r7, #12]
	for(index = maxDigit; index > 0; index --)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3b01      	subs	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	dcd3      	bgt.n	80016ca <convertIntToChars+0x3a>
	}
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000036c 	.word	0x2000036c
 8001734:	20000298 	.word	0x20000298
 8001738:	66666667 	.word	0x66666667

0800173c <indicatePosition>:

void indicatePosition()
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	if(xAxis > 0  && yAxis > 0) positionIndication = NORTH_EAST;
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <indicatePosition+0xdc>)
 8001742:	f993 3000 	ldrsb.w	r3, [r3]
 8001746:	2b00      	cmp	r3, #0
 8001748:	dd07      	ble.n	800175a <indicatePosition+0x1e>
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <indicatePosition+0xe0>)
 800174c:	f993 3000 	ldrsb.w	r3, [r3]
 8001750:	2b00      	cmp	r3, #0
 8001752:	dd02      	ble.n	800175a <indicatePosition+0x1e>
 8001754:	4b32      	ldr	r3, [pc, #200]	; (8001820 <indicatePosition+0xe4>)
 8001756:	2205      	movs	r2, #5
 8001758:	701a      	strb	r2, [r3, #0]
	if(xAxis > 0  && yAxis < 0) positionIndication = SOUTH_EAST;
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <indicatePosition+0xdc>)
 800175c:	f993 3000 	ldrsb.w	r3, [r3]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd07      	ble.n	8001774 <indicatePosition+0x38>
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <indicatePosition+0xe0>)
 8001766:	f993 3000 	ldrsb.w	r3, [r3]
 800176a:	2b00      	cmp	r3, #0
 800176c:	da02      	bge.n	8001774 <indicatePosition+0x38>
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <indicatePosition+0xe4>)
 8001770:	2207      	movs	r2, #7
 8001772:	701a      	strb	r2, [r3, #0]
	if(xAxis < 0  && yAxis > 0) positionIndication = NORTH_WEST;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <indicatePosition+0xdc>)
 8001776:	f993 3000 	ldrsb.w	r3, [r3]
 800177a:	2b00      	cmp	r3, #0
 800177c:	da07      	bge.n	800178e <indicatePosition+0x52>
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <indicatePosition+0xe0>)
 8001780:	f993 3000 	ldrsb.w	r3, [r3]
 8001784:	2b00      	cmp	r3, #0
 8001786:	dd02      	ble.n	800178e <indicatePosition+0x52>
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <indicatePosition+0xe4>)
 800178a:	2206      	movs	r2, #6
 800178c:	701a      	strb	r2, [r3, #0]
	if(xAxis < 0  && yAxis < 0) positionIndication = SOUTH_WEST;
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <indicatePosition+0xdc>)
 8001790:	f993 3000 	ldrsb.w	r3, [r3]
 8001794:	2b00      	cmp	r3, #0
 8001796:	da07      	bge.n	80017a8 <indicatePosition+0x6c>
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <indicatePosition+0xe0>)
 800179a:	f993 3000 	ldrsb.w	r3, [r3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da02      	bge.n	80017a8 <indicatePosition+0x6c>
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <indicatePosition+0xe4>)
 80017a4:	2208      	movs	r2, #8
 80017a6:	701a      	strb	r2, [r3, #0]
	if(xAxis == 0 && yAxis > 0) positionIndication = NORTH;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <indicatePosition+0xdc>)
 80017aa:	f993 3000 	ldrsb.w	r3, [r3]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <indicatePosition+0x86>
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <indicatePosition+0xe0>)
 80017b4:	f993 3000 	ldrsb.w	r3, [r3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	dd02      	ble.n	80017c2 <indicatePosition+0x86>
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <indicatePosition+0xe4>)
 80017be:	2203      	movs	r2, #3
 80017c0:	701a      	strb	r2, [r3, #0]
	if(xAxis == 0 && yAxis < 0) positionIndication = SOUTH;
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <indicatePosition+0xdc>)
 80017c4:	f993 3000 	ldrsb.w	r3, [r3]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d107      	bne.n	80017dc <indicatePosition+0xa0>
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <indicatePosition+0xe0>)
 80017ce:	f993 3000 	ldrsb.w	r3, [r3]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da02      	bge.n	80017dc <indicatePosition+0xa0>
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <indicatePosition+0xe4>)
 80017d8:	2204      	movs	r2, #4
 80017da:	701a      	strb	r2, [r3, #0]
	if(xAxis > 0  && yAxis == 0) positionIndication = EAST;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <indicatePosition+0xdc>)
 80017de:	f993 3000 	ldrsb.w	r3, [r3]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dd07      	ble.n	80017f6 <indicatePosition+0xba>
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <indicatePosition+0xe0>)
 80017e8:	f993 3000 	ldrsb.w	r3, [r3]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <indicatePosition+0xba>
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <indicatePosition+0xe4>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
	if(xAxis < 0  && yAxis == 0) positionIndication = WEST;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <indicatePosition+0xdc>)
 80017f8:	f993 3000 	ldrsb.w	r3, [r3]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da07      	bge.n	8001810 <indicatePosition+0xd4>
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <indicatePosition+0xe0>)
 8001802:	f993 3000 	ldrsb.w	r3, [r3]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <indicatePosition+0xd4>
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <indicatePosition+0xe4>)
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	20000376 	.word	0x20000376
 800181c:	20000377 	.word	0x20000377
 8001820:	2000037b 	.word	0x2000037b

08001824 <sendWarning>:

void sendWarning()
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	if(positionIndication == NORTH_EAST)
 8001828:	4b86      	ldr	r3, [pc, #536]	; (8001a44 <sendWarning+0x220>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d166      	bne.n	80018fe <sendWarning+0xda>
	{
		if(doorSignCheck == LEFT_DOOR)
 8001830:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <sendWarning+0x224>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d11b      	bne.n	8001870 <sendWarning+0x4c>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001838:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <sendWarning+0x228>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e013      	b.n	8001868 <sendWarning+0x44>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = leftDoorWarningMsg[globalIndex];
 8001840:	4b82      	ldr	r3, [pc, #520]	; (8001a4c <sendWarning+0x228>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a82      	ldr	r2, [pc, #520]	; (8001a50 <sendWarning+0x22c>)
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	4611      	mov	r1, r2
 800184a:	4a82      	ldr	r2, [pc, #520]	; (8001a54 <sendWarning+0x230>)
 800184c:	5cd2      	ldrb	r2, [r2, r3]
 800184e:	4b82      	ldr	r3, [pc, #520]	; (8001a58 <sendWarning+0x234>)
 8001850:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001852:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <sendWarning+0x22c>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b7d      	ldr	r3, [pc, #500]	; (8001a50 <sendWarning+0x22c>)
 800185c:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 800185e:	4b7b      	ldr	r3, [pc, #492]	; (8001a4c <sendWarning+0x228>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	4a79      	ldr	r2, [pc, #484]	; (8001a4c <sendWarning+0x228>)
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b78      	ldr	r3, [pc, #480]	; (8001a4c <sendWarning+0x228>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b31      	cmp	r3, #49	; 0x31
 800186e:	dde7      	ble.n	8001840 <sendWarning+0x1c>
			}
		if(leftSignCheck == 1) //HAL_UART_Transmit(&huart1, leftSignWarningMsg, TX_SIZE, 0xFF);
 8001870:	4b7a      	ldr	r3, [pc, #488]	; (8001a5c <sendWarning+0x238>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d11b      	bne.n	80018b0 <sendWarning+0x8c>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001878:	4b74      	ldr	r3, [pc, #464]	; (8001a4c <sendWarning+0x228>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e013      	b.n	80018a8 <sendWarning+0x84>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = leftSignWarningMsg[globalIndex];
 8001880:	4b72      	ldr	r3, [pc, #456]	; (8001a4c <sendWarning+0x228>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <sendWarning+0x22c>)
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	4611      	mov	r1, r2
 800188a:	4a75      	ldr	r2, [pc, #468]	; (8001a60 <sendWarning+0x23c>)
 800188c:	5cd2      	ldrb	r2, [r2, r3]
 800188e:	4b72      	ldr	r3, [pc, #456]	; (8001a58 <sendWarning+0x234>)
 8001890:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001892:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <sendWarning+0x22c>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b6d      	ldr	r3, [pc, #436]	; (8001a50 <sendWarning+0x22c>)
 800189c:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 800189e:	4b6b      	ldr	r3, [pc, #428]	; (8001a4c <sendWarning+0x228>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a69      	ldr	r2, [pc, #420]	; (8001a4c <sendWarning+0x228>)
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b68      	ldr	r3, [pc, #416]	; (8001a4c <sendWarning+0x228>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b31      	cmp	r3, #49	; 0x31
 80018ae:	dde7      	ble.n	8001880 <sendWarning+0x5c>
			}
		// Todo: Calculate the distances and compare.
		if(speed < carSpeed && accerlation < 0) //HAL_UART_Transmit(&huart1, reduceSpeedWarningMsg, TX_SIZE, 0xFF);
 80018b0:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <sendWarning+0x240>)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <sendWarning+0x244>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d220      	bcs.n	80018fe <sendWarning+0xda>
 80018bc:	4b6b      	ldr	r3, [pc, #428]	; (8001a6c <sendWarning+0x248>)
 80018be:	f993 3000 	ldrsb.w	r3, [r3]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da1b      	bge.n	80018fe <sendWarning+0xda>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 80018c6:	4b61      	ldr	r3, [pc, #388]	; (8001a4c <sendWarning+0x228>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e013      	b.n	80018f6 <sendWarning+0xd2>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = reduceSpeedWarningMsg[globalIndex];
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <sendWarning+0x228>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5f      	ldr	r2, [pc, #380]	; (8001a50 <sendWarning+0x22c>)
 80018d4:	8812      	ldrh	r2, [r2, #0]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <sendWarning+0x24c>)
 80018da:	5cd2      	ldrb	r2, [r2, r3]
 80018dc:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <sendWarning+0x234>)
 80018de:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 80018e0:	4b5b      	ldr	r3, [pc, #364]	; (8001a50 <sendWarning+0x22c>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <sendWarning+0x22c>)
 80018ea:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 80018ec:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <sendWarning+0x228>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a56      	ldr	r2, [pc, #344]	; (8001a4c <sendWarning+0x228>)
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <sendWarning+0x228>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b31      	cmp	r3, #49	; 0x31
 80018fc:	dde7      	ble.n	80018ce <sendWarning+0xaa>
			}
	}
	if(positionIndication == NORTH_WEST)
 80018fe:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <sendWarning+0x220>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b06      	cmp	r3, #6
 8001904:	d166      	bne.n	80019d4 <sendWarning+0x1b0>
	{
		if(rightSignCheck == 1) //HAL_UART_Transmit(&huart1, rightSignWarningMsg, TX_SIZE, 0xFF);
 8001906:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <sendWarning+0x250>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d11b      	bne.n	8001946 <sendWarning+0x122>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 800190e:	4b4f      	ldr	r3, [pc, #316]	; (8001a4c <sendWarning+0x228>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e013      	b.n	800193e <sendWarning+0x11a>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = rightSignWarningMsg[globalIndex];
 8001916:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <sendWarning+0x228>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <sendWarning+0x22c>)
 800191c:	8812      	ldrh	r2, [r2, #0]
 800191e:	4611      	mov	r1, r2
 8001920:	4a55      	ldr	r2, [pc, #340]	; (8001a78 <sendWarning+0x254>)
 8001922:	5cd2      	ldrb	r2, [r2, r3]
 8001924:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <sendWarning+0x234>)
 8001926:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001928:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <sendWarning+0x22c>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <sendWarning+0x22c>)
 8001932:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <sendWarning+0x228>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <sendWarning+0x228>)
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <sendWarning+0x228>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b31      	cmp	r3, #49	; 0x31
 8001944:	dde7      	ble.n	8001916 <sendWarning+0xf2>
			}
		// Todo: Calculate the distances by second Law Newten and compare.
		if(speed < carSpeed && accerlation < 0) //HAL_UART_Transmit(&huart1, reduceSpeedWarningMsg, TX_SIZE, 0xFF);
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <sendWarning+0x240>)
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <sendWarning+0x244>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d220      	bcs.n	8001994 <sendWarning+0x170>
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <sendWarning+0x248>)
 8001954:	f993 3000 	ldrsb.w	r3, [r3]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da1b      	bge.n	8001994 <sendWarning+0x170>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <sendWarning+0x228>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e013      	b.n	800198c <sendWarning+0x168>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = reduceSpeedWarningMsg[globalIndex];
 8001964:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <sendWarning+0x228>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a39      	ldr	r2, [pc, #228]	; (8001a50 <sendWarning+0x22c>)
 800196a:	8812      	ldrh	r2, [r2, #0]
 800196c:	4611      	mov	r1, r2
 800196e:	4a40      	ldr	r2, [pc, #256]	; (8001a70 <sendWarning+0x24c>)
 8001970:	5cd2      	ldrb	r2, [r2, r3]
 8001972:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <sendWarning+0x234>)
 8001974:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <sendWarning+0x22c>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <sendWarning+0x22c>)
 8001980:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <sendWarning+0x228>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <sendWarning+0x228>)
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <sendWarning+0x228>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b31      	cmp	r3, #49	; 0x31
 8001992:	dde7      	ble.n	8001964 <sendWarning+0x140>
			}
		if(doorSignCheck == RIGHT_DOOR) //HAL_UART_Transmit(&huart1, rightDoorWarningMsg, TX_SIZE, 0xFF);
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <sendWarning+0x224>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d11b      	bne.n	80019d4 <sendWarning+0x1b0>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <sendWarning+0x228>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e013      	b.n	80019cc <sendWarning+0x1a8>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = rightDoorWarningMsg[globalIndex];
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <sendWarning+0x228>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <sendWarning+0x22c>)
 80019aa:	8812      	ldrh	r2, [r2, #0]
 80019ac:	4611      	mov	r1, r2
 80019ae:	4a33      	ldr	r2, [pc, #204]	; (8001a7c <sendWarning+0x258>)
 80019b0:	5cd2      	ldrb	r2, [r2, r3]
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <sendWarning+0x234>)
 80019b4:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <sendWarning+0x22c>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <sendWarning+0x22c>)
 80019c0:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <sendWarning+0x228>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <sendWarning+0x228>)
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <sendWarning+0x228>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b31      	cmp	r3, #49	; 0x31
 80019d2:	dde7      	ble.n	80019a4 <sendWarning+0x180>
			}
	}
	if(positionIndication == NORTH)
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <sendWarning+0x220>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d16b      	bne.n	8001ab4 <sendWarning+0x290>
	{
		if(speed < carSpeed && accerlation < 0) //HAL_UART_Transmit(&huart1, reduceSpeedWarningMsg, TX_SIZE, 0xFF);
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <sendWarning+0x240>)
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <sendWarning+0x244>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d220      	bcs.n	8001a2a <sendWarning+0x206>
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <sendWarning+0x248>)
 80019ea:	f993 3000 	ldrsb.w	r3, [r3]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da1b      	bge.n	8001a2a <sendWarning+0x206>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <sendWarning+0x228>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e013      	b.n	8001a22 <sendWarning+0x1fe>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = reduceSpeedWarningMsg[globalIndex];
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <sendWarning+0x228>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <sendWarning+0x22c>)
 8001a00:	8812      	ldrh	r2, [r2, #0]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <sendWarning+0x24c>)
 8001a06:	5cd2      	ldrb	r2, [r2, r3]
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <sendWarning+0x234>)
 8001a0a:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <sendWarning+0x22c>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <sendWarning+0x22c>)
 8001a16:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <sendWarning+0x228>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <sendWarning+0x228>)
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <sendWarning+0x228>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b31      	cmp	r3, #49	; 0x31
 8001a28:	dde7      	ble.n	80019fa <sendWarning+0x1d6>
			}
		if(doorSignCheck == BAG_DOOR && yAxis == 1) //HAL_UART_Transmit(&huart1, bagDoorWarningMsg, TX_SIZE, 0xFF);
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <sendWarning+0x224>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d140      	bne.n	8001ab4 <sendWarning+0x290>
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <sendWarning+0x25c>)
 8001a34:	f993 3000 	ldrsb.w	r3, [r3]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d13b      	bne.n	8001ab4 <sendWarning+0x290>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <sendWarning+0x228>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e033      	b.n	8001aac <sendWarning+0x288>
 8001a44:	2000037b 	.word	0x2000037b
 8001a48:	2000037a 	.word	0x2000037a
 8001a4c:	20000370 	.word	0x20000370
 8001a50:	20000364 	.word	0x20000364
 8001a54:	200001c8 	.word	0x200001c8
 8001a58:	20000388 	.word	0x20000388
 8001a5c:	20000378 	.word	0x20000378
 8001a60:	20000160 	.word	0x20000160
 8001a64:	20000374 	.word	0x20000374
 8001a68:	200002ca 	.word	0x200002ca
 8001a6c:	20000375 	.word	0x20000375
 8001a70:	20000090 	.word	0x20000090
 8001a74:	20000379 	.word	0x20000379
 8001a78:	2000012c 	.word	0x2000012c
 8001a7c:	20000194 	.word	0x20000194
 8001a80:	20000377 	.word	0x20000377
			{
				totalTXBuffer[indexoFtotalTXBuffer] = bagDoorWarningMsg[globalIndex];
 8001a84:	4b8f      	ldr	r3, [pc, #572]	; (8001cc4 <sendWarning+0x4a0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a8f      	ldr	r2, [pc, #572]	; (8001cc8 <sendWarning+0x4a4>)
 8001a8a:	8812      	ldrh	r2, [r2, #0]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4a8f      	ldr	r2, [pc, #572]	; (8001ccc <sendWarning+0x4a8>)
 8001a90:	5cd2      	ldrb	r2, [r2, r3]
 8001a92:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <sendWarning+0x4ac>)
 8001a94:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001a96:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <sendWarning+0x4a4>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b8a      	ldr	r3, [pc, #552]	; (8001cc8 <sendWarning+0x4a4>)
 8001aa0:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <sendWarning+0x4a0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a86      	ldr	r2, [pc, #536]	; (8001cc4 <sendWarning+0x4a0>)
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <sendWarning+0x4a0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b31      	cmp	r3, #49	; 0x31
 8001ab2:	dde7      	ble.n	8001a84 <sendWarning+0x260>
			}
	}
	if(positionIndication == SOUTH_WEST)
 8001ab4:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <sendWarning+0x4b0>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d150      	bne.n	8001b5e <sendWarning+0x33a>
	{
		if(speed > carSpeed && accerlation > 0 && rightSignCheck == 1) //HAL_UART_Transmit(&huart1, boostSpeedWarningMsg, TX_SIZE, 0xFF);
 8001abc:	4b86      	ldr	r3, [pc, #536]	; (8001cd8 <sendWarning+0x4b4>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4b86      	ldr	r3, [pc, #536]	; (8001cdc <sendWarning+0x4b8>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d924      	bls.n	8001b12 <sendWarning+0x2ee>
 8001ac8:	4b85      	ldr	r3, [pc, #532]	; (8001ce0 <sendWarning+0x4bc>)
 8001aca:	f993 3000 	ldrsb.w	r3, [r3]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dd1f      	ble.n	8001b12 <sendWarning+0x2ee>
 8001ad2:	4b84      	ldr	r3, [pc, #528]	; (8001ce4 <sendWarning+0x4c0>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d11b      	bne.n	8001b12 <sendWarning+0x2ee>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001ada:	4b7a      	ldr	r3, [pc, #488]	; (8001cc4 <sendWarning+0x4a0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e013      	b.n	8001b0a <sendWarning+0x2e6>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = boostSpeedWarningMsg[globalIndex];
 8001ae2:	4b78      	ldr	r3, [pc, #480]	; (8001cc4 <sendWarning+0x4a0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a78      	ldr	r2, [pc, #480]	; (8001cc8 <sendWarning+0x4a4>)
 8001ae8:	8812      	ldrh	r2, [r2, #0]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4a7e      	ldr	r2, [pc, #504]	; (8001ce8 <sendWarning+0x4c4>)
 8001aee:	5cd2      	ldrb	r2, [r2, r3]
 8001af0:	4b77      	ldr	r3, [pc, #476]	; (8001cd0 <sendWarning+0x4ac>)
 8001af2:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001af4:	4b74      	ldr	r3, [pc, #464]	; (8001cc8 <sendWarning+0x4a4>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b72      	ldr	r3, [pc, #456]	; (8001cc8 <sendWarning+0x4a4>)
 8001afe:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001b00:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <sendWarning+0x4a0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a6f      	ldr	r2, [pc, #444]	; (8001cc4 <sendWarning+0x4a0>)
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b6e      	ldr	r3, [pc, #440]	; (8001cc4 <sendWarning+0x4a0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b31      	cmp	r3, #49	; 0x31
 8001b10:	dde7      	ble.n	8001ae2 <sendWarning+0x2be>
			}
		if(speed > carSpeed && carLeftSign == 1) //HAL_UART_Transmit(&huart1, changeLaneWarningMsg, TX_SIZE, 0xFF);
 8001b12:	4b71      	ldr	r3, [pc, #452]	; (8001cd8 <sendWarning+0x4b4>)
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <sendWarning+0x4b8>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d91f      	bls.n	8001b5e <sendWarning+0x33a>
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <sendWarning+0x4c8>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d11b      	bne.n	8001b5e <sendWarning+0x33a>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001b26:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <sendWarning+0x4a0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e013      	b.n	8001b56 <sendWarning+0x332>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = changeLaneWarningMsg[globalIndex];
 8001b2e:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <sendWarning+0x4a0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a65      	ldr	r2, [pc, #404]	; (8001cc8 <sendWarning+0x4a4>)
 8001b34:	8812      	ldrh	r2, [r2, #0]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4a6d      	ldr	r2, [pc, #436]	; (8001cf0 <sendWarning+0x4cc>)
 8001b3a:	5cd2      	ldrb	r2, [r2, r3]
 8001b3c:	4b64      	ldr	r3, [pc, #400]	; (8001cd0 <sendWarning+0x4ac>)
 8001b3e:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001b40:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <sendWarning+0x4a4>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <sendWarning+0x4a4>)
 8001b4a:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001b4c:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <sendWarning+0x4a0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	4a5c      	ldr	r2, [pc, #368]	; (8001cc4 <sendWarning+0x4a0>)
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <sendWarning+0x4a0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b31      	cmp	r3, #49	; 0x31
 8001b5c:	dde7      	ble.n	8001b2e <sendWarning+0x30a>
			}
	}
	if(positionIndication == SOUTH_EAST)
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <sendWarning+0x4b0>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b07      	cmp	r3, #7
 8001b64:	d150      	bne.n	8001c08 <sendWarning+0x3e4>
	{
		if(speed > carSpeed && accerlation > 0 && leftSignCheck == 1) //HAL_UART_Transmit(&huart1, boostSpeedWarningMsg, TX_SIZE, 0xFF);
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <sendWarning+0x4b4>)
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	4b5c      	ldr	r3, [pc, #368]	; (8001cdc <sendWarning+0x4b8>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d924      	bls.n	8001bbc <sendWarning+0x398>
 8001b72:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <sendWarning+0x4bc>)
 8001b74:	f993 3000 	ldrsb.w	r3, [r3]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	dd1f      	ble.n	8001bbc <sendWarning+0x398>
 8001b7c:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <sendWarning+0x4d0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d11b      	bne.n	8001bbc <sendWarning+0x398>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001b84:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <sendWarning+0x4a0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e013      	b.n	8001bb4 <sendWarning+0x390>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = boostSpeedWarningMsg[globalIndex];
 8001b8c:	4b4d      	ldr	r3, [pc, #308]	; (8001cc4 <sendWarning+0x4a0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <sendWarning+0x4a4>)
 8001b92:	8812      	ldrh	r2, [r2, #0]
 8001b94:	4611      	mov	r1, r2
 8001b96:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <sendWarning+0x4c4>)
 8001b98:	5cd2      	ldrb	r2, [r2, r3]
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <sendWarning+0x4ac>)
 8001b9c:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <sendWarning+0x4a4>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b48      	ldr	r3, [pc, #288]	; (8001cc8 <sendWarning+0x4a4>)
 8001ba8:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <sendWarning+0x4a0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a44      	ldr	r2, [pc, #272]	; (8001cc4 <sendWarning+0x4a0>)
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <sendWarning+0x4a0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b31      	cmp	r3, #49	; 0x31
 8001bba:	dde7      	ble.n	8001b8c <sendWarning+0x368>
			}
		if(speed > carSpeed && carRightSign == 1) //HAL_UART_Transmit(&huart1, changeLaneWarningMsg, TX_SIZE, 0xFF);
 8001bbc:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <sendWarning+0x4b4>)
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <sendWarning+0x4b8>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d91f      	bls.n	8001c08 <sendWarning+0x3e4>
 8001bc8:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <sendWarning+0x4d4>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d11b      	bne.n	8001c08 <sendWarning+0x3e4>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <sendWarning+0x4a0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e013      	b.n	8001c00 <sendWarning+0x3dc>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = changeLaneWarningMsg[globalIndex];
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <sendWarning+0x4a0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3a      	ldr	r2, [pc, #232]	; (8001cc8 <sendWarning+0x4a4>)
 8001bde:	8812      	ldrh	r2, [r2, #0]
 8001be0:	4611      	mov	r1, r2
 8001be2:	4a43      	ldr	r2, [pc, #268]	; (8001cf0 <sendWarning+0x4cc>)
 8001be4:	5cd2      	ldrb	r2, [r2, r3]
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <sendWarning+0x4ac>)
 8001be8:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001bea:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <sendWarning+0x4a4>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <sendWarning+0x4a4>)
 8001bf4:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001bf6:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <sendWarning+0x4a0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a31      	ldr	r2, [pc, #196]	; (8001cc4 <sendWarning+0x4a0>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <sendWarning+0x4a0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b31      	cmp	r3, #49	; 0x31
 8001c06:	dde7      	ble.n	8001bd8 <sendWarning+0x3b4>
			}
	}
	if(positionIndication == SOUTH)
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <sendWarning+0x4b0>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d14c      	bne.n	8001caa <sendWarning+0x486>
	{
		if(speed > carSpeed && accerlation > 0) //HAL_UART_Transmit(&huart1, boostSpeedWarningMsg, TX_SIZE, 0xFF);
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <sendWarning+0x4b4>)
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <sendWarning+0x4b8>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d920      	bls.n	8001c5e <sendWarning+0x43a>
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <sendWarning+0x4bc>)
 8001c1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dd1b      	ble.n	8001c5e <sendWarning+0x43a>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001c26:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <sendWarning+0x4a0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e013      	b.n	8001c56 <sendWarning+0x432>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = boostSpeedWarningMsg[globalIndex];
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <sendWarning+0x4a0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <sendWarning+0x4a4>)
 8001c34:	8812      	ldrh	r2, [r2, #0]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <sendWarning+0x4c4>)
 8001c3a:	5cd2      	ldrb	r2, [r2, r3]
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <sendWarning+0x4ac>)
 8001c3e:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <sendWarning+0x4a4>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <sendWarning+0x4a4>)
 8001c4a:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <sendWarning+0x4a0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <sendWarning+0x4a0>)
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <sendWarning+0x4a0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b31      	cmp	r3, #49	; 0x31
 8001c5c:	dde7      	ble.n	8001c2e <sendWarning+0x40a>
			}
		if(doorSignCheck == CAR_HOOD && yAxis == -1) //HAL_UART_Transmit(&huart1, carHoodWarningMsg, TX_SIZE, 0xFF);
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <sendWarning+0x4d8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d121      	bne.n	8001caa <sendWarning+0x486>
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <sendWarning+0x4dc>)
 8001c68:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	d11b      	bne.n	8001caa <sendWarning+0x486>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <sendWarning+0x4a0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e013      	b.n	8001ca2 <sendWarning+0x47e>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = carHoodWarningMsg[globalIndex];
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <sendWarning+0x4a0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <sendWarning+0x4a4>)
 8001c80:	8812      	ldrh	r2, [r2, #0]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <sendWarning+0x4e0>)
 8001c86:	5cd2      	ldrb	r2, [r2, r3]
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <sendWarning+0x4ac>)
 8001c8a:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <sendWarning+0x4a4>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <sendWarning+0x4a4>)
 8001c96:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <sendWarning+0x4a0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <sendWarning+0x4a0>)
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <sendWarning+0x4a0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b31      	cmp	r3, #49	; 0x31
 8001ca8:	dde7      	ble.n	8001c7a <sendWarning+0x456>
			}
	}
	if(positionIndication == EAST)
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <sendWarning+0x4b0>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	f040 8086 	bne.w	8001dc0 <sendWarning+0x59c>
	{
		if(doorSignCheck == LEFT_DOOR) //HAL_UART_Transmit(&huart1, leftDoorWarningMsg, TX_SIZE, 0xFF);
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <sendWarning+0x4d8>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d13d      	bne.n	8001d38 <sendWarning+0x514>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <sendWarning+0x4a0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e035      	b.n	8001d30 <sendWarning+0x50c>
 8001cc4:	20000370 	.word	0x20000370
 8001cc8:	20000364 	.word	0x20000364
 8001ccc:	200001fc 	.word	0x200001fc
 8001cd0:	20000388 	.word	0x20000388
 8001cd4:	2000037b 	.word	0x2000037b
 8001cd8:	20000374 	.word	0x20000374
 8001cdc:	200002ca 	.word	0x200002ca
 8001ce0:	20000375 	.word	0x20000375
 8001ce4:	20000379 	.word	0x20000379
 8001ce8:	200000f8 	.word	0x200000f8
 8001cec:	200002cc 	.word	0x200002cc
 8001cf0:	20000264 	.word	0x20000264
 8001cf4:	20000378 	.word	0x20000378
 8001cf8:	2000037c 	.word	0x2000037c
 8001cfc:	2000037a 	.word	0x2000037a
 8001d00:	20000377 	.word	0x20000377
 8001d04:	20000230 	.word	0x20000230
			{
				totalTXBuffer[indexoFtotalTXBuffer] = leftDoorWarningMsg[globalIndex];
 8001d08:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <sendWarning+0x674>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <sendWarning+0x678>)
 8001d0e:	8812      	ldrh	r2, [r2, #0]
 8001d10:	4611      	mov	r1, r2
 8001d12:	4a63      	ldr	r2, [pc, #396]	; (8001ea0 <sendWarning+0x67c>)
 8001d14:	5cd2      	ldrb	r2, [r2, r3]
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <sendWarning+0x680>)
 8001d18:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001d1a:	4b60      	ldr	r3, [pc, #384]	; (8001e9c <sendWarning+0x678>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b5e      	ldr	r3, [pc, #376]	; (8001e9c <sendWarning+0x678>)
 8001d24:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <sendWarning+0x674>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a5a      	ldr	r2, [pc, #360]	; (8001e98 <sendWarning+0x674>)
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <sendWarning+0x674>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b31      	cmp	r3, #49	; 0x31
 8001d36:	dde7      	ble.n	8001d08 <sendWarning+0x4e4>
			}
		if(leftSignCheck == 1) //HAL_UART_Transmit(&huart1, holdOnSpeedWarningMsg, TX_SIZE, 0xFF);
 8001d38:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <sendWarning+0x684>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d11b      	bne.n	8001d78 <sendWarning+0x554>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001d40:	4b55      	ldr	r3, [pc, #340]	; (8001e98 <sendWarning+0x674>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e013      	b.n	8001d70 <sendWarning+0x54c>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = holdOnSpeedWarningMsg[globalIndex];
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <sendWarning+0x674>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a53      	ldr	r2, [pc, #332]	; (8001e9c <sendWarning+0x678>)
 8001d4e:	8812      	ldrh	r2, [r2, #0]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4a56      	ldr	r2, [pc, #344]	; (8001eac <sendWarning+0x688>)
 8001d54:	5cd2      	ldrb	r2, [r2, r3]
 8001d56:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <sendWarning+0x680>)
 8001d58:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001d5a:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <sendWarning+0x678>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <sendWarning+0x678>)
 8001d64:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001d66:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <sendWarning+0x674>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <sendWarning+0x674>)
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <sendWarning+0x674>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b31      	cmp	r3, #49	; 0x31
 8001d76:	dde7      	ble.n	8001d48 <sendWarning+0x524>
			}
		if(carRightSign == 1 && leftSignCheck == 1) //HAL_UART_Transmit(&huart1, changeLaneWarningMsg, TX_SIZE, 0xFF);
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <sendWarning+0x68c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d11f      	bne.n	8001dc0 <sendWarning+0x59c>
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <sendWarning+0x684>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d11b      	bne.n	8001dc0 <sendWarning+0x59c>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001d88:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <sendWarning+0x674>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e013      	b.n	8001db8 <sendWarning+0x594>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = changeLaneWarningMsg[globalIndex];
 8001d90:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <sendWarning+0x674>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <sendWarning+0x678>)
 8001d96:	8812      	ldrh	r2, [r2, #0]
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <sendWarning+0x690>)
 8001d9c:	5cd2      	ldrb	r2, [r2, r3]
 8001d9e:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <sendWarning+0x680>)
 8001da0:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <sendWarning+0x678>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <sendWarning+0x678>)
 8001dac:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001dae:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <sendWarning+0x674>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <sendWarning+0x674>)
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <sendWarning+0x674>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b31      	cmp	r3, #49	; 0x31
 8001dbe:	dde7      	ble.n	8001d90 <sendWarning+0x56c>
			}
	}
	if(positionIndication == WEST)
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <sendWarning+0x694>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d163      	bne.n	8001e90 <sendWarning+0x66c>
	{
		if(doorSignCheck == RIGHT_DOOR) //HAL_UART_Transmit(&huart1, rightDoorWarningMsg, TX_SIZE, 0xFF);
 8001dc8:	4b3c      	ldr	r3, [pc, #240]	; (8001ebc <sendWarning+0x698>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d11b      	bne.n	8001e08 <sendWarning+0x5e4>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <sendWarning+0x674>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e013      	b.n	8001e00 <sendWarning+0x5dc>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = rightDoorWarningMsg[globalIndex];
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <sendWarning+0x674>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2f      	ldr	r2, [pc, #188]	; (8001e9c <sendWarning+0x678>)
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4a37      	ldr	r2, [pc, #220]	; (8001ec0 <sendWarning+0x69c>)
 8001de4:	5cd2      	ldrb	r2, [r2, r3]
 8001de6:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <sendWarning+0x680>)
 8001de8:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <sendWarning+0x678>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <sendWarning+0x678>)
 8001df4:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <sendWarning+0x674>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <sendWarning+0x674>)
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <sendWarning+0x674>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b31      	cmp	r3, #49	; 0x31
 8001e06:	dde7      	ble.n	8001dd8 <sendWarning+0x5b4>
			}
		if(rightSignCheck == 1) //HAL_UART_Transmit(&huart1, holdOnSpeedWarningMsg, TX_SIZE, 0xFF);
 8001e08:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <sendWarning+0x6a0>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d11b      	bne.n	8001e48 <sendWarning+0x624>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <sendWarning+0x674>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e013      	b.n	8001e40 <sendWarning+0x61c>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = holdOnSpeedWarningMsg[globalIndex];
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <sendWarning+0x674>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <sendWarning+0x678>)
 8001e1e:	8812      	ldrh	r2, [r2, #0]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4a22      	ldr	r2, [pc, #136]	; (8001eac <sendWarning+0x688>)
 8001e24:	5cd2      	ldrb	r2, [r2, r3]
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <sendWarning+0x680>)
 8001e28:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <sendWarning+0x678>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <sendWarning+0x678>)
 8001e34:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <sendWarning+0x674>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <sendWarning+0x674>)
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <sendWarning+0x674>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b31      	cmp	r3, #49	; 0x31
 8001e46:	dde7      	ble.n	8001e18 <sendWarning+0x5f4>
			}
		if(carLeftSign == 1 && rightSignCheck == 1) //HAL_UART_Transmit(&huart1, changeLaneWarningMsg, TX_SIZE, 0xFF);
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <sendWarning+0x6a4>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d11f      	bne.n	8001e90 <sendWarning+0x66c>
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <sendWarning+0x6a0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d11b      	bne.n	8001e90 <sendWarning+0x66c>
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <sendWarning+0x674>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e013      	b.n	8001e88 <sendWarning+0x664>
			{
				totalTXBuffer[indexoFtotalTXBuffer] = changeLaneWarningMsg[globalIndex];
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <sendWarning+0x674>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <sendWarning+0x678>)
 8001e66:	8812      	ldrh	r2, [r2, #0]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <sendWarning+0x690>)
 8001e6c:	5cd2      	ldrb	r2, [r2, r3]
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <sendWarning+0x680>)
 8001e70:	545a      	strb	r2, [r3, r1]
				indexoFtotalTXBuffer++;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <sendWarning+0x678>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <sendWarning+0x678>)
 8001e7c:	801a      	strh	r2, [r3, #0]
			for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <sendWarning+0x674>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <sendWarning+0x674>)
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <sendWarning+0x674>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b31      	cmp	r3, #49	; 0x31
 8001e8e:	dde7      	ble.n	8001e60 <sendWarning+0x63c>
			}
	}
	//HAL_UART_Transmit(&huart1, redundantSafeMsg, TX_SIZE, 0xFF);

}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000370 	.word	0x20000370
 8001e9c:	20000364 	.word	0x20000364
 8001ea0:	200001c8 	.word	0x200001c8
 8001ea4:	20000388 	.word	0x20000388
 8001ea8:	20000378 	.word	0x20000378
 8001eac:	200000c4 	.word	0x200000c4
 8001eb0:	2000037c 	.word	0x2000037c
 8001eb4:	20000264 	.word	0x20000264
 8001eb8:	2000037b 	.word	0x2000037b
 8001ebc:	2000037a 	.word	0x2000037a
 8001ec0:	20000194 	.word	0x20000194
 8001ec4:	20000379 	.word	0x20000379
 8001ec8:	200002cc 	.word	0x200002cc

08001ecc <storeCarVariables>:

void storeCarVariables()
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	indexOfTXBuffer = 2;
 8001ed0:	4b65      	ldr	r3, [pc, #404]	; (8002068 <storeCarVariables+0x19c>)
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]
	// Store Speed.
	convertIntToChars(MAX_SPEED_DIGIT, carSpeed);
 8001ed6:	4b65      	ldr	r3, [pc, #404]	; (800206c <storeCarVariables+0x1a0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	2003      	movs	r0, #3
 8001ede:	f7ff fbd7 	bl	8001690 <convertIntToChars>
	indexOfTXBuffer +=3;
 8001ee2:	4b61      	ldr	r3, [pc, #388]	; (8002068 <storeCarVariables+0x19c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3303      	adds	r3, #3
 8001ee8:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <storeCarVariables+0x19c>)
 8001eea:	6013      	str	r3, [r2, #0]

	// Store Accerlation.
	if(carAccerlation < 0) bufferTX[indexOfTXBuffer] = '-';
 8001eec:	4b60      	ldr	r3, [pc, #384]	; (8002070 <storeCarVariables+0x1a4>)
 8001eee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	da05      	bge.n	8001f02 <storeCarVariables+0x36>
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <storeCarVariables+0x19c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5e      	ldr	r2, [pc, #376]	; (8002074 <storeCarVariables+0x1a8>)
 8001efc:	212d      	movs	r1, #45	; 0x2d
 8001efe:	54d1      	strb	r1, [r2, r3]
 8001f00:	e004      	b.n	8001f0c <storeCarVariables+0x40>
	else                   bufferTX[indexOfTXBuffer] = '+';
 8001f02:	4b59      	ldr	r3, [pc, #356]	; (8002068 <storeCarVariables+0x19c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5b      	ldr	r2, [pc, #364]	; (8002074 <storeCarVariables+0x1a8>)
 8001f08:	212b      	movs	r1, #43	; 0x2b
 8001f0a:	54d1      	strb	r1, [r2, r3]
	indexOfTXBuffer++;
 8001f0c:	4b56      	ldr	r3, [pc, #344]	; (8002068 <storeCarVariables+0x19c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	4a55      	ldr	r2, [pc, #340]	; (8002068 <storeCarVariables+0x19c>)
 8001f14:	6013      	str	r3, [r2, #0]
	convertIntToChars(MAX_ACCERLATION_DIGIT, takeAbsoulute(carAccerlation));
 8001f16:	4b56      	ldr	r3, [pc, #344]	; (8002070 <storeCarVariables+0x1a4>)
 8001f18:	f993 3000 	ldrsb.w	r3, [r3]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fba3 	bl	8001668 <takeAbsoulute>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4619      	mov	r1, r3
 8001f26:	2002      	movs	r0, #2
 8001f28:	f7ff fbb2 	bl	8001690 <convertIntToChars>
	indexOfTXBuffer +=3;
 8001f2c:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <storeCarVariables+0x19c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3303      	adds	r3, #3
 8001f32:	4a4d      	ldr	r2, [pc, #308]	; (8002068 <storeCarVariables+0x19c>)
 8001f34:	6013      	str	r3, [r2, #0]

	//store XAxis.
	if(xAxis > 0) bufferTX[indexOfTXBuffer] = '-';
 8001f36:	4b50      	ldr	r3, [pc, #320]	; (8002078 <storeCarVariables+0x1ac>)
 8001f38:	f993 3000 	ldrsb.w	r3, [r3]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dd05      	ble.n	8001f4c <storeCarVariables+0x80>
 8001f40:	4b49      	ldr	r3, [pc, #292]	; (8002068 <storeCarVariables+0x19c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <storeCarVariables+0x1a8>)
 8001f46:	212d      	movs	r1, #45	; 0x2d
 8001f48:	54d1      	strb	r1, [r2, r3]
 8001f4a:	e004      	b.n	8001f56 <storeCarVariables+0x8a>
	else bufferTX[indexOfTXBuffer] = '+';
 8001f4c:	4b46      	ldr	r3, [pc, #280]	; (8002068 <storeCarVariables+0x19c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a48      	ldr	r2, [pc, #288]	; (8002074 <storeCarVariables+0x1a8>)
 8001f52:	212b      	movs	r1, #43	; 0x2b
 8001f54:	54d1      	strb	r1, [r2, r3]
	indexOfTXBuffer++;
 8001f56:	4b44      	ldr	r3, [pc, #272]	; (8002068 <storeCarVariables+0x19c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	4a42      	ldr	r2, [pc, #264]	; (8002068 <storeCarVariables+0x19c>)
 8001f5e:	6013      	str	r3, [r2, #0]
	bufferTX[indexOfTXBuffer] = takeAbsoulute(xAxis) + '0';
 8001f60:	4b45      	ldr	r3, [pc, #276]	; (8002078 <storeCarVariables+0x1ac>)
 8001f62:	f993 3000 	ldrsb.w	r3, [r3]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fb7e 	bl	8001668 <takeAbsoulute>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <storeCarVariables+0x19c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3230      	adds	r2, #48	; 0x30
 8001f76:	b2d1      	uxtb	r1, r2
 8001f78:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <storeCarVariables+0x1a8>)
 8001f7a:	54d1      	strb	r1, [r2, r3]
	indexOfTXBuffer +=4;
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <storeCarVariables+0x19c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3304      	adds	r3, #4
 8001f82:	4a39      	ldr	r2, [pc, #228]	; (8002068 <storeCarVariables+0x19c>)
 8001f84:	6013      	str	r3, [r2, #0]

	//store YAxis.
	if(yAxis > 0) bufferTX[indexOfTXBuffer] = '-';
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <storeCarVariables+0x1b0>)
 8001f88:	f993 3000 	ldrsb.w	r3, [r3]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dd05      	ble.n	8001f9c <storeCarVariables+0xd0>
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <storeCarVariables+0x19c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a37      	ldr	r2, [pc, #220]	; (8002074 <storeCarVariables+0x1a8>)
 8001f96:	212d      	movs	r1, #45	; 0x2d
 8001f98:	54d1      	strb	r1, [r2, r3]
 8001f9a:	e004      	b.n	8001fa6 <storeCarVariables+0xda>
	else		  bufferTX[indexOfTXBuffer] = '+';
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <storeCarVariables+0x19c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a34      	ldr	r2, [pc, #208]	; (8002074 <storeCarVariables+0x1a8>)
 8001fa2:	212b      	movs	r1, #43	; 0x2b
 8001fa4:	54d1      	strb	r1, [r2, r3]
	indexOfTXBuffer++;
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <storeCarVariables+0x19c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a2e      	ldr	r2, [pc, #184]	; (8002068 <storeCarVariables+0x19c>)
 8001fae:	6013      	str	r3, [r2, #0]
	bufferTX[indexOfTXBuffer] = takeAbsoulute(yAxis) + '0';
 8001fb0:	4b32      	ldr	r3, [pc, #200]	; (800207c <storeCarVariables+0x1b0>)
 8001fb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fb56 	bl	8001668 <takeAbsoulute>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <storeCarVariables+0x19c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3230      	adds	r2, #48	; 0x30
 8001fc6:	b2d1      	uxtb	r1, r2
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <storeCarVariables+0x1a8>)
 8001fca:	54d1      	strb	r1, [r2, r3]
	indexOfTXBuffer +=4;
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <storeCarVariables+0x19c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	4a25      	ldr	r2, [pc, #148]	; (8002068 <storeCarVariables+0x19c>)
 8001fd4:	6013      	str	r3, [r2, #0]

	//store Right sign.
	bufferTX[indexOfTXBuffer] = carRightSign + '0';
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <storeCarVariables+0x1b4>)
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <storeCarVariables+0x19c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3230      	adds	r2, #48	; 0x30
 8001fe0:	b2d1      	uxtb	r1, r2
 8001fe2:	4a24      	ldr	r2, [pc, #144]	; (8002074 <storeCarVariables+0x1a8>)
 8001fe4:	54d1      	strb	r1, [r2, r3]
	indexOfTXBuffer +=4;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <storeCarVariables+0x19c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <storeCarVariables+0x19c>)
 8001fee:	6013      	str	r3, [r2, #0]

	//store Left sign.
	bufferTX[indexOfTXBuffer] = carLeftSign + '0';
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <storeCarVariables+0x1b8>)
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <storeCarVariables+0x19c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3230      	adds	r2, #48	; 0x30
 8001ffa:	b2d1      	uxtb	r1, r2
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <storeCarVariables+0x1a8>)
 8001ffe:	54d1      	strb	r1, [r2, r3]
	indexOfTXBuffer +=4;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <storeCarVariables+0x19c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3304      	adds	r3, #4
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <storeCarVariables+0x19c>)
 8002008:	6013      	str	r3, [r2, #0]

	//store Door sign.
	bufferTX[indexOfTXBuffer] = carDoorSign + '0';
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <storeCarVariables+0x1bc>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <storeCarVariables+0x19c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3230      	adds	r2, #48	; 0x30
 8002014:	b2d1      	uxtb	r1, r2
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <storeCarVariables+0x1a8>)
 8002018:	54d1      	strb	r1, [r2, r3]
	indexOfTXBuffer +=4;
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <storeCarVariables+0x19c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3304      	adds	r3, #4
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <storeCarVariables+0x19c>)
 8002022:	6013      	str	r3, [r2, #0]

	for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <storeCarVariables+0x1c0>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e013      	b.n	8002054 <storeCarVariables+0x188>
	{
		totalTXBuffer[indexoFtotalTXBuffer] = bufferTX[globalIndex];
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <storeCarVariables+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <storeCarVariables+0x1c4>)
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	4611      	mov	r1, r2
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <storeCarVariables+0x1a8>)
 8002038:	5cd2      	ldrb	r2, [r2, r3]
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <storeCarVariables+0x1c8>)
 800203c:	545a      	strb	r2, [r3, r1]
		indexoFtotalTXBuffer++;
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <storeCarVariables+0x1c4>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <storeCarVariables+0x1c4>)
 8002048:	801a      	strh	r2, [r3, #0]
	for(globalIndex = 0; globalIndex < TX_SIZE; globalIndex++)
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <storeCarVariables+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <storeCarVariables+0x1c0>)
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <storeCarVariables+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b31      	cmp	r3, #49	; 0x31
 800205a:	dde7      	ble.n	800202c <storeCarVariables+0x160>
	}
	indexoFtotalTXBuffer = 0;
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <storeCarVariables+0x1c4>)
 800205e:	2200      	movs	r2, #0
 8002060:	801a      	strh	r2, [r3, #0]
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000036c 	.word	0x2000036c
 800206c:	200002ca 	.word	0x200002ca
 8002070:	200002cb 	.word	0x200002cb
 8002074:	20000298 	.word	0x20000298
 8002078:	20000376 	.word	0x20000376
 800207c:	20000377 	.word	0x20000377
 8002080:	2000037c 	.word	0x2000037c
 8002084:	200002cc 	.word	0x200002cc
 8002088:	200002cd 	.word	0x200002cd
 800208c:	20000370 	.word	0x20000370
 8002090:	20000364 	.word	0x20000364
 8002094:	20000388 	.word	0x20000388

08002098 <resetVariables>:

void resetVariables()
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	speed = 0;
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <resetVariables+0x48>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
	accerlation = 0;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <resetVariables+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
	xAxis = 0;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <resetVariables+0x50>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
	yAxis = 0;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <resetVariables+0x54>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
	leftSignCheck  = 0;
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <resetVariables+0x58>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
	rightSignCheck = 0;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <resetVariables+0x5c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
	doorSignCheck  = 0;
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <resetVariables+0x60>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
	positionIndication = 0;
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <resetVariables+0x64>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
	carXAxis = 0;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <resetVariables+0x68>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
	carYAxis = 0;
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <resetVariables+0x6c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000374 	.word	0x20000374
 80020e4:	20000375 	.word	0x20000375
 80020e8:	20000376 	.word	0x20000376
 80020ec:	20000377 	.word	0x20000377
 80020f0:	20000378 	.word	0x20000378
 80020f4:	20000379 	.word	0x20000379
 80020f8:	2000037a 	.word	0x2000037a
 80020fc:	2000037b 	.word	0x2000037b
 8002100:	2000037d 	.word	0x2000037d
 8002104:	2000037e 	.word	0x2000037e

08002108 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]


}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
	...

0800211c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

	indexOfRXBuffer = 0;
 8002124:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
	while(indexOfRXBuffer != sizeof(bufferRX))
 800212a:	e0ca      	b.n	80022c2 <HAL_UART_RxCpltCallback+0x1a6>
	{
			if(bufferRX[indexOfRXBuffer] == 's')
 800212c:	4b71      	ldr	r3, [pc, #452]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a71      	ldr	r2, [pc, #452]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	2b73      	cmp	r3, #115	; 0x73
 8002136:	d10e      	bne.n	8002156 <HAL_UART_RxCpltCallback+0x3a>
			{
				speed = calculateValue(indexOfRXBuffer + MAX_SPEED_DIGIT + 1);
 8002138:	4b6e      	ldr	r3, [pc, #440]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3304      	adds	r3, #4
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fa58 	bl	80015f4 <calculateValue>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <HAL_UART_RxCpltCallback+0x1e0>)
 800214a:	701a      	strb	r2, [r3, #0]
				indexOfRXBuffer += MAX_SPEED_DIGIT + 1;
 800214c:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3304      	adds	r3, #4
 8002152:	4a68      	ldr	r2, [pc, #416]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002154:	6013      	str	r3, [r2, #0]
			}
			if(bufferRX[indexOfRXBuffer] == 'a')
 8002156:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	2b61      	cmp	r3, #97	; 0x61
 8002160:	d11e      	bne.n	80021a0 <HAL_UART_RxCpltCallback+0x84>
			{
				accerlation = calculateValue(indexOfRXBuffer + MAX_ACCERLATION_DIGIT + 2);
 8002162:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3304      	adds	r3, #4
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fa43 	bl	80015f4 <calculateValue>
 800216e:	4603      	mov	r3, r0
 8002170:	b25a      	sxtb	r2, r3
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_UART_RxCpltCallback+0x1e4>)
 8002174:	701a      	strb	r2, [r3, #0]
				if(bufferRX[indexOfRXBuffer + 2] == '-') accerlation *= -1;
 8002176:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3302      	adds	r3, #2
 800217c:	4a5e      	ldr	r2, [pc, #376]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	2b2d      	cmp	r3, #45	; 0x2d
 8002182:	d108      	bne.n	8002196 <HAL_UART_RxCpltCallback+0x7a>
 8002184:	4b5e      	ldr	r3, [pc, #376]	; (8002300 <HAL_UART_RxCpltCallback+0x1e4>)
 8002186:	f993 3000 	ldrsb.w	r3, [r3]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	425b      	negs	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	b25a      	sxtb	r2, r3
 8002192:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <HAL_UART_RxCpltCallback+0x1e4>)
 8002194:	701a      	strb	r2, [r3, #0]
				indexOfRXBuffer += MAX_ACCERLATION_DIGIT + 2;
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3304      	adds	r3, #4
 800219c:	4a55      	ldr	r2, [pc, #340]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800219e:	6013      	str	r3, [r2, #0]
			}
			if(bufferRX[indexOfRXBuffer] == 'x')
 80021a0:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	2b78      	cmp	r3, #120	; 0x78
 80021aa:	d11e      	bne.n	80021ea <HAL_UART_RxCpltCallback+0xce>
			{

				xAxis = bufferRX[indexOfRXBuffer + MAX_X_AXIS_DIGIT + 2] - '0';
 80021ac:	4b51      	ldr	r3, [pc, #324]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3303      	adds	r3, #3
 80021b2:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 80021b4:	5cd3      	ldrb	r3, [r2, r3]
 80021b6:	3b30      	subs	r3, #48	; 0x30
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	b25a      	sxtb	r2, r3
 80021bc:	4b51      	ldr	r3, [pc, #324]	; (8002304 <HAL_UART_RxCpltCallback+0x1e8>)
 80021be:	701a      	strb	r2, [r3, #0]
				if(bufferRX[indexOfRXBuffer + 2] == '-') xAxis *= -1;
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3302      	adds	r3, #2
 80021c6:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	2b2d      	cmp	r3, #45	; 0x2d
 80021cc:	d108      	bne.n	80021e0 <HAL_UART_RxCpltCallback+0xc4>
 80021ce:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <HAL_UART_RxCpltCallback+0x1e8>)
 80021d0:	f993 3000 	ldrsb.w	r3, [r3]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	425b      	negs	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	b25a      	sxtb	r2, r3
 80021dc:	4b49      	ldr	r3, [pc, #292]	; (8002304 <HAL_UART_RxCpltCallback+0x1e8>)
 80021de:	701a      	strb	r2, [r3, #0]
				indexOfRXBuffer += MAX_X_AXIS_DIGIT + 2;
 80021e0:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3303      	adds	r3, #3
 80021e6:	4a43      	ldr	r2, [pc, #268]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80021e8:	6013      	str	r3, [r2, #0]

			}
			if(bufferRX[indexOfRXBuffer] == 'y')
 80021ea:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	2b79      	cmp	r3, #121	; 0x79
 80021f4:	d11e      	bne.n	8002234 <HAL_UART_RxCpltCallback+0x118>
			{

				yAxis = bufferRX[indexOfRXBuffer + MAX_Y_AXIS_DIGIT + 2] - '0';
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3303      	adds	r3, #3
 80021fc:	4a3e      	ldr	r2, [pc, #248]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
 8002200:	3b30      	subs	r3, #48	; 0x30
 8002202:	b2db      	uxtb	r3, r3
 8002204:	b25a      	sxtb	r2, r3
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_UART_RxCpltCallback+0x1ec>)
 8002208:	701a      	strb	r2, [r3, #0]
				if(bufferRX[indexOfRXBuffer + 2] == '-') yAxis *= -1;
 800220a:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3302      	adds	r3, #2
 8002210:	4a39      	ldr	r2, [pc, #228]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	2b2d      	cmp	r3, #45	; 0x2d
 8002216:	d108      	bne.n	800222a <HAL_UART_RxCpltCallback+0x10e>
 8002218:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <HAL_UART_RxCpltCallback+0x1ec>)
 800221a:	f993 3000 	ldrsb.w	r3, [r3]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	425b      	negs	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	b25a      	sxtb	r2, r3
 8002226:	4b38      	ldr	r3, [pc, #224]	; (8002308 <HAL_UART_RxCpltCallback+0x1ec>)
 8002228:	701a      	strb	r2, [r3, #0]
				indexOfRXBuffer += MAX_Y_AXIS_DIGIT + 2;
 800222a:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3303      	adds	r3, #3
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002232:	6013      	str	r3, [r2, #0]
			}
			if(bufferRX[indexOfRXBuffer] == 'l')
 8002234:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	2b6c      	cmp	r3, #108	; 0x6c
 800223e:	d10d      	bne.n	800225c <HAL_UART_RxCpltCallback+0x140>
			{
				leftSignCheck = bufferRX[indexOfRXBuffer + 2] - '0';
 8002240:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3302      	adds	r3, #2
 8002246:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	3b30      	subs	r3, #48	; 0x30
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_UART_RxCpltCallback+0x1f0>)
 8002250:	701a      	strb	r2, [r3, #0]
				indexOfRXBuffer += 2;
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3302      	adds	r3, #2
 8002258:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800225a:	6013      	str	r3, [r2, #0]
			}
			if(bufferRX[indexOfRXBuffer] == 'r')
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	2b72      	cmp	r3, #114	; 0x72
 8002266:	d10d      	bne.n	8002284 <HAL_UART_RxCpltCallback+0x168>
			{
				rightSignCheck = bufferRX[indexOfRXBuffer + 2] - '0';
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3302      	adds	r3, #2
 800226e:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	3b30      	subs	r3, #48	; 0x30
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_UART_RxCpltCallback+0x1f4>)
 8002278:	701a      	strb	r2, [r3, #0]
				indexOfRXBuffer += 2;
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3302      	adds	r3, #2
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002282:	6013      	str	r3, [r2, #0]
			}
			if(bufferRX[indexOfRXBuffer] == 'd')
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 800228a:	5cd3      	ldrb	r3, [r2, r3]
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d10d      	bne.n	80022ac <HAL_UART_RxCpltCallback+0x190>
			{
				doorSignCheck = bufferRX[indexOfRXBuffer + 2] - '0';
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3302      	adds	r3, #2
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	3b30      	subs	r3, #48	; 0x30
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_UART_RxCpltCallback+0x1f8>)
 80022a0:	701a      	strb	r2, [r3, #0]
				indexOfRXBuffer += 2;
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3302      	adds	r3, #2
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80022aa:	6013      	str	r3, [r2, #0]
			}
			if(bufferRX[indexOfRXBuffer] == '.')
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_UART_RxCpltCallback+0x1dc>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	2b2e      	cmp	r3, #46	; 0x2e
 80022b6:	d00a      	beq.n	80022ce <HAL_UART_RxCpltCallback+0x1b2>
				break;

		indexOfRXBuffer++;
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80022c0:	6013      	str	r3, [r2, #0]
	while(indexOfRXBuffer != sizeof(bufferRX))
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_UART_RxCpltCallback+0x1d8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b32      	cmp	r3, #50	; 0x32
 80022c8:	f47f af30 	bne.w	800212c <HAL_UART_RxCpltCallback+0x10>
 80022cc:	e000      	b.n	80022d0 <HAL_UART_RxCpltCallback+0x1b4>
				break;
 80022ce:	bf00      	nop

	}

	indicatePosition();
 80022d0:	f7ff fa34 	bl	800173c <indicatePosition>
	sendWarning();
 80022d4:	f7ff faa6 	bl	8001824 <sendWarning>

    storeCarVariables();
 80022d8:	f7ff fdf8 	bl	8001ecc <storeCarVariables>
    HAL_UART_Transmit(&huart1, totalTXBuffer, sizeof(totalTXBuffer), 0xFF);
 80022dc:	23ff      	movs	r3, #255	; 0xff
 80022de:	22c8      	movs	r2, #200	; 0xc8
 80022e0:	490d      	ldr	r1, [pc, #52]	; (8002318 <HAL_UART_RxCpltCallback+0x1fc>)
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <HAL_UART_RxCpltCallback+0x200>)
 80022e4:	f003 fac5 	bl	8005872 <HAL_UART_Transmit>
    resetVariables();
 80022e8:	f7ff fed6 	bl	8002098 <resetVariables>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000368 	.word	0x20000368
 80022f8:	20000450 	.word	0x20000450
 80022fc:	20000374 	.word	0x20000374
 8002300:	20000375 	.word	0x20000375
 8002304:	20000376 	.word	0x20000376
 8002308:	20000377 	.word	0x20000377
 800230c:	20000378 	.word	0x20000378
 8002310:	20000379 	.word	0x20000379
 8002314:	2000037a 	.word	0x2000037a
 8002318:	20000388 	.word	0x20000388
 800231c:	20000660 	.word	0x20000660

08002320 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <MX_GPIO_Init+0xa8>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a23      	ldr	r2, [pc, #140]	; (80023c8 <MX_GPIO_Init+0xa8>)
 800233a:	f043 0310 	orr.w	r3, r3, #16
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <MX_GPIO_Init+0xa8>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <MX_GPIO_Init+0xa8>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <MX_GPIO_Init+0xa8>)
 8002352:	f043 0320 	orr.w	r3, r3, #32
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <MX_GPIO_Init+0xa8>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <MX_GPIO_Init+0xa8>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <MX_GPIO_Init+0xa8>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6193      	str	r3, [r2, #24]
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <MX_GPIO_Init+0xa8>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <MX_GPIO_Init+0xa8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <MX_GPIO_Init+0xa8>)
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <MX_GPIO_Init+0xa8>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800239a:	480c      	ldr	r0, [pc, #48]	; (80023cc <MX_GPIO_Init+0xac>)
 800239c:	f000 ffbc 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2302      	movs	r3, #2
 80023b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4619      	mov	r1, r3
 80023b8:	4804      	ldr	r0, [pc, #16]	; (80023cc <MX_GPIO_Init+0xac>)
 80023ba:	f000 fe29 	bl	8003010 <HAL_GPIO_Init>

}
 80023be:	bf00      	nop
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40011000 	.word	0x40011000

080023d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <MX_I2C1_Init+0x50>)
 80023d6:	4a13      	ldr	r2, [pc, #76]	; (8002424 <MX_I2C1_Init+0x54>)
 80023d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_I2C1_Init+0x50>)
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <MX_I2C1_Init+0x58>)
 80023de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MX_I2C1_Init+0x50>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_I2C1_Init+0x50>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_I2C1_Init+0x50>)
 80023ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <MX_I2C1_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_I2C1_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <MX_I2C1_Init+0x50>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_I2C1_Init+0x50>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <MX_I2C1_Init+0x50>)
 800240e:	f000 ffb5 	bl	800337c <HAL_I2C_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002418:	f000 f8d7 	bl	80025ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000484 	.word	0x20000484
 8002424:	40005400 	.word	0x40005400
 8002428:	00061a80 	.word	0x00061a80

0800242c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a15      	ldr	r2, [pc, #84]	; (800249c <HAL_I2C_MspInit+0x70>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d123      	bne.n	8002494 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 8002452:	f043 0308 	orr.w	r3, r3, #8
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002464:	23c0      	movs	r3, #192	; 0xc0
 8002466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002468:	2312      	movs	r3, #18
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	4619      	mov	r1, r3
 8002476:	480b      	ldr	r0, [pc, #44]	; (80024a4 <HAL_I2C_MspInit+0x78>)
 8002478:	f000 fdca 	bl	8003010 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 8002482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002486:	61d3      	str	r3, [r2, #28]
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40005400 	.word	0x40005400
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010c00 	.word	0x40010c00

080024a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ac:	f000 fb90 	bl	8002bd0 <HAL_Init>

  /* USER CODE BEGIN Init */
  for(indexoFtotalTXBuffer = 0; indexoFtotalTXBuffer < 200; indexoFtotalTXBuffer++)
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <main+0x88>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	e00b      	b.n	80024d0 <main+0x28>
  		totalTXBuffer[indexoFtotalTXBuffer] = '?';
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <main+0x88>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <main+0x8c>)
 80024c0:	213f      	movs	r1, #63	; 0x3f
 80024c2:	5499      	strb	r1, [r3, r2]
  for(indexoFtotalTXBuffer = 0; indexoFtotalTXBuffer < 200; indexoFtotalTXBuffer++)
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <main+0x88>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <main+0x88>)
 80024ce:	801a      	strh	r2, [r3, #0]
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <main+0x88>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	2bc7      	cmp	r3, #199	; 0xc7
 80024d6:	d9ef      	bls.n	80024b8 <main+0x10>
  indexoFtotalTXBuffer = 0;
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <main+0x88>)
 80024da:	2200      	movs	r2, #0
 80024dc:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024de:	f000 f839 	bl	8002554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e2:	f7ff ff1d 	bl	8002320 <MX_GPIO_Init>
  MX_I2C1_Init();
 80024e6:	f7ff ff73 	bl	80023d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80024ea:	f000 f9c9 	bl	8002880 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80024ee:	f000 facb 	bl	8002a88 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80024f2:	f000 fa19 	bl	8002928 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 80024f6:	bf00      	nop
 80024f8:	480f      	ldr	r0, [pc, #60]	; (8002538 <main+0x90>)
 80024fa:	f7fe fcf3 	bl	8000ee4 <MPU6050_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d0f9      	beq.n	80024f8 <main+0x50>
  HAL_ROTARY_Start(&htim2, &htim3, 8000);
 8002504:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <main+0x94>)
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <main+0x98>)
 800250c:	f000 f862 	bl	80025d4 <HAL_ROTARY_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <main+0x9c>)
 8002512:	4809      	ldr	r0, [pc, #36]	; (8002538 <main+0x90>)
 8002514:	f7fe fd40 	bl	8000f98 <MPU6050_Read_All>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800251c:	480a      	ldr	r0, [pc, #40]	; (8002548 <main+0xa0>)
 800251e:	f000 ff13 	bl	8003348 <HAL_GPIO_TogglePin>
	  HAL_UART_Receive_IT(&huart1, bufferRX, sizeof(bufferRX));
 8002522:	2232      	movs	r2, #50	; 0x32
 8002524:	4909      	ldr	r1, [pc, #36]	; (800254c <main+0xa4>)
 8002526:	480a      	ldr	r0, [pc, #40]	; (8002550 <main+0xa8>)
 8002528:	f003 fa35 	bl	8005996 <HAL_UART_Receive_IT>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 800252c:	e7f0      	b.n	8002510 <main+0x68>
 800252e:	bf00      	nop
 8002530:	20000364 	.word	0x20000364
 8002534:	20000388 	.word	0x20000388
 8002538:	20000484 	.word	0x20000484
 800253c:	200005d0 	.word	0x200005d0
 8002540:	20000618 	.word	0x20000618
 8002544:	200004d8 	.word	0x200004d8
 8002548:	40011000 	.word	0x40011000
 800254c:	20000450 	.word	0x20000450
 8002550:	20000660 	.word	0x20000660

08002554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b090      	sub	sp, #64	; 0x40
 8002558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	2228      	movs	r2, #40	; 0x28
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fea0 	bl	80062a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002576:	2302      	movs	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800257a:	2301      	movs	r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800257e:	2310      	movs	r3, #16
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002582:	2300      	movs	r3, #0
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002586:	f107 0318 	add.w	r3, r7, #24
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fef6 	bl	800437c <HAL_RCC_OscConfig>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002596:	f000 f818 	bl	80025ca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800259a:	230f      	movs	r3, #15
 800259c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 f962 	bl	800487c <HAL_RCC_ClockConfig>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80025be:	f000 f804 	bl	80025ca <Error_Handler>
  }
}
 80025c2:	bf00      	nop
 80025c4:	3740      	adds	r7, #64	; 0x40
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ce:	b672      	cpsid	i
}
 80025d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <Error_Handler+0x8>

080025d4 <HAL_ROTARY_Start>:
/*Functions*/

/*This function is to start encoder and update data continuously.*/
/*APB_Timer_Clock is in kHz*/
void HAL_ROTARY_Start(TIM_HandleTypeDef* Encoder,TIM_HandleTypeDef* Timer,uint32_t APB_Timer_Clock)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
	Read_Data = ROTARY_READ_DATA_CONT;
 80025e0:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_ROTARY_Start+0x68>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
	frequency = ((APB_Timer_Clock*1000)/Timer->Init.Prescaler)/Timer->Init.Period;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025ec:	fb02 f203 	mul.w	r2, r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <HAL_ROTARY_Start+0x6c>)
 8002602:	6013      	str	r3, [r2, #0]
	hencoder = *Encoder;
 8002604:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_ROTARY_Start+0x70>)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	2348      	movs	r3, #72	; 0x48
 800260e:	461a      	mov	r2, r3
 8002610:	f003 fe3c 	bl	800628c <memcpy>
	htimer = *Timer;
 8002614:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <HAL_ROTARY_Start+0x74>)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	2348      	movs	r3, #72	; 0x48
 800261e:	461a      	mov	r2, r3
 8002620:	f003 fe34 	bl	800628c <memcpy>
	/*Starting the encoder*/
	HAL_TIM_Encoder_Start(Encoder,TIM_CHANNEL_ALL);
 8002624:	213c      	movs	r1, #60	; 0x3c
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f002 fc34 	bl	8004e94 <HAL_TIM_Encoder_Start>
	/*Starting the timer*/
	HAL_TIM_Base_Start_IT(Timer);
 800262c:	68b8      	ldr	r0, [r7, #8]
 800262e:	f002 fb0f 	bl	8004c50 <HAL_TIM_Base_Start_IT>
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000534 	.word	0x20000534
 8002640:	20000530 	.word	0x20000530
 8002644:	20000580 	.word	0x20000580
 8002648:	20000538 	.word	0x20000538

0800264c <HAL_ROTARY_Stop>:
	HAL_TIM_Base_Start_IT(Timer);
}

/*This function is to stop the encoder.*/
void HAL_ROTARY_Stop(TIM_HandleTypeDef* Encoder,TIM_HandleTypeDef* Timer)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	/*Stopping the encoder*/
	HAL_TIM_Encoder_Stop(Encoder,TIM_CHANNEL_ALL);
 8002656:	213c      	movs	r1, #60	; 0x3c
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f002 fca9 	bl	8004fb0 <HAL_TIM_Encoder_Stop>
	/*Stopping the timer*/
	HAL_TIM_Base_Stop_IT(Timer);
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f002 fb48 	bl	8004cf4 <HAL_TIM_Base_Stop_IT>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_TIM_PeriodElapsedCallback>:

/*This function generates the data from the interrupt of the timer*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	/*Reading the register of the encoder timer*/
	Count2 = hencoder.Instance->CNT;
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	b21a      	sxth	r2, r3
 800267c:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800267e:	801a      	strh	r2, [r3, #0]
	/*Disabling the timer if the data is read once*/
	if (Read_Data == ROTARY_READ_DATA_ONCE)
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_ROTARY_Stop(&hencoder,&htimer);
 8002688:	493e      	ldr	r1, [pc, #248]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800268a:	483b      	ldr	r0, [pc, #236]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800268c:	f7ff ffde 	bl	800264c <HAL_ROTARY_Stop>
		htimer.Instance->CNT = 0x00UL;
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/*Checking if the number is negative to detect the direction*/
	if ((Count2 - Count1) < 0)
 8002698:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800269a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269e:	461a      	mov	r2, r3
 80026a0:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80026a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da0f      	bge.n	80026cc <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		hrotary.Pulses = Count1 - Count2;
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80026ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80026b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	b29a      	uxth	r2, r3
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80026c2:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_CW;
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80026c6:	22ff      	movs	r2, #255	; 0xff
 80026c8:	711a      	strb	r2, [r3, #4]
 80026ca:	e028      	b.n	800271e <HAL_TIM_PeriodElapsedCallback+0xb2>
	}
	else if ((Count2 - Count1) > 0)
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80026ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80026d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	dd0f      	ble.n	8002700 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		hrotary.Pulses = Count2 - Count1;
 80026e0:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80026e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80026ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80026f6:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_CCW;
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x120>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	711a      	strb	r2, [r3, #4]
 80026fe:	e00e      	b.n	800271e <HAL_TIM_PeriodElapsedCallback+0xb2>
	}
	else
	{
		hrotary.Pulses = Count2 - Count1;
 8002700:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002706:	b29a      	uxth	r2, r3
 8002708:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800270a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270e:	b29b      	uxth	r3, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002716:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_STILL;
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x120>)
 800271a:	2200      	movs	r2, #0
 800271c:	711a      	strb	r2, [r3, #4]
	}
	/*Calculating the RPM*/
	hrotary.RPM = hrotary.Pulses*frequency*60/80;
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002720:	885b      	ldrh	r3, [r3, #2]
 8002722:	461a      	mov	r2, r3
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fb03 f202 	mul.w	r2, r3, r2
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	461a      	mov	r2, r3
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002738:	fba3 2302 	umull	r2, r3, r3, r2
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002742:	801a      	strh	r2, [r3, #0]
	if (Read_Data == ROTARY_READ_DATA_CONT)
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <HAL_TIM_PeriodElapsedCallback+0xec>
	{
		/*Assigning the register value used earlier to be used as start of the next calculation*/
		Count1 = Count2;
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800274e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002754:	801a      	strh	r2, [r3, #0]
		/*Reseting the counters*/
		hencoder.Instance->CNT = 0x00UL;
		Count1 = 0;
	}

}
 8002756:	e00a      	b.n	800276e <HAL_TIM_PeriodElapsedCallback+0x102>
	else if (Read_Data == ROTARY_READ_DATA_ONCE)
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_TIM_PeriodElapsedCallback+0x102>
		hencoder.Instance->CNT = 0x00UL;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
		Count1 = 0;
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800276a:	2200      	movs	r2, #0
 800276c:	801a      	strh	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000580 	.word	0x20000580
 800277c:	20000382 	.word	0x20000382
 8002780:	20000534 	.word	0x20000534
 8002784:	20000538 	.word	0x20000538
 8002788:	20000380 	.word	0x20000380
 800278c:	200005c8 	.word	0x200005c8
 8002790:	20000530 	.word	0x20000530
 8002794:	cccccccd 	.word	0xcccccccd

08002798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_MspInit+0x5c>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_MspInit+0x5c>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_MspInit+0x5c>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_MspInit+0x5c>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_MspInit+0x5c>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_MspInit+0x5c>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_MspInit+0x60>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_MspInit+0x60>)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010000 	.word	0x40010000

080027fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002800:	e7fe      	b.n	8002800 <NMI_Handler+0x4>

08002802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002806:	e7fe      	b.n	8002806 <HardFault_Handler+0x4>

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280c:	e7fe      	b.n	800280c <MemManage_Handler+0x4>

0800280e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <BusFault_Handler+0x4>

08002814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <UsageFault_Handler+0x4>

0800281a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002842:	f000 fa0b 	bl	8002c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <TIM3_IRQHandler+0x10>)
 8002852:	f002 fc44 	bl	80050de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200005d0 	.word	0x200005d0

08002860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <USART1_IRQHandler+0x10>)
 8002866:	f003 f8c7 	bl	80059f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000660 	.word	0x20000660

08002874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	2224      	movs	r2, #36	; 0x24
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f003 fd0a 	bl	80062a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <MX_TIM2_Init+0xa4>)
 800289e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <MX_TIM2_Init+0xa4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <MX_TIM2_Init+0xa4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80028b0:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <MX_TIM2_Init+0xa4>)
 80028b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <MX_TIM2_Init+0xa4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <MX_TIM2_Init+0xa4>)
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028c4:	2303      	movs	r3, #3
 80028c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028cc:	2301      	movs	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 11;
 80028d4:	230b      	movs	r3, #11
 80028d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028dc:	2301      	movs	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 11;
 80028e4:	230b      	movs	r3, #11
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4619      	mov	r1, r3
 80028ee:	480d      	ldr	r0, [pc, #52]	; (8002924 <MX_TIM2_Init+0xa4>)
 80028f0:	f002 fa2e 	bl	8004d50 <HAL_TIM_Encoder_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80028fa:	f7ff fe66 	bl	80025ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4806      	ldr	r0, [pc, #24]	; (8002924 <MX_TIM2_Init+0xa4>)
 800290c:	f002 fef4 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002916:	f7ff fe58 	bl	80025ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	3730      	adds	r7, #48	; 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000618 	.word	0x20000618

08002928 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800293c:	463b      	mov	r3, r7
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <MX_TIM3_Init+0x94>)
 8002946:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <MX_TIM3_Init+0x98>)
 8002948:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <MX_TIM3_Init+0x94>)
 800294c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002950:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <MX_TIM3_Init+0x94>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <MX_TIM3_Init+0x94>)
 800295a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800295e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <MX_TIM3_Init+0x94>)
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <MX_TIM3_Init+0x94>)
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800296c:	4813      	ldr	r0, [pc, #76]	; (80029bc <MX_TIM3_Init+0x94>)
 800296e:	f002 f91f 	bl	8004bb0 <HAL_TIM_Base_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002978:	f7ff fe27 	bl	80025ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800297c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002980:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002982:	f107 0308 	add.w	r3, r7, #8
 8002986:	4619      	mov	r1, r3
 8002988:	480c      	ldr	r0, [pc, #48]	; (80029bc <MX_TIM3_Init+0x94>)
 800298a:	f002 fcb0 	bl	80052ee <HAL_TIM_ConfigClockSource>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002994:	f7ff fe19 	bl	80025ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029a0:	463b      	mov	r3, r7
 80029a2:	4619      	mov	r1, r3
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <MX_TIM3_Init+0x94>)
 80029a6:	f002 fea7 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80029b0:	f7ff fe0b 	bl	80025ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200005d0 	.word	0x200005d0
 80029c0:	40000400 	.word	0x40000400

080029c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d123      	bne.n	8002a2c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x70>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x70>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	61d3      	str	r3, [r2, #28]
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x70>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x70>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x70>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6193      	str	r3, [r2, #24]
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_TIM_Encoder_MspInit+0x70>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a14:	2303      	movs	r3, #3
 8002a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	4619      	mov	r1, r3
 8002a26:	4804      	ldr	r0, [pc, #16]	; (8002a38 <HAL_TIM_Encoder_MspInit+0x74>)
 8002a28:	f000 faf2 	bl	8003010 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3720      	adds	r7, #32
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010800 	.word	0x40010800

08002a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_TIM_Base_MspInit+0x44>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d113      	bne.n	8002a76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_TIM_Base_MspInit+0x48>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_TIM_Base_MspInit+0x48>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	61d3      	str	r3, [r2, #28]
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_TIM_Base_MspInit+0x48>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	201d      	movs	r0, #29
 8002a6c:	f000 f9e9 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a70:	201d      	movs	r0, #29
 8002a72:	f000 fa02 	bl	8002e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40021000 	.word	0x40021000

08002a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <MX_USART1_UART_Init+0x50>)
 8002a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002a94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002aae:	220c      	movs	r2, #12
 8002ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <MX_USART1_UART_Init+0x4c>)
 8002ac0:	f002 fe8a 	bl	80057d8 <HAL_UART_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002aca:	f7ff fd7e 	bl	80025ca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000660 	.word	0x20000660
 8002ad8:	40013800 	.word	0x40013800

08002adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0310 	add.w	r3, r7, #16
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_UART_MspInit+0x9c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d139      	bne.n	8002b70 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <HAL_UART_MspInit+0xa0>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_UART_MspInit+0xa0>)
 8002b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b06:	6193      	str	r3, [r2, #24]
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <HAL_UART_MspInit+0xa0>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_UART_MspInit+0xa0>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <HAL_UART_MspInit+0xa0>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_UART_MspInit+0xa0>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480f      	ldr	r0, [pc, #60]	; (8002b80 <HAL_UART_MspInit+0xa4>)
 8002b42:	f000 fa65 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4809      	ldr	r0, [pc, #36]	; (8002b80 <HAL_UART_MspInit+0xa4>)
 8002b5c:	f000 fa58 	bl	8003010 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2100      	movs	r1, #0
 8002b64:	2025      	movs	r0, #37	; 0x25
 8002b66:	f000 f96c 	bl	8002e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b6a:	2025      	movs	r0, #37	; 0x25
 8002b6c:	f000 f985 	bl	8002e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b70:	bf00      	nop
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010800 	.word	0x40010800

08002b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b84:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b86:	490d      	ldr	r1, [pc, #52]	; (8002bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b9c:	4c0a      	ldr	r4, [pc, #40]	; (8002bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002baa:	f7ff fe63 	bl	8002874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bae:	f003 fb49 	bl	8006244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bb2:	f7ff fc79 	bl	80024a8 <main>
  bx lr
 8002bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8002bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bbc:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8002bc0:	080069e8 	.word	0x080069e8
  ldr r2, =_sbss
 8002bc4:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8002bc8:	200006a8 	.word	0x200006a8

08002bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bcc:	e7fe      	b.n	8002bcc <ADC1_2_IRQHandler>
	...

08002bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_Init+0x28>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_Init+0x28>)
 8002bda:	f043 0310 	orr.w	r3, r3, #16
 8002bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f000 f923 	bl	8002e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be6:	200f      	movs	r0, #15
 8002be8:	f000 f808 	bl	8002bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bec:	f7ff fdd4 	bl	8002798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40022000 	.word	0x40022000

08002bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_InitTick+0x54>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_InitTick+0x58>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f93b 	bl	8002e96 <HAL_SYSTICK_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00e      	b.n	8002c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0f      	cmp	r3, #15
 8002c2e:	d80a      	bhi.n	8002c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c30:	2200      	movs	r2, #0
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f000 f903 	bl	8002e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <HAL_InitTick+0x5c>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200002d0 	.word	0x200002d0
 8002c54:	200002d8 	.word	0x200002d8
 8002c58:	200002d4 	.word	0x200002d4

08002c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_IncTick+0x1c>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_IncTick+0x20>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a03      	ldr	r2, [pc, #12]	; (8002c7c <HAL_IncTick+0x20>)
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	200002d8 	.word	0x200002d8
 8002c7c:	200006a4 	.word	0x200006a4

08002c80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return uwTick;
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <HAL_GetTick+0x10>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	200006a4 	.word	0x200006a4

08002c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 0307 	and.w	r3, r3, #7
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db0b      	blt.n	8002d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	4906      	ldr	r1, [pc, #24]	; (8002d2c <__NVIC_EnableIRQ+0x34>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2001      	movs	r0, #1
 8002d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	; (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df8:	d301      	bcc.n	8002dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00f      	b.n	8002e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <SysTick_Config+0x40>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e06:	210f      	movs	r1, #15
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f7ff ff90 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <SysTick_Config+0x40>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <SysTick_Config+0x40>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000e010 	.word	0xe000e010

08002e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff2d 	bl	8002c94 <__NVIC_SetPriorityGrouping>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e54:	f7ff ff42 	bl	8002cdc <__NVIC_GetPriorityGrouping>
 8002e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f7ff ff90 	bl	8002d84 <NVIC_EncodePriority>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff5f 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff35 	bl	8002cf8 <__NVIC_EnableIRQ>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ffa2 	bl	8002de8 <SysTick_Config>
 8002ea4:	4603      	mov	r3, r0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d008      	beq.n	8002ed6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e020      	b.n	8002f18 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 020e 	bic.w	r2, r2, #14
 8002ee4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2101      	movs	r1, #1
 8002f00:	fa01 f202 	lsl.w	r2, r1, r2
 8002f04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d005      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e051      	b.n	8002fea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 020e 	bic.w	r2, r2, #14
 8002f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a22      	ldr	r2, [pc, #136]	; (8002ff4 <HAL_DMA_Abort_IT+0xd0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d029      	beq.n	8002fc4 <HAL_DMA_Abort_IT+0xa0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a20      	ldr	r2, [pc, #128]	; (8002ff8 <HAL_DMA_Abort_IT+0xd4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_DMA_Abort_IT+0x9c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <HAL_DMA_Abort_IT+0xd8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01a      	beq.n	8002fba <HAL_DMA_Abort_IT+0x96>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_DMA_Abort_IT+0xdc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d012      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x90>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_DMA_Abort_IT+0xe0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00a      	beq.n	8002fae <HAL_DMA_Abort_IT+0x8a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_DMA_Abort_IT+0xe4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d102      	bne.n	8002fa8 <HAL_DMA_Abort_IT+0x84>
 8002fa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fa6:	e00e      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fac:	e00b      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fb2:	e008      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb8:	e005      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fbe:	e002      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	e000      	b.n	8002fc6 <HAL_DMA_Abort_IT+0xa2>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4a11      	ldr	r2, [pc, #68]	; (800300c <HAL_DMA_Abort_IT+0xe8>)
 8002fc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
    } 
  }
  return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40020008 	.word	0x40020008
 8002ff8:	4002001c 	.word	0x4002001c
 8002ffc:	40020030 	.word	0x40020030
 8003000:	40020044 	.word	0x40020044
 8003004:	40020058 	.word	0x40020058
 8003008:	4002006c 	.word	0x4002006c
 800300c:	40020000 	.word	0x40020000

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	b480      	push	{r7}
 8003012:	b08b      	sub	sp, #44	; 0x2c
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003022:	e169      	b.n	80032f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003024:	2201      	movs	r2, #1
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	429a      	cmp	r2, r3
 800303e:	f040 8158 	bne.w	80032f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4a9a      	ldr	r2, [pc, #616]	; (80032b0 <HAL_GPIO_Init+0x2a0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d05e      	beq.n	800310a <HAL_GPIO_Init+0xfa>
 800304c:	4a98      	ldr	r2, [pc, #608]	; (80032b0 <HAL_GPIO_Init+0x2a0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d875      	bhi.n	800313e <HAL_GPIO_Init+0x12e>
 8003052:	4a98      	ldr	r2, [pc, #608]	; (80032b4 <HAL_GPIO_Init+0x2a4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d058      	beq.n	800310a <HAL_GPIO_Init+0xfa>
 8003058:	4a96      	ldr	r2, [pc, #600]	; (80032b4 <HAL_GPIO_Init+0x2a4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d86f      	bhi.n	800313e <HAL_GPIO_Init+0x12e>
 800305e:	4a96      	ldr	r2, [pc, #600]	; (80032b8 <HAL_GPIO_Init+0x2a8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d052      	beq.n	800310a <HAL_GPIO_Init+0xfa>
 8003064:	4a94      	ldr	r2, [pc, #592]	; (80032b8 <HAL_GPIO_Init+0x2a8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d869      	bhi.n	800313e <HAL_GPIO_Init+0x12e>
 800306a:	4a94      	ldr	r2, [pc, #592]	; (80032bc <HAL_GPIO_Init+0x2ac>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04c      	beq.n	800310a <HAL_GPIO_Init+0xfa>
 8003070:	4a92      	ldr	r2, [pc, #584]	; (80032bc <HAL_GPIO_Init+0x2ac>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d863      	bhi.n	800313e <HAL_GPIO_Init+0x12e>
 8003076:	4a92      	ldr	r2, [pc, #584]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d046      	beq.n	800310a <HAL_GPIO_Init+0xfa>
 800307c:	4a90      	ldr	r2, [pc, #576]	; (80032c0 <HAL_GPIO_Init+0x2b0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d85d      	bhi.n	800313e <HAL_GPIO_Init+0x12e>
 8003082:	2b12      	cmp	r3, #18
 8003084:	d82a      	bhi.n	80030dc <HAL_GPIO_Init+0xcc>
 8003086:	2b12      	cmp	r3, #18
 8003088:	d859      	bhi.n	800313e <HAL_GPIO_Init+0x12e>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <HAL_GPIO_Init+0x80>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	0800310b 	.word	0x0800310b
 8003094:	080030e5 	.word	0x080030e5
 8003098:	080030f7 	.word	0x080030f7
 800309c:	08003139 	.word	0x08003139
 80030a0:	0800313f 	.word	0x0800313f
 80030a4:	0800313f 	.word	0x0800313f
 80030a8:	0800313f 	.word	0x0800313f
 80030ac:	0800313f 	.word	0x0800313f
 80030b0:	0800313f 	.word	0x0800313f
 80030b4:	0800313f 	.word	0x0800313f
 80030b8:	0800313f 	.word	0x0800313f
 80030bc:	0800313f 	.word	0x0800313f
 80030c0:	0800313f 	.word	0x0800313f
 80030c4:	0800313f 	.word	0x0800313f
 80030c8:	0800313f 	.word	0x0800313f
 80030cc:	0800313f 	.word	0x0800313f
 80030d0:	0800313f 	.word	0x0800313f
 80030d4:	080030ed 	.word	0x080030ed
 80030d8:	08003101 	.word	0x08003101
 80030dc:	4a79      	ldr	r2, [pc, #484]	; (80032c4 <HAL_GPIO_Init+0x2b4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030e2:	e02c      	b.n	800313e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	623b      	str	r3, [r7, #32]
          break;
 80030ea:	e029      	b.n	8003140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	3304      	adds	r3, #4
 80030f2:	623b      	str	r3, [r7, #32]
          break;
 80030f4:	e024      	b.n	8003140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	3308      	adds	r3, #8
 80030fc:	623b      	str	r3, [r7, #32]
          break;
 80030fe:	e01f      	b.n	8003140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	330c      	adds	r3, #12
 8003106:	623b      	str	r3, [r7, #32]
          break;
 8003108:	e01a      	b.n	8003140 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003112:	2304      	movs	r3, #4
 8003114:	623b      	str	r3, [r7, #32]
          break;
 8003116:	e013      	b.n	8003140 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003120:	2308      	movs	r3, #8
 8003122:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	611a      	str	r2, [r3, #16]
          break;
 800312a:	e009      	b.n	8003140 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800312c:	2308      	movs	r3, #8
 800312e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	615a      	str	r2, [r3, #20]
          break;
 8003136:	e003      	b.n	8003140 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003138:	2300      	movs	r3, #0
 800313a:	623b      	str	r3, [r7, #32]
          break;
 800313c:	e000      	b.n	8003140 <HAL_GPIO_Init+0x130>
          break;
 800313e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2bff      	cmp	r3, #255	; 0xff
 8003144:	d801      	bhi.n	800314a <HAL_GPIO_Init+0x13a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	e001      	b.n	800314e <HAL_GPIO_Init+0x13e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3304      	adds	r3, #4
 800314e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2bff      	cmp	r3, #255	; 0xff
 8003154:	d802      	bhi.n	800315c <HAL_GPIO_Init+0x14c>
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	e002      	b.n	8003162 <HAL_GPIO_Init+0x152>
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	3b08      	subs	r3, #8
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	210f      	movs	r1, #15
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	401a      	ands	r2, r3
 8003174:	6a39      	ldr	r1, [r7, #32]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	431a      	orrs	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80b1 	beq.w	80032f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003190:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <HAL_GPIO_Init+0x2b8>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	4a4c      	ldr	r2, [pc, #304]	; (80032c8 <HAL_GPIO_Init+0x2b8>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6193      	str	r3, [r2, #24]
 800319c:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_GPIO_Init+0x2b8>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031a8:	4a48      	ldr	r2, [pc, #288]	; (80032cc <HAL_GPIO_Init+0x2bc>)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3302      	adds	r3, #2
 80031b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	220f      	movs	r2, #15
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <HAL_GPIO_Init+0x2c0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_GPIO_Init+0x1ec>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3f      	ldr	r2, [pc, #252]	; (80032d4 <HAL_GPIO_Init+0x2c4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00d      	beq.n	80031f8 <HAL_GPIO_Init+0x1e8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3e      	ldr	r2, [pc, #248]	; (80032d8 <HAL_GPIO_Init+0x2c8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <HAL_GPIO_Init+0x1e4>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3d      	ldr	r2, [pc, #244]	; (80032dc <HAL_GPIO_Init+0x2cc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_GPIO_Init+0x1e0>
 80031ec:	2303      	movs	r3, #3
 80031ee:	e006      	b.n	80031fe <HAL_GPIO_Init+0x1ee>
 80031f0:	2304      	movs	r3, #4
 80031f2:	e004      	b.n	80031fe <HAL_GPIO_Init+0x1ee>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e002      	b.n	80031fe <HAL_GPIO_Init+0x1ee>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_GPIO_Init+0x1ee>
 80031fc:	2300      	movs	r3, #0
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	f002 0203 	and.w	r2, r2, #3
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	4093      	lsls	r3, r2
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800320e:	492f      	ldr	r1, [pc, #188]	; (80032cc <HAL_GPIO_Init+0x2bc>)
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	3302      	adds	r3, #2
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	492c      	ldr	r1, [pc, #176]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	43db      	mvns	r3, r3
 800323e:	4928      	ldr	r1, [pc, #160]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 8003240:	4013      	ands	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4922      	ldr	r1, [pc, #136]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	43db      	mvns	r3, r3
 8003266:	491e      	ldr	r1, [pc, #120]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 8003268:	4013      	ands	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d006      	beq.n	8003286 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	4918      	ldr	r1, [pc, #96]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	43db      	mvns	r3, r3
 800328e:	4914      	ldr	r1, [pc, #80]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 8003290:	4013      	ands	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d021      	beq.n	80032e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	490e      	ldr	r1, [pc, #56]	; (80032e0 <HAL_GPIO_Init+0x2d0>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60cb      	str	r3, [r1, #12]
 80032ac:	e021      	b.n	80032f2 <HAL_GPIO_Init+0x2e2>
 80032ae:	bf00      	nop
 80032b0:	10320000 	.word	0x10320000
 80032b4:	10310000 	.word	0x10310000
 80032b8:	10220000 	.word	0x10220000
 80032bc:	10210000 	.word	0x10210000
 80032c0:	10120000 	.word	0x10120000
 80032c4:	10110000 	.word	0x10110000
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40010800 	.word	0x40010800
 80032d4:	40010c00 	.word	0x40010c00
 80032d8:	40011000 	.word	0x40011000
 80032dc:	40011400 	.word	0x40011400
 80032e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_GPIO_Init+0x304>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	4909      	ldr	r1, [pc, #36]	; (8003314 <HAL_GPIO_Init+0x304>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	3301      	adds	r3, #1
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	f47f ae8e 	bne.w	8003024 <HAL_GPIO_Init+0x14>
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	372c      	adds	r7, #44	; 0x2c
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	40010400 	.word	0x40010400

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
 8003324:	4613      	mov	r3, r2
 8003326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003334:	e003      	b.n	800333e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43d9      	mvns	r1, r3
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	400b      	ands	r3, r1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	611a      	str	r2, [r3, #16]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
	...

0800337c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e12b      	b.n	80035e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff f842 	bl	800242c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033e0:	f001 fba0 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 80033e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4a81      	ldr	r2, [pc, #516]	; (80035f0 <HAL_I2C_Init+0x274>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d807      	bhi.n	8003400 <HAL_I2C_Init+0x84>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_I2C_Init+0x278>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bf94      	ite	ls
 80033f8:	2301      	movls	r3, #1
 80033fa:	2300      	movhi	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e006      	b.n	800340e <HAL_I2C_Init+0x92>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a7d      	ldr	r2, [pc, #500]	; (80035f8 <HAL_I2C_Init+0x27c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	bf94      	ite	ls
 8003408:	2301      	movls	r3, #1
 800340a:	2300      	movhi	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0e7      	b.n	80035e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a78      	ldr	r2, [pc, #480]	; (80035fc <HAL_I2C_Init+0x280>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0c9b      	lsrs	r3, r3, #18
 8003420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <HAL_I2C_Init+0x274>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d802      	bhi.n	8003450 <HAL_I2C_Init+0xd4>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3301      	adds	r3, #1
 800344e:	e009      	b.n	8003464 <HAL_I2C_Init+0xe8>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	4a69      	ldr	r2, [pc, #420]	; (8003600 <HAL_I2C_Init+0x284>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	3301      	adds	r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	495c      	ldr	r1, [pc, #368]	; (80035f0 <HAL_I2C_Init+0x274>)
 8003480:	428b      	cmp	r3, r1
 8003482:	d819      	bhi.n	80034b8 <HAL_I2C_Init+0x13c>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1e59      	subs	r1, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003492:	1c59      	adds	r1, r3, #1
 8003494:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003498:	400b      	ands	r3, r1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_I2C_Init+0x138>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1e59      	subs	r1, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b2:	e051      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 80034b4:	2304      	movs	r3, #4
 80034b6:	e04f      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d111      	bne.n	80034e4 <HAL_I2C_Init+0x168>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	440b      	add	r3, r1
 80034ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e012      	b.n	800350a <HAL_I2C_Init+0x18e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Init+0x196>
 800350e:	2301      	movs	r3, #1
 8003510:	e022      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <HAL_I2C_Init+0x1bc>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e58      	subs	r0, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	440b      	add	r3, r1
 8003528:	fbb0 f3f3 	udiv	r3, r0, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	e00f      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	0099      	lsls	r1, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	fbb0 f3f3 	udiv	r3, r0, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	6809      	ldr	r1, [r1, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6911      	ldr	r1, [r2, #16]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68d2      	ldr	r2, [r2, #12]
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	000186a0 	.word	0x000186a0
 80035f4:	001e847f 	.word	0x001e847f
 80035f8:	003d08ff 	.word	0x003d08ff
 80035fc:	431bde83 	.word	0x431bde83
 8003600:	10624dd3 	.word	0x10624dd3

08003604 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	4608      	mov	r0, r1
 800360e:	4611      	mov	r1, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4603      	mov	r3, r0
 8003614:	817b      	strh	r3, [r7, #10]
 8003616:	460b      	mov	r3, r1
 8003618:	813b      	strh	r3, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800361e:	f7ff fb2f 	bl	8002c80 <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b20      	cmp	r3, #32
 800362e:	f040 80d9 	bne.w	80037e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2319      	movs	r3, #25
 8003638:	2201      	movs	r2, #1
 800363a:	496d      	ldr	r1, [pc, #436]	; (80037f0 <HAL_I2C_Mem_Write+0x1ec>)
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fcc1 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	e0cc      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_I2C_Mem_Write+0x56>
 8003656:	2302      	movs	r3, #2
 8003658:	e0c5      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d007      	beq.n	8003680 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800368e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2221      	movs	r2, #33	; 0x21
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a4d      	ldr	r2, [pc, #308]	; (80037f4 <HAL_I2C_Mem_Write+0x1f0>)
 80036c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c2:	88f8      	ldrh	r0, [r7, #6]
 80036c4:	893a      	ldrh	r2, [r7, #8]
 80036c6:	8979      	ldrh	r1, [r7, #10]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4603      	mov	r3, r0
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 faf8 	bl	8003cc8 <I2C_RequestMemoryWrite>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d052      	beq.n	8003784 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e081      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fd42 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d107      	bne.n	800370a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06b      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d11b      	bne.n	8003784 <HAL_I2C_Mem_Write+0x180>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d017      	beq.n	8003784 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1aa      	bne.n	80036e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fd2e 	bl	80041f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d107      	bne.n	80037b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e016      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	00100002 	.word	0x00100002
 80037f4:	ffff0000 	.word	0xffff0000

080037f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08c      	sub	sp, #48	; 0x30
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	460b      	mov	r3, r1
 800380c:	813b      	strh	r3, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003816:	f7ff fa33 	bl	8002c80 <HAL_GetTick>
 800381a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b20      	cmp	r3, #32
 8003826:	f040 8244 	bne.w	8003cb2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2319      	movs	r3, #25
 8003830:	2201      	movs	r2, #1
 8003832:	4982      	ldr	r1, [pc, #520]	; (8003a3c <HAL_I2C_Mem_Read+0x244>)
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fbc5 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003840:	2302      	movs	r3, #2
 8003842:	e237      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_I2C_Mem_Read+0x5a>
 800384e:	2302      	movs	r3, #2
 8003850:	e230      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d007      	beq.n	8003878 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003886:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2222      	movs	r2, #34	; 0x22
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2240      	movs	r2, #64	; 0x40
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4a62      	ldr	r2, [pc, #392]	; (8003a40 <HAL_I2C_Mem_Read+0x248>)
 80038b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ba:	88f8      	ldrh	r0, [r7, #6]
 80038bc:	893a      	ldrh	r2, [r7, #8]
 80038be:	8979      	ldrh	r1, [r7, #10]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4603      	mov	r3, r0
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fa92 	bl	8003df4 <I2C_RequestMemoryRead>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1ec      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d113      	bne.n	800390a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e1c0      	b.n	8003c8c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	2b01      	cmp	r3, #1
 8003910:	d11e      	bne.n	8003950 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003920:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003922:	b672      	cpsid	i
}
 8003924:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800394c:	b662      	cpsie	i
}
 800394e:	e035      	b.n	80039bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	2b02      	cmp	r3, #2
 8003956:	d11e      	bne.n	8003996 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003966:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003968:	b672      	cpsid	i
}
 800396a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003990:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003992:	b662      	cpsie	i
}
 8003994:	e012      	b.n	80039bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039bc:	e166      	b.n	8003c8c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	f200 811f 	bhi.w	8003c06 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d123      	bne.n	8003a18 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fc4d 	bl	8004274 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e167      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a16:	e139      	b.n	8003c8c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d152      	bne.n	8003ac6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	2200      	movs	r2, #0
 8003a28:	4906      	ldr	r1, [pc, #24]	; (8003a44 <HAL_I2C_Mem_Read+0x24c>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 faca 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e13c      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
 8003a3a:	bf00      	nop
 8003a3c:	00100002 	.word	0x00100002
 8003a40:	ffff0000 	.word	0xffff0000
 8003a44:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a48:	b672      	cpsid	i
}
 8003a4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a8e:	b662      	cpsie	i
}
 8003a90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ac4:	e0e2      	b.n	8003c8c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	2200      	movs	r2, #0
 8003ace:	497b      	ldr	r1, [pc, #492]	; (8003cbc <HAL_I2C_Mem_Read+0x4c4>)
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fa77 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0e9      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003af0:	b672      	cpsid	i
}
 8003af2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b26:	4b66      	ldr	r3, [pc, #408]	; (8003cc0 <HAL_I2C_Mem_Read+0x4c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	08db      	lsrs	r3, r3, #3
 8003b2c:	4a65      	ldr	r2, [pc, #404]	; (8003cc4 <HAL_I2C_Mem_Read+0x4cc>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0a1a      	lsrs	r2, r3, #8
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00da      	lsls	r2, r3, #3
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d118      	bne.n	8003b7e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b6e:	b662      	cpsie	i
}
 8003b70:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e09a      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d1d9      	bne.n	8003b40 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bce:	b662      	cpsie	i
}
 8003bd0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c04:	e042      	b.n	8003c8c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fb32 	bl	8004274 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e04c      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d118      	bne.n	8003c8c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f ae94 	bne.w	80039be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
  }
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3728      	adds	r7, #40	; 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	00010004 	.word	0x00010004
 8003cc0:	200002d0 	.word	0x200002d0
 8003cc4:	14f8b589 	.word	0x14f8b589

08003cc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	813b      	strh	r3, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f960 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d18:	d103      	bne.n	8003d22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e05f      	b.n	8003de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d26:	897b      	ldrh	r3, [r7, #10]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	6a3a      	ldr	r2, [r7, #32]
 8003d3a:	492d      	ldr	r1, [pc, #180]	; (8003df0 <I2C_RequestMemoryWrite+0x128>)
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f998 	bl	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e04c      	b.n	8003de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d64:	6a39      	ldr	r1, [r7, #32]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fa02 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00d      	beq.n	8003d8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d107      	bne.n	8003d8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e02b      	b.n	8003de6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d94:	893b      	ldrh	r3, [r7, #8]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	611a      	str	r2, [r3, #16]
 8003d9e:	e021      	b.n	8003de4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	6a39      	ldr	r1, [r7, #32]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f9dc 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d107      	bne.n	8003dd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e005      	b.n	8003de6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dda:	893b      	ldrh	r3, [r7, #8]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	00010002 	.word	0x00010002

08003df4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	460b      	mov	r3, r1
 8003e08:	813b      	strh	r3, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f8c2 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e54:	d103      	bne.n	8003e5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0aa      	b.n	8003fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	4952      	ldr	r1, [pc, #328]	; (8003fc0 <I2C_RequestMemoryRead+0x1cc>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f8fa 	bl	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e097      	b.n	8003fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	6a39      	ldr	r1, [r7, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f964 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d107      	bne.n	8003ec6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e076      	b.n	8003fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed0:	893b      	ldrh	r3, [r7, #8]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	e021      	b.n	8003f20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eec:	6a39      	ldr	r1, [r7, #32]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f93e 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d107      	bne.n	8003f12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e050      	b.n	8003fb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f16:	893b      	ldrh	r3, [r7, #8]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	6a39      	ldr	r1, [r7, #32]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f923 	bl	8004170 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d107      	bne.n	8003f48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e035      	b.n	8003fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f82b 	bl	8003fc4 <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f82:	d103      	bne.n	8003f8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e013      	b.n	8003fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f90:	897b      	ldrh	r3, [r7, #10]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	6a3a      	ldr	r2, [r7, #32]
 8003fa4:	4906      	ldr	r1, [pc, #24]	; (8003fc0 <I2C_RequestMemoryRead+0x1cc>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f863 	bl	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	00010002 	.word	0x00010002

08003fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd4:	e025      	b.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d021      	beq.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fe fe4f 	bl	8002c80 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e023      	b.n	800406a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10d      	bne.n	8004048 <I2C_WaitOnFlagUntilTimeout+0x84>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	e00c      	b.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	43da      	mvns	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	d0b6      	beq.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004080:	e051      	b.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004090:	d123      	bne.n	80040da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e046      	b.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d021      	beq.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fe fdcd 	bl	8002c80 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e020      	b.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10c      	bne.n	800414a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e00b      	b.n	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	43da      	mvns	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d18d      	bne.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800417c:	e02d      	b.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f8ce 	bl	8004320 <I2C_IsAcknowledgeFailed>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e02d      	b.n	80041ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d021      	beq.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fe fd73 	bl	8002c80 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d116      	bne.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e007      	b.n	80041ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d1ca      	bne.n	800417e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041fe:	e02d      	b.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f88d 	bl	8004320 <I2C_IsAcknowledgeFailed>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e02d      	b.n	800426c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d021      	beq.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004218:	f7fe fd32 	bl	8002c80 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f043 0220 	orr.w	r2, r3, #32
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e007      	b.n	800426c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b04      	cmp	r3, #4
 8004268:	d1ca      	bne.n	8004200 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004280:	e042      	b.n	8004308 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d119      	bne.n	80042c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0210 	mvn.w	r2, #16
 8004298:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e029      	b.n	8004318 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c4:	f7fe fcdc 	bl	8002c80 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e007      	b.n	8004318 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d1b5      	bne.n	8004282 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004336:	d11b      	bne.n	8004370 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004340:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f043 0204 	orr.w	r2, r3, #4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e26c      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8087 	beq.w	80044aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800439c:	4b92      	ldr	r3, [pc, #584]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d00c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043a8:	4b8f      	ldr	r3, [pc, #572]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d112      	bne.n	80043da <HAL_RCC_OscConfig+0x5e>
 80043b4:	4b8c      	ldr	r3, [pc, #560]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d10b      	bne.n	80043da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c2:	4b89      	ldr	r3, [pc, #548]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d06c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x12c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d168      	bne.n	80044a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e246      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x76>
 80043e4:	4b80      	ldr	r3, [pc, #512]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a7f      	ldr	r2, [pc, #508]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e02e      	b.n	8004450 <HAL_RCC_OscConfig+0xd4>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x98>
 80043fa:	4b7b      	ldr	r3, [pc, #492]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7a      	ldr	r2, [pc, #488]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b78      	ldr	r3, [pc, #480]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a77      	ldr	r2, [pc, #476]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800440c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e01d      	b.n	8004450 <HAL_RCC_OscConfig+0xd4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0xbc>
 800441e:	4b72      	ldr	r3, [pc, #456]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a71      	ldr	r2, [pc, #452]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b6f      	ldr	r3, [pc, #444]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6e      	ldr	r2, [pc, #440]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0xd4>
 8004438:	4b6b      	ldr	r3, [pc, #428]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6a      	ldr	r2, [pc, #424]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800443e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a67      	ldr	r2, [pc, #412]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800444a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe fc12 	bl	8002c80 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe fc0e 	bl	8002c80 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1fa      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b5d      	ldr	r3, [pc, #372]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0xe4>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fe fbfe 	bl	8002c80 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7fe fbfa 	bl	8002c80 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1e6      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	4b53      	ldr	r3, [pc, #332]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x10c>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d063      	beq.n	800457e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b6:	4b4c      	ldr	r3, [pc, #304]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044c2:	4b49      	ldr	r3, [pc, #292]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d11c      	bne.n	8004508 <HAL_RCC_OscConfig+0x18c>
 80044ce:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d116      	bne.n	8004508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_RCC_OscConfig+0x176>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e1ba      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f2:	4b3d      	ldr	r3, [pc, #244]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4939      	ldr	r1, [pc, #228]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	e03a      	b.n	800457e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d020      	beq.n	8004552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <HAL_RCC_OscConfig+0x270>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe fbb3 	bl	8002c80 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe fbaf 	bl	8002c80 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e19b      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004530:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4927      	ldr	r1, [pc, #156]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	600b      	str	r3, [r1, #0]
 8004550:	e015      	b.n	800457e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <HAL_RCC_OscConfig+0x270>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe fb92 	bl	8002c80 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004560:	f7fe fb8e 	bl	8002c80 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e17a      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d03a      	beq.n	8004600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d019      	beq.n	80045c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <HAL_RCC_OscConfig+0x274>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004598:	f7fe fb72 	bl	8002c80 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a0:	f7fe fb6e 	bl	8002c80 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e15a      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045be:	2001      	movs	r0, #1
 80045c0:	f000 fad8 	bl	8004b74 <RCC_Delay>
 80045c4:	e01c      	b.n	8004600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_RCC_OscConfig+0x274>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045cc:	f7fe fb58 	bl	8002c80 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d2:	e00f      	b.n	80045f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d4:	f7fe fb54 	bl	8002c80 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d908      	bls.n	80045f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e140      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
 80045ec:	42420000 	.word	0x42420000
 80045f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b9e      	ldr	r3, [pc, #632]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e9      	bne.n	80045d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a6 	beq.w	800475a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b97      	ldr	r3, [pc, #604]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10d      	bne.n	800463a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	4b94      	ldr	r3, [pc, #592]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	4a93      	ldr	r2, [pc, #588]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	61d3      	str	r3, [r2, #28]
 800462a:	4b91      	ldr	r3, [pc, #580]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b8e      	ldr	r3, [pc, #568]	; (8004874 <HAL_RCC_OscConfig+0x4f8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d118      	bne.n	8004678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004646:	4b8b      	ldr	r3, [pc, #556]	; (8004874 <HAL_RCC_OscConfig+0x4f8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a8a      	ldr	r2, [pc, #552]	; (8004874 <HAL_RCC_OscConfig+0x4f8>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004652:	f7fe fb15 	bl	8002c80 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465a:	f7fe fb11 	bl	8002c80 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b64      	cmp	r3, #100	; 0x64
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0fd      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	4b81      	ldr	r3, [pc, #516]	; (8004874 <HAL_RCC_OscConfig+0x4f8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x312>
 8004680:	4b7b      	ldr	r3, [pc, #492]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	4a7a      	ldr	r2, [pc, #488]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6213      	str	r3, [r2, #32]
 800468c:	e02d      	b.n	80046ea <HAL_RCC_OscConfig+0x36e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x334>
 8004696:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4a75      	ldr	r2, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6213      	str	r3, [r2, #32]
 80046a2:	4b73      	ldr	r3, [pc, #460]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	4a72      	ldr	r2, [pc, #456]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	6213      	str	r3, [r2, #32]
 80046ae:	e01c      	b.n	80046ea <HAL_RCC_OscConfig+0x36e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCC_OscConfig+0x356>
 80046b8:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	4a6c      	ldr	r2, [pc, #432]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	6213      	str	r3, [r2, #32]
 80046c4:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4a69      	ldr	r2, [pc, #420]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6213      	str	r3, [r2, #32]
 80046d0:	e00b      	b.n	80046ea <HAL_RCC_OscConfig+0x36e>
 80046d2:	4b67      	ldr	r3, [pc, #412]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	4a66      	ldr	r2, [pc, #408]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6213      	str	r3, [r2, #32]
 80046de:	4b64      	ldr	r3, [pc, #400]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4a63      	ldr	r2, [pc, #396]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046e4:	f023 0304 	bic.w	r3, r3, #4
 80046e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d015      	beq.n	800471e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fe fac5 	bl	8002c80 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fe fac1 	bl	8002c80 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0ab      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004710:	4b57      	ldr	r3, [pc, #348]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ee      	beq.n	80046fa <HAL_RCC_OscConfig+0x37e>
 800471c:	e014      	b.n	8004748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471e:	f7fe faaf 	bl	8002c80 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004724:	e00a      	b.n	800473c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fe faab 	bl	8002c80 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e095      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473c:	4b4c      	ldr	r3, [pc, #304]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ee      	bne.n	8004726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474e:	4b48      	ldr	r3, [pc, #288]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	4a47      	ldr	r2, [pc, #284]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8081 	beq.w	8004866 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004764:	4b42      	ldr	r3, [pc, #264]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d061      	beq.n	8004834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d146      	bne.n	8004806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <HAL_RCC_OscConfig+0x4fc>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fe fa7f 	bl	8002c80 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004786:	f7fe fa7b 	bl	8002c80 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e067      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ac:	d108      	bne.n	80047c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ae:	4b30      	ldr	r3, [pc, #192]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	492d      	ldr	r1, [pc, #180]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a19      	ldr	r1, [r3, #32]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	430b      	orrs	r3, r1
 80047d2:	4927      	ldr	r1, [pc, #156]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <HAL_RCC_OscConfig+0x4fc>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fe fa4f 	bl	8002c80 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fe fa4b 	bl	8002c80 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e037      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x46a>
 8004804:	e02f      	b.n	8004866 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004806:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCC_OscConfig+0x4fc>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fe fa38 	bl	8002c80 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fe fa34 	bl	8002c80 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e020      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x498>
 8004832:	e018      	b.n	8004866 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e013      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	429a      	cmp	r2, r3
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	40007000 	.word	0x40007000
 8004878:	42420060 	.word	0x42420060

0800487c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0d0      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d910      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b67      	ldr	r3, [pc, #412]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 0207 	bic.w	r2, r3, #7
 80048a6:	4965      	ldr	r1, [pc, #404]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b63      	ldr	r3, [pc, #396]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0b8      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d020      	beq.n	800490e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d8:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a58      	ldr	r2, [pc, #352]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f0:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4a52      	ldr	r2, [pc, #328]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048fc:	4b50      	ldr	r3, [pc, #320]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	494d      	ldr	r1, [pc, #308]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d040      	beq.n	800499c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d115      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e07f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d107      	bne.n	800494a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493a:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e073      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494a:	4b3d      	ldr	r3, [pc, #244]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06b      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800495a:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f023 0203 	bic.w	r2, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	4936      	ldr	r1, [pc, #216]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800496c:	f7fe f988 	bl	8002c80 <HAL_GetTick>
 8004970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	e00a      	b.n	800498a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004974:	f7fe f984 	bl	8002c80 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e053      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 020c 	and.w	r2, r3, #12
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	429a      	cmp	r2, r3
 800499a:	d1eb      	bne.n	8004974 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800499c:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d210      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 0207 	bic.w	r2, r3, #7
 80049b2:	4922      	ldr	r1, [pc, #136]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e032      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4916      	ldr	r1, [pc, #88]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	490e      	ldr	r1, [pc, #56]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a0a:	f000 f821 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	490a      	ldr	r1, [pc, #40]	; (8004a44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	5ccb      	ldrb	r3, [r1, r3]
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <HAL_RCC_ClockConfig+0x1cc>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <HAL_RCC_ClockConfig+0x1d0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe f8e6 	bl	8002bfc <HAL_InitTick>

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40022000 	.word	0x40022000
 8004a40:	40021000 	.word	0x40021000
 8004a44:	08006958 	.word	0x08006958
 8004a48:	200002d0 	.word	0x200002d0
 8004a4c:	200002d4 	.word	0x200002d4

08004a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a50:	b490      	push	{r4, r7}
 8004a52:	b08a      	sub	sp, #40	; 0x28
 8004a54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a58:	1d3c      	adds	r4, r7, #4
 8004a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a60:	f240 2301 	movw	r3, #513	; 0x201
 8004a64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a7a:	4b22      	ldr	r3, [pc, #136]	; (8004b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d002      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x40>
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x46>
 8004a8e:	e02d      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a92:	623b      	str	r3, [r7, #32]
      break;
 8004a94:	e02d      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	0c9b      	lsrs	r3, r3, #18
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004aa8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	0c5b      	lsrs	r3, r3, #17
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ac8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4a0e      	ldr	r2, [pc, #56]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ace:	fb02 f203 	mul.w	r2, r2, r3
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ada:	e004      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	4a0b      	ldr	r2, [pc, #44]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	623b      	str	r3, [r7, #32]
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aee:	623b      	str	r3, [r7, #32]
      break;
 8004af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004af2:	6a3b      	ldr	r3, [r7, #32]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3728      	adds	r7, #40	; 0x28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc90      	pop	{r4, r7}
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	08006948 	.word	0x08006948
 8004b04:	40021000 	.word	0x40021000
 8004b08:	007a1200 	.word	0x007a1200
 8004b0c:	003d0900 	.word	0x003d0900

08004b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b14:	4b02      	ldr	r3, [pc, #8]	; (8004b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr
 8004b20:	200002d0 	.word	0x200002d0

08004b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b28:	f7ff fff2 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40021000 	.word	0x40021000
 8004b48:	08006968 	.word	0x08006968

08004b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b50:	f7ff ffde 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	0adb      	lsrs	r3, r3, #11
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4903      	ldr	r1, [pc, #12]	; (8004b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b62:	5ccb      	ldrb	r3, [r1, r3]
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	08006968 	.word	0x08006968

08004b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <RCC_Delay+0x34>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <RCC_Delay+0x38>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0a5b      	lsrs	r3, r3, #9
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b90:	bf00      	nop
  }
  while (Delay --);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1e5a      	subs	r2, r3, #1
 8004b96:	60fa      	str	r2, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f9      	bne.n	8004b90 <RCC_Delay+0x1c>
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	200002d0 	.word	0x200002d0
 8004bac:	10624dd3 	.word	0x10624dd3

08004bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e041      	b.n	8004c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fd ff30 	bl	8002a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f000 fc66 	bl	80054c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d001      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e03a      	b.n	8004cde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_TIM_Base_Start_IT+0x98>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x58>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x58>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <HAL_TIM_Base_Start_IT+0x9c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x58>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800

08004cf4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6a1a      	ldr	r2, [r3, #32]
 8004d12:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10f      	bne.n	8004d3c <HAL_TIM_Base_Stop_IT+0x48>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6a1a      	ldr	r2, [r3, #32]
 8004d22:	f240 4344 	movw	r3, #1092	; 0x444
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_Base_Stop_IT+0x48>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e093      	b.n	8004e8c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fd fe23 	bl	80029c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d94:	f023 0307 	bic.w	r3, r3, #7
 8004d98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f000 fb8b 	bl	80054c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	4313      	orrs	r3, r2
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004df0:	f023 030c 	bic.w	r3, r3, #12
 8004df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	011a      	lsls	r2, r3, #4
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	031b      	lsls	r3, r3, #12
 8004e20:	4313      	orrs	r3, r2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ebc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d110      	bne.n	8004ee6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d102      	bne.n	8004ed0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eca:	7b7b      	ldrb	r3, [r7, #13]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e069      	b.n	8004fa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee4:	e031      	b.n	8004f4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d110      	bne.n	8004f0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eec:	7bbb      	ldrb	r3, [r7, #14]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d102      	bne.n	8004ef8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ef2:	7b3b      	ldrb	r3, [r7, #12]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d001      	beq.n	8004efc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e055      	b.n	8004fa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f0c:	e01d      	b.n	8004f4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d108      	bne.n	8004f26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f14:	7bbb      	ldrb	r3, [r7, #14]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d105      	bne.n	8004f26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f1a:	7b7b      	ldrb	r3, [r7, #13]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d102      	bne.n	8004f26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f20:	7b3b      	ldrb	r3, [r7, #12]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d001      	beq.n	8004f2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e03e      	b.n	8004fa8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_TIM_Encoder_Start+0xc4>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d008      	beq.n	8004f68 <HAL_TIM_Encoder_Start+0xd4>
 8004f56:	e00f      	b.n	8004f78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fba5 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 8004f66:	e016      	b.n	8004f96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	2104      	movs	r1, #4
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fb9d 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 8004f76:	e00e      	b.n	8004f96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fb95 	bl	80056b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	2104      	movs	r1, #4
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fb8e 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 8004f94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0201 	orr.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_TIM_Encoder_Stop+0x18>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d008      	beq.n	8004fd8 <HAL_TIM_Encoder_Stop+0x28>
 8004fc6:	e00f      	b.n	8004fe8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fb6d 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 8004fd6:	e016      	b.n	8005006 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2104      	movs	r1, #4
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fb65 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 8004fe6:	e00e      	b.n	8005006 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fb5d 	bl	80056b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2104      	movs	r1, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fb56 	bl	80056b0 <TIM_CCxChannelCmd>
      break;
 8005004:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <HAL_TIM_Encoder_Stop+0x86>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	f240 4344 	movw	r3, #1092	; 0x444
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d107      	bne.n	8005036 <HAL_TIM_Encoder_Stop+0x86>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_TIM_Encoder_Stop+0x92>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b04      	cmp	r3, #4
 8005040:	d138      	bne.n	80050b4 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <HAL_TIM_Encoder_Stop+0xa2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005050:	e013      	b.n	800507a <HAL_TIM_Encoder_Stop+0xca>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d104      	bne.n	8005062 <HAL_TIM_Encoder_Stop+0xb2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	e00b      	b.n	800507a <HAL_TIM_Encoder_Stop+0xca>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d104      	bne.n	8005072 <HAL_TIM_Encoder_Stop+0xc2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005070:	e003      	b.n	800507a <HAL_TIM_Encoder_Stop+0xca>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_TIM_Encoder_Stop+0xda>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005088:	e024      	b.n	80050d4 <HAL_TIM_Encoder_Stop+0x124>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d104      	bne.n	800509a <HAL_TIM_Encoder_Stop+0xea>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005098:	e01c      	b.n	80050d4 <HAL_TIM_Encoder_Stop+0x124>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d104      	bne.n	80050aa <HAL_TIM_Encoder_Stop+0xfa>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a8:	e014      	b.n	80050d4 <HAL_TIM_Encoder_Stop+0x124>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b2:	e00f      	b.n	80050d4 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d122      	bne.n	800513a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d11b      	bne.n	800513a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f06f 0202 	mvn.w	r2, #2
 800510a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f9b1 	bl	8005488 <HAL_TIM_IC_CaptureCallback>
 8005126:	e005      	b.n	8005134 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f9a4 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9b3 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d122      	bne.n	800518e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d11b      	bne.n	800518e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f06f 0204 	mvn.w	r2, #4
 800515e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f987 	bl	8005488 <HAL_TIM_IC_CaptureCallback>
 800517a:	e005      	b.n	8005188 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f97a 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f989 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b08      	cmp	r3, #8
 800519a:	d122      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d11b      	bne.n	80051e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f06f 0208 	mvn.w	r2, #8
 80051b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2204      	movs	r2, #4
 80051b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f95d 	bl	8005488 <HAL_TIM_IC_CaptureCallback>
 80051ce:	e005      	b.n	80051dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f950 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f95f 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d122      	bne.n	8005236 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d11b      	bne.n	8005236 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f06f 0210 	mvn.w	r2, #16
 8005206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2208      	movs	r2, #8
 800520c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f933 	bl	8005488 <HAL_TIM_IC_CaptureCallback>
 8005222:	e005      	b.n	8005230 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f926 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f935 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d10e      	bne.n	8005262 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d107      	bne.n	8005262 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f06f 0201 	mvn.w	r2, #1
 800525a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fd fa05 	bl	800266c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d10e      	bne.n	800528e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b80      	cmp	r3, #128	; 0x80
 800527c:	d107      	bne.n	800528e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fa9c 	bl	80057c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d10e      	bne.n	80052ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	d107      	bne.n	80052ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8f9 	bl	80054ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d10e      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0220 	mvn.w	r2, #32
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fa67 	bl	80057b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_TIM_ConfigClockSource+0x18>
 8005302:	2302      	movs	r3, #2
 8005304:	e0b3      	b.n	800546e <HAL_TIM_ConfigClockSource+0x180>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005324:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800532c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533e:	d03e      	beq.n	80053be <HAL_TIM_ConfigClockSource+0xd0>
 8005340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005344:	f200 8087 	bhi.w	8005456 <HAL_TIM_ConfigClockSource+0x168>
 8005348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534c:	f000 8085 	beq.w	800545a <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005354:	d87f      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x168>
 8005356:	2b70      	cmp	r3, #112	; 0x70
 8005358:	d01a      	beq.n	8005390 <HAL_TIM_ConfigClockSource+0xa2>
 800535a:	2b70      	cmp	r3, #112	; 0x70
 800535c:	d87b      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x168>
 800535e:	2b60      	cmp	r3, #96	; 0x60
 8005360:	d050      	beq.n	8005404 <HAL_TIM_ConfigClockSource+0x116>
 8005362:	2b60      	cmp	r3, #96	; 0x60
 8005364:	d877      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x168>
 8005366:	2b50      	cmp	r3, #80	; 0x50
 8005368:	d03c      	beq.n	80053e4 <HAL_TIM_ConfigClockSource+0xf6>
 800536a:	2b50      	cmp	r3, #80	; 0x50
 800536c:	d873      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x168>
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d058      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0x136>
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d86f      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x168>
 8005376:	2b30      	cmp	r3, #48	; 0x30
 8005378:	d064      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x156>
 800537a:	2b30      	cmp	r3, #48	; 0x30
 800537c:	d86b      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x168>
 800537e:	2b20      	cmp	r3, #32
 8005380:	d060      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x156>
 8005382:	2b20      	cmp	r3, #32
 8005384:	d867      	bhi.n	8005456 <HAL_TIM_ConfigClockSource+0x168>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d05c      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x156>
 800538a:	2b10      	cmp	r3, #16
 800538c:	d05a      	beq.n	8005444 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800538e:	e062      	b.n	8005456 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6899      	ldr	r1, [r3, #8]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f000 f967 	bl	8005672 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	609a      	str	r2, [r3, #8]
      break;
 80053bc:	e04e      	b.n	800545c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f000 f950 	bl	8005672 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053e0:	609a      	str	r2, [r3, #8]
      break;
 80053e2:	e03b      	b.n	800545c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6859      	ldr	r1, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	461a      	mov	r2, r3
 80053f2:	f000 f8c7 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2150      	movs	r1, #80	; 0x50
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f91e 	bl	800563e <TIM_ITRx_SetConfig>
      break;
 8005402:	e02b      	b.n	800545c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6859      	ldr	r1, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	461a      	mov	r2, r3
 8005412:	f000 f8e5 	bl	80055e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2160      	movs	r1, #96	; 0x60
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f90e 	bl	800563e <TIM_ITRx_SetConfig>
      break;
 8005422:	e01b      	b.n	800545c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	461a      	mov	r2, r3
 8005432:	f000 f8a7 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f8fe 	bl	800563e <TIM_ITRx_SetConfig>
      break;
 8005442:	e00b      	b.n	800545c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 f8f5 	bl	800563e <TIM_ITRx_SetConfig>
        break;
 8005454:	e002      	b.n	800545c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800545a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr
	...

080054c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a29      	ldr	r2, [pc, #164]	; (8005578 <TIM_Base_SetConfig+0xb8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_Base_SetConfig+0x30>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0x30>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a26      	ldr	r2, [pc, #152]	; (800557c <TIM_Base_SetConfig+0xbc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0x30>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a25      	ldr	r2, [pc, #148]	; (8005580 <TIM_Base_SetConfig+0xc0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <TIM_Base_SetConfig+0xb8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_Base_SetConfig+0x62>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d007      	beq.n	8005522 <TIM_Base_SetConfig+0x62>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a19      	ldr	r2, [pc, #100]	; (800557c <TIM_Base_SetConfig+0xbc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_Base_SetConfig+0x62>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <TIM_Base_SetConfig+0xc0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a07      	ldr	r2, [pc, #28]	; (8005578 <TIM_Base_SetConfig+0xb8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	615a      	str	r2, [r3, #20]
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 030a 	bic.w	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f023 0210 	bic.w	r2, r3, #16
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	031b      	lsls	r3, r3, #12
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800561c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	621a      	str	r2, [r3, #32]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	f043 0307 	orr.w	r3, r3, #7
 8005660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	609a      	str	r2, [r3, #8]
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr

08005672 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800568c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	021a      	lsls	r2, r3, #8
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	431a      	orrs	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	4313      	orrs	r3, r2
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	609a      	str	r2, [r3, #8]
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	2201      	movs	r2, #1
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	401a      	ands	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	fa01 f303 	lsl.w	r3, r1, r3
 80056e8:	431a      	orrs	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e046      	b.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d009      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10c      	bne.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4313      	orrs	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800

080057b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e03f      	b.n	800586a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fd f96c 	bl	8002adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2224      	movs	r2, #36	; 0x24
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800581a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fc7d 	bl	800611c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b08a      	sub	sp, #40	; 0x28
 8005876:	af02      	add	r7, sp, #8
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	4613      	mov	r3, r2
 8005880:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b20      	cmp	r3, #32
 8005890:	d17c      	bne.n	800598c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_UART_Transmit+0x2c>
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e075      	b.n	800598e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_UART_Transmit+0x3e>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e06e      	b.n	800598e <HAL_UART_Transmit+0x11c>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2221      	movs	r2, #33	; 0x21
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058c6:	f7fd f9db 	bl	8002c80 <HAL_GetTick>
 80058ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	88fa      	ldrh	r2, [r7, #6]
 80058d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	88fa      	ldrh	r2, [r7, #6]
 80058d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e0:	d108      	bne.n	80058f4 <HAL_UART_Transmit+0x82>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e003      	b.n	80058fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005904:	e02a      	b.n	800595c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	2180      	movs	r1, #128	; 0x80
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fa2f 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e036      	b.n	800598e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	3302      	adds	r3, #2
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	e007      	b.n	800594e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	781a      	ldrb	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1cf      	bne.n	8005906 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2200      	movs	r2, #0
 800596e:	2140      	movs	r1, #64	; 0x40
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f9ff 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e006      	b.n	800598e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	4613      	mov	r3, r2
 80059a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d11d      	bne.n	80059ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_UART_Receive_IT+0x26>
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e016      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Receive_IT+0x38>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e00f      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	461a      	mov	r2, r3
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fa10 	bl	8005e08 <UART_Start_Receive_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	e000      	b.n	80059ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	; 0x28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10d      	bne.n	8005a4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <HAL_UART_IRQHandler+0x52>
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fac0 	bl	8005fc8 <UART_Receive_IT>
      return;
 8005a48:	e17b      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80b1 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x1bc>
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_UART_IRQHandler+0x70>
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80a6 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_UART_IRQHandler+0x90>
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	f043 0201 	orr.w	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xb0>
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	f043 0202 	orr.w	r2, r3, #2
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xd0>
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	f043 0204 	orr.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00f      	beq.n	8005af2 <HAL_UART_IRQHandler+0xfa>
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_UART_IRQHandler+0xee>
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f043 0208 	orr.w	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 811e 	beq.w	8005d38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <HAL_UART_IRQHandler+0x11e>
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa59 	bl	8005fc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <HAL_UART_IRQHandler+0x146>
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d031      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f99b 	bl	8005e7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d023      	beq.n	8005b9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d013      	beq.n	8005b92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	4a76      	ldr	r2, [pc, #472]	; (8005d48 <HAL_UART_IRQHandler+0x350>)
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fd f9d4 	bl	8002f24 <HAL_DMA_Abort_IT>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	e00e      	b.n	8005bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f8da 	bl	8005d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	e00a      	b.n	8005bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f8d6 	bl	8005d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	e006      	b.n	8005bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8d2 	bl	8005d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bae:	e0c3      	b.n	8005d38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	bf00      	nop
    return;
 8005bb2:	e0c1      	b.n	8005d38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	f040 80a1 	bne.w	8005d00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 809b 	beq.w	8005d00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8095 	beq.w	8005d00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d04e      	beq.n	8005c98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005c04:	8a3b      	ldrh	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8098 	beq.w	8005d3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c10:	8a3a      	ldrh	r2, [r7, #16]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	f080 8092 	bcs.w	8005d3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8a3a      	ldrh	r2, [r7, #16]
 8005c1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d02b      	beq.n	8005c80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0210 	bic.w	r2, r2, #16
 8005c74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fd f917 	bl	8002eae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f864 	bl	8005d5e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c96:	e051      	b.n	8005d3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d047      	beq.n	8005d40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005cb0:	8a7b      	ldrh	r3, [r7, #18]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d044      	beq.n	8005d40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cc4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0210 	bic.w	r2, r2, #16
 8005cf2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cf4:	8a7b      	ldrh	r3, [r7, #18]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f830 	bl	8005d5e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cfe:	e01f      	b.n	8005d40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <HAL_UART_IRQHandler+0x324>
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f8f0 	bl	8005efa <UART_Transmit_IT>
    return;
 8005d1a:	e012      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00d      	beq.n	8005d42 <HAL_UART_IRQHandler+0x34a>
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f931 	bl	8005f98 <UART_EndTransmit_IT>
    return;
 8005d36:	e004      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
    return;
 8005d38:	bf00      	nop
 8005d3a:	e002      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d40:	bf00      	nop
  }
}
 8005d42:	3728      	adds	r7, #40	; 0x28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	08005ed3 	.word	0x08005ed3

08005d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	460b      	mov	r3, r1
 8005d68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d84:	e02c      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d028      	beq.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d94:	f7fc ff74 	bl	8002c80 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d21d      	bcs.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005db2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e00f      	b.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4013      	ands	r3, r2
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d0c3      	beq.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	4613      	mov	r3, r2
 8005e14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	88fa      	ldrh	r2, [r7, #6]
 8005e26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2222      	movs	r2, #34	; 0x22
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0220 	orr.w	r2, r2, #32
 8005e6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d107      	bne.n	8005eba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0210 	bic.w	r2, r2, #16
 8005eb8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff ff2d 	bl	8005d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b21      	cmp	r3, #33	; 0x21
 8005f0c:	d13e      	bne.n	8005f8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f16:	d114      	bne.n	8005f42 <UART_Transmit_IT+0x48>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d110      	bne.n	8005f42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	621a      	str	r2, [r3, #32]
 8005f40:	e008      	b.n	8005f54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6211      	str	r1, [r2, #32]
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4619      	mov	r1, r3
 8005f62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fc f8a5 	bl	8002108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b22      	cmp	r3, #34	; 0x22
 8005fda:	f040 8099 	bne.w	8006110 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe6:	d117      	bne.n	8006018 <UART_Receive_IT+0x50>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d113      	bne.n	8006018 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	b29a      	uxth	r2, r3
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	629a      	str	r2, [r3, #40]	; 0x28
 8006016:	e026      	b.n	8006066 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602a:	d007      	beq.n	800603c <UART_Receive_IT+0x74>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <UART_Receive_IT+0x82>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b2da      	uxtb	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e008      	b.n	800605c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006056:	b2da      	uxtb	r2, r3
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29b      	uxth	r3, r3
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	4619      	mov	r1, r3
 8006074:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006076:	2b00      	cmp	r3, #0
 8006078:	d148      	bne.n	800610c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0220 	bic.w	r2, r2, #32
 8006088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d123      	bne.n	8006102 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0210 	bic.w	r2, r2, #16
 80060ce:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d10a      	bne.n	80060f4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fe2f 	bl	8005d5e <HAL_UARTEx_RxEventCallback>
 8006100:	e002      	b.n	8006108 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fc f80a 	bl	800211c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e002      	b.n	8006112 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	e000      	b.n	8006112 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006156:	f023 030c 	bic.w	r3, r3, #12
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	430b      	orrs	r3, r1
 8006162:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <UART_SetConfig+0x114>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d103      	bne.n	800618c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006184:	f7fe fce2 	bl	8004b4c <HAL_RCC_GetPCLK2Freq>
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	e002      	b.n	8006192 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800618c:	f7fe fcca 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 8006190:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009a      	lsls	r2, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	4a22      	ldr	r2, [pc, #136]	; (8006234 <UART_SetConfig+0x118>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	0119      	lsls	r1, r3, #4
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	009a      	lsls	r2, r3, #2
 80061bc:	441a      	add	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <UART_SetConfig+0x118>)
 80061ca:	fba3 0302 	umull	r0, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2064      	movs	r0, #100	; 0x64
 80061d2:	fb00 f303 	mul.w	r3, r0, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	3332      	adds	r3, #50	; 0x32
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <UART_SetConfig+0x118>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061e8:	4419      	add	r1, r3
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009a      	lsls	r2, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <UART_SetConfig+0x118>)
 8006202:	fba3 0302 	umull	r0, r3, r3, r2
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2064      	movs	r0, #100	; 0x64
 800620a:	fb00 f303 	mul.w	r3, r0, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	3332      	adds	r3, #50	; 0x32
 8006214:	4a07      	ldr	r2, [pc, #28]	; (8006234 <UART_SetConfig+0x118>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f003 020f 	and.w	r2, r3, #15
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	440a      	add	r2, r1
 8006226:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40013800 	.word	0x40013800
 8006234:	51eb851f 	.word	0x51eb851f

08006238 <__errno>:
 8006238:	4b01      	ldr	r3, [pc, #4]	; (8006240 <__errno+0x8>)
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	200002dc 	.word	0x200002dc

08006244 <__libc_init_array>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	2600      	movs	r6, #0
 8006248:	4d0c      	ldr	r5, [pc, #48]	; (800627c <__libc_init_array+0x38>)
 800624a:	4c0d      	ldr	r4, [pc, #52]	; (8006280 <__libc_init_array+0x3c>)
 800624c:	1b64      	subs	r4, r4, r5
 800624e:	10a4      	asrs	r4, r4, #2
 8006250:	42a6      	cmp	r6, r4
 8006252:	d109      	bne.n	8006268 <__libc_init_array+0x24>
 8006254:	f000 fb6a 	bl	800692c <_init>
 8006258:	2600      	movs	r6, #0
 800625a:	4d0a      	ldr	r5, [pc, #40]	; (8006284 <__libc_init_array+0x40>)
 800625c:	4c0a      	ldr	r4, [pc, #40]	; (8006288 <__libc_init_array+0x44>)
 800625e:	1b64      	subs	r4, r4, r5
 8006260:	10a4      	asrs	r4, r4, #2
 8006262:	42a6      	cmp	r6, r4
 8006264:	d105      	bne.n	8006272 <__libc_init_array+0x2e>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	f855 3b04 	ldr.w	r3, [r5], #4
 800626c:	4798      	blx	r3
 800626e:	3601      	adds	r6, #1
 8006270:	e7ee      	b.n	8006250 <__libc_init_array+0xc>
 8006272:	f855 3b04 	ldr.w	r3, [r5], #4
 8006276:	4798      	blx	r3
 8006278:	3601      	adds	r6, #1
 800627a:	e7f2      	b.n	8006262 <__libc_init_array+0x1e>
 800627c:	080069e0 	.word	0x080069e0
 8006280:	080069e0 	.word	0x080069e0
 8006284:	080069e0 	.word	0x080069e0
 8006288:	080069e4 	.word	0x080069e4

0800628c <memcpy>:
 800628c:	440a      	add	r2, r1
 800628e:	4291      	cmp	r1, r2
 8006290:	f100 33ff 	add.w	r3, r0, #4294967295
 8006294:	d100      	bne.n	8006298 <memcpy+0xc>
 8006296:	4770      	bx	lr
 8006298:	b510      	push	{r4, lr}
 800629a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800629e:	4291      	cmp	r1, r2
 80062a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062a4:	d1f9      	bne.n	800629a <memcpy+0xe>
 80062a6:	bd10      	pop	{r4, pc}

080062a8 <memset>:
 80062a8:	4603      	mov	r3, r0
 80062aa:	4402      	add	r2, r0
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d100      	bne.n	80062b2 <memset+0xa>
 80062b0:	4770      	bx	lr
 80062b2:	f803 1b01 	strb.w	r1, [r3], #1
 80062b6:	e7f9      	b.n	80062ac <memset+0x4>

080062b8 <atan>:
 80062b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	4bb6      	ldr	r3, [pc, #728]	; (8006598 <atan+0x2e0>)
 80062be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80062c2:	429e      	cmp	r6, r3
 80062c4:	4604      	mov	r4, r0
 80062c6:	460d      	mov	r5, r1
 80062c8:	468b      	mov	fp, r1
 80062ca:	dd17      	ble.n	80062fc <atan+0x44>
 80062cc:	4bb3      	ldr	r3, [pc, #716]	; (800659c <atan+0x2e4>)
 80062ce:	429e      	cmp	r6, r3
 80062d0:	dc01      	bgt.n	80062d6 <atan+0x1e>
 80062d2:	d109      	bne.n	80062e8 <atan+0x30>
 80062d4:	b140      	cbz	r0, 80062e8 <atan+0x30>
 80062d6:	4622      	mov	r2, r4
 80062d8:	462b      	mov	r3, r5
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	f7f9 ff3d 	bl	800015c <__adddf3>
 80062e2:	4604      	mov	r4, r0
 80062e4:	460d      	mov	r5, r1
 80062e6:	e005      	b.n	80062f4 <atan+0x3c>
 80062e8:	f1bb 0f00 	cmp.w	fp, #0
 80062ec:	4cac      	ldr	r4, [pc, #688]	; (80065a0 <atan+0x2e8>)
 80062ee:	f300 8121 	bgt.w	8006534 <atan+0x27c>
 80062f2:	4dac      	ldr	r5, [pc, #688]	; (80065a4 <atan+0x2ec>)
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fc:	4baa      	ldr	r3, [pc, #680]	; (80065a8 <atan+0x2f0>)
 80062fe:	429e      	cmp	r6, r3
 8006300:	dc11      	bgt.n	8006326 <atan+0x6e>
 8006302:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006306:	429e      	cmp	r6, r3
 8006308:	dc0a      	bgt.n	8006320 <atan+0x68>
 800630a:	a38b      	add	r3, pc, #556	; (adr r3, 8006538 <atan+0x280>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7f9 ff24 	bl	800015c <__adddf3>
 8006314:	2200      	movs	r2, #0
 8006316:	4ba5      	ldr	r3, [pc, #660]	; (80065ac <atan+0x2f4>)
 8006318:	f7fa fb66 	bl	80009e8 <__aeabi_dcmpgt>
 800631c:	2800      	cmp	r0, #0
 800631e:	d1e9      	bne.n	80062f4 <atan+0x3c>
 8006320:	f04f 3aff 	mov.w	sl, #4294967295
 8006324:	e027      	b.n	8006376 <atan+0xbe>
 8006326:	f000 f951 	bl	80065cc <fabs>
 800632a:	4ba1      	ldr	r3, [pc, #644]	; (80065b0 <atan+0x2f8>)
 800632c:	4604      	mov	r4, r0
 800632e:	429e      	cmp	r6, r3
 8006330:	460d      	mov	r5, r1
 8006332:	f300 80b8 	bgt.w	80064a6 <atan+0x1ee>
 8006336:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800633a:	429e      	cmp	r6, r3
 800633c:	f300 809c 	bgt.w	8006478 <atan+0x1c0>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	f7f9 ff0a 	bl	800015c <__adddf3>
 8006348:	2200      	movs	r2, #0
 800634a:	4b98      	ldr	r3, [pc, #608]	; (80065ac <atan+0x2f4>)
 800634c:	f7f9 ff04 	bl	8000158 <__aeabi_dsub>
 8006350:	2200      	movs	r2, #0
 8006352:	4606      	mov	r6, r0
 8006354:	460f      	mov	r7, r1
 8006356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7f9 fefd 	bl	800015c <__adddf3>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4630      	mov	r0, r6
 8006368:	4639      	mov	r1, r7
 800636a:	f7fa f9d7 	bl	800071c <__aeabi_ddiv>
 800636e:	f04f 0a00 	mov.w	sl, #0
 8006372:	4604      	mov	r4, r0
 8006374:	460d      	mov	r5, r1
 8006376:	4622      	mov	r2, r4
 8006378:	462b      	mov	r3, r5
 800637a:	4620      	mov	r0, r4
 800637c:	4629      	mov	r1, r5
 800637e:	f7fa f8a3 	bl	80004c8 <__aeabi_dmul>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4680      	mov	r8, r0
 8006388:	4689      	mov	r9, r1
 800638a:	f7fa f89d 	bl	80004c8 <__aeabi_dmul>
 800638e:	a36c      	add	r3, pc, #432	; (adr r3, 8006540 <atan+0x288>)
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	4606      	mov	r6, r0
 8006396:	460f      	mov	r7, r1
 8006398:	f7fa f896 	bl	80004c8 <__aeabi_dmul>
 800639c:	a36a      	add	r3, pc, #424	; (adr r3, 8006548 <atan+0x290>)
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f7f9 fedb 	bl	800015c <__adddf3>
 80063a6:	4632      	mov	r2, r6
 80063a8:	463b      	mov	r3, r7
 80063aa:	f7fa f88d 	bl	80004c8 <__aeabi_dmul>
 80063ae:	a368      	add	r3, pc, #416	; (adr r3, 8006550 <atan+0x298>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f7f9 fed2 	bl	800015c <__adddf3>
 80063b8:	4632      	mov	r2, r6
 80063ba:	463b      	mov	r3, r7
 80063bc:	f7fa f884 	bl	80004c8 <__aeabi_dmul>
 80063c0:	a365      	add	r3, pc, #404	; (adr r3, 8006558 <atan+0x2a0>)
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f7f9 fec9 	bl	800015c <__adddf3>
 80063ca:	4632      	mov	r2, r6
 80063cc:	463b      	mov	r3, r7
 80063ce:	f7fa f87b 	bl	80004c8 <__aeabi_dmul>
 80063d2:	a363      	add	r3, pc, #396	; (adr r3, 8006560 <atan+0x2a8>)
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f7f9 fec0 	bl	800015c <__adddf3>
 80063dc:	4632      	mov	r2, r6
 80063de:	463b      	mov	r3, r7
 80063e0:	f7fa f872 	bl	80004c8 <__aeabi_dmul>
 80063e4:	a360      	add	r3, pc, #384	; (adr r3, 8006568 <atan+0x2b0>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 feb7 	bl	800015c <__adddf3>
 80063ee:	4642      	mov	r2, r8
 80063f0:	464b      	mov	r3, r9
 80063f2:	f7fa f869 	bl	80004c8 <__aeabi_dmul>
 80063f6:	a35e      	add	r3, pc, #376	; (adr r3, 8006570 <atan+0x2b8>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	4680      	mov	r8, r0
 80063fe:	4689      	mov	r9, r1
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7fa f860 	bl	80004c8 <__aeabi_dmul>
 8006408:	a35b      	add	r3, pc, #364	; (adr r3, 8006578 <atan+0x2c0>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7f9 fea3 	bl	8000158 <__aeabi_dsub>
 8006412:	4632      	mov	r2, r6
 8006414:	463b      	mov	r3, r7
 8006416:	f7fa f857 	bl	80004c8 <__aeabi_dmul>
 800641a:	a359      	add	r3, pc, #356	; (adr r3, 8006580 <atan+0x2c8>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f7f9 fe9a 	bl	8000158 <__aeabi_dsub>
 8006424:	4632      	mov	r2, r6
 8006426:	463b      	mov	r3, r7
 8006428:	f7fa f84e 	bl	80004c8 <__aeabi_dmul>
 800642c:	a356      	add	r3, pc, #344	; (adr r3, 8006588 <atan+0x2d0>)
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f7f9 fe91 	bl	8000158 <__aeabi_dsub>
 8006436:	4632      	mov	r2, r6
 8006438:	463b      	mov	r3, r7
 800643a:	f7fa f845 	bl	80004c8 <__aeabi_dmul>
 800643e:	a354      	add	r3, pc, #336	; (adr r3, 8006590 <atan+0x2d8>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f7f9 fe88 	bl	8000158 <__aeabi_dsub>
 8006448:	4632      	mov	r2, r6
 800644a:	463b      	mov	r3, r7
 800644c:	f7fa f83c 	bl	80004c8 <__aeabi_dmul>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4640      	mov	r0, r8
 8006456:	4649      	mov	r1, r9
 8006458:	f7f9 fe80 	bl	800015c <__adddf3>
 800645c:	4622      	mov	r2, r4
 800645e:	462b      	mov	r3, r5
 8006460:	f7fa f832 	bl	80004c8 <__aeabi_dmul>
 8006464:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	d144      	bne.n	80064f8 <atan+0x240>
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	f7f9 fe71 	bl	8000158 <__aeabi_dsub>
 8006476:	e734      	b.n	80062e2 <atan+0x2a>
 8006478:	2200      	movs	r2, #0
 800647a:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <atan+0x2f4>)
 800647c:	f7f9 fe6c 	bl	8000158 <__aeabi_dsub>
 8006480:	2200      	movs	r2, #0
 8006482:	4606      	mov	r6, r0
 8006484:	460f      	mov	r7, r1
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	4b48      	ldr	r3, [pc, #288]	; (80065ac <atan+0x2f4>)
 800648c:	f7f9 fe66 	bl	800015c <__adddf3>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4630      	mov	r0, r6
 8006496:	4639      	mov	r1, r7
 8006498:	f7fa f940 	bl	800071c <__aeabi_ddiv>
 800649c:	f04f 0a01 	mov.w	sl, #1
 80064a0:	4604      	mov	r4, r0
 80064a2:	460d      	mov	r5, r1
 80064a4:	e767      	b.n	8006376 <atan+0xbe>
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <atan+0x2fc>)
 80064a8:	429e      	cmp	r6, r3
 80064aa:	da1a      	bge.n	80064e2 <atan+0x22a>
 80064ac:	2200      	movs	r2, #0
 80064ae:	4b42      	ldr	r3, [pc, #264]	; (80065b8 <atan+0x300>)
 80064b0:	f7f9 fe52 	bl	8000158 <__aeabi_dsub>
 80064b4:	2200      	movs	r2, #0
 80064b6:	4606      	mov	r6, r0
 80064b8:	460f      	mov	r7, r1
 80064ba:	4620      	mov	r0, r4
 80064bc:	4629      	mov	r1, r5
 80064be:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <atan+0x300>)
 80064c0:	f7fa f802 	bl	80004c8 <__aeabi_dmul>
 80064c4:	2200      	movs	r2, #0
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <atan+0x2f4>)
 80064c8:	f7f9 fe48 	bl	800015c <__adddf3>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4630      	mov	r0, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7fa f922 	bl	800071c <__aeabi_ddiv>
 80064d8:	f04f 0a02 	mov.w	sl, #2
 80064dc:	4604      	mov	r4, r0
 80064de:	460d      	mov	r5, r1
 80064e0:	e749      	b.n	8006376 <atan+0xbe>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	2000      	movs	r0, #0
 80064e8:	4934      	ldr	r1, [pc, #208]	; (80065bc <atan+0x304>)
 80064ea:	f7fa f917 	bl	800071c <__aeabi_ddiv>
 80064ee:	f04f 0a03 	mov.w	sl, #3
 80064f2:	4604      	mov	r4, r0
 80064f4:	460d      	mov	r5, r1
 80064f6:	e73e      	b.n	8006376 <atan+0xbe>
 80064f8:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <atan+0x308>)
 80064fa:	4e32      	ldr	r6, [pc, #200]	; (80065c4 <atan+0x30c>)
 80064fc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006500:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006504:	e9da 2300 	ldrd	r2, r3, [sl]
 8006508:	f7f9 fe26 	bl	8000158 <__aeabi_dsub>
 800650c:	4622      	mov	r2, r4
 800650e:	462b      	mov	r3, r5
 8006510:	f7f9 fe22 	bl	8000158 <__aeabi_dsub>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	e9d6 0100 	ldrd	r0, r1, [r6]
 800651c:	f7f9 fe1c 	bl	8000158 <__aeabi_dsub>
 8006520:	f1bb 0f00 	cmp.w	fp, #0
 8006524:	4604      	mov	r4, r0
 8006526:	460d      	mov	r5, r1
 8006528:	f6bf aee4 	bge.w	80062f4 <atan+0x3c>
 800652c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006530:	461d      	mov	r5, r3
 8006532:	e6df      	b.n	80062f4 <atan+0x3c>
 8006534:	4d24      	ldr	r5, [pc, #144]	; (80065c8 <atan+0x310>)
 8006536:	e6dd      	b.n	80062f4 <atan+0x3c>
 8006538:	8800759c 	.word	0x8800759c
 800653c:	7e37e43c 	.word	0x7e37e43c
 8006540:	e322da11 	.word	0xe322da11
 8006544:	3f90ad3a 	.word	0x3f90ad3a
 8006548:	24760deb 	.word	0x24760deb
 800654c:	3fa97b4b 	.word	0x3fa97b4b
 8006550:	a0d03d51 	.word	0xa0d03d51
 8006554:	3fb10d66 	.word	0x3fb10d66
 8006558:	c54c206e 	.word	0xc54c206e
 800655c:	3fb745cd 	.word	0x3fb745cd
 8006560:	920083ff 	.word	0x920083ff
 8006564:	3fc24924 	.word	0x3fc24924
 8006568:	5555550d 	.word	0x5555550d
 800656c:	3fd55555 	.word	0x3fd55555
 8006570:	2c6a6c2f 	.word	0x2c6a6c2f
 8006574:	bfa2b444 	.word	0xbfa2b444
 8006578:	52defd9a 	.word	0x52defd9a
 800657c:	3fadde2d 	.word	0x3fadde2d
 8006580:	af749a6d 	.word	0xaf749a6d
 8006584:	3fb3b0f2 	.word	0x3fb3b0f2
 8006588:	fe231671 	.word	0xfe231671
 800658c:	3fbc71c6 	.word	0x3fbc71c6
 8006590:	9998ebc4 	.word	0x9998ebc4
 8006594:	3fc99999 	.word	0x3fc99999
 8006598:	440fffff 	.word	0x440fffff
 800659c:	7ff00000 	.word	0x7ff00000
 80065a0:	54442d18 	.word	0x54442d18
 80065a4:	bff921fb 	.word	0xbff921fb
 80065a8:	3fdbffff 	.word	0x3fdbffff
 80065ac:	3ff00000 	.word	0x3ff00000
 80065b0:	3ff2ffff 	.word	0x3ff2ffff
 80065b4:	40038000 	.word	0x40038000
 80065b8:	3ff80000 	.word	0x3ff80000
 80065bc:	bff00000 	.word	0xbff00000
 80065c0:	08006990 	.word	0x08006990
 80065c4:	08006970 	.word	0x08006970
 80065c8:	3ff921fb 	.word	0x3ff921fb

080065cc <fabs>:
 80065cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80065d0:	4770      	bx	lr

080065d2 <atan2>:
 80065d2:	f000 b82d 	b.w	8006630 <__ieee754_atan2>
	...

080065d8 <sqrt>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	4606      	mov	r6, r0
 80065dc:	460f      	mov	r7, r1
 80065de:	f000 f8f9 	bl	80067d4 <__ieee754_sqrt>
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <sqrt+0x54>)
 80065e4:	4604      	mov	r4, r0
 80065e6:	f993 3000 	ldrsb.w	r3, [r3]
 80065ea:	460d      	mov	r5, r1
 80065ec:	3301      	adds	r3, #1
 80065ee:	d019      	beq.n	8006624 <sqrt+0x4c>
 80065f0:	4632      	mov	r2, r6
 80065f2:	463b      	mov	r3, r7
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7fa fa00 	bl	80009fc <__aeabi_dcmpun>
 80065fc:	b990      	cbnz	r0, 8006624 <sqrt+0x4c>
 80065fe:	2200      	movs	r2, #0
 8006600:	2300      	movs	r3, #0
 8006602:	4630      	mov	r0, r6
 8006604:	4639      	mov	r1, r7
 8006606:	f7fa f9d1 	bl	80009ac <__aeabi_dcmplt>
 800660a:	b158      	cbz	r0, 8006624 <sqrt+0x4c>
 800660c:	f7ff fe14 	bl	8006238 <__errno>
 8006610:	2321      	movs	r3, #33	; 0x21
 8006612:	2200      	movs	r2, #0
 8006614:	6003      	str	r3, [r0, #0]
 8006616:	2300      	movs	r3, #0
 8006618:	4610      	mov	r0, r2
 800661a:	4619      	mov	r1, r3
 800661c:	f7fa f87e 	bl	800071c <__aeabi_ddiv>
 8006620:	4604      	mov	r4, r0
 8006622:	460d      	mov	r5, r1
 8006624:	4620      	mov	r0, r4
 8006626:	4629      	mov	r1, r5
 8006628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800662a:	bf00      	nop
 800662c:	20000340 	.word	0x20000340

08006630 <__ieee754_atan2>:
 8006630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	4692      	mov	sl, r2
 8006636:	4699      	mov	r9, r3
 8006638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800663c:	461f      	mov	r7, r3
 800663e:	f1ca 0300 	rsb	r3, sl, #0
 8006642:	f8df e18c 	ldr.w	lr, [pc, #396]	; 80067d0 <__ieee754_atan2+0x1a0>
 8006646:	ea43 030a 	orr.w	r3, r3, sl
 800664a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800664e:	4573      	cmp	r3, lr
 8006650:	4604      	mov	r4, r0
 8006652:	460d      	mov	r5, r1
 8006654:	d808      	bhi.n	8006668 <__ieee754_atan2+0x38>
 8006656:	4246      	negs	r6, r0
 8006658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800665c:	4306      	orrs	r6, r0
 800665e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006662:	4576      	cmp	r6, lr
 8006664:	468c      	mov	ip, r1
 8006666:	d908      	bls.n	800667a <__ieee754_atan2+0x4a>
 8006668:	4652      	mov	r2, sl
 800666a:	464b      	mov	r3, r9
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7f9 fd74 	bl	800015c <__adddf3>
 8006674:	4604      	mov	r4, r0
 8006676:	460d      	mov	r5, r1
 8006678:	e019      	b.n	80066ae <__ieee754_atan2+0x7e>
 800667a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800667e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006682:	ea56 060a 	orrs.w	r6, r6, sl
 8006686:	d103      	bne.n	8006690 <__ieee754_atan2+0x60>
 8006688:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668c:	f7ff be14 	b.w	80062b8 <atan>
 8006690:	17be      	asrs	r6, r7, #30
 8006692:	f006 0602 	and.w	r6, r6, #2
 8006696:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800669a:	ea53 0100 	orrs.w	r1, r3, r0
 800669e:	d10a      	bne.n	80066b6 <__ieee754_atan2+0x86>
 80066a0:	2e02      	cmp	r6, #2
 80066a2:	d067      	beq.n	8006774 <__ieee754_atan2+0x144>
 80066a4:	2e03      	cmp	r6, #3
 80066a6:	d102      	bne.n	80066ae <__ieee754_atan2+0x7e>
 80066a8:	a53b      	add	r5, pc, #236	; (adr r5, 8006798 <__ieee754_atan2+0x168>)
 80066aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066ae:	4620      	mov	r0, r4
 80066b0:	4629      	mov	r1, r5
 80066b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b6:	ea52 010a 	orrs.w	r1, r2, sl
 80066ba:	d106      	bne.n	80066ca <__ieee754_atan2+0x9a>
 80066bc:	f1bc 0f00 	cmp.w	ip, #0
 80066c0:	da63      	bge.n	800678a <__ieee754_atan2+0x15a>
 80066c2:	a537      	add	r5, pc, #220	; (adr r5, 80067a0 <__ieee754_atan2+0x170>)
 80066c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80066c8:	e7f1      	b.n	80066ae <__ieee754_atan2+0x7e>
 80066ca:	4572      	cmp	r2, lr
 80066cc:	d10f      	bne.n	80066ee <__ieee754_atan2+0xbe>
 80066ce:	4293      	cmp	r3, r2
 80066d0:	f106 36ff 	add.w	r6, r6, #4294967295
 80066d4:	d107      	bne.n	80066e6 <__ieee754_atan2+0xb6>
 80066d6:	2e02      	cmp	r6, #2
 80066d8:	d850      	bhi.n	800677c <__ieee754_atan2+0x14c>
 80066da:	4b3b      	ldr	r3, [pc, #236]	; (80067c8 <__ieee754_atan2+0x198>)
 80066dc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80066e0:	e9d6 4500 	ldrd	r4, r5, [r6]
 80066e4:	e7e3      	b.n	80066ae <__ieee754_atan2+0x7e>
 80066e6:	2e02      	cmp	r6, #2
 80066e8:	d84c      	bhi.n	8006784 <__ieee754_atan2+0x154>
 80066ea:	4b38      	ldr	r3, [pc, #224]	; (80067cc <__ieee754_atan2+0x19c>)
 80066ec:	e7f6      	b.n	80066dc <__ieee754_atan2+0xac>
 80066ee:	4573      	cmp	r3, lr
 80066f0:	d0e4      	beq.n	80066bc <__ieee754_atan2+0x8c>
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80066f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80066fc:	da20      	bge.n	8006740 <__ieee754_atan2+0x110>
 80066fe:	2f00      	cmp	r7, #0
 8006700:	da01      	bge.n	8006706 <__ieee754_atan2+0xd6>
 8006702:	323c      	adds	r2, #60	; 0x3c
 8006704:	db20      	blt.n	8006748 <__ieee754_atan2+0x118>
 8006706:	4652      	mov	r2, sl
 8006708:	464b      	mov	r3, r9
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7fa f805 	bl	800071c <__aeabi_ddiv>
 8006712:	f7ff ff5b 	bl	80065cc <fabs>
 8006716:	f7ff fdcf 	bl	80062b8 <atan>
 800671a:	4604      	mov	r4, r0
 800671c:	460d      	mov	r5, r1
 800671e:	2e01      	cmp	r6, #1
 8006720:	d015      	beq.n	800674e <__ieee754_atan2+0x11e>
 8006722:	2e02      	cmp	r6, #2
 8006724:	d017      	beq.n	8006756 <__ieee754_atan2+0x126>
 8006726:	2e00      	cmp	r6, #0
 8006728:	d0c1      	beq.n	80066ae <__ieee754_atan2+0x7e>
 800672a:	a31f      	add	r3, pc, #124	; (adr r3, 80067a8 <__ieee754_atan2+0x178>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	4620      	mov	r0, r4
 8006732:	4629      	mov	r1, r5
 8006734:	f7f9 fd10 	bl	8000158 <__aeabi_dsub>
 8006738:	a31d      	add	r3, pc, #116	; (adr r3, 80067b0 <__ieee754_atan2+0x180>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	e016      	b.n	800676e <__ieee754_atan2+0x13e>
 8006740:	a51d      	add	r5, pc, #116	; (adr r5, 80067b8 <__ieee754_atan2+0x188>)
 8006742:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006746:	e7ea      	b.n	800671e <__ieee754_atan2+0xee>
 8006748:	2400      	movs	r4, #0
 800674a:	2500      	movs	r5, #0
 800674c:	e7e7      	b.n	800671e <__ieee754_atan2+0xee>
 800674e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006752:	461d      	mov	r5, r3
 8006754:	e7ab      	b.n	80066ae <__ieee754_atan2+0x7e>
 8006756:	a314      	add	r3, pc, #80	; (adr r3, 80067a8 <__ieee754_atan2+0x178>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	4620      	mov	r0, r4
 800675e:	4629      	mov	r1, r5
 8006760:	f7f9 fcfa 	bl	8000158 <__aeabi_dsub>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	a111      	add	r1, pc, #68	; (adr r1, 80067b0 <__ieee754_atan2+0x180>)
 800676a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800676e:	f7f9 fcf3 	bl	8000158 <__aeabi_dsub>
 8006772:	e77f      	b.n	8006674 <__ieee754_atan2+0x44>
 8006774:	a50e      	add	r5, pc, #56	; (adr r5, 80067b0 <__ieee754_atan2+0x180>)
 8006776:	e9d5 4500 	ldrd	r4, r5, [r5]
 800677a:	e798      	b.n	80066ae <__ieee754_atan2+0x7e>
 800677c:	a510      	add	r5, pc, #64	; (adr r5, 80067c0 <__ieee754_atan2+0x190>)
 800677e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006782:	e794      	b.n	80066ae <__ieee754_atan2+0x7e>
 8006784:	2400      	movs	r4, #0
 8006786:	2500      	movs	r5, #0
 8006788:	e791      	b.n	80066ae <__ieee754_atan2+0x7e>
 800678a:	a50b      	add	r5, pc, #44	; (adr r5, 80067b8 <__ieee754_atan2+0x188>)
 800678c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006790:	e78d      	b.n	80066ae <__ieee754_atan2+0x7e>
 8006792:	bf00      	nop
 8006794:	f3af 8000 	nop.w
 8006798:	54442d18 	.word	0x54442d18
 800679c:	c00921fb 	.word	0xc00921fb
 80067a0:	54442d18 	.word	0x54442d18
 80067a4:	bff921fb 	.word	0xbff921fb
 80067a8:	33145c07 	.word	0x33145c07
 80067ac:	3ca1a626 	.word	0x3ca1a626
 80067b0:	54442d18 	.word	0x54442d18
 80067b4:	400921fb 	.word	0x400921fb
 80067b8:	54442d18 	.word	0x54442d18
 80067bc:	3ff921fb 	.word	0x3ff921fb
 80067c0:	54442d18 	.word	0x54442d18
 80067c4:	3fe921fb 	.word	0x3fe921fb
 80067c8:	080069b0 	.word	0x080069b0
 80067cc:	080069c8 	.word	0x080069c8
 80067d0:	7ff00000 	.word	0x7ff00000

080067d4 <__ieee754_sqrt>:
 80067d4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006928 <__ieee754_sqrt+0x154>
 80067d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067dc:	ea3c 0c01 	bics.w	ip, ip, r1
 80067e0:	460b      	mov	r3, r1
 80067e2:	4606      	mov	r6, r0
 80067e4:	460d      	mov	r5, r1
 80067e6:	460a      	mov	r2, r1
 80067e8:	4607      	mov	r7, r0
 80067ea:	4604      	mov	r4, r0
 80067ec:	d10e      	bne.n	800680c <__ieee754_sqrt+0x38>
 80067ee:	4602      	mov	r2, r0
 80067f0:	f7f9 fe6a 	bl	80004c8 <__aeabi_dmul>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4630      	mov	r0, r6
 80067fa:	4629      	mov	r1, r5
 80067fc:	f7f9 fcae 	bl	800015c <__adddf3>
 8006800:	4606      	mov	r6, r0
 8006802:	460d      	mov	r5, r1
 8006804:	4630      	mov	r0, r6
 8006806:	4629      	mov	r1, r5
 8006808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800680c:	2900      	cmp	r1, #0
 800680e:	dc0d      	bgt.n	800682c <__ieee754_sqrt+0x58>
 8006810:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006814:	ea5c 0707 	orrs.w	r7, ip, r7
 8006818:	d0f4      	beq.n	8006804 <__ieee754_sqrt+0x30>
 800681a:	b139      	cbz	r1, 800682c <__ieee754_sqrt+0x58>
 800681c:	4602      	mov	r2, r0
 800681e:	f7f9 fc9b 	bl	8000158 <__aeabi_dsub>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	f7f9 ff79 	bl	800071c <__aeabi_ddiv>
 800682a:	e7e9      	b.n	8006800 <__ieee754_sqrt+0x2c>
 800682c:	1512      	asrs	r2, r2, #20
 800682e:	d074      	beq.n	800691a <__ieee754_sqrt+0x146>
 8006830:	2000      	movs	r0, #0
 8006832:	07d5      	lsls	r5, r2, #31
 8006834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006838:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800683c:	bf5e      	ittt	pl
 800683e:	0fe3      	lsrpl	r3, r4, #31
 8006840:	0064      	lslpl	r4, r4, #1
 8006842:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8006846:	0fe3      	lsrs	r3, r4, #31
 8006848:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800684c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006850:	2516      	movs	r5, #22
 8006852:	4601      	mov	r1, r0
 8006854:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006858:	1076      	asrs	r6, r6, #1
 800685a:	0064      	lsls	r4, r4, #1
 800685c:	188f      	adds	r7, r1, r2
 800685e:	429f      	cmp	r7, r3
 8006860:	bfde      	ittt	le
 8006862:	1bdb      	suble	r3, r3, r7
 8006864:	18b9      	addle	r1, r7, r2
 8006866:	1880      	addle	r0, r0, r2
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	3d01      	subs	r5, #1
 800686c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006870:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006874:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006878:	d1f0      	bne.n	800685c <__ieee754_sqrt+0x88>
 800687a:	462a      	mov	r2, r5
 800687c:	f04f 0e20 	mov.w	lr, #32
 8006880:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8006884:	428b      	cmp	r3, r1
 8006886:	eb07 0c05 	add.w	ip, r7, r5
 800688a:	dc02      	bgt.n	8006892 <__ieee754_sqrt+0xbe>
 800688c:	d113      	bne.n	80068b6 <__ieee754_sqrt+0xe2>
 800688e:	45a4      	cmp	ip, r4
 8006890:	d811      	bhi.n	80068b6 <__ieee754_sqrt+0xe2>
 8006892:	f1bc 0f00 	cmp.w	ip, #0
 8006896:	eb0c 0507 	add.w	r5, ip, r7
 800689a:	da43      	bge.n	8006924 <__ieee754_sqrt+0x150>
 800689c:	2d00      	cmp	r5, #0
 800689e:	db41      	blt.n	8006924 <__ieee754_sqrt+0x150>
 80068a0:	f101 0801 	add.w	r8, r1, #1
 80068a4:	1a5b      	subs	r3, r3, r1
 80068a6:	4641      	mov	r1, r8
 80068a8:	45a4      	cmp	ip, r4
 80068aa:	bf88      	it	hi
 80068ac:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80068b0:	eba4 040c 	sub.w	r4, r4, ip
 80068b4:	443a      	add	r2, r7
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	f1be 0e01 	subs.w	lr, lr, #1
 80068bc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80068c0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80068c4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80068c8:	d1dc      	bne.n	8006884 <__ieee754_sqrt+0xb0>
 80068ca:	4323      	orrs	r3, r4
 80068cc:	d006      	beq.n	80068dc <__ieee754_sqrt+0x108>
 80068ce:	1c54      	adds	r4, r2, #1
 80068d0:	bf0b      	itete	eq
 80068d2:	4672      	moveq	r2, lr
 80068d4:	3201      	addne	r2, #1
 80068d6:	3001      	addeq	r0, #1
 80068d8:	f022 0201 	bicne.w	r2, r2, #1
 80068dc:	1043      	asrs	r3, r0, #1
 80068de:	07c1      	lsls	r1, r0, #31
 80068e0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80068e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80068e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80068ec:	bf48      	it	mi
 80068ee:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80068f2:	4610      	mov	r0, r2
 80068f4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80068f8:	e782      	b.n	8006800 <__ieee754_sqrt+0x2c>
 80068fa:	0ae3      	lsrs	r3, r4, #11
 80068fc:	3915      	subs	r1, #21
 80068fe:	0564      	lsls	r4, r4, #21
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0fa      	beq.n	80068fa <__ieee754_sqrt+0x126>
 8006904:	02de      	lsls	r6, r3, #11
 8006906:	d50a      	bpl.n	800691e <__ieee754_sqrt+0x14a>
 8006908:	f1c2 0020 	rsb	r0, r2, #32
 800690c:	fa24 f000 	lsr.w	r0, r4, r0
 8006910:	1e55      	subs	r5, r2, #1
 8006912:	4094      	lsls	r4, r2
 8006914:	4303      	orrs	r3, r0
 8006916:	1b4a      	subs	r2, r1, r5
 8006918:	e78a      	b.n	8006830 <__ieee754_sqrt+0x5c>
 800691a:	4611      	mov	r1, r2
 800691c:	e7f0      	b.n	8006900 <__ieee754_sqrt+0x12c>
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	3201      	adds	r2, #1
 8006922:	e7ef      	b.n	8006904 <__ieee754_sqrt+0x130>
 8006924:	4688      	mov	r8, r1
 8006926:	e7bd      	b.n	80068a4 <__ieee754_sqrt+0xd0>
 8006928:	7ff00000 	.word	0x7ff00000

0800692c <_init>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr

08006938 <_fini>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	bf00      	nop
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr
