
20220627_Car_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030fc  080030fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080030fc  080030fc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030fc  080030fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000074  08003178  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003178  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adfa  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d00  00000000  00000000  0002ae97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017301  00000000  00000000  0002e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c81a  00000000  00000000  00045621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008872e  00000000  00000000  00051e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003578  00000000  00000000  000da5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003084 	.word	0x08003084

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003084 	.word	0x08003084

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1e      	ldr	r3, [pc, #120]	; (80001dc <MX_GPIO_Init+0x90>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a1d      	ldr	r2, [pc, #116]	; (80001dc <MX_GPIO_Init+0x90>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1b      	ldr	r3, [pc, #108]	; (80001dc <MX_GPIO_Init+0x90>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b18      	ldr	r3, [pc, #96]	; (80001dc <MX_GPIO_Init+0x90>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a17      	ldr	r2, [pc, #92]	; (80001dc <MX_GPIO_Init+0x90>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b15      	ldr	r3, [pc, #84]	; (80001dc <MX_GPIO_Init+0x90>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <MX_GPIO_Init+0x90>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a11      	ldr	r2, [pc, #68]	; (80001dc <MX_GPIO_Init+0x90>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <MX_GPIO_Init+0x90>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_1_OUTPUT_Pin|L_2_OUTPUT_Pin|R_1_OUTPUT_Pin|R_2_OUTPUT_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80001ae:	480c      	ldr	r0, [pc, #48]	; (80001e0 <MX_GPIO_Init+0x94>)
 80001b0:	f000 fea2 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = L_1_OUTPUT_Pin|L_2_OUTPUT_Pin|R_1_OUTPUT_Pin|R_2_OUTPUT_Pin;
 80001b4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80001b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ba:	2301      	movs	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001be:	2300      	movs	r3, #0
 80001c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001c6:	f107 0310 	add.w	r3, r7, #16
 80001ca:	4619      	mov	r1, r3
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <MX_GPIO_Init+0x94>)
 80001ce:	f000 fd0f 	bl	8000bf0 <HAL_GPIO_Init>

}
 80001d2:	bf00      	nop
 80001d4:	3720      	adds	r7, #32
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010800 	.word	0x40010800

080001e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001e8:	f000 fbbc 	bl	8000964 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001ec:	f000 f88a 	bl	8000304 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001f0:	f7ff ffac 	bl	800014c <MX_GPIO_Init>
	MX_TIM3_Init();
 80001f4:	f000 fa4a 	bl	800068c <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80001f8:	f000 fb1a 	bl	8000830 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80001fc:	2108      	movs	r1, #8
 80001fe:	483b      	ldr	r0, [pc, #236]	; (80002ec <main+0x108>)
 8000200:	f001 fb54 	bl	80018ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000204:	210c      	movs	r1, #12
 8000206:	4839      	ldr	r0, [pc, #228]	; (80002ec <main+0x108>)
 8000208:	f001 fb50 	bl	80018ac <HAL_TIM_PWM_Start>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */


		HAL_UART_Receive(&huart2, &CTRL, 1, HAL_MAX_DELAY);
 800020c:	f04f 33ff 	mov.w	r3, #4294967295
 8000210:	2201      	movs	r2, #1
 8000212:	4937      	ldr	r1, [pc, #220]	; (80002f0 <main+0x10c>)
 8000214:	4837      	ldr	r0, [pc, #220]	; (80002f4 <main+0x110>)
 8000216:	f002 f94e 	bl	80024b6 <HAL_UART_Receive>
		switch (CTRL)
 800021a:	4b35      	ldr	r3, [pc, #212]	; (80002f0 <main+0x10c>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3b42      	subs	r3, #66	; 0x42
 8000220:	2b13      	cmp	r3, #19
 8000222:	d8f3      	bhi.n	800020c <main+0x28>
 8000224:	a201      	add	r2, pc, #4	; (adr r2, 800022c <main+0x48>)
 8000226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022a:	bf00      	nop
 800022c:	08000283 	.word	0x08000283
 8000230:	0800020d 	.word	0x0800020d
 8000234:	080002c9 	.word	0x080002c9
 8000238:	0800020d 	.word	0x0800020d
 800023c:	0800027d 	.word	0x0800027d
 8000240:	0800029b 	.word	0x0800029b
 8000244:	0800020d 	.word	0x0800020d
 8000248:	080002a1 	.word	0x080002a1
 800024c:	0800020d 	.word	0x0800020d
 8000250:	0800020d 	.word	0x0800020d
 8000254:	0800028f 	.word	0x0800028f
 8000258:	0800020d 	.word	0x0800020d
 800025c:	0800020d 	.word	0x0800020d
 8000260:	0800020d 	.word	0x0800020d
 8000264:	0800020d 	.word	0x0800020d
 8000268:	0800020d 	.word	0x0800020d
 800026c:	08000295 	.word	0x08000295
 8000270:	08000289 	.word	0x08000289
 8000274:	0800020d 	.word	0x0800020d
 8000278:	080002a7 	.word	0x080002a7
		{
		case 'F':
			Forward();
 800027c:	f000 f8ea 	bl	8000454 <Forward>
			break;
 8000280:	e033      	b.n	80002ea <main+0x106>

		case 'B':
			Backward();
 8000282:	f000 f8f1 	bl	8000468 <Backward>
			break;
 8000286:	e030      	b.n	80002ea <main+0x106>

		case 'S':
			Stop();
 8000288:	f000 f8f8 	bl	800047c <Stop>
			break;
 800028c:	e02d      	b.n	80002ea <main+0x106>

		case 'L':
			Left_Rot();
 800028e:	f000 f8fd 	bl	800048c <Left_Rot>
			break;
 8000292:	e02a      	b.n	80002ea <main+0x106>

		case 'R':
			Right_Rot();
 8000294:	f000 f904 	bl	80004a0 <Right_Rot>
			break;
 8000298:	e027      	b.n	80002ea <main+0x106>

		case 'G':
			Left_Turn();
 800029a:	f000 f90b 	bl	80004b4 <Left_Turn>
			break;
 800029e:	e024      	b.n	80002ea <main+0x106>

		case 'I':
			Right_Turn();
 80002a0:	f000 f910 	bl	80004c4 <Right_Turn>
			break;
 80002a4:	e021      	b.n	80002ea <main+0x106>

		case 'U':
			Speed_Up();
 80002a6:	f000 f915 	bl	80004d4 <Speed_Up>
			sprintf(MSG,"%d\n",Speed);
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <main+0x114>)
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	461a      	mov	r2, r3
 80002b0:	4912      	ldr	r1, [pc, #72]	; (80002fc <main+0x118>)
 80002b2:	4813      	ldr	r0, [pc, #76]	; (8000300 <main+0x11c>)
 80002b4:	f002 faac 	bl	8002810 <siprintf>
			HAL_UART_Transmit(&huart2, MSG, 4, HAL_MAX_DELAY);
 80002b8:	f04f 33ff 	mov.w	r3, #4294967295
 80002bc:	2204      	movs	r2, #4
 80002be:	4910      	ldr	r1, [pc, #64]	; (8000300 <main+0x11c>)
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <main+0x110>)
 80002c2:	f002 f866 	bl	8002392 <HAL_UART_Transmit>
			break;
 80002c6:	e010      	b.n	80002ea <main+0x106>

		case 'D':
			Speed_Down();
 80002c8:	f000 f91c 	bl	8000504 <Speed_Down>
			sprintf(MSG,"%d\n",Speed);
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <main+0x114>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	461a      	mov	r2, r3
 80002d2:	490a      	ldr	r1, [pc, #40]	; (80002fc <main+0x118>)
 80002d4:	480a      	ldr	r0, [pc, #40]	; (8000300 <main+0x11c>)
 80002d6:	f002 fa9b 	bl	8002810 <siprintf>
			HAL_UART_Transmit(&huart2, MSG, 4, HAL_MAX_DELAY);
 80002da:	f04f 33ff 	mov.w	r3, #4294967295
 80002de:	2204      	movs	r2, #4
 80002e0:	4907      	ldr	r1, [pc, #28]	; (8000300 <main+0x11c>)
 80002e2:	4804      	ldr	r0, [pc, #16]	; (80002f4 <main+0x110>)
 80002e4:	f002 f855 	bl	8002392 <HAL_UART_Transmit>
			break;
 80002e8:	bf00      	nop
		HAL_UART_Receive(&huart2, &CTRL, 1, HAL_MAX_DELAY);
 80002ea:	e78f      	b.n	800020c <main+0x28>
 80002ec:	200000a4 	.word	0x200000a4
 80002f0:	20000090 	.word	0x20000090
 80002f4:	200000ec 	.word	0x200000ec
 80002f8:	20000000 	.word	0x20000000
 80002fc:	0800309c 	.word	0x0800309c
 8000300:	20000094 	.word	0x20000094

08000304 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b090      	sub	sp, #64	; 0x40
 8000308:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f002 fa74 	bl	8002800 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000326:	2301      	movs	r3, #1
 8000328:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000330:	2300      	movs	r3, #0
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fdf5 	bl	8000f28 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x44>
	{
		Error_Handler();
 8000344:	f000 f906 	bl	8000554 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000354:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000358:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f001 f860 	bl	8001428 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800036e:	f000 f8f1 	bl	8000554 <Error_Handler>
	}
}
 8000372:	bf00      	nop
 8000374:	3740      	adds	r7, #64	; 0x40
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <Left_Forward>:

/* USER CODE BEGIN 4 */
void Left_Forward(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	L1_State(GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <Left_Forward+0x20>)
 8000388:	f000 fdb6 	bl	8000ef8 <HAL_GPIO_WritePin>
	L2_State(GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000392:	4802      	ldr	r0, [pc, #8]	; (800039c <Left_Forward+0x20>)
 8000394:	f000 fdb0 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40010800 	.word	0x40010800

080003a0 <Right_Forward>:
void Right_Forward(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	R1_State(GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <Right_Forward+0x20>)
 80003ac:	f000 fda4 	bl	8000ef8 <HAL_GPIO_WritePin>
	R2_State(GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b6:	4802      	ldr	r0, [pc, #8]	; (80003c0 <Right_Forward+0x20>)
 80003b8:	f000 fd9e 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40010800 	.word	0x40010800

080003c4 <Left_Backward>:

void Left_Backward(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	L1_State(GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <Left_Backward+0x20>)
 80003d0:	f000 fd92 	bl	8000ef8 <HAL_GPIO_WritePin>
	L2_State(GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003da:	4802      	ldr	r0, [pc, #8]	; (80003e4 <Left_Backward+0x20>)
 80003dc:	f000 fd8c 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40010800 	.word	0x40010800

080003e8 <Right_Backward>:
void Right_Backward(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	R1_State(GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <Right_Backward+0x20>)
 80003f4:	f000 fd80 	bl	8000ef8 <HAL_GPIO_WritePin>
	R2_State(GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003fe:	4802      	ldr	r0, [pc, #8]	; (8000408 <Right_Backward+0x20>)
 8000400:	f000 fd7a 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40010800 	.word	0x40010800

0800040c <Left_Stop>:

void Left_Stop(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	L1_State(GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <Left_Stop+0x20>)
 8000418:	f000 fd6e 	bl	8000ef8 <HAL_GPIO_WritePin>
	L2_State(GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000422:	4802      	ldr	r0, [pc, #8]	; (800042c <Left_Stop+0x20>)
 8000424:	f000 fd68 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40010800 	.word	0x40010800

08000430 <Right_Stop>:
void Right_Stop(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	R1_State(GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <Right_Stop+0x20>)
 800043c:	f000 fd5c 	bl	8000ef8 <HAL_GPIO_WritePin>
	R2_State(GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000446:	4802      	ldr	r0, [pc, #8]	; (8000450 <Right_Stop+0x20>)
 8000448:	f000 fd56 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40010800 	.word	0x40010800

08000454 <Forward>:

void Forward(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	Fixed_Speed();
 8000458:	f000 f86a 	bl	8000530 <Fixed_Speed>
	Left_Forward();
 800045c:	f7ff ff8e 	bl	800037c <Left_Forward>
	Right_Forward();
 8000460:	f7ff ff9e 	bl	80003a0 <Right_Forward>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}

08000468 <Backward>:
void Backward(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	Fixed_Speed();
 800046c:	f000 f860 	bl	8000530 <Fixed_Speed>
	Left_Backward();
 8000470:	f7ff ffa8 	bl	80003c4 <Left_Backward>
	Right_Backward();
 8000474:	f7ff ffb8 	bl	80003e8 <Right_Backward>
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <Stop>:
void Stop(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	Left_Stop();
 8000480:	f7ff ffc4 	bl	800040c <Left_Stop>
	Right_Stop();
 8000484:	f7ff ffd4 	bl	8000430 <Right_Stop>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <Left_Rot>:
void Left_Rot(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	Fixed_Speed();
 8000490:	f000 f84e 	bl	8000530 <Fixed_Speed>
	Left_Backward();
 8000494:	f7ff ff96 	bl	80003c4 <Left_Backward>
	Right_Forward();
 8000498:	f7ff ff82 	bl	80003a0 <Right_Forward>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <Right_Rot>:
void Right_Rot(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	Fixed_Speed();
 80004a4:	f000 f844 	bl	8000530 <Fixed_Speed>
	Left_Forward();
 80004a8:	f7ff ff68 	bl	800037c <Left_Forward>
	Right_Backward();
 80004ac:	f7ff ff9c 	bl	80003e8 <Right_Backward>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <Left_Turn>:
void Left_Turn(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	Left_Stop();
 80004b8:	f7ff ffa8 	bl	800040c <Left_Stop>
	Right_Forward();
 80004bc:	f7ff ff70 	bl	80003a0 <Right_Forward>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <Right_Turn>:
void Right_Turn(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	Right_Stop();
 80004c8:	f7ff ffb2 	bl	8000430 <Right_Stop>
	Left_Forward();
 80004cc:	f7ff ff56 	bl	800037c <Left_Forward>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <Speed_Up>:

void Speed_Up(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	if (Speed >= 1000)
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <Speed_Up+0x2c>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004e0:	d304      	bcc.n	80004ec <Speed_Up+0x18>
	{
		Speed = 1000;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <Speed_Up+0x2c>)
 80004e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004e8:	801a      	strh	r2, [r3, #0]
 80004ea:	e005      	b.n	80004f8 <Speed_Up+0x24>
	}
	else
	{
		Speed += 100;
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <Speed_Up+0x2c>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	3364      	adds	r3, #100	; 0x64
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b02      	ldr	r3, [pc, #8]	; (8000500 <Speed_Up+0x2c>)
 80004f6:	801a      	strh	r2, [r3, #0]
	}
	Fixed_Speed();
 80004f8:	f000 f81a 	bl	8000530 <Fixed_Speed>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000000 	.word	0x20000000

08000504 <Speed_Down>:
void Speed_Down(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	if (Speed <= 100)
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <Speed_Down+0x28>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	2b64      	cmp	r3, #100	; 0x64
 800050e:	d803      	bhi.n	8000518 <Speed_Down+0x14>
	{
		Speed = 100;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <Speed_Down+0x28>)
 8000512:	2264      	movs	r2, #100	; 0x64
 8000514:	801a      	strh	r2, [r3, #0]
 8000516:	e005      	b.n	8000524 <Speed_Down+0x20>
	}
	else
	{
		Speed -= 100;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <Speed_Down+0x28>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	3b64      	subs	r3, #100	; 0x64
 800051e:	b29a      	uxth	r2, r3
 8000520:	4b02      	ldr	r3, [pc, #8]	; (800052c <Speed_Down+0x28>)
 8000522:	801a      	strh	r2, [r3, #0]
	}
	Fixed_Speed();
 8000524:	f000 f804 	bl	8000530 <Fixed_Speed>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000000 	.word	0x20000000

08000530 <Fixed_Speed>:
void Fixed_Speed(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	TIM3->CCR3 = Speed;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <Fixed_Speed+0x1c>)
 8000536:	881a      	ldrh	r2, [r3, #0]
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <Fixed_Speed+0x20>)
 800053a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = Speed;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <Fixed_Speed+0x1c>)
 800053e:	881a      	ldrh	r2, [r3, #0]
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <Fixed_Speed+0x20>)
 8000542:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000000 	.word	0x20000000
 8000550:	40000400 	.word	0x40000400

08000554 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800055c:	e7fe      	b.n	800055c <Error_Handler+0x8>
	...

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_MspInit+0x5c>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a14      	ldr	r2, [pc, #80]	; (80005bc <HAL_MspInit+0x5c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_MspInit+0x5c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x5c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_MspInit+0x5c>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_MspInit+0x5c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_MspInit+0x60>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_MspInit+0x60>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010000 	.word	0x40010000

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <MemManage_Handler+0x4>

080005d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060a:	f000 f9f1 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <_sbrk+0x5c>)
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <_sbrk+0x60>)
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <_sbrk+0x64>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <_sbrk+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	d207      	bcs.n	8000654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000644:	f002 f8b2 	bl	80027ac <__errno>
 8000648:	4603      	mov	r3, r0
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e009      	b.n	8000668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <_sbrk+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20005000 	.word	0x20005000
 8000674:	00000400 	.word	0x00000400
 8000678:	20000098 	.word	0x20000098
 800067c:	20000148 	.word	0x20000148

08000680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08e      	sub	sp, #56	; 0x38
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]
 80006ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006bc:	4b32      	ldr	r3, [pc, #200]	; (8000788 <MX_TIM3_Init+0xfc>)
 80006be:	4a33      	ldr	r2, [pc, #204]	; (800078c <MX_TIM3_Init+0x100>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <MX_TIM3_Init+0xfc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c8:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <MX_TIM3_Init+0xfc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <MX_TIM3_Init+0xfc>)
 80006d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <MX_TIM3_Init+0xfc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006dc:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_TIM3_Init+0xfc>)
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006e2:	4829      	ldr	r0, [pc, #164]	; (8000788 <MX_TIM3_Init+0xfc>)
 80006e4:	f001 f83a 	bl	800175c <HAL_TIM_Base_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006ee:	f7ff ff31 	bl	8000554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4822      	ldr	r0, [pc, #136]	; (8000788 <MX_TIM3_Init+0xfc>)
 8000700:	f001 fa34 	bl	8001b6c <HAL_TIM_ConfigClockSource>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800070a:	f7ff ff23 	bl	8000554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800070e:	481e      	ldr	r0, [pc, #120]	; (8000788 <MX_TIM3_Init+0xfc>)
 8000710:	f001 f873 	bl	80017fa <HAL_TIM_PWM_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800071a:	f7ff ff1b 	bl	8000554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	4619      	mov	r1, r3
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_TIM3_Init+0xfc>)
 800072e:	f001 fd85 	bl	800223c <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000738:	f7ff ff0c 	bl	8000554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073c:	2360      	movs	r3, #96	; 0x60
 800073e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2208      	movs	r2, #8
 8000750:	4619      	mov	r1, r3
 8000752:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_TIM3_Init+0xfc>)
 8000754:	f001 f94c 	bl	80019f0 <HAL_TIM_PWM_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800075e:	f7ff fef9 	bl	8000554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	220c      	movs	r2, #12
 8000766:	4619      	mov	r1, r3
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <MX_TIM3_Init+0xfc>)
 800076a:	f001 f941 	bl	80019f0 <HAL_TIM_PWM_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000774:	f7ff feee 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <MX_TIM3_Init+0xfc>)
 800077a:	f000 f827 	bl	80007cc <HAL_TIM_MspPostInit>

}
 800077e:	bf00      	nop
 8000780:	3738      	adds	r7, #56	; 0x38
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000a4 	.word	0x200000a4
 800078c:	40000400 	.word	0x40000400

08000790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <HAL_TIM_Base_MspInit+0x34>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d10b      	bne.n	80007ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_TIM_Base_MspInit+0x38>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_TIM_Base_MspInit+0x38>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_TIM_Base_MspInit+0x38>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40000400 	.word	0x40000400
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_TIM_MspPostInit+0x58>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d117      	bne.n	800081c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_TIM_MspPostInit+0x5c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <HAL_TIM_MspPostInit+0x5c>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_TIM_MspPostInit+0x5c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000804:	2303      	movs	r3, #3
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2302      	movs	r3, #2
 800080e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <HAL_TIM_MspPostInit+0x60>)
 8000818:	f000 f9ea 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40000400 	.word	0x40000400
 8000828:	40021000 	.word	0x40021000
 800082c:	40010c00 	.word	0x40010c00

08000830 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f001 fd46 	bl	80022f8 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f7ff fe6f 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000ec 	.word	0x200000ec
 8000880:	40004400 	.word	0x40004400

08000884 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a1b      	ldr	r2, [pc, #108]	; (800090c <HAL_UART_MspInit+0x88>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d12f      	bne.n	8000904 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ae:	61d3      	str	r3, [r2, #28]
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008d4:	2304      	movs	r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <HAL_UART_MspInit+0x90>)
 80008e8:	f000 f982 	bl	8000bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008ec:	2308      	movs	r3, #8
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <HAL_UART_MspInit+0x90>)
 8000900:	f000 f976 	bl	8000bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40004400 	.word	0x40004400
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800

08000918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	; (8000950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	; (800095c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800093e:	f7ff fe9f 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000942:	f001 ff39 	bl	80027b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000946:	f7ff fc4d 	bl	80001e4 <main>
  bx lr
 800094a:	4770      	bx	lr
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000954:	08003104 	.word	0x08003104
  ldr r2, =_sbss
 8000958:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800095c:	20000144 	.word	0x20000144

08000960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_2_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x28>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f907 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	200f      	movs	r0, #15
 800097c:	f000 f808 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff fdee 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x54>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x58>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f911 	bl	8000bd6 <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295
 80009cc:	f000 f8e7 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_InitTick+0x5c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000004 	.word	0x20000004
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	20000008 	.word	0x20000008

080009f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x1c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x20>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <HAL_IncTick+0x20>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	20000130 	.word	0x20000130

08000a14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <HAL_GetTick+0x10>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000130 	.word	0x20000130

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff90 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff49 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff5e 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff90 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5f 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffb0 	bl	8000b44 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e169      	b.n	8000ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c04:	2201      	movs	r2, #1
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 8158 	bne.w	8000ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a9a      	ldr	r2, [pc, #616]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d05e      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c2c:	4a98      	ldr	r2, [pc, #608]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d875      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c32:	4a98      	ldr	r2, [pc, #608]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d058      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c38:	4a96      	ldr	r2, [pc, #600]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d86f      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c3e:	4a96      	ldr	r2, [pc, #600]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d052      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c44:	4a94      	ldr	r2, [pc, #592]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d869      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c4a:	4a94      	ldr	r2, [pc, #592]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d04c      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c50:	4a92      	ldr	r2, [pc, #584]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d863      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c56:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d046      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c5c:	4a90      	ldr	r2, [pc, #576]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d85d      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d82a      	bhi.n	8000cbc <HAL_GPIO_Init+0xcc>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d859      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <HAL_GPIO_Init+0x80>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000cc5 	.word	0x08000cc5
 8000c78:	08000cd7 	.word	0x08000cd7
 8000c7c:	08000d19 	.word	0x08000d19
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d1f 	.word	0x08000d1f
 8000c88:	08000d1f 	.word	0x08000d1f
 8000c8c:	08000d1f 	.word	0x08000d1f
 8000c90:	08000d1f 	.word	0x08000d1f
 8000c94:	08000d1f 	.word	0x08000d1f
 8000c98:	08000d1f 	.word	0x08000d1f
 8000c9c:	08000d1f 	.word	0x08000d1f
 8000ca0:	08000d1f 	.word	0x08000d1f
 8000ca4:	08000d1f 	.word	0x08000d1f
 8000ca8:	08000d1f 	.word	0x08000d1f
 8000cac:	08000d1f 	.word	0x08000d1f
 8000cb0:	08000d1f 	.word	0x08000d1f
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000ce1 	.word	0x08000ce1
 8000cbc:	4a79      	ldr	r2, [pc, #484]	; (8000ea4 <HAL_GPIO_Init+0x2b4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc2:	e02c      	b.n	8000d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	623b      	str	r3, [r7, #32]
          break;
 8000cca:	e029      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e024      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e01f      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e01a      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e013      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	611a      	str	r2, [r3, #16]
          break;
 8000d0a:	e009      	b.n	8000d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	615a      	str	r2, [r3, #20]
          break;
 8000d16:	e003      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          break;
 8000d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	; 0xff
 8000d24:	d801      	bhi.n	8000d2a <HAL_GPIO_Init+0x13a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e001      	b.n	8000d2e <HAL_GPIO_Init+0x13e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	; 0xff
 8000d34:	d802      	bhi.n	8000d3c <HAL_GPIO_Init+0x14c>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x152>
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	210f      	movs	r1, #15
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80b1 	beq.w	8000ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d88:	4a48      	ldr	r2, [pc, #288]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a40      	ldr	r2, [pc, #256]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d013      	beq.n	8000ddc <HAL_GPIO_Init+0x1ec>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00d      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3d      	ldr	r2, [pc, #244]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d101      	bne.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dee:	492f      	ldr	r1, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	492c      	ldr	r1, [pc, #176]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	600b      	str	r3, [r1, #0]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4922      	ldr	r1, [pc, #136]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	604b      	str	r3, [r1, #4]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	491e      	ldr	r1, [pc, #120]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	4918      	ldr	r1, [pc, #96]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	608b      	str	r3, [r1, #8]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4914      	ldr	r1, [pc, #80]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d021      	beq.n	8000ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60cb      	str	r3, [r1, #12]
 8000e8c:	e021      	b.n	8000ed2 <HAL_GPIO_Init+0x2e2>
 8000e8e:	bf00      	nop
 8000e90:	10320000 	.word	0x10320000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	10220000 	.word	0x10220000
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10120000 	.word	0x10120000
 8000ea4:	10110000 	.word	0x10110000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40011400 	.word	0x40011400
 8000ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4909      	ldr	r1, [pc, #36]	; (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f47f ae8e 	bne.w	8000c04 <HAL_GPIO_Init+0x14>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	; 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f14:	e003      	b.n	8000f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	041a      	lsls	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	611a      	str	r2, [r3, #16]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e26c      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8087 	beq.w	8001056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f48:	4b92      	ldr	r3, [pc, #584]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d00c      	beq.n	8000f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f54:	4b8f      	ldr	r3, [pc, #572]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d112      	bne.n	8000f86 <HAL_RCC_OscConfig+0x5e>
 8000f60:	4b8c      	ldr	r3, [pc, #560]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6c:	d10b      	bne.n	8000f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6e:	4b89      	ldr	r3, [pc, #548]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d06c      	beq.n	8001054 <HAL_RCC_OscConfig+0x12c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d168      	bne.n	8001054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e246      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x76>
 8000f90:	4b80      	ldr	r3, [pc, #512]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a7f      	ldr	r2, [pc, #508]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e02e      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x98>
 8000fa6:	4b7b      	ldr	r3, [pc, #492]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a7a      	ldr	r2, [pc, #488]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b78      	ldr	r3, [pc, #480]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a77      	ldr	r2, [pc, #476]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e01d      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0xbc>
 8000fca:	4b72      	ldr	r3, [pc, #456]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a71      	ldr	r2, [pc, #452]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a6e      	ldr	r2, [pc, #440]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e00b      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000fe4:	4b6b      	ldr	r3, [pc, #428]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a6a      	ldr	r2, [pc, #424]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b68      	ldr	r3, [pc, #416]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a67      	ldr	r2, [pc, #412]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fd06 	bl	8000a14 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fd02 	bl	8000a14 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e1fa      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0xe4>
 800102a:	e014      	b.n	8001056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fcf2 	bl	8000a14 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fcee 	bl	8000a14 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e1e6      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	4b53      	ldr	r3, [pc, #332]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x10c>
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d063      	beq.n	800112a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001062:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00b      	beq.n	8001086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800106e:	4b49      	ldr	r3, [pc, #292]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b08      	cmp	r3, #8
 8001078:	d11c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x18c>
 800107a:	4b46      	ldr	r3, [pc, #280]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d116      	bne.n	80010b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	4b43      	ldr	r3, [pc, #268]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <HAL_RCC_OscConfig+0x176>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e1ba      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4939      	ldr	r1, [pc, #228]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	e03a      	b.n	800112a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d020      	beq.n	80010fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_RCC_OscConfig+0x270>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fca7 	bl	8000a14 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ca:	f7ff fca3 	bl	8000a14 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e19b      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4927      	ldr	r1, [pc, #156]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	e015      	b.n	800112a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_RCC_OscConfig+0x270>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc86 	bl	8000a14 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110c:	f7ff fc82 	bl	8000a14 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e17a      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d03a      	beq.n	80011ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d019      	beq.n	8001172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_RCC_OscConfig+0x274>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fc66 	bl	8000a14 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fc62 	bl	8000a14 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e15a      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 fad8 	bl	8001720 <RCC_Delay>
 8001170:	e01c      	b.n	80011ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_RCC_OscConfig+0x274>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001178:	f7ff fc4c 	bl	8000a14 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117e:	e00f      	b.n	80011a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001180:	f7ff fc48 	bl	8000a14 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d908      	bls.n	80011a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e140      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	42420000 	.word	0x42420000
 800119c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	4b9e      	ldr	r3, [pc, #632]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1e9      	bne.n	8001180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80a6 	beq.w	8001306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011be:	4b97      	ldr	r3, [pc, #604]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10d      	bne.n	80011e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b94      	ldr	r3, [pc, #592]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a93      	ldr	r2, [pc, #588]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b91      	ldr	r3, [pc, #580]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e2:	2301      	movs	r3, #1
 80011e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b8e      	ldr	r3, [pc, #568]	; (8001420 <HAL_RCC_OscConfig+0x4f8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d118      	bne.n	8001224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f2:	4b8b      	ldr	r3, [pc, #556]	; (8001420 <HAL_RCC_OscConfig+0x4f8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a8a      	ldr	r2, [pc, #552]	; (8001420 <HAL_RCC_OscConfig+0x4f8>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fc09 	bl	8000a14 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001206:	f7ff fc05 	bl	8000a14 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e0fd      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <HAL_RCC_OscConfig+0x4f8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x312>
 800122c:	4b7b      	ldr	r3, [pc, #492]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4a7a      	ldr	r2, [pc, #488]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6213      	str	r3, [r2, #32]
 8001238:	e02d      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x334>
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a72      	ldr	r2, [pc, #456]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	e01c      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b05      	cmp	r3, #5
 8001262:	d10c      	bne.n	800127e <HAL_RCC_OscConfig+0x356>
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a6c      	ldr	r2, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6213      	str	r3, [r2, #32]
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a69      	ldr	r2, [pc, #420]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e00b      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a66      	ldr	r2, [pc, #408]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	4b64      	ldr	r3, [pc, #400]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a63      	ldr	r2, [pc, #396]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d015      	beq.n	80012ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fbb9 	bl	8000a14 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fbb5 	bl	8000a14 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e0ab      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012bc:	4b57      	ldr	r3, [pc, #348]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ee      	beq.n	80012a6 <HAL_RCC_OscConfig+0x37e>
 80012c8:	e014      	b.n	80012f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fba3 	bl	8000a14 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fb9f 	bl	8000a14 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e095      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ee      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d105      	bne.n	8001306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a47      	ldr	r2, [pc, #284]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8081 	beq.w	8001412 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b08      	cmp	r3, #8
 800131a:	d061      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d146      	bne.n	80013b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001324:	4b3f      	ldr	r3, [pc, #252]	; (8001424 <HAL_RCC_OscConfig+0x4fc>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb73 	bl	8000a14 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fb6f 	bl	8000a14 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e067      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f0      	bne.n	8001332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d108      	bne.n	800136c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	492d      	ldr	r1, [pc, #180]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a19      	ldr	r1, [r3, #32]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	430b      	orrs	r3, r1
 800137e:	4927      	ldr	r1, [pc, #156]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x4fc>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fb43 	bl	8000a14 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff fb3f 	bl	8000a14 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e037      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x46a>
 80013b0:	e02f      	b.n	8001412 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_RCC_OscConfig+0x4fc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb2c 	bl	8000a14 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff fb28 	bl	8000a14 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e020      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x498>
 80013de:	e018      	b.n	8001412 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e013      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40007000 	.word	0x40007000
 8001424:	42420060 	.word	0x42420060

08001428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0d0      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d910      	bls.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 0207 	bic.w	r2, r3, #7
 8001452:	4965      	ldr	r1, [pc, #404]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b8      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800148e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a52      	ldr	r2, [pc, #328]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	494d      	ldr	r1, [pc, #308]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d040      	beq.n	8001548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d115      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e07f      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e073      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06b      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f023 0203 	bic.w	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4936      	ldr	r1, [pc, #216]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001518:	f7ff fa7c 	bl	8000a14 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	e00a      	b.n	8001536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001520:	f7ff fa78 	bl	8000a14 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	; 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e053      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 020c 	and.w	r2, r3, #12
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1eb      	bne.n	8001520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d210      	bcs.n	8001578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 0207 	bic.w	r2, r3, #7
 800155e:	4922      	ldr	r1, [pc, #136]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e032      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4916      	ldr	r1, [pc, #88]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b6:	f000 f821 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	490a      	ldr	r1, [pc, #40]	; (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1cc>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1d0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f9da 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	080030b0 	.word	0x080030b0
 80015f4:	20000004 	.word	0x20000004
 80015f8:	20000008 	.word	0x20000008

080015fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	b490      	push	{r4, r7}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001604:	1d3c      	adds	r4, r7, #4
 8001606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800160c:	f240 2301 	movw	r3, #513	; 0x201
 8001610:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d002      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x40>
 8001636:	2b08      	cmp	r3, #8
 8001638:	d003      	beq.n	8001642 <HAL_RCC_GetSysClockFreq+0x46>
 800163a:	e02d      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800163e:	623b      	str	r3, [r7, #32]
      break;
 8001640:	e02d      	b.n	800169e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	0c9b      	lsrs	r3, r3, #18
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800164e:	4413      	add	r3, r2
 8001650:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001654:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	0c5b      	lsrs	r3, r3, #17
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800166e:	4413      	add	r3, r2
 8001670:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001674:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800167a:	fb02 f203 	mul.w	r2, r2, r3
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	fbb2 f3f3 	udiv	r3, r2, r3
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
 8001686:	e004      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	623b      	str	r3, [r7, #32]
      break;
 8001696:	e002      	b.n	800169e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	623b      	str	r3, [r7, #32]
      break;
 800169c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800169e:	6a3b      	ldr	r3, [r7, #32]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc90      	pop	{r4, r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	080030a0 	.word	0x080030a0
 80016b0:	40021000 	.word	0x40021000
 80016b4:	007a1200 	.word	0x007a1200
 80016b8:	003d0900 	.word	0x003d0900

080016bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <HAL_RCC_GetHCLKFreq+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016d4:	f7ff fff2 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4903      	ldr	r1, [pc, #12]	; (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	080030c0 	.word	0x080030c0

080016f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016fc:	f7ff ffde 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0adb      	lsrs	r3, r3, #11
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	4903      	ldr	r1, [pc, #12]	; (800171c <HAL_RCC_GetPCLK2Freq+0x24>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	080030c0 	.word	0x080030c0

08001720 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <RCC_Delay+0x34>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <RCC_Delay+0x38>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0a5b      	lsrs	r3, r3, #9
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800173c:	bf00      	nop
  }
  while (Delay --);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	60fa      	str	r2, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f9      	bne.n	800173c <RCC_Delay+0x1c>
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000004 	.word	0x20000004
 8001758:	10624dd3 	.word	0x10624dd3

0800175c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e041      	b.n	80017f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d106      	bne.n	8001788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff f804 	bl	8000790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3304      	adds	r3, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f000 faaa 	bl	8001cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e041      	b.n	8001890 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f839 	bl	8001898 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2202      	movs	r2, #2
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f000 fa5b 	bl	8001cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_TIM_PWM_Start+0x24>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e022      	b.n	8001916 <HAL_TIM_PWM_Start+0x6a>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d109      	bne.n	80018ea <HAL_TIM_PWM_Start+0x3e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	bf14      	ite	ne
 80018e2:	2301      	movne	r3, #1
 80018e4:	2300      	moveq	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	e015      	b.n	8001916 <HAL_TIM_PWM_Start+0x6a>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d109      	bne.n	8001904 <HAL_TIM_PWM_Start+0x58>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e008      	b.n	8001916 <HAL_TIM_PWM_Start+0x6a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e05e      	b.n	80019dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <HAL_TIM_PWM_Start+0x82>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800192c:	e013      	b.n	8001956 <HAL_TIM_PWM_Start+0xaa>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d104      	bne.n	800193e <HAL_TIM_PWM_Start+0x92>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800193c:	e00b      	b.n	8001956 <HAL_TIM_PWM_Start+0xaa>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d104      	bne.n	800194e <HAL_TIM_PWM_Start+0xa2>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800194c:	e003      	b.n	8001956 <HAL_TIM_PWM_Start+0xaa>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2202      	movs	r2, #2
 8001952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	6839      	ldr	r1, [r7, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fc48 	bl	80021f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <HAL_TIM_PWM_Start+0x138>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d107      	bne.n	800197e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800197c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <HAL_TIM_PWM_Start+0x138>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00e      	beq.n	80019a6 <HAL_TIM_PWM_Start+0xfa>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d009      	beq.n	80019a6 <HAL_TIM_PWM_Start+0xfa>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_TIM_PWM_Start+0x13c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d004      	beq.n	80019a6 <HAL_TIM_PWM_Start+0xfa>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_TIM_PWM_Start+0x140>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d111      	bne.n	80019ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b06      	cmp	r3, #6
 80019b6:	d010      	beq.n	80019da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c8:	e007      	b.n	80019da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0201 	orr.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40012c00 	.word	0x40012c00
 80019e8:	40000400 	.word	0x40000400
 80019ec:	40000800 	.word	0x40000800

080019f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e0ac      	b.n	8001b64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	f200 809f 	bhi.w	8001b58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001a1a:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001a55 	.word	0x08001a55
 8001a24:	08001b59 	.word	0x08001b59
 8001a28:	08001b59 	.word	0x08001b59
 8001a2c:	08001b59 	.word	0x08001b59
 8001a30:	08001a95 	.word	0x08001a95
 8001a34:	08001b59 	.word	0x08001b59
 8001a38:	08001b59 	.word	0x08001b59
 8001a3c:	08001b59 	.word	0x08001b59
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001b59 	.word	0x08001b59
 8001a48:	08001b59 	.word	0x08001b59
 8001a4c:	08001b59 	.word	0x08001b59
 8001a50:	08001b17 	.word	0x08001b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f9ac 	bl	8001db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0208 	orr.w	r2, r2, #8
 8001a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0204 	bic.w	r2, r2, #4
 8001a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6999      	ldr	r1, [r3, #24]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	619a      	str	r2, [r3, #24]
      break;
 8001a92:	e062      	b.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f9f2 	bl	8001e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6999      	ldr	r1, [r3, #24]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	021a      	lsls	r2, r3, #8
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	619a      	str	r2, [r3, #24]
      break;
 8001ad4:	e041      	b.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68b9      	ldr	r1, [r7, #8]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fa3b 	bl	8001f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f042 0208 	orr.w	r2, r2, #8
 8001af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0204 	bic.w	r2, r2, #4
 8001b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69d9      	ldr	r1, [r3, #28]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	61da      	str	r2, [r3, #28]
      break;
 8001b14:	e021      	b.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fa85 	bl	800202c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69d9      	ldr	r1, [r3, #28]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	021a      	lsls	r2, r3, #8
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	61da      	str	r2, [r3, #28]
      break;
 8001b56:	e000      	b.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_TIM_ConfigClockSource+0x18>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0b3      	b.n	8001cec <HAL_TIM_ConfigClockSource+0x180>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001baa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bbc:	d03e      	beq.n	8001c3c <HAL_TIM_ConfigClockSource+0xd0>
 8001bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bc2:	f200 8087 	bhi.w	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
 8001bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bca:	f000 8085 	beq.w	8001cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd2:	d87f      	bhi.n	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
 8001bd4:	2b70      	cmp	r3, #112	; 0x70
 8001bd6:	d01a      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0xa2>
 8001bd8:	2b70      	cmp	r3, #112	; 0x70
 8001bda:	d87b      	bhi.n	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
 8001bdc:	2b60      	cmp	r3, #96	; 0x60
 8001bde:	d050      	beq.n	8001c82 <HAL_TIM_ConfigClockSource+0x116>
 8001be0:	2b60      	cmp	r3, #96	; 0x60
 8001be2:	d877      	bhi.n	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
 8001be4:	2b50      	cmp	r3, #80	; 0x50
 8001be6:	d03c      	beq.n	8001c62 <HAL_TIM_ConfigClockSource+0xf6>
 8001be8:	2b50      	cmp	r3, #80	; 0x50
 8001bea:	d873      	bhi.n	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d058      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x136>
 8001bf0:	2b40      	cmp	r3, #64	; 0x40
 8001bf2:	d86f      	bhi.n	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
 8001bf4:	2b30      	cmp	r3, #48	; 0x30
 8001bf6:	d064      	beq.n	8001cc2 <HAL_TIM_ConfigClockSource+0x156>
 8001bf8:	2b30      	cmp	r3, #48	; 0x30
 8001bfa:	d86b      	bhi.n	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d060      	beq.n	8001cc2 <HAL_TIM_ConfigClockSource+0x156>
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d867      	bhi.n	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d05c      	beq.n	8001cc2 <HAL_TIM_ConfigClockSource+0x156>
 8001c08:	2b10      	cmp	r3, #16
 8001c0a:	d05a      	beq.n	8001cc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001c0c:	e062      	b.n	8001cd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6899      	ldr	r1, [r3, #8]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f000 faca 	bl	80021b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	609a      	str	r2, [r3, #8]
      break;
 8001c3a:	e04e      	b.n	8001cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f000 fab3 	bl	80021b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c5e:	609a      	str	r2, [r3, #8]
      break;
 8001c60:	e03b      	b.n	8001cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f000 fa2a 	bl	80020c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2150      	movs	r1, #80	; 0x50
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fa81 	bl	8002182 <TIM_ITRx_SetConfig>
      break;
 8001c80:	e02b      	b.n	8001cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f000 fa48 	bl	8002124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2160      	movs	r1, #96	; 0x60
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fa71 	bl	8002182 <TIM_ITRx_SetConfig>
      break;
 8001ca0:	e01b      	b.n	8001cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f000 fa0a 	bl	80020c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2140      	movs	r1, #64	; 0x40
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fa61 	bl	8002182 <TIM_ITRx_SetConfig>
      break;
 8001cc0:	e00b      	b.n	8001cda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f000 fa58 	bl	8002182 <TIM_ITRx_SetConfig>
        break;
 8001cd2:	e002      	b.n	8001cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cd4:	bf00      	nop
 8001cd6:	e000      	b.n	8001cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a29      	ldr	r2, [pc, #164]	; (8001dac <TIM_Base_SetConfig+0xb8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00b      	beq.n	8001d24 <TIM_Base_SetConfig+0x30>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d12:	d007      	beq.n	8001d24 <TIM_Base_SetConfig+0x30>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <TIM_Base_SetConfig+0xbc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <TIM_Base_SetConfig+0x30>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <TIM_Base_SetConfig+0xc0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d108      	bne.n	8001d36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <TIM_Base_SetConfig+0xb8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00b      	beq.n	8001d56 <TIM_Base_SetConfig+0x62>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d44:	d007      	beq.n	8001d56 <TIM_Base_SetConfig+0x62>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <TIM_Base_SetConfig+0xbc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d003      	beq.n	8001d56 <TIM_Base_SetConfig+0x62>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <TIM_Base_SetConfig+0xc0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d108      	bne.n	8001d68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <TIM_Base_SetConfig+0xb8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d103      	bne.n	8001d9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	615a      	str	r2, [r3, #20]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	40012c00 	.word	0x40012c00
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40000800 	.word	0x40000800

08001db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	f023 0201 	bic.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f023 0302 	bic.w	r3, r3, #2
 8001e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <TIM_OC1_SetConfig+0xc8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d10c      	bne.n	8001e2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f023 0308 	bic.w	r3, r3, #8
 8001e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <TIM_OC1_SetConfig+0xc8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d111      	bne.n	8001e5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	621a      	str	r2, [r3, #32]
}
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40012c00 	.word	0x40012c00

08001e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	f023 0210 	bic.w	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f023 0320 	bic.w	r3, r3, #32
 8001ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <TIM_OC2_SetConfig+0xd0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10d      	bne.n	8001f00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001efe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <TIM_OC2_SetConfig+0xd0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d113      	bne.n	8001f30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	621a      	str	r2, [r3, #32]
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40012c00 	.word	0x40012c00

08001f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <TIM_OC3_SetConfig+0xd0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10d      	bne.n	8001fd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <TIM_OC3_SetConfig+0xd0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d113      	bne.n	8002002 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	621a      	str	r2, [r3, #32]
}
 800201c:	bf00      	nop
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00

0800202c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	031b      	lsls	r3, r3, #12
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <TIM_OC4_SetConfig+0x98>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d109      	bne.n	80020a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	019b      	lsls	r3, r3, #6
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	621a      	str	r2, [r3, #32]
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40012c00 	.word	0x40012c00

080020c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	f023 0201 	bic.w	r2, r3, #1
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f023 030a 	bic.w	r3, r3, #10
 8002104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	621a      	str	r2, [r3, #32]
}
 800211a:	bf00      	nop
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f023 0210 	bic.w	r2, r3, #16
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800214e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	031b      	lsls	r3, r3, #12
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002160:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	621a      	str	r2, [r3, #32]
}
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	f043 0307 	orr.w	r3, r3, #7
 80021a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	021a      	lsls	r2, r3, #8
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	431a      	orrs	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4313      	orrs	r3, r2
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	609a      	str	r2, [r3, #8]
}
 80021ea:	bf00      	nop
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2201      	movs	r2, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a1a      	ldr	r2, [r3, #32]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	43db      	mvns	r3, r3
 8002216:	401a      	ands	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	431a      	orrs	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	621a      	str	r2, [r3, #32]
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002250:	2302      	movs	r3, #2
 8002252:	e046      	b.n	80022e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00e      	beq.n	80022b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a0:	d009      	beq.n	80022b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d004      	beq.n	80022b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10c      	bne.n	80022d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800

080022f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e03f      	b.n	800238a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fab0 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f9a7 	bl	8002690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b08a      	sub	sp, #40	; 0x28
 8002396:	af02      	add	r7, sp, #8
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d17c      	bne.n	80024ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_UART_Transmit+0x2c>
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e075      	b.n	80024ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x3e>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e06e      	b.n	80024ae <HAL_UART_Transmit+0x11c>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e6:	f7fe fb15 	bl	8000a14 <HAL_GetTick>
 80023ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002400:	d108      	bne.n	8002414 <HAL_UART_Transmit+0x82>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e003      	b.n	800241c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002424:	e02a      	b.n	800247c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f8e2 	bl	80025fa <UART_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e036      	b.n	80024ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3302      	adds	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	e007      	b.n	800246e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3301      	adds	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1cf      	bne.n	8002426 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2200      	movs	r2, #0
 800248e:	2140      	movs	r1, #64	; 0x40
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f8b2 	bl	80025fa <UART_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b08a      	sub	sp, #40	; 0x28
 80024ba:	af02      	add	r7, sp, #8
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	f040 808c 	bne.w	80025f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_UART_Receive+0x2e>
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e084      	b.n	80025f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_UART_Receive+0x40>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e07d      	b.n	80025f2 <HAL_UART_Receive+0x13c>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2222      	movs	r2, #34	; 0x22
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002512:	f7fe fa7f 	bl	8000a14 <HAL_GetTick>
 8002516:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	d108      	bne.n	8002540 <HAL_UART_Receive+0x8a>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e003      	b.n	8002548 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002550:	e043      	b.n	80025da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	2120      	movs	r1, #32
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f84c 	bl	80025fa <UART_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e042      	b.n	80025f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	b29b      	uxth	r3, r3
 800257a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257e:	b29a      	uxth	r2, r3
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	3302      	adds	r3, #2
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e01f      	b.n	80025cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002594:	d007      	beq.n	80025a6 <HAL_UART_Receive+0xf0>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <HAL_UART_Receive+0xfe>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e008      	b.n	80025c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1b6      	bne.n	8002552 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	4613      	mov	r3, r2
 8002608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800260a:	e02c      	b.n	8002666 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d028      	beq.n	8002666 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <UART_WaitOnFlagUntilTimeout+0x30>
 800261a:	f7fe f9fb 	bl	8000a14 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	429a      	cmp	r2, r3
 8002628:	d21d      	bcs.n	8002666 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002638:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e00f      	b.n	8002686 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	429a      	cmp	r2, r3
 8002682:	d0c3      	beq.n	800260c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026ca:	f023 030c 	bic.w	r3, r3, #12
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2c      	ldr	r2, [pc, #176]	; (80027a4 <UART_SetConfig+0x114>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d103      	bne.n	8002700 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026f8:	f7fe fffe 	bl	80016f8 <HAL_RCC_GetPCLK2Freq>
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	e002      	b.n	8002706 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002700:	f7fe ffe6 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 8002704:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	009a      	lsls	r2, r3, #2
 8002710:	441a      	add	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <UART_SetConfig+0x118>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	0119      	lsls	r1, r3, #4
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009a      	lsls	r2, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fbb2 f2f3 	udiv	r2, r2, r3
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <UART_SetConfig+0x118>)
 800273e:	fba3 0302 	umull	r0, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	fb00 f303 	mul.w	r3, r0, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	3332      	adds	r3, #50	; 0x32
 8002750:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <UART_SetConfig+0x118>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275c:	4419      	add	r1, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009a      	lsls	r2, r3, #2
 8002768:	441a      	add	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fbb2 f2f3 	udiv	r2, r2, r3
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <UART_SetConfig+0x118>)
 8002776:	fba3 0302 	umull	r0, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2064      	movs	r0, #100	; 0x64
 800277e:	fb00 f303 	mul.w	r3, r0, r3
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	3332      	adds	r3, #50	; 0x32
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <UART_SetConfig+0x118>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	440a      	add	r2, r1
 800279a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40013800 	.word	0x40013800
 80027a8:	51eb851f 	.word	0x51eb851f

080027ac <__errno>:
 80027ac:	4b01      	ldr	r3, [pc, #4]	; (80027b4 <__errno+0x8>)
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000010 	.word	0x20000010

080027b8 <__libc_init_array>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	2600      	movs	r6, #0
 80027bc:	4d0c      	ldr	r5, [pc, #48]	; (80027f0 <__libc_init_array+0x38>)
 80027be:	4c0d      	ldr	r4, [pc, #52]	; (80027f4 <__libc_init_array+0x3c>)
 80027c0:	1b64      	subs	r4, r4, r5
 80027c2:	10a4      	asrs	r4, r4, #2
 80027c4:	42a6      	cmp	r6, r4
 80027c6:	d109      	bne.n	80027dc <__libc_init_array+0x24>
 80027c8:	f000 fc5c 	bl	8003084 <_init>
 80027cc:	2600      	movs	r6, #0
 80027ce:	4d0a      	ldr	r5, [pc, #40]	; (80027f8 <__libc_init_array+0x40>)
 80027d0:	4c0a      	ldr	r4, [pc, #40]	; (80027fc <__libc_init_array+0x44>)
 80027d2:	1b64      	subs	r4, r4, r5
 80027d4:	10a4      	asrs	r4, r4, #2
 80027d6:	42a6      	cmp	r6, r4
 80027d8:	d105      	bne.n	80027e6 <__libc_init_array+0x2e>
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e0:	4798      	blx	r3
 80027e2:	3601      	adds	r6, #1
 80027e4:	e7ee      	b.n	80027c4 <__libc_init_array+0xc>
 80027e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ea:	4798      	blx	r3
 80027ec:	3601      	adds	r6, #1
 80027ee:	e7f2      	b.n	80027d6 <__libc_init_array+0x1e>
 80027f0:	080030fc 	.word	0x080030fc
 80027f4:	080030fc 	.word	0x080030fc
 80027f8:	080030fc 	.word	0x080030fc
 80027fc:	08003100 	.word	0x08003100

08002800 <memset>:
 8002800:	4603      	mov	r3, r0
 8002802:	4402      	add	r2, r0
 8002804:	4293      	cmp	r3, r2
 8002806:	d100      	bne.n	800280a <memset+0xa>
 8002808:	4770      	bx	lr
 800280a:	f803 1b01 	strb.w	r1, [r3], #1
 800280e:	e7f9      	b.n	8002804 <memset+0x4>

08002810 <siprintf>:
 8002810:	b40e      	push	{r1, r2, r3}
 8002812:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002816:	b500      	push	{lr}
 8002818:	b09c      	sub	sp, #112	; 0x70
 800281a:	ab1d      	add	r3, sp, #116	; 0x74
 800281c:	9002      	str	r0, [sp, #8]
 800281e:	9006      	str	r0, [sp, #24]
 8002820:	9107      	str	r1, [sp, #28]
 8002822:	9104      	str	r1, [sp, #16]
 8002824:	4808      	ldr	r0, [pc, #32]	; (8002848 <siprintf+0x38>)
 8002826:	4909      	ldr	r1, [pc, #36]	; (800284c <siprintf+0x3c>)
 8002828:	f853 2b04 	ldr.w	r2, [r3], #4
 800282c:	9105      	str	r1, [sp, #20]
 800282e:	6800      	ldr	r0, [r0, #0]
 8002830:	a902      	add	r1, sp, #8
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	f000 f868 	bl	8002908 <_svfiprintf_r>
 8002838:	2200      	movs	r2, #0
 800283a:	9b02      	ldr	r3, [sp, #8]
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	b01c      	add	sp, #112	; 0x70
 8002840:	f85d eb04 	ldr.w	lr, [sp], #4
 8002844:	b003      	add	sp, #12
 8002846:	4770      	bx	lr
 8002848:	20000010 	.word	0x20000010
 800284c:	ffff0208 	.word	0xffff0208

08002850 <__ssputs_r>:
 8002850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	688e      	ldr	r6, [r1, #8]
 8002856:	4682      	mov	sl, r0
 8002858:	429e      	cmp	r6, r3
 800285a:	460c      	mov	r4, r1
 800285c:	4690      	mov	r8, r2
 800285e:	461f      	mov	r7, r3
 8002860:	d838      	bhi.n	80028d4 <__ssputs_r+0x84>
 8002862:	898a      	ldrh	r2, [r1, #12]
 8002864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002868:	d032      	beq.n	80028d0 <__ssputs_r+0x80>
 800286a:	6825      	ldr	r5, [r4, #0]
 800286c:	6909      	ldr	r1, [r1, #16]
 800286e:	3301      	adds	r3, #1
 8002870:	eba5 0901 	sub.w	r9, r5, r1
 8002874:	6965      	ldr	r5, [r4, #20]
 8002876:	444b      	add	r3, r9
 8002878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800287c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002880:	106d      	asrs	r5, r5, #1
 8002882:	429d      	cmp	r5, r3
 8002884:	bf38      	it	cc
 8002886:	461d      	movcc	r5, r3
 8002888:	0553      	lsls	r3, r2, #21
 800288a:	d531      	bpl.n	80028f0 <__ssputs_r+0xa0>
 800288c:	4629      	mov	r1, r5
 800288e:	f000 fb53 	bl	8002f38 <_malloc_r>
 8002892:	4606      	mov	r6, r0
 8002894:	b950      	cbnz	r0, 80028ac <__ssputs_r+0x5c>
 8002896:	230c      	movs	r3, #12
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	f8ca 3000 	str.w	r3, [sl]
 80028a0:	89a3      	ldrh	r3, [r4, #12]
 80028a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a6:	81a3      	strh	r3, [r4, #12]
 80028a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ac:	464a      	mov	r2, r9
 80028ae:	6921      	ldr	r1, [r4, #16]
 80028b0:	f000 face 	bl	8002e50 <memcpy>
 80028b4:	89a3      	ldrh	r3, [r4, #12]
 80028b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028be:	81a3      	strh	r3, [r4, #12]
 80028c0:	6126      	str	r6, [r4, #16]
 80028c2:	444e      	add	r6, r9
 80028c4:	6026      	str	r6, [r4, #0]
 80028c6:	463e      	mov	r6, r7
 80028c8:	6165      	str	r5, [r4, #20]
 80028ca:	eba5 0509 	sub.w	r5, r5, r9
 80028ce:	60a5      	str	r5, [r4, #8]
 80028d0:	42be      	cmp	r6, r7
 80028d2:	d900      	bls.n	80028d6 <__ssputs_r+0x86>
 80028d4:	463e      	mov	r6, r7
 80028d6:	4632      	mov	r2, r6
 80028d8:	4641      	mov	r1, r8
 80028da:	6820      	ldr	r0, [r4, #0]
 80028dc:	f000 fac6 	bl	8002e6c <memmove>
 80028e0:	68a3      	ldr	r3, [r4, #8]
 80028e2:	6822      	ldr	r2, [r4, #0]
 80028e4:	1b9b      	subs	r3, r3, r6
 80028e6:	4432      	add	r2, r6
 80028e8:	2000      	movs	r0, #0
 80028ea:	60a3      	str	r3, [r4, #8]
 80028ec:	6022      	str	r2, [r4, #0]
 80028ee:	e7db      	b.n	80028a8 <__ssputs_r+0x58>
 80028f0:	462a      	mov	r2, r5
 80028f2:	f000 fb7b 	bl	8002fec <_realloc_r>
 80028f6:	4606      	mov	r6, r0
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d1e1      	bne.n	80028c0 <__ssputs_r+0x70>
 80028fc:	4650      	mov	r0, sl
 80028fe:	6921      	ldr	r1, [r4, #16]
 8002900:	f000 face 	bl	8002ea0 <_free_r>
 8002904:	e7c7      	b.n	8002896 <__ssputs_r+0x46>
	...

08002908 <_svfiprintf_r>:
 8002908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290c:	4698      	mov	r8, r3
 800290e:	898b      	ldrh	r3, [r1, #12]
 8002910:	4607      	mov	r7, r0
 8002912:	061b      	lsls	r3, r3, #24
 8002914:	460d      	mov	r5, r1
 8002916:	4614      	mov	r4, r2
 8002918:	b09d      	sub	sp, #116	; 0x74
 800291a:	d50e      	bpl.n	800293a <_svfiprintf_r+0x32>
 800291c:	690b      	ldr	r3, [r1, #16]
 800291e:	b963      	cbnz	r3, 800293a <_svfiprintf_r+0x32>
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	f000 fb09 	bl	8002f38 <_malloc_r>
 8002926:	6028      	str	r0, [r5, #0]
 8002928:	6128      	str	r0, [r5, #16]
 800292a:	b920      	cbnz	r0, 8002936 <_svfiprintf_r+0x2e>
 800292c:	230c      	movs	r3, #12
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	e0d1      	b.n	8002ada <_svfiprintf_r+0x1d2>
 8002936:	2340      	movs	r3, #64	; 0x40
 8002938:	616b      	str	r3, [r5, #20]
 800293a:	2300      	movs	r3, #0
 800293c:	9309      	str	r3, [sp, #36]	; 0x24
 800293e:	2320      	movs	r3, #32
 8002940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002944:	2330      	movs	r3, #48	; 0x30
 8002946:	f04f 0901 	mov.w	r9, #1
 800294a:	f8cd 800c 	str.w	r8, [sp, #12]
 800294e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002af4 <_svfiprintf_r+0x1ec>
 8002952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002956:	4623      	mov	r3, r4
 8002958:	469a      	mov	sl, r3
 800295a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800295e:	b10a      	cbz	r2, 8002964 <_svfiprintf_r+0x5c>
 8002960:	2a25      	cmp	r2, #37	; 0x25
 8002962:	d1f9      	bne.n	8002958 <_svfiprintf_r+0x50>
 8002964:	ebba 0b04 	subs.w	fp, sl, r4
 8002968:	d00b      	beq.n	8002982 <_svfiprintf_r+0x7a>
 800296a:	465b      	mov	r3, fp
 800296c:	4622      	mov	r2, r4
 800296e:	4629      	mov	r1, r5
 8002970:	4638      	mov	r0, r7
 8002972:	f7ff ff6d 	bl	8002850 <__ssputs_r>
 8002976:	3001      	adds	r0, #1
 8002978:	f000 80aa 	beq.w	8002ad0 <_svfiprintf_r+0x1c8>
 800297c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800297e:	445a      	add	r2, fp
 8002980:	9209      	str	r2, [sp, #36]	; 0x24
 8002982:	f89a 3000 	ldrb.w	r3, [sl]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80a2 	beq.w	8002ad0 <_svfiprintf_r+0x1c8>
 800298c:	2300      	movs	r3, #0
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
 8002992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002996:	f10a 0a01 	add.w	sl, sl, #1
 800299a:	9304      	str	r3, [sp, #16]
 800299c:	9307      	str	r3, [sp, #28]
 800299e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029a2:	931a      	str	r3, [sp, #104]	; 0x68
 80029a4:	4654      	mov	r4, sl
 80029a6:	2205      	movs	r2, #5
 80029a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ac:	4851      	ldr	r0, [pc, #324]	; (8002af4 <_svfiprintf_r+0x1ec>)
 80029ae:	f000 fa41 	bl	8002e34 <memchr>
 80029b2:	9a04      	ldr	r2, [sp, #16]
 80029b4:	b9d8      	cbnz	r0, 80029ee <_svfiprintf_r+0xe6>
 80029b6:	06d0      	lsls	r0, r2, #27
 80029b8:	bf44      	itt	mi
 80029ba:	2320      	movmi	r3, #32
 80029bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029c0:	0711      	lsls	r1, r2, #28
 80029c2:	bf44      	itt	mi
 80029c4:	232b      	movmi	r3, #43	; 0x2b
 80029c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029ca:	f89a 3000 	ldrb.w	r3, [sl]
 80029ce:	2b2a      	cmp	r3, #42	; 0x2a
 80029d0:	d015      	beq.n	80029fe <_svfiprintf_r+0xf6>
 80029d2:	4654      	mov	r4, sl
 80029d4:	2000      	movs	r0, #0
 80029d6:	f04f 0c0a 	mov.w	ip, #10
 80029da:	9a07      	ldr	r2, [sp, #28]
 80029dc:	4621      	mov	r1, r4
 80029de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029e2:	3b30      	subs	r3, #48	; 0x30
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	d94e      	bls.n	8002a86 <_svfiprintf_r+0x17e>
 80029e8:	b1b0      	cbz	r0, 8002a18 <_svfiprintf_r+0x110>
 80029ea:	9207      	str	r2, [sp, #28]
 80029ec:	e014      	b.n	8002a18 <_svfiprintf_r+0x110>
 80029ee:	eba0 0308 	sub.w	r3, r0, r8
 80029f2:	fa09 f303 	lsl.w	r3, r9, r3
 80029f6:	4313      	orrs	r3, r2
 80029f8:	46a2      	mov	sl, r4
 80029fa:	9304      	str	r3, [sp, #16]
 80029fc:	e7d2      	b.n	80029a4 <_svfiprintf_r+0x9c>
 80029fe:	9b03      	ldr	r3, [sp, #12]
 8002a00:	1d19      	adds	r1, r3, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	9103      	str	r1, [sp, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bfbb      	ittet	lt
 8002a0a:	425b      	neglt	r3, r3
 8002a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8002a10:	9307      	strge	r3, [sp, #28]
 8002a12:	9307      	strlt	r3, [sp, #28]
 8002a14:	bfb8      	it	lt
 8002a16:	9204      	strlt	r2, [sp, #16]
 8002a18:	7823      	ldrb	r3, [r4, #0]
 8002a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a1c:	d10c      	bne.n	8002a38 <_svfiprintf_r+0x130>
 8002a1e:	7863      	ldrb	r3, [r4, #1]
 8002a20:	2b2a      	cmp	r3, #42	; 0x2a
 8002a22:	d135      	bne.n	8002a90 <_svfiprintf_r+0x188>
 8002a24:	9b03      	ldr	r3, [sp, #12]
 8002a26:	3402      	adds	r4, #2
 8002a28:	1d1a      	adds	r2, r3, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	9203      	str	r2, [sp, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bfb8      	it	lt
 8002a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a36:	9305      	str	r3, [sp, #20]
 8002a38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b04 <_svfiprintf_r+0x1fc>
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	4650      	mov	r0, sl
 8002a40:	7821      	ldrb	r1, [r4, #0]
 8002a42:	f000 f9f7 	bl	8002e34 <memchr>
 8002a46:	b140      	cbz	r0, 8002a5a <_svfiprintf_r+0x152>
 8002a48:	2340      	movs	r3, #64	; 0x40
 8002a4a:	eba0 000a 	sub.w	r0, r0, sl
 8002a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8002a52:	9b04      	ldr	r3, [sp, #16]
 8002a54:	3401      	adds	r4, #1
 8002a56:	4303      	orrs	r3, r0
 8002a58:	9304      	str	r3, [sp, #16]
 8002a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a5e:	2206      	movs	r2, #6
 8002a60:	4825      	ldr	r0, [pc, #148]	; (8002af8 <_svfiprintf_r+0x1f0>)
 8002a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a66:	f000 f9e5 	bl	8002e34 <memchr>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d038      	beq.n	8002ae0 <_svfiprintf_r+0x1d8>
 8002a6e:	4b23      	ldr	r3, [pc, #140]	; (8002afc <_svfiprintf_r+0x1f4>)
 8002a70:	bb1b      	cbnz	r3, 8002aba <_svfiprintf_r+0x1b2>
 8002a72:	9b03      	ldr	r3, [sp, #12]
 8002a74:	3307      	adds	r3, #7
 8002a76:	f023 0307 	bic.w	r3, r3, #7
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	9303      	str	r3, [sp, #12]
 8002a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a80:	4433      	add	r3, r6
 8002a82:	9309      	str	r3, [sp, #36]	; 0x24
 8002a84:	e767      	b.n	8002956 <_svfiprintf_r+0x4e>
 8002a86:	460c      	mov	r4, r1
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a8e:	e7a5      	b.n	80029dc <_svfiprintf_r+0xd4>
 8002a90:	2300      	movs	r3, #0
 8002a92:	f04f 0c0a 	mov.w	ip, #10
 8002a96:	4619      	mov	r1, r3
 8002a98:	3401      	adds	r4, #1
 8002a9a:	9305      	str	r3, [sp, #20]
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002aa2:	3a30      	subs	r2, #48	; 0x30
 8002aa4:	2a09      	cmp	r2, #9
 8002aa6:	d903      	bls.n	8002ab0 <_svfiprintf_r+0x1a8>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0c5      	beq.n	8002a38 <_svfiprintf_r+0x130>
 8002aac:	9105      	str	r1, [sp, #20]
 8002aae:	e7c3      	b.n	8002a38 <_svfiprintf_r+0x130>
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ab8:	e7f0      	b.n	8002a9c <_svfiprintf_r+0x194>
 8002aba:	ab03      	add	r3, sp, #12
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	462a      	mov	r2, r5
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <_svfiprintf_r+0x1f8>)
 8002ac4:	a904      	add	r1, sp, #16
 8002ac6:	f3af 8000 	nop.w
 8002aca:	1c42      	adds	r2, r0, #1
 8002acc:	4606      	mov	r6, r0
 8002ace:	d1d6      	bne.n	8002a7e <_svfiprintf_r+0x176>
 8002ad0:	89ab      	ldrh	r3, [r5, #12]
 8002ad2:	065b      	lsls	r3, r3, #25
 8002ad4:	f53f af2c 	bmi.w	8002930 <_svfiprintf_r+0x28>
 8002ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ada:	b01d      	add	sp, #116	; 0x74
 8002adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae0:	ab03      	add	r3, sp, #12
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	462a      	mov	r2, r5
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <_svfiprintf_r+0x1f8>)
 8002aea:	a904      	add	r1, sp, #16
 8002aec:	f000 f87c 	bl	8002be8 <_printf_i>
 8002af0:	e7eb      	b.n	8002aca <_svfiprintf_r+0x1c2>
 8002af2:	bf00      	nop
 8002af4:	080030c8 	.word	0x080030c8
 8002af8:	080030d2 	.word	0x080030d2
 8002afc:	00000000 	.word	0x00000000
 8002b00:	08002851 	.word	0x08002851
 8002b04:	080030ce 	.word	0x080030ce

08002b08 <_printf_common>:
 8002b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	4616      	mov	r6, r2
 8002b0e:	4699      	mov	r9, r3
 8002b10:	688a      	ldr	r2, [r1, #8]
 8002b12:	690b      	ldr	r3, [r1, #16]
 8002b14:	4607      	mov	r7, r0
 8002b16:	4293      	cmp	r3, r2
 8002b18:	bfb8      	it	lt
 8002b1a:	4613      	movlt	r3, r2
 8002b1c:	6033      	str	r3, [r6, #0]
 8002b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b22:	460c      	mov	r4, r1
 8002b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b28:	b10a      	cbz	r2, 8002b2e <_printf_common+0x26>
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	6033      	str	r3, [r6, #0]
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	0699      	lsls	r1, r3, #26
 8002b32:	bf42      	ittt	mi
 8002b34:	6833      	ldrmi	r3, [r6, #0]
 8002b36:	3302      	addmi	r3, #2
 8002b38:	6033      	strmi	r3, [r6, #0]
 8002b3a:	6825      	ldr	r5, [r4, #0]
 8002b3c:	f015 0506 	ands.w	r5, r5, #6
 8002b40:	d106      	bne.n	8002b50 <_printf_common+0x48>
 8002b42:	f104 0a19 	add.w	sl, r4, #25
 8002b46:	68e3      	ldr	r3, [r4, #12]
 8002b48:	6832      	ldr	r2, [r6, #0]
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	42ab      	cmp	r3, r5
 8002b4e:	dc28      	bgt.n	8002ba2 <_printf_common+0x9a>
 8002b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b54:	1e13      	subs	r3, r2, #0
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	bf18      	it	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	0692      	lsls	r2, r2, #26
 8002b5e:	d42d      	bmi.n	8002bbc <_printf_common+0xb4>
 8002b60:	4649      	mov	r1, r9
 8002b62:	4638      	mov	r0, r7
 8002b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b68:	47c0      	blx	r8
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	d020      	beq.n	8002bb0 <_printf_common+0xa8>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	68e5      	ldr	r5, [r4, #12]
 8002b72:	f003 0306 	and.w	r3, r3, #6
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf18      	it	ne
 8002b7a:	2500      	movne	r5, #0
 8002b7c:	6832      	ldr	r2, [r6, #0]
 8002b7e:	f04f 0600 	mov.w	r6, #0
 8002b82:	68a3      	ldr	r3, [r4, #8]
 8002b84:	bf08      	it	eq
 8002b86:	1aad      	subeq	r5, r5, r2
 8002b88:	6922      	ldr	r2, [r4, #16]
 8002b8a:	bf08      	it	eq
 8002b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b90:	4293      	cmp	r3, r2
 8002b92:	bfc4      	itt	gt
 8002b94:	1a9b      	subgt	r3, r3, r2
 8002b96:	18ed      	addgt	r5, r5, r3
 8002b98:	341a      	adds	r4, #26
 8002b9a:	42b5      	cmp	r5, r6
 8002b9c:	d11a      	bne.n	8002bd4 <_printf_common+0xcc>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e008      	b.n	8002bb4 <_printf_common+0xac>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4652      	mov	r2, sl
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	4638      	mov	r0, r7
 8002baa:	47c0      	blx	r8
 8002bac:	3001      	adds	r0, #1
 8002bae:	d103      	bne.n	8002bb8 <_printf_common+0xb0>
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb8:	3501      	adds	r5, #1
 8002bba:	e7c4      	b.n	8002b46 <_printf_common+0x3e>
 8002bbc:	2030      	movs	r0, #48	; 0x30
 8002bbe:	18e1      	adds	r1, r4, r3
 8002bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bca:	4422      	add	r2, r4
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bd2:	e7c5      	b.n	8002b60 <_printf_common+0x58>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	4649      	mov	r1, r9
 8002bda:	4638      	mov	r0, r7
 8002bdc:	47c0      	blx	r8
 8002bde:	3001      	adds	r0, #1
 8002be0:	d0e6      	beq.n	8002bb0 <_printf_common+0xa8>
 8002be2:	3601      	adds	r6, #1
 8002be4:	e7d9      	b.n	8002b9a <_printf_common+0x92>
	...

08002be8 <_printf_i>:
 8002be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bec:	460c      	mov	r4, r1
 8002bee:	7e27      	ldrb	r7, [r4, #24]
 8002bf0:	4691      	mov	r9, r2
 8002bf2:	2f78      	cmp	r7, #120	; 0x78
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	469a      	mov	sl, r3
 8002bf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002bfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bfe:	d807      	bhi.n	8002c10 <_printf_i+0x28>
 8002c00:	2f62      	cmp	r7, #98	; 0x62
 8002c02:	d80a      	bhi.n	8002c1a <_printf_i+0x32>
 8002c04:	2f00      	cmp	r7, #0
 8002c06:	f000 80d9 	beq.w	8002dbc <_printf_i+0x1d4>
 8002c0a:	2f58      	cmp	r7, #88	; 0x58
 8002c0c:	f000 80a4 	beq.w	8002d58 <_printf_i+0x170>
 8002c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c18:	e03a      	b.n	8002c90 <_printf_i+0xa8>
 8002c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c1e:	2b15      	cmp	r3, #21
 8002c20:	d8f6      	bhi.n	8002c10 <_printf_i+0x28>
 8002c22:	a001      	add	r0, pc, #4	; (adr r0, 8002c28 <_printf_i+0x40>)
 8002c24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002c28:	08002c81 	.word	0x08002c81
 8002c2c:	08002c95 	.word	0x08002c95
 8002c30:	08002c11 	.word	0x08002c11
 8002c34:	08002c11 	.word	0x08002c11
 8002c38:	08002c11 	.word	0x08002c11
 8002c3c:	08002c11 	.word	0x08002c11
 8002c40:	08002c95 	.word	0x08002c95
 8002c44:	08002c11 	.word	0x08002c11
 8002c48:	08002c11 	.word	0x08002c11
 8002c4c:	08002c11 	.word	0x08002c11
 8002c50:	08002c11 	.word	0x08002c11
 8002c54:	08002da3 	.word	0x08002da3
 8002c58:	08002cc5 	.word	0x08002cc5
 8002c5c:	08002d85 	.word	0x08002d85
 8002c60:	08002c11 	.word	0x08002c11
 8002c64:	08002c11 	.word	0x08002c11
 8002c68:	08002dc5 	.word	0x08002dc5
 8002c6c:	08002c11 	.word	0x08002c11
 8002c70:	08002cc5 	.word	0x08002cc5
 8002c74:	08002c11 	.word	0x08002c11
 8002c78:	08002c11 	.word	0x08002c11
 8002c7c:	08002d8d 	.word	0x08002d8d
 8002c80:	680b      	ldr	r3, [r1, #0]
 8002c82:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c86:	1d1a      	adds	r2, r3, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	600a      	str	r2, [r1, #0]
 8002c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0a4      	b.n	8002dde <_printf_i+0x1f6>
 8002c94:	6825      	ldr	r5, [r4, #0]
 8002c96:	6808      	ldr	r0, [r1, #0]
 8002c98:	062e      	lsls	r6, r5, #24
 8002c9a:	f100 0304 	add.w	r3, r0, #4
 8002c9e:	d50a      	bpl.n	8002cb6 <_printf_i+0xce>
 8002ca0:	6805      	ldr	r5, [r0, #0]
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	da03      	bge.n	8002cb0 <_printf_i+0xc8>
 8002ca8:	232d      	movs	r3, #45	; 0x2d
 8002caa:	426d      	negs	r5, r5
 8002cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cb0:	230a      	movs	r3, #10
 8002cb2:	485e      	ldr	r0, [pc, #376]	; (8002e2c <_printf_i+0x244>)
 8002cb4:	e019      	b.n	8002cea <_printf_i+0x102>
 8002cb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002cba:	6805      	ldr	r5, [r0, #0]
 8002cbc:	600b      	str	r3, [r1, #0]
 8002cbe:	bf18      	it	ne
 8002cc0:	b22d      	sxthne	r5, r5
 8002cc2:	e7ef      	b.n	8002ca4 <_printf_i+0xbc>
 8002cc4:	680b      	ldr	r3, [r1, #0]
 8002cc6:	6825      	ldr	r5, [r4, #0]
 8002cc8:	1d18      	adds	r0, r3, #4
 8002cca:	6008      	str	r0, [r1, #0]
 8002ccc:	0628      	lsls	r0, r5, #24
 8002cce:	d501      	bpl.n	8002cd4 <_printf_i+0xec>
 8002cd0:	681d      	ldr	r5, [r3, #0]
 8002cd2:	e002      	b.n	8002cda <_printf_i+0xf2>
 8002cd4:	0669      	lsls	r1, r5, #25
 8002cd6:	d5fb      	bpl.n	8002cd0 <_printf_i+0xe8>
 8002cd8:	881d      	ldrh	r5, [r3, #0]
 8002cda:	2f6f      	cmp	r7, #111	; 0x6f
 8002cdc:	bf0c      	ite	eq
 8002cde:	2308      	moveq	r3, #8
 8002ce0:	230a      	movne	r3, #10
 8002ce2:	4852      	ldr	r0, [pc, #328]	; (8002e2c <_printf_i+0x244>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cea:	6866      	ldr	r6, [r4, #4]
 8002cec:	2e00      	cmp	r6, #0
 8002cee:	bfa8      	it	ge
 8002cf0:	6821      	ldrge	r1, [r4, #0]
 8002cf2:	60a6      	str	r6, [r4, #8]
 8002cf4:	bfa4      	itt	ge
 8002cf6:	f021 0104 	bicge.w	r1, r1, #4
 8002cfa:	6021      	strge	r1, [r4, #0]
 8002cfc:	b90d      	cbnz	r5, 8002d02 <_printf_i+0x11a>
 8002cfe:	2e00      	cmp	r6, #0
 8002d00:	d04d      	beq.n	8002d9e <_printf_i+0x1b6>
 8002d02:	4616      	mov	r6, r2
 8002d04:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d08:	fb03 5711 	mls	r7, r3, r1, r5
 8002d0c:	5dc7      	ldrb	r7, [r0, r7]
 8002d0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d12:	462f      	mov	r7, r5
 8002d14:	42bb      	cmp	r3, r7
 8002d16:	460d      	mov	r5, r1
 8002d18:	d9f4      	bls.n	8002d04 <_printf_i+0x11c>
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d10b      	bne.n	8002d36 <_printf_i+0x14e>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	07df      	lsls	r7, r3, #31
 8002d22:	d508      	bpl.n	8002d36 <_printf_i+0x14e>
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	6861      	ldr	r1, [r4, #4]
 8002d28:	4299      	cmp	r1, r3
 8002d2a:	bfde      	ittt	le
 8002d2c:	2330      	movle	r3, #48	; 0x30
 8002d2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d36:	1b92      	subs	r2, r2, r6
 8002d38:	6122      	str	r2, [r4, #16]
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4640      	mov	r0, r8
 8002d40:	f8cd a000 	str.w	sl, [sp]
 8002d44:	aa03      	add	r2, sp, #12
 8002d46:	f7ff fedf 	bl	8002b08 <_printf_common>
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	d14c      	bne.n	8002de8 <_printf_i+0x200>
 8002d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d52:	b004      	add	sp, #16
 8002d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d58:	4834      	ldr	r0, [pc, #208]	; (8002e2c <_printf_i+0x244>)
 8002d5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d5e:	680e      	ldr	r6, [r1, #0]
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	f856 5b04 	ldr.w	r5, [r6], #4
 8002d66:	061f      	lsls	r7, r3, #24
 8002d68:	600e      	str	r6, [r1, #0]
 8002d6a:	d514      	bpl.n	8002d96 <_printf_i+0x1ae>
 8002d6c:	07d9      	lsls	r1, r3, #31
 8002d6e:	bf44      	itt	mi
 8002d70:	f043 0320 	orrmi.w	r3, r3, #32
 8002d74:	6023      	strmi	r3, [r4, #0]
 8002d76:	b91d      	cbnz	r5, 8002d80 <_printf_i+0x198>
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	f023 0320 	bic.w	r3, r3, #32
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	2310      	movs	r3, #16
 8002d82:	e7af      	b.n	8002ce4 <_printf_i+0xfc>
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f043 0320 	orr.w	r3, r3, #32
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	2378      	movs	r3, #120	; 0x78
 8002d8e:	4828      	ldr	r0, [pc, #160]	; (8002e30 <_printf_i+0x248>)
 8002d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d94:	e7e3      	b.n	8002d5e <_printf_i+0x176>
 8002d96:	065e      	lsls	r6, r3, #25
 8002d98:	bf48      	it	mi
 8002d9a:	b2ad      	uxthmi	r5, r5
 8002d9c:	e7e6      	b.n	8002d6c <_printf_i+0x184>
 8002d9e:	4616      	mov	r6, r2
 8002da0:	e7bb      	b.n	8002d1a <_printf_i+0x132>
 8002da2:	680b      	ldr	r3, [r1, #0]
 8002da4:	6826      	ldr	r6, [r4, #0]
 8002da6:	1d1d      	adds	r5, r3, #4
 8002da8:	6960      	ldr	r0, [r4, #20]
 8002daa:	600d      	str	r5, [r1, #0]
 8002dac:	0635      	lsls	r5, r6, #24
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	d501      	bpl.n	8002db6 <_printf_i+0x1ce>
 8002db2:	6018      	str	r0, [r3, #0]
 8002db4:	e002      	b.n	8002dbc <_printf_i+0x1d4>
 8002db6:	0671      	lsls	r1, r6, #25
 8002db8:	d5fb      	bpl.n	8002db2 <_printf_i+0x1ca>
 8002dba:	8018      	strh	r0, [r3, #0]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4616      	mov	r6, r2
 8002dc0:	6123      	str	r3, [r4, #16]
 8002dc2:	e7ba      	b.n	8002d3a <_printf_i+0x152>
 8002dc4:	680b      	ldr	r3, [r1, #0]
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	600a      	str	r2, [r1, #0]
 8002dca:	681e      	ldr	r6, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4630      	mov	r0, r6
 8002dd0:	6862      	ldr	r2, [r4, #4]
 8002dd2:	f000 f82f 	bl	8002e34 <memchr>
 8002dd6:	b108      	cbz	r0, 8002ddc <_printf_i+0x1f4>
 8002dd8:	1b80      	subs	r0, r0, r6
 8002dda:	6060      	str	r0, [r4, #4]
 8002ddc:	6863      	ldr	r3, [r4, #4]
 8002dde:	6123      	str	r3, [r4, #16]
 8002de0:	2300      	movs	r3, #0
 8002de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de6:	e7a8      	b.n	8002d3a <_printf_i+0x152>
 8002de8:	4632      	mov	r2, r6
 8002dea:	4649      	mov	r1, r9
 8002dec:	4640      	mov	r0, r8
 8002dee:	6923      	ldr	r3, [r4, #16]
 8002df0:	47d0      	blx	sl
 8002df2:	3001      	adds	r0, #1
 8002df4:	d0ab      	beq.n	8002d4e <_printf_i+0x166>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	079b      	lsls	r3, r3, #30
 8002dfa:	d413      	bmi.n	8002e24 <_printf_i+0x23c>
 8002dfc:	68e0      	ldr	r0, [r4, #12]
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	4298      	cmp	r0, r3
 8002e02:	bfb8      	it	lt
 8002e04:	4618      	movlt	r0, r3
 8002e06:	e7a4      	b.n	8002d52 <_printf_i+0x16a>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4632      	mov	r2, r6
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	4640      	mov	r0, r8
 8002e10:	47d0      	blx	sl
 8002e12:	3001      	adds	r0, #1
 8002e14:	d09b      	beq.n	8002d4e <_printf_i+0x166>
 8002e16:	3501      	adds	r5, #1
 8002e18:	68e3      	ldr	r3, [r4, #12]
 8002e1a:	9903      	ldr	r1, [sp, #12]
 8002e1c:	1a5b      	subs	r3, r3, r1
 8002e1e:	42ab      	cmp	r3, r5
 8002e20:	dcf2      	bgt.n	8002e08 <_printf_i+0x220>
 8002e22:	e7eb      	b.n	8002dfc <_printf_i+0x214>
 8002e24:	2500      	movs	r5, #0
 8002e26:	f104 0619 	add.w	r6, r4, #25
 8002e2a:	e7f5      	b.n	8002e18 <_printf_i+0x230>
 8002e2c:	080030d9 	.word	0x080030d9
 8002e30:	080030ea 	.word	0x080030ea

08002e34 <memchr>:
 8002e34:	4603      	mov	r3, r0
 8002e36:	b510      	push	{r4, lr}
 8002e38:	b2c9      	uxtb	r1, r1
 8002e3a:	4402      	add	r2, r0
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	d101      	bne.n	8002e46 <memchr+0x12>
 8002e42:	2000      	movs	r0, #0
 8002e44:	e003      	b.n	8002e4e <memchr+0x1a>
 8002e46:	7804      	ldrb	r4, [r0, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	428c      	cmp	r4, r1
 8002e4c:	d1f6      	bne.n	8002e3c <memchr+0x8>
 8002e4e:	bd10      	pop	{r4, pc}

08002e50 <memcpy>:
 8002e50:	440a      	add	r2, r1
 8002e52:	4291      	cmp	r1, r2
 8002e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e58:	d100      	bne.n	8002e5c <memcpy+0xc>
 8002e5a:	4770      	bx	lr
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e62:	4291      	cmp	r1, r2
 8002e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e68:	d1f9      	bne.n	8002e5e <memcpy+0xe>
 8002e6a:	bd10      	pop	{r4, pc}

08002e6c <memmove>:
 8002e6c:	4288      	cmp	r0, r1
 8002e6e:	b510      	push	{r4, lr}
 8002e70:	eb01 0402 	add.w	r4, r1, r2
 8002e74:	d902      	bls.n	8002e7c <memmove+0x10>
 8002e76:	4284      	cmp	r4, r0
 8002e78:	4623      	mov	r3, r4
 8002e7a:	d807      	bhi.n	8002e8c <memmove+0x20>
 8002e7c:	1e43      	subs	r3, r0, #1
 8002e7e:	42a1      	cmp	r1, r4
 8002e80:	d008      	beq.n	8002e94 <memmove+0x28>
 8002e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e8a:	e7f8      	b.n	8002e7e <memmove+0x12>
 8002e8c:	4601      	mov	r1, r0
 8002e8e:	4402      	add	r2, r0
 8002e90:	428a      	cmp	r2, r1
 8002e92:	d100      	bne.n	8002e96 <memmove+0x2a>
 8002e94:	bd10      	pop	{r4, pc}
 8002e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e9e:	e7f7      	b.n	8002e90 <memmove+0x24>

08002ea0 <_free_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	d043      	beq.n	8002f30 <_free_r+0x90>
 8002ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eac:	1f0c      	subs	r4, r1, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	bfb8      	it	lt
 8002eb2:	18e4      	addlt	r4, r4, r3
 8002eb4:	f000 f8d0 	bl	8003058 <__malloc_lock>
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <_free_r+0x94>)
 8002eba:	6813      	ldr	r3, [r2, #0]
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	b933      	cbnz	r3, 8002ece <_free_r+0x2e>
 8002ec0:	6063      	str	r3, [r4, #4]
 8002ec2:	6014      	str	r4, [r2, #0]
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eca:	f000 b8cb 	b.w	8003064 <__malloc_unlock>
 8002ece:	42a3      	cmp	r3, r4
 8002ed0:	d90a      	bls.n	8002ee8 <_free_r+0x48>
 8002ed2:	6821      	ldr	r1, [r4, #0]
 8002ed4:	1862      	adds	r2, r4, r1
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	bf01      	itttt	eq
 8002eda:	681a      	ldreq	r2, [r3, #0]
 8002edc:	685b      	ldreq	r3, [r3, #4]
 8002ede:	1852      	addeq	r2, r2, r1
 8002ee0:	6022      	streq	r2, [r4, #0]
 8002ee2:	6063      	str	r3, [r4, #4]
 8002ee4:	6004      	str	r4, [r0, #0]
 8002ee6:	e7ed      	b.n	8002ec4 <_free_r+0x24>
 8002ee8:	461a      	mov	r2, r3
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	b10b      	cbz	r3, 8002ef2 <_free_r+0x52>
 8002eee:	42a3      	cmp	r3, r4
 8002ef0:	d9fa      	bls.n	8002ee8 <_free_r+0x48>
 8002ef2:	6811      	ldr	r1, [r2, #0]
 8002ef4:	1850      	adds	r0, r2, r1
 8002ef6:	42a0      	cmp	r0, r4
 8002ef8:	d10b      	bne.n	8002f12 <_free_r+0x72>
 8002efa:	6820      	ldr	r0, [r4, #0]
 8002efc:	4401      	add	r1, r0
 8002efe:	1850      	adds	r0, r2, r1
 8002f00:	4283      	cmp	r3, r0
 8002f02:	6011      	str	r1, [r2, #0]
 8002f04:	d1de      	bne.n	8002ec4 <_free_r+0x24>
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4401      	add	r1, r0
 8002f0c:	6011      	str	r1, [r2, #0]
 8002f0e:	6053      	str	r3, [r2, #4]
 8002f10:	e7d8      	b.n	8002ec4 <_free_r+0x24>
 8002f12:	d902      	bls.n	8002f1a <_free_r+0x7a>
 8002f14:	230c      	movs	r3, #12
 8002f16:	602b      	str	r3, [r5, #0]
 8002f18:	e7d4      	b.n	8002ec4 <_free_r+0x24>
 8002f1a:	6820      	ldr	r0, [r4, #0]
 8002f1c:	1821      	adds	r1, r4, r0
 8002f1e:	428b      	cmp	r3, r1
 8002f20:	bf01      	itttt	eq
 8002f22:	6819      	ldreq	r1, [r3, #0]
 8002f24:	685b      	ldreq	r3, [r3, #4]
 8002f26:	1809      	addeq	r1, r1, r0
 8002f28:	6021      	streq	r1, [r4, #0]
 8002f2a:	6063      	str	r3, [r4, #4]
 8002f2c:	6054      	str	r4, [r2, #4]
 8002f2e:	e7c9      	b.n	8002ec4 <_free_r+0x24>
 8002f30:	bd38      	pop	{r3, r4, r5, pc}
 8002f32:	bf00      	nop
 8002f34:	2000009c 	.word	0x2000009c

08002f38 <_malloc_r>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	1ccd      	adds	r5, r1, #3
 8002f3c:	f025 0503 	bic.w	r5, r5, #3
 8002f40:	3508      	adds	r5, #8
 8002f42:	2d0c      	cmp	r5, #12
 8002f44:	bf38      	it	cc
 8002f46:	250c      	movcc	r5, #12
 8002f48:	2d00      	cmp	r5, #0
 8002f4a:	4606      	mov	r6, r0
 8002f4c:	db01      	blt.n	8002f52 <_malloc_r+0x1a>
 8002f4e:	42a9      	cmp	r1, r5
 8002f50:	d903      	bls.n	8002f5a <_malloc_r+0x22>
 8002f52:	230c      	movs	r3, #12
 8002f54:	6033      	str	r3, [r6, #0]
 8002f56:	2000      	movs	r0, #0
 8002f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f5a:	f000 f87d 	bl	8003058 <__malloc_lock>
 8002f5e:	4921      	ldr	r1, [pc, #132]	; (8002fe4 <_malloc_r+0xac>)
 8002f60:	680a      	ldr	r2, [r1, #0]
 8002f62:	4614      	mov	r4, r2
 8002f64:	b99c      	cbnz	r4, 8002f8e <_malloc_r+0x56>
 8002f66:	4f20      	ldr	r7, [pc, #128]	; (8002fe8 <_malloc_r+0xb0>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b923      	cbnz	r3, 8002f76 <_malloc_r+0x3e>
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	4630      	mov	r0, r6
 8002f70:	f000 f862 	bl	8003038 <_sbrk_r>
 8002f74:	6038      	str	r0, [r7, #0]
 8002f76:	4629      	mov	r1, r5
 8002f78:	4630      	mov	r0, r6
 8002f7a:	f000 f85d 	bl	8003038 <_sbrk_r>
 8002f7e:	1c43      	adds	r3, r0, #1
 8002f80:	d123      	bne.n	8002fca <_malloc_r+0x92>
 8002f82:	230c      	movs	r3, #12
 8002f84:	4630      	mov	r0, r6
 8002f86:	6033      	str	r3, [r6, #0]
 8002f88:	f000 f86c 	bl	8003064 <__malloc_unlock>
 8002f8c:	e7e3      	b.n	8002f56 <_malloc_r+0x1e>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	1b5b      	subs	r3, r3, r5
 8002f92:	d417      	bmi.n	8002fc4 <_malloc_r+0x8c>
 8002f94:	2b0b      	cmp	r3, #11
 8002f96:	d903      	bls.n	8002fa0 <_malloc_r+0x68>
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	441c      	add	r4, r3
 8002f9c:	6025      	str	r5, [r4, #0]
 8002f9e:	e004      	b.n	8002faa <_malloc_r+0x72>
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	42a2      	cmp	r2, r4
 8002fa4:	bf0c      	ite	eq
 8002fa6:	600b      	streq	r3, [r1, #0]
 8002fa8:	6053      	strne	r3, [r2, #4]
 8002faa:	4630      	mov	r0, r6
 8002fac:	f000 f85a 	bl	8003064 <__malloc_unlock>
 8002fb0:	f104 000b 	add.w	r0, r4, #11
 8002fb4:	1d23      	adds	r3, r4, #4
 8002fb6:	f020 0007 	bic.w	r0, r0, #7
 8002fba:	1ac2      	subs	r2, r0, r3
 8002fbc:	d0cc      	beq.n	8002f58 <_malloc_r+0x20>
 8002fbe:	1a1b      	subs	r3, r3, r0
 8002fc0:	50a3      	str	r3, [r4, r2]
 8002fc2:	e7c9      	b.n	8002f58 <_malloc_r+0x20>
 8002fc4:	4622      	mov	r2, r4
 8002fc6:	6864      	ldr	r4, [r4, #4]
 8002fc8:	e7cc      	b.n	8002f64 <_malloc_r+0x2c>
 8002fca:	1cc4      	adds	r4, r0, #3
 8002fcc:	f024 0403 	bic.w	r4, r4, #3
 8002fd0:	42a0      	cmp	r0, r4
 8002fd2:	d0e3      	beq.n	8002f9c <_malloc_r+0x64>
 8002fd4:	1a21      	subs	r1, r4, r0
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	f000 f82e 	bl	8003038 <_sbrk_r>
 8002fdc:	3001      	adds	r0, #1
 8002fde:	d1dd      	bne.n	8002f9c <_malloc_r+0x64>
 8002fe0:	e7cf      	b.n	8002f82 <_malloc_r+0x4a>
 8002fe2:	bf00      	nop
 8002fe4:	2000009c 	.word	0x2000009c
 8002fe8:	200000a0 	.word	0x200000a0

08002fec <_realloc_r>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	4607      	mov	r7, r0
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	460e      	mov	r6, r1
 8002ff4:	b921      	cbnz	r1, 8003000 <_realloc_r+0x14>
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ffc:	f7ff bf9c 	b.w	8002f38 <_malloc_r>
 8003000:	b922      	cbnz	r2, 800300c <_realloc_r+0x20>
 8003002:	f7ff ff4d 	bl	8002ea0 <_free_r>
 8003006:	4625      	mov	r5, r4
 8003008:	4628      	mov	r0, r5
 800300a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800300c:	f000 f830 	bl	8003070 <_malloc_usable_size_r>
 8003010:	42a0      	cmp	r0, r4
 8003012:	d20f      	bcs.n	8003034 <_realloc_r+0x48>
 8003014:	4621      	mov	r1, r4
 8003016:	4638      	mov	r0, r7
 8003018:	f7ff ff8e 	bl	8002f38 <_malloc_r>
 800301c:	4605      	mov	r5, r0
 800301e:	2800      	cmp	r0, #0
 8003020:	d0f2      	beq.n	8003008 <_realloc_r+0x1c>
 8003022:	4631      	mov	r1, r6
 8003024:	4622      	mov	r2, r4
 8003026:	f7ff ff13 	bl	8002e50 <memcpy>
 800302a:	4631      	mov	r1, r6
 800302c:	4638      	mov	r0, r7
 800302e:	f7ff ff37 	bl	8002ea0 <_free_r>
 8003032:	e7e9      	b.n	8003008 <_realloc_r+0x1c>
 8003034:	4635      	mov	r5, r6
 8003036:	e7e7      	b.n	8003008 <_realloc_r+0x1c>

08003038 <_sbrk_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	2300      	movs	r3, #0
 800303c:	4d05      	ldr	r5, [pc, #20]	; (8003054 <_sbrk_r+0x1c>)
 800303e:	4604      	mov	r4, r0
 8003040:	4608      	mov	r0, r1
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	f7fd fae6 	bl	8000614 <_sbrk>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_sbrk_r+0x1a>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	b103      	cbz	r3, 8003052 <_sbrk_r+0x1a>
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	20000134 	.word	0x20000134

08003058 <__malloc_lock>:
 8003058:	4801      	ldr	r0, [pc, #4]	; (8003060 <__malloc_lock+0x8>)
 800305a:	f000 b811 	b.w	8003080 <__retarget_lock_acquire_recursive>
 800305e:	bf00      	nop
 8003060:	2000013c 	.word	0x2000013c

08003064 <__malloc_unlock>:
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <__malloc_unlock+0x8>)
 8003066:	f000 b80c 	b.w	8003082 <__retarget_lock_release_recursive>
 800306a:	bf00      	nop
 800306c:	2000013c 	.word	0x2000013c

08003070 <_malloc_usable_size_r>:
 8003070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003074:	1f18      	subs	r0, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	bfbc      	itt	lt
 800307a:	580b      	ldrlt	r3, [r1, r0]
 800307c:	18c0      	addlt	r0, r0, r3
 800307e:	4770      	bx	lr

08003080 <__retarget_lock_acquire_recursive>:
 8003080:	4770      	bx	lr

08003082 <__retarget_lock_release_recursive>:
 8003082:	4770      	bx	lr

08003084 <_init>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr

08003090 <_fini>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr
