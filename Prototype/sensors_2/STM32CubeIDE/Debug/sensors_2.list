
sensors_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800cd58  0800cd58  0001cd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d408  0800d408  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d408  0800d408  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d408  0800d408  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d408  0800d408  0001d408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d40c  0800d40c  0001d40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  200001f8  0800d608  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  0800d608  00020a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015eed  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003381  00000000  00000000  0003610e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00039490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a77e  00000000  00000000  0003b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b0e  00000000  00000000  00055df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa93  00000000  00000000  0006b904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb397  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea8  00000000  00000000  000fb3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cd3c 	.word	0x0800cd3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800cd3c 	.word	0x0800cd3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_frsub>:
 8000ca4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	e002      	b.n	8000cb0 <__addsf3>
 8000caa:	bf00      	nop

08000cac <__aeabi_fsub>:
 8000cac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb0 <__addsf3>:
 8000cb0:	0042      	lsls	r2, r0, #1
 8000cb2:	bf1f      	itttt	ne
 8000cb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cb8:	ea92 0f03 	teqne	r2, r3
 8000cbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc4:	d06a      	beq.n	8000d9c <__addsf3+0xec>
 8000cc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cce:	bfc1      	itttt	gt
 8000cd0:	18d2      	addgt	r2, r2, r3
 8000cd2:	4041      	eorgt	r1, r0
 8000cd4:	4048      	eorgt	r0, r1
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	bfb8      	it	lt
 8000cda:	425b      	neglt	r3, r3
 8000cdc:	2b19      	cmp	r3, #25
 8000cde:	bf88      	it	hi
 8000ce0:	4770      	bxhi	lr
 8000ce2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4240      	negne	r0, r0
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cf6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cfe:	bf18      	it	ne
 8000d00:	4249      	negne	r1, r1
 8000d02:	ea92 0f03 	teq	r2, r3
 8000d06:	d03f      	beq.n	8000d88 <__addsf3+0xd8>
 8000d08:	f1a2 0201 	sub.w	r2, r2, #1
 8000d0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d10:	eb10 000c 	adds.w	r0, r0, ip
 8000d14:	f1c3 0320 	rsb	r3, r3, #32
 8000d18:	fa01 f103 	lsl.w	r1, r1, r3
 8000d1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__addsf3+0x78>
 8000d22:	4249      	negs	r1, r1
 8000d24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d2c:	d313      	bcc.n	8000d56 <__addsf3+0xa6>
 8000d2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d32:	d306      	bcc.n	8000d42 <__addsf3+0x92>
 8000d34:	0840      	lsrs	r0, r0, #1
 8000d36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3a:	f102 0201 	add.w	r2, r2, #1
 8000d3e:	2afe      	cmp	r2, #254	; 0xfe
 8000d40:	d251      	bcs.n	8000de6 <__addsf3+0x136>
 8000d42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4a:	bf08      	it	eq
 8000d4c:	f020 0001 	biceq.w	r0, r0, #1
 8000d50:	ea40 0003 	orr.w	r0, r0, r3
 8000d54:	4770      	bx	lr
 8000d56:	0049      	lsls	r1, r1, #1
 8000d58:	eb40 0000 	adc.w	r0, r0, r0
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	bf28      	it	cs
 8000d60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d64:	d2ed      	bcs.n	8000d42 <__addsf3+0x92>
 8000d66:	fab0 fc80 	clz	ip, r0
 8000d6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d76:	bfaa      	itet	ge
 8000d78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d7c:	4252      	neglt	r2, r2
 8000d7e:	4318      	orrge	r0, r3
 8000d80:	bfbc      	itt	lt
 8000d82:	40d0      	lsrlt	r0, r2
 8000d84:	4318      	orrlt	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	f092 0f00 	teq	r2, #0
 8000d8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d90:	bf06      	itte	eq
 8000d92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d96:	3201      	addeq	r2, #1
 8000d98:	3b01      	subne	r3, #1
 8000d9a:	e7b5      	b.n	8000d08 <__addsf3+0x58>
 8000d9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da4:	bf18      	it	ne
 8000da6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000daa:	d021      	beq.n	8000df0 <__addsf3+0x140>
 8000dac:	ea92 0f03 	teq	r2, r3
 8000db0:	d004      	beq.n	8000dbc <__addsf3+0x10c>
 8000db2:	f092 0f00 	teq	r2, #0
 8000db6:	bf08      	it	eq
 8000db8:	4608      	moveq	r0, r1
 8000dba:	4770      	bx	lr
 8000dbc:	ea90 0f01 	teq	r0, r1
 8000dc0:	bf1c      	itt	ne
 8000dc2:	2000      	movne	r0, #0
 8000dc4:	4770      	bxne	lr
 8000dc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dca:	d104      	bne.n	8000dd6 <__addsf3+0x126>
 8000dcc:	0040      	lsls	r0, r0, #1
 8000dce:	bf28      	it	cs
 8000dd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dda:	bf3c      	itt	cc
 8000ddc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de0:	4770      	bxcc	lr
 8000de2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000de6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	4770      	bx	lr
 8000df0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df4:	bf16      	itet	ne
 8000df6:	4608      	movne	r0, r1
 8000df8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dfc:	4601      	movne	r1, r0
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	bf06      	itte	eq
 8000e02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e06:	ea90 0f01 	teqeq	r0, r1
 8000e0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_ui2f>:
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e004      	b.n	8000e20 <__aeabi_i2f+0x8>
 8000e16:	bf00      	nop

08000e18 <__aeabi_i2f>:
 8000e18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e1c:	bf48      	it	mi
 8000e1e:	4240      	negmi	r0, r0
 8000e20:	ea5f 0c00 	movs.w	ip, r0
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	e01c      	b.n	8000e6e <__aeabi_l2f+0x2a>

08000e34 <__aeabi_ul2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e00a      	b.n	8000e58 <__aeabi_l2f+0x14>
 8000e42:	bf00      	nop

08000e44 <__aeabi_l2f>:
 8000e44:	ea50 0201 	orrs.w	r2, r0, r1
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	d502      	bpl.n	8000e58 <__aeabi_l2f+0x14>
 8000e52:	4240      	negs	r0, r0
 8000e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e58:	ea5f 0c01 	movs.w	ip, r1
 8000e5c:	bf02      	ittt	eq
 8000e5e:	4684      	moveq	ip, r0
 8000e60:	4601      	moveq	r1, r0
 8000e62:	2000      	moveq	r0, #0
 8000e64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e68:	bf08      	it	eq
 8000e6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e72:	fabc f28c 	clz	r2, ip
 8000e76:	3a08      	subs	r2, #8
 8000e78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e7c:	db10      	blt.n	8000ea0 <__aeabi_l2f+0x5c>
 8000e7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e82:	4463      	add	r3, ip
 8000e84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e88:	f1c2 0220 	rsb	r2, r2, #32
 8000e8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e90:	fa20 f202 	lsr.w	r2, r0, r2
 8000e94:	eb43 0002 	adc.w	r0, r3, r2
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f102 0220 	add.w	r2, r2, #32
 8000ea4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea8:	f1c2 0220 	rsb	r2, r2, #32
 8000eac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb4:	eb43 0002 	adc.w	r0, r3, r2
 8000eb8:	bf08      	it	eq
 8000eba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ebe:	4770      	bx	lr

08000ec0 <__gesf2>:
 8000ec0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ec4:	e006      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__lesf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	e002      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ece:	bf00      	nop

08000ed0 <__cmpsf2>:
 8000ed0:	f04f 0c01 	mov.w	ip, #1
 8000ed4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee4:	bf18      	it	ne
 8000ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eea:	d011      	beq.n	8000f10 <__cmpsf2+0x40>
 8000eec:	b001      	add	sp, #4
 8000eee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ef2:	bf18      	it	ne
 8000ef4:	ea90 0f01 	teqne	r0, r1
 8000ef8:	bf58      	it	pl
 8000efa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000efe:	bf88      	it	hi
 8000f00:	17c8      	asrhi	r0, r1, #31
 8000f02:	bf38      	it	cc
 8000f04:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f08:	bf18      	it	ne
 8000f0a:	f040 0001 	orrne.w	r0, r0, #1
 8000f0e:	4770      	bx	lr
 8000f10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f14:	d102      	bne.n	8000f1c <__cmpsf2+0x4c>
 8000f16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f1a:	d105      	bne.n	8000f28 <__cmpsf2+0x58>
 8000f1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f20:	d1e4      	bne.n	8000eec <__cmpsf2+0x1c>
 8000f22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f26:	d0e1      	beq.n	8000eec <__cmpsf2+0x1c>
 8000f28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__aeabi_cfrcmple>:
 8000f30:	4684      	mov	ip, r0
 8000f32:	4608      	mov	r0, r1
 8000f34:	4661      	mov	r1, ip
 8000f36:	e7ff      	b.n	8000f38 <__aeabi_cfcmpeq>

08000f38 <__aeabi_cfcmpeq>:
 8000f38:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f3a:	f7ff ffc9 	bl	8000ed0 <__cmpsf2>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	bf48      	it	mi
 8000f42:	f110 0f00 	cmnmi.w	r0, #0
 8000f46:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f48 <__aeabi_fcmpeq>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff fff4 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f50:	bf0c      	ite	eq
 8000f52:	2001      	moveq	r0, #1
 8000f54:	2000      	movne	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmplt>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffea 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f64:	bf34      	ite	cc
 8000f66:	2001      	movcc	r0, #1
 8000f68:	2000      	movcs	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmple>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffe0 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpge>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffd2 	bl	8000f30 <__aeabi_cfrcmple>
 8000f8c:	bf94      	ite	ls
 8000f8e:	2001      	movls	r0, #1
 8000f90:	2000      	movhi	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_fcmpgt>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff ffc8 	bl	8000f30 <__aeabi_cfrcmple>
 8000fa0:	bf34      	ite	cc
 8000fa2:	2001      	movcc	r0, #1
 8000fa4:	2000      	movcs	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <__aeabi_d2lz>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	460c      	mov	r4, r1
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f7ff fdb3 	bl	8000b24 <__aeabi_dcmplt>
 8000fbe:	b928      	cbnz	r0, 8000fcc <__aeabi_d2lz+0x20>
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fc8:	f000 b80a 	b.w	8000fe0 <__aeabi_d2ulz>
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fd2:	f000 f805 	bl	8000fe0 <__aeabi_d2ulz>
 8000fd6:	4240      	negs	r0, r0
 8000fd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
 8000fde:	bf00      	nop

08000fe0 <__aeabi_d2ulz>:
 8000fe0:	b5d0      	push	{r4, r6, r7, lr}
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <__aeabi_d2ulz+0x34>)
 8000fe6:	4606      	mov	r6, r0
 8000fe8:	460f      	mov	r7, r1
 8000fea:	f7ff fb29 	bl	8000640 <__aeabi_dmul>
 8000fee:	f7ff fde9 	bl	8000bc4 <__aeabi_d2uiz>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	f7ff faaa 	bl	800054c <__aeabi_ui2d>
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <__aeabi_d2ulz+0x38>)
 8000ffc:	f7ff fb20 	bl	8000640 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4630      	mov	r0, r6
 8001006:	4639      	mov	r1, r7
 8001008:	f7ff f962 	bl	80002d0 <__aeabi_dsub>
 800100c:	f7ff fdda 	bl	8000bc4 <__aeabi_d2uiz>
 8001010:	4621      	mov	r1, r4
 8001012:	bdd0      	pop	{r4, r6, r7, pc}
 8001014:	3df00000 	.word	0x3df00000
 8001018:	41f00000 	.word	0x41f00000

0800101c <getGPSData>:
extern char tempArray[20];
extern int globalIndex;
int count = 0;

void getGPSData(void)
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	af00      	add	r7, sp, #0
	while(RMC[indexRMC] == ',') indexRMC++;
 8001020:	e005      	b.n	800102e <getGPSData+0x12>
 8001022:	4b96      	ldr	r3, [pc, #600]	; (800127c <getGPSData+0x260>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b94      	ldr	r3, [pc, #592]	; (800127c <getGPSData+0x260>)
 800102c:	801a      	strh	r2, [r3, #0]
 800102e:	4b93      	ldr	r3, [pc, #588]	; (800127c <getGPSData+0x260>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <getGPSData+0x264>)
 8001036:	5c9b      	ldrb	r3, [r3, r2]
 8001038:	2b2c      	cmp	r3, #44	; 0x2c
 800103a:	d0f2      	beq.n	8001022 <getGPSData+0x6>
	while(RMC[indexRMC] != ',') indexRMC++;
 800103c:	e005      	b.n	800104a <getGPSData+0x2e>
 800103e:	4b8f      	ldr	r3, [pc, #572]	; (800127c <getGPSData+0x260>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b8d      	ldr	r3, [pc, #564]	; (800127c <getGPSData+0x260>)
 8001048:	801a      	strh	r2, [r3, #0]
 800104a:	4b8c      	ldr	r3, [pc, #560]	; (800127c <getGPSData+0x260>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	4b8b      	ldr	r3, [pc, #556]	; (8001280 <getGPSData+0x264>)
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	2b2c      	cmp	r3, #44	; 0x2c
 8001056:	d1f2      	bne.n	800103e <getGPSData+0x22>

	while(RMC[indexRMC] == ',') indexRMC++;
 8001058:	e005      	b.n	8001066 <getGPSData+0x4a>
 800105a:	4b88      	ldr	r3, [pc, #544]	; (800127c <getGPSData+0x260>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b86      	ldr	r3, [pc, #536]	; (800127c <getGPSData+0x260>)
 8001064:	801a      	strh	r2, [r3, #0]
 8001066:	4b85      	ldr	r3, [pc, #532]	; (800127c <getGPSData+0x260>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b84      	ldr	r3, [pc, #528]	; (8001280 <getGPSData+0x264>)
 800106e:	5c9b      	ldrb	r3, [r3, r2]
 8001070:	2b2c      	cmp	r3, #44	; 0x2c
 8001072:	d0f2      	beq.n	800105a <getGPSData+0x3e>
	gpsData.valid = RMC[indexRMC++];
 8001074:	4b81      	ldr	r3, [pc, #516]	; (800127c <getGPSData+0x260>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	b291      	uxth	r1, r2
 800107c:	4a7f      	ldr	r2, [pc, #508]	; (800127c <getGPSData+0x260>)
 800107e:	8011      	strh	r1, [r2, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b7f      	ldr	r3, [pc, #508]	; (8001280 <getGPSData+0x264>)
 8001084:	5c9a      	ldrb	r2, [r3, r2]
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <getGPSData+0x268>)
 8001088:	729a      	strb	r2, [r3, #10]

	if(gpsData.valid == 'V' || gpsData.valid == 'N')
 800108a:	4b7e      	ldr	r3, [pc, #504]	; (8001284 <getGPSData+0x268>)
 800108c:	7a9b      	ldrb	r3, [r3, #10]
 800108e:	2b56      	cmp	r3, #86	; 0x56
 8001090:	d004      	beq.n	800109c <getGPSData+0x80>
 8001092:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <getGPSData+0x268>)
 8001094:	7a9b      	ldrb	r3, [r3, #10]
 8001096:	2b4e      	cmp	r3, #78	; 0x4e
 8001098:	f040 81c6 	bne.w	8001428 <getGPSData+0x40c>
	{
		/* Get latitude */
		indexTempArray = 0;
 800109c:	4b7a      	ldr	r3, [pc, #488]	; (8001288 <getGPSData+0x26c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	801a      	strh	r2, [r3, #0]
		tempArray[indexTempArray++] = '0';
 80010a2:	4b79      	ldr	r3, [pc, #484]	; (8001288 <getGPSData+0x26c>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	b291      	uxth	r1, r2
 80010aa:	4a77      	ldr	r2, [pc, #476]	; (8001288 <getGPSData+0x26c>)
 80010ac:	8011      	strh	r1, [r2, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b76      	ldr	r3, [pc, #472]	; (800128c <getGPSData+0x270>)
 80010b2:	2130      	movs	r1, #48	; 0x30
 80010b4:	5499      	strb	r1, [r3, r2]
		tempArray[indexTempArray++] = '.';
 80010b6:	4b74      	ldr	r3, [pc, #464]	; (8001288 <getGPSData+0x26c>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	b291      	uxth	r1, r2
 80010be:	4a72      	ldr	r2, [pc, #456]	; (8001288 <getGPSData+0x26c>)
 80010c0:	8011      	strh	r1, [r2, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b71      	ldr	r3, [pc, #452]	; (800128c <getGPSData+0x270>)
 80010c6:	212e      	movs	r1, #46	; 0x2e
 80010c8:	5499      	strb	r1, [r3, r2]
		while(RMC[indexRMC] == ',') indexRMC++;
 80010ca:	e005      	b.n	80010d8 <getGPSData+0xbc>
 80010cc:	4b6b      	ldr	r3, [pc, #428]	; (800127c <getGPSData+0x260>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b69      	ldr	r3, [pc, #420]	; (800127c <getGPSData+0x260>)
 80010d6:	801a      	strh	r2, [r3, #0]
 80010d8:	4b68      	ldr	r3, [pc, #416]	; (800127c <getGPSData+0x260>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b68      	ldr	r3, [pc, #416]	; (8001280 <getGPSData+0x264>)
 80010e0:	5c9b      	ldrb	r3, [r3, r2]
 80010e2:	2b2c      	cmp	r3, #44	; 0x2c
 80010e4:	d0f2      	beq.n	80010cc <getGPSData+0xb0>
		while(RMC[indexRMC] != ',')
 80010e6:	e05c      	b.n	80011a2 <getGPSData+0x186>
		{
			if(count == 0)
 80010e8:	4b69      	ldr	r3, [pc, #420]	; (8001290 <getGPSData+0x274>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d11d      	bne.n	800112c <getGPSData+0x110>
			{
				if(RMC[indexRMC] == '0') count--;
 80010f0:	4b62      	ldr	r3, [pc, #392]	; (800127c <getGPSData+0x260>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b62      	ldr	r3, [pc, #392]	; (8001280 <getGPSData+0x264>)
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	2b30      	cmp	r3, #48	; 0x30
 80010fc:	d104      	bne.n	8001108 <getGPSData+0xec>
 80010fe:	4b64      	ldr	r3, [pc, #400]	; (8001290 <getGPSData+0x274>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	4a62      	ldr	r2, [pc, #392]	; (8001290 <getGPSData+0x274>)
 8001106:	6013      	str	r3, [r2, #0]
				gpsData.latitude = (RMC[indexRMC] - '0') * 10;
 8001108:	4b5c      	ldr	r3, [pc, #368]	; (800127c <getGPSData+0x260>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <getGPSData+0x264>)
 8001110:	5c9b      	ldrb	r3, [r3, r2]
 8001112:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fe7a 	bl	8000e18 <__aeabi_i2f>
 8001124:	4603      	mov	r3, r0
 8001126:	4a57      	ldr	r2, [pc, #348]	; (8001284 <getGPSData+0x268>)
 8001128:	6053      	str	r3, [r2, #4]
 800112a:	e02f      	b.n	800118c <getGPSData+0x170>
			}
			else if(count == 1)
 800112c:	4b58      	ldr	r3, [pc, #352]	; (8001290 <getGPSData+0x274>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d114      	bne.n	800115e <getGPSData+0x142>
			{
				gpsData.latitude += (RMC[indexRMC] - '0');
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <getGPSData+0x268>)
 8001136:	685c      	ldr	r4, [r3, #4]
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <getGPSData+0x260>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b50      	ldr	r3, [pc, #320]	; (8001280 <getGPSData+0x264>)
 8001140:	5c9b      	ldrb	r3, [r3, r2]
 8001142:	3b30      	subs	r3, #48	; 0x30
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fe67 	bl	8000e18 <__aeabi_i2f>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	4620      	mov	r0, r4
 8001150:	f7ff fdae 	bl	8000cb0 <__addsf3>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <getGPSData+0x268>)
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	e016      	b.n	800118c <getGPSData+0x170>
			}
			else
			{
				if(RMC[indexRMC] != '.')
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <getGPSData+0x260>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	4b46      	ldr	r3, [pc, #280]	; (8001280 <getGPSData+0x264>)
 8001166:	5c9b      	ldrb	r3, [r3, r2]
 8001168:	2b2e      	cmp	r3, #46	; 0x2e
 800116a:	d009      	beq.n	8001180 <getGPSData+0x164>
					tempArray[indexTempArray] = RMC[indexRMC];
 800116c:	4b43      	ldr	r3, [pc, #268]	; (800127c <getGPSData+0x260>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4b45      	ldr	r3, [pc, #276]	; (8001288 <getGPSData+0x26c>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	4b41      	ldr	r3, [pc, #260]	; (8001280 <getGPSData+0x264>)
 800117a:	5c59      	ldrb	r1, [r3, r1]
 800117c:	4b43      	ldr	r3, [pc, #268]	; (800128c <getGPSData+0x270>)
 800117e:	5499      	strb	r1, [r3, r2]
				indexTempArray++;
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <getGPSData+0x26c>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <getGPSData+0x26c>)
 800118a:	801a      	strh	r2, [r3, #0]

			}
			count++;
 800118c:	4b40      	ldr	r3, [pc, #256]	; (8001290 <getGPSData+0x274>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <getGPSData+0x274>)
 8001194:	6013      	str	r3, [r2, #0]
			indexRMC++;
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <getGPSData+0x260>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <getGPSData+0x260>)
 80011a0:	801a      	strh	r2, [r3, #0]
		while(RMC[indexRMC] != ',')
 80011a2:	4b36      	ldr	r3, [pc, #216]	; (800127c <getGPSData+0x260>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <getGPSData+0x264>)
 80011aa:	5c9b      	ldrb	r3, [r3, r2]
 80011ac:	2b2c      	cmp	r3, #44	; 0x2c
 80011ae:	d19b      	bne.n	80010e8 <getGPSData+0xcc>
		}
		gpsData.latitude += (atof(tempArray) / 60);
 80011b0:	4836      	ldr	r0, [pc, #216]	; (800128c <getGPSData+0x270>)
 80011b2:	f006 fee9 	bl	8007f88 <atof>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <getGPSData+0x278>)
 80011bc:	f7ff fb6a 	bl	8000894 <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4614      	mov	r4, r2
 80011c6:	461d      	mov	r5, r3
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <getGPSData+0x268>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9df 	bl	8000590 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff f87b 	bl	80002d4 <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fd0d 	bl	8000c04 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a25      	ldr	r2, [pc, #148]	; (8001284 <getGPSData+0x268>)
 80011ee:	6053      	str	r3, [r2, #4]
		for(globalIndex = 0; globalIndex < 20; globalIndex++)
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <getGPSData+0x27c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e009      	b.n	800120c <getGPSData+0x1f0>
			tempArray[globalIndex] = '0';
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <getGPSData+0x27c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a23      	ldr	r2, [pc, #140]	; (800128c <getGPSData+0x270>)
 80011fe:	2130      	movs	r1, #48	; 0x30
 8001200:	54d1      	strb	r1, [r2, r3]
		for(globalIndex = 0; globalIndex < 20; globalIndex++)
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <getGPSData+0x27c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <getGPSData+0x27c>)
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <getGPSData+0x27c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b13      	cmp	r3, #19
 8001212:	ddf1      	ble.n	80011f8 <getGPSData+0x1dc>
		count = 0;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <getGPSData+0x274>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]


		/* Get latitude direction */
		while(RMC[indexRMC] == ',') indexRMC++;
 800121a:	e005      	b.n	8001228 <getGPSData+0x20c>
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <getGPSData+0x260>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <getGPSData+0x260>)
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <getGPSData+0x260>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <getGPSData+0x264>)
 8001230:	5c9b      	ldrb	r3, [r3, r2]
 8001232:	2b2c      	cmp	r3, #44	; 0x2c
 8001234:	d0f2      	beq.n	800121c <getGPSData+0x200>
		gpsData.dirLatitude = RMC[indexRMC++];
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <getGPSData+0x260>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	b291      	uxth	r1, r2
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <getGPSData+0x260>)
 8001240:	8011      	strh	r1, [r2, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <getGPSData+0x264>)
 8001246:	5c9a      	ldrb	r2, [r3, r2]
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <getGPSData+0x268>)
 800124a:	725a      	strb	r2, [r3, #9]

		/* Get longitude */
		indexTempArray = 0;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <getGPSData+0x26c>)
 800124e:	2200      	movs	r2, #0
 8001250:	801a      	strh	r2, [r3, #0]
		tempArray[indexTempArray++] = '0';
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <getGPSData+0x26c>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	b291      	uxth	r1, r2
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <getGPSData+0x26c>)
 800125c:	8011      	strh	r1, [r2, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <getGPSData+0x270>)
 8001262:	2130      	movs	r1, #48	; 0x30
 8001264:	5499      	strb	r1, [r3, r2]
		tempArray[indexTempArray++] = '.';
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <getGPSData+0x26c>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	b291      	uxth	r1, r2
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <getGPSData+0x26c>)
 8001270:	8011      	strh	r1, [r2, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <getGPSData+0x270>)
 8001276:	212e      	movs	r1, #46	; 0x2e
 8001278:	5499      	strb	r1, [r3, r2]
		while(RMC[indexRMC] == ',') indexRMC++;
 800127a:	e015      	b.n	80012a8 <getGPSData+0x28c>
 800127c:	20000214 	.word	0x20000214
 8001280:	20000820 	.word	0x20000820
 8001284:	2000064c 	.word	0x2000064c
 8001288:	20000220 	.word	0x20000220
 800128c:	20000000 	.word	0x20000000
 8001290:	20000218 	.word	0x20000218
 8001294:	404e0000 	.word	0x404e0000
 8001298:	200006bc 	.word	0x200006bc
 800129c:	4b65      	ldr	r3, [pc, #404]	; (8001434 <getGPSData+0x418>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b63      	ldr	r3, [pc, #396]	; (8001434 <getGPSData+0x418>)
 80012a6:	801a      	strh	r2, [r3, #0]
 80012a8:	4b62      	ldr	r3, [pc, #392]	; (8001434 <getGPSData+0x418>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <getGPSData+0x41c>)
 80012b0:	5c9b      	ldrb	r3, [r3, r2]
 80012b2:	2b2c      	cmp	r3, #44	; 0x2c
 80012b4:	d0f2      	beq.n	800129c <getGPSData+0x280>
		while(RMC[indexRMC] != ',')
 80012b6:	e05c      	b.n	8001372 <getGPSData+0x356>
		{
			if(count == 0)
 80012b8:	4b60      	ldr	r3, [pc, #384]	; (800143c <getGPSData+0x420>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d11d      	bne.n	80012fc <getGPSData+0x2e0>
			{
				if(RMC[indexRMC] == '0') count--;
 80012c0:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <getGPSData+0x418>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <getGPSData+0x41c>)
 80012c8:	5c9b      	ldrb	r3, [r3, r2]
 80012ca:	2b30      	cmp	r3, #48	; 0x30
 80012cc:	d104      	bne.n	80012d8 <getGPSData+0x2bc>
 80012ce:	4b5b      	ldr	r3, [pc, #364]	; (800143c <getGPSData+0x420>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4a59      	ldr	r2, [pc, #356]	; (800143c <getGPSData+0x420>)
 80012d6:	6013      	str	r3, [r2, #0]
				gpsData.longitude = (RMC[indexRMC] - '0') * 10;
 80012d8:	4b56      	ldr	r3, [pc, #344]	; (8001434 <getGPSData+0x418>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <getGPSData+0x41c>)
 80012e0:	5c9b      	ldrb	r3, [r3, r2]
 80012e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd92 	bl	8000e18 <__aeabi_i2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a52      	ldr	r2, [pc, #328]	; (8001440 <getGPSData+0x424>)
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e02f      	b.n	800135c <getGPSData+0x340>
			}
			else if(count == 1)
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <getGPSData+0x420>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d114      	bne.n	800132e <getGPSData+0x312>
			{
				gpsData.longitude += (RMC[indexRMC] - '0');
 8001304:	4b4e      	ldr	r3, [pc, #312]	; (8001440 <getGPSData+0x424>)
 8001306:	681c      	ldr	r4, [r3, #0]
 8001308:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <getGPSData+0x418>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <getGPSData+0x41c>)
 8001310:	5c9b      	ldrb	r3, [r3, r2]
 8001312:	3b30      	subs	r3, #48	; 0x30
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd7f 	bl	8000e18 <__aeabi_i2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4619      	mov	r1, r3
 800131e:	4620      	mov	r0, r4
 8001320:	f7ff fcc6 	bl	8000cb0 <__addsf3>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b45      	ldr	r3, [pc, #276]	; (8001440 <getGPSData+0x424>)
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e016      	b.n	800135c <getGPSData+0x340>
			}
			else
			{
				if(RMC[indexRMC] != '.')
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <getGPSData+0x418>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4b40      	ldr	r3, [pc, #256]	; (8001438 <getGPSData+0x41c>)
 8001336:	5c9b      	ldrb	r3, [r3, r2]
 8001338:	2b2e      	cmp	r3, #46	; 0x2e
 800133a:	d009      	beq.n	8001350 <getGPSData+0x334>
					tempArray[indexTempArray] = RMC[indexRMC];
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <getGPSData+0x418>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <getGPSData+0x428>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <getGPSData+0x41c>)
 800134a:	5c59      	ldrb	r1, [r3, r1]
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <getGPSData+0x42c>)
 800134e:	5499      	strb	r1, [r3, r2]
				indexTempArray++;
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <getGPSData+0x428>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <getGPSData+0x428>)
 800135a:	801a      	strh	r2, [r3, #0]

			}
			count++;
 800135c:	4b37      	ldr	r3, [pc, #220]	; (800143c <getGPSData+0x420>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a36      	ldr	r2, [pc, #216]	; (800143c <getGPSData+0x420>)
 8001364:	6013      	str	r3, [r2, #0]
			indexRMC++;
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <getGPSData+0x418>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <getGPSData+0x418>)
 8001370:	801a      	strh	r2, [r3, #0]
		while(RMC[indexRMC] != ',')
 8001372:	4b30      	ldr	r3, [pc, #192]	; (8001434 <getGPSData+0x418>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <getGPSData+0x41c>)
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	2b2c      	cmp	r3, #44	; 0x2c
 800137e:	d19b      	bne.n	80012b8 <getGPSData+0x29c>
		}
		gpsData.longitude += (atof(tempArray) / 60);
 8001380:	4831      	ldr	r0, [pc, #196]	; (8001448 <getGPSData+0x42c>)
 8001382:	f006 fe01 	bl	8007f88 <atof>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <getGPSData+0x430>)
 800138c:	f7ff fa82 	bl	8000894 <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4614      	mov	r4, r2
 8001396:	461d      	mov	r5, r3
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <getGPSData+0x424>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8f7 	bl	8000590 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7fe ff93 	bl	80002d4 <__adddf3>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc25 	bl	8000c04 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a20      	ldr	r2, [pc, #128]	; (8001440 <getGPSData+0x424>)
 80013be:	6013      	str	r3, [r2, #0]
		for(globalIndex = 0; globalIndex < 20; globalIndex++)
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <getGPSData+0x434>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e009      	b.n	80013dc <getGPSData+0x3c0>
				tempArray[globalIndex] = '0';
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <getGPSData+0x434>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <getGPSData+0x42c>)
 80013ce:	2130      	movs	r1, #48	; 0x30
 80013d0:	54d1      	strb	r1, [r2, r3]
		for(globalIndex = 0; globalIndex < 20; globalIndex++)
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <getGPSData+0x434>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <getGPSData+0x434>)
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <getGPSData+0x434>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b13      	cmp	r3, #19
 80013e2:	ddf1      	ble.n	80013c8 <getGPSData+0x3ac>
		count = 0;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <getGPSData+0x420>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

		/* Get longitude direction */
		while(RMC[indexRMC] == ',') indexRMC++;
 80013ea:	e005      	b.n	80013f8 <getGPSData+0x3dc>
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <getGPSData+0x418>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <getGPSData+0x418>)
 80013f6:	801a      	strh	r2, [r3, #0]
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <getGPSData+0x418>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <getGPSData+0x41c>)
 8001400:	5c9b      	ldrb	r3, [r3, r2]
 8001402:	2b2c      	cmp	r3, #44	; 0x2c
 8001404:	d0f2      	beq.n	80013ec <getGPSData+0x3d0>
		gpsData.dirLongitude = RMC[indexRMC++];
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <getGPSData+0x418>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	b291      	uxth	r1, r2
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <getGPSData+0x418>)
 8001410:	8011      	strh	r1, [r2, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <getGPSData+0x41c>)
 8001416:	5c9a      	ldrb	r2, [r3, r2]
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <getGPSData+0x424>)
 800141a:	721a      	strb	r2, [r3, #8]

		indexRMC = 0;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <getGPSData+0x418>)
 800141e:	2200      	movs	r2, #0
 8001420:	801a      	strh	r2, [r3, #0]
		indexTempArray = 0;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <getGPSData+0x428>)
 8001424:	2200      	movs	r2, #0
 8001426:	801a      	strh	r2, [r3, #0]
	}
	indexTempArray = 0;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <getGPSData+0x428>)
 800142a:	2200      	movs	r2, #0
 800142c:	801a      	strh	r2, [r3, #0]

}
 800142e:	bf00      	nop
 8001430:	bdb0      	pop	{r4, r5, r7, pc}
 8001432:	bf00      	nop
 8001434:	20000214 	.word	0x20000214
 8001438:	20000820 	.word	0x20000820
 800143c:	20000218 	.word	0x20000218
 8001440:	2000064c 	.word	0x2000064c
 8001444:	20000220 	.word	0x20000220
 8001448:	20000000 	.word	0x20000000
 800144c:	404e0000 	.word	0x404e0000
 8001450:	200006bc 	.word	0x200006bc

08001454 <resetBuffersIndexes>:

//GPS data
extern gps_t gpsData;

void resetBuffersIndexes(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	indexBufferTX = 0;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <resetBuffersIndexes+0x18>)
 800145a:	2200      	movs	r2, #0
 800145c:	801a      	strh	r2, [r3, #0]
	indexBufferRX = 0;
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <resetBuffersIndexes+0x1c>)
 8001460:	2200      	movs	r2, #0
 8001462:	801a      	strh	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	2000021e 	.word	0x2000021e
 8001470:	2000021c 	.word	0x2000021c

08001474 <splitData>:

float splitData(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	indexTempArray = 0;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <splitData+0xc8>)
 800147a:	2200      	movs	r2, #0
 800147c:	801a      	strh	r2, [r3, #0]
	while(bufferRX[indexBufferRX] != ',' && bufferRX[indexBufferRX] != '!')
 800147e:	e01f      	b.n	80014c0 <splitData+0x4c>
	{
		tempArray[indexTempArray] = bufferRX[indexBufferRX];
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <splitData+0xcc>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <splitData+0xc8>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <splitData+0xd0>)
 800148e:	5c59      	ldrb	r1, [r3, r1]
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <splitData+0xd4>)
 8001492:	5499      	strb	r1, [r3, r2]
		if(bufferRX[indexBufferRX] == '.') checkInt = 0;
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <splitData+0xcc>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <splitData+0xd0>)
 800149c:	5c9b      	ldrb	r3, [r3, r2]
 800149e:	2b2e      	cmp	r3, #46	; 0x2e
 80014a0:	d102      	bne.n	80014a8 <splitData+0x34>
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <splitData+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
		indexTempArray++;
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <splitData+0xc8>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <splitData+0xc8>)
 80014b2:	801a      	strh	r2, [r3, #0]
		indexBufferRX++;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <splitData+0xcc>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <splitData+0xcc>)
 80014be:	801a      	strh	r2, [r3, #0]
	while(bufferRX[indexBufferRX] != ',' && bufferRX[indexBufferRX] != '!')
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <splitData+0xcc>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <splitData+0xd0>)
 80014c8:	5c9b      	ldrb	r3, [r3, r2]
 80014ca:	2b2c      	cmp	r3, #44	; 0x2c
 80014cc:	d006      	beq.n	80014dc <splitData+0x68>
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <splitData+0xcc>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <splitData+0xd0>)
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	2b21      	cmp	r3, #33	; 0x21
 80014da:	d1d1      	bne.n	8001480 <splitData+0xc>
	}
	if(checkInt == 1) tempArray[indexTempArray] = '.';
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <splitData+0xd8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d105      	bne.n	80014f0 <splitData+0x7c>
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <splitData+0xc8>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <splitData+0xd4>)
 80014ec:	212e      	movs	r1, #46	; 0x2e
 80014ee:	5499      	strb	r1, [r3, r2]
	checkInt = 1;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <splitData+0xd8>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
	splitValue = atof(tempArray);
 80014f6:	4814      	ldr	r0, [pc, #80]	; (8001548 <splitData+0xd4>)
 80014f8:	f006 fd46 	bl	8007f88 <atof>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fb7e 	bl	8000c04 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <splitData+0xdc>)
 800150c:	6013      	str	r3, [r2, #0]
	for(globalIndex = 0; globalIndex < 20; globalIndex++)
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <splitData+0xe0>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e009      	b.n	800152a <splitData+0xb6>
		tempArray[globalIndex] = '0';
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <splitData+0xe0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <splitData+0xd4>)
 800151c:	2130      	movs	r1, #48	; 0x30
 800151e:	54d1      	strb	r1, [r2, r3]
	for(globalIndex = 0; globalIndex < 20; globalIndex++)
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <splitData+0xe0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <splitData+0xe0>)
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <splitData+0xe0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b13      	cmp	r3, #19
 8001530:	ddf1      	ble.n	8001516 <splitData+0xa2>
	return splitValue;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <splitData+0xdc>)
 8001534:	681b      	ldr	r3, [r3, #0]
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000220 	.word	0x20000220
 8001540:	2000021c 	.word	0x2000021c
 8001544:	200006c0 	.word	0x200006c0
 8001548:	20000000 	.word	0x20000000
 800154c:	20000014 	.word	0x20000014
 8001550:	20000688 	.word	0x20000688
 8001554:	200006bc 	.word	0x200006bc

08001558 <getNeighborData>:

void getNeighborData(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	// Get longitude
	neighbor.longitude = splitData();
 800155c:	f7ff ff8a 	bl	8001474 <splitData>
 8001560:	4603      	mov	r3, r0
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <getNeighborData+0xac>)
 8001564:	6013      	str	r3, [r2, #0]

	// Get latitude
	indexBufferRX++;
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <getNeighborData+0xb0>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <getNeighborData+0xb0>)
 8001570:	801a      	strh	r2, [r3, #0]
	neighbor.latitude = splitData();
 8001572:	f7ff ff7f 	bl	8001474 <splitData>
 8001576:	4603      	mov	r3, r0
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <getNeighborData+0xac>)
 800157a:	6053      	str	r3, [r2, #4]

	// Get speed
	indexBufferRX++;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <getNeighborData+0xb0>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <getNeighborData+0xb0>)
 8001586:	801a      	strh	r2, [r3, #0]
	neighbor.speed = splitData();
 8001588:	f7ff ff74 	bl	8001474 <splitData>
 800158c:	4603      	mov	r3, r0
 800158e:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <getNeighborData+0xac>)
 8001590:	6093      	str	r3, [r2, #8]

	// Get Ax
	indexBufferRX++;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <getNeighborData+0xb0>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <getNeighborData+0xb0>)
 800159c:	801a      	strh	r2, [r3, #0]
	neighbor.Ax = splitData();
 800159e:	f7ff ff69 	bl	8001474 <splitData>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <getNeighborData+0xac>)
 80015a6:	60d3      	str	r3, [r2, #12]

	// Get Ay
	indexBufferRX++;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <getNeighborData+0xb0>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <getNeighborData+0xb0>)
 80015b2:	801a      	strh	r2, [r3, #0]
	neighbor.Ay = splitData();
 80015b4:	f7ff ff5e 	bl	8001474 <splitData>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <getNeighborData+0xac>)
 80015bc:	6113      	str	r3, [r2, #16]

	// Get Angle
	indexBufferRX++;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <getNeighborData+0xb0>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <getNeighborData+0xb0>)
 80015c8:	801a      	strh	r2, [r3, #0]
	neighbor.angle = splitData();
 80015ca:	f7ff ff53 	bl	8001474 <splitData>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <getNeighborData+0xac>)
 80015d2:	6153      	str	r3, [r2, #20]

	// Get Vx
	indexBufferRX++;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <getNeighborData+0xb0>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <getNeighborData+0xb0>)
 80015de:	801a      	strh	r2, [r3, #0]
	neighbor.Vx = splitData();
 80015e0:	f7ff ff48 	bl	8001474 <splitData>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <getNeighborData+0xac>)
 80015e8:	6193      	str	r3, [r2, #24]

	// Get Vy
	indexBufferRX++;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <getNeighborData+0xb0>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <getNeighborData+0xb0>)
 80015f4:	801a      	strh	r2, [r3, #0]
	neighbor.Vy = splitData();
 80015f6:	f7ff ff3d 	bl	8001474 <splitData>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a01      	ldr	r2, [pc, #4]	; (8001604 <getNeighborData+0xac>)
 80015fe:	61d3      	str	r3, [r2, #28]
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000068c 	.word	0x2000068c
 8001608:	2000021c 	.word	0x2000021c
 800160c:	00000000 	.word	0x00000000

08001610 <getCarData>:

// ToDo: Linking these variables with sensors
void getCarData(void)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	af00      	add	r7, sp, #0
	car.longitude = gpsData.longitude;
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <getCarData+0x120>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a46      	ldr	r2, [pc, #280]	; (8001734 <getCarData+0x124>)
 800161a:	6013      	str	r3, [r2, #0]
	car.latitude  = gpsData.latitude;
 800161c:	4b44      	ldr	r3, [pc, #272]	; (8001730 <getCarData+0x120>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a44      	ldr	r2, [pc, #272]	; (8001734 <getCarData+0x124>)
 8001622:	6053      	str	r3, [r2, #4]
	car.speed     = (float) hrotary.RPM;
 8001624:	4b44      	ldr	r3, [pc, #272]	; (8001738 <getCarData+0x128>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fbf1 	bl	8000e10 <__aeabi_ui2f>
 800162e:	4603      	mov	r3, r0
 8001630:	4a40      	ldr	r2, [pc, #256]	; (8001734 <getCarData+0x124>)
 8001632:	6093      	str	r3, [r2, #8]
	car.Ax        = (float) himu.Ax;
 8001634:	4b41      	ldr	r3, [pc, #260]	; (800173c <getCarData+0x12c>)
 8001636:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fae1 	bl	8000c04 <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <getCarData+0x124>)
 8001646:	60d3      	str	r3, [r2, #12]
	car.Ay        = (float) himu.Ay;
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <getCarData+0x12c>)
 800164a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fad7 	bl	8000c04 <__aeabi_d2f>
 8001656:	4603      	mov	r3, r0
 8001658:	4a36      	ldr	r2, [pc, #216]	; (8001734 <getCarData+0x124>)
 800165a:	6113      	str	r3, [r2, #16]
	car.angle     = 30.001001;
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <getCarData+0x124>)
 800165e:	4a38      	ldr	r2, [pc, #224]	; (8001740 <getCarData+0x130>)
 8001660:	615a      	str	r2, [r3, #20]
	car.Vx        = car.speed * (sin((car.angle *PI)/180));
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <getCarData+0x124>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff92 	bl	8000590 <__aeabi_f2d>
 800166c:	4604      	mov	r4, r0
 800166e:	460d      	mov	r5, r1
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <getCarData+0x124>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff8b 	bl	8000590 <__aeabi_f2d>
 800167a:	a32b      	add	r3, pc, #172	; (adr r3, 8001728 <getCarData+0x118>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ffde 	bl	8000640 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <getCarData+0x134>)
 8001692:	f7ff f8ff 	bl	8000894 <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f00a fb4b 	bl	800bd38 <sin>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4620      	mov	r0, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	f7fe ffc9 	bl	8000640 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff faa5 	bl	8000c04 <__aeabi_d2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <getCarData+0x124>)
 80016be:	6193      	str	r3, [r2, #24]
	car.Vy        = car.speed * (cos((car.angle *PI)/180));
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <getCarData+0x124>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff63 	bl	8000590 <__aeabi_f2d>
 80016ca:	4604      	mov	r4, r0
 80016cc:	460d      	mov	r5, r1
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <getCarData+0x124>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff5c 	bl	8000590 <__aeabi_f2d>
 80016d8:	a313      	add	r3, pc, #76	; (adr r3, 8001728 <getCarData+0x118>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe ffaf 	bl	8000640 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <getCarData+0x134>)
 80016f0:	f7ff f8d0 	bl	8000894 <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f00a fada 	bl	800bcb4 <cos>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4620      	mov	r0, r4
 8001706:	4629      	mov	r1, r5
 8001708:	f7fe ff9a 	bl	8000640 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa76 	bl	8000c04 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <getCarData+0x124>)
 800171c:	61d3      	str	r3, [r2, #28]
}
 800171e:	bf00      	nop
 8001720:	bdb0      	pop	{r4, r5, r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	53c8d4f1 	.word	0x53c8d4f1
 800172c:	400921fb 	.word	0x400921fb
 8001730:	2000064c 	.word	0x2000064c
 8001734:	20000658 	.word	0x20000658
 8001738:	2000091c 	.word	0x2000091c
 800173c:	200007e0 	.word	0x200007e0
 8001740:	41f0020d 	.word	0x41f0020d
 8001744:	40668000 	.word	0x40668000

08001748 <getAbsolute>:

float getAbsolute(float val)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	if(val < 0) val *= -1;
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fc01 	bl	8000f5c <__aeabi_fcmplt>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <getAbsolute+0x20>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001766:	607b      	str	r3, [r7, #4]
	return val;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <sendWarning>:

void sendWarning(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
	bufferTX[indexBufferTX++] = 'M';
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <sendWarning+0xd4>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	b291      	uxth	r1, r2
 8001780:	4a31      	ldr	r2, [pc, #196]	; (8001848 <sendWarning+0xd4>)
 8001782:	8011      	strh	r1, [r2, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <sendWarning+0xd8>)
 8001788:	214d      	movs	r1, #77	; 0x4d
 800178a:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = ':';
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <sendWarning+0xd4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	b291      	uxth	r1, r2
 8001794:	4a2c      	ldr	r2, [pc, #176]	; (8001848 <sendWarning+0xd4>)
 8001796:	8011      	strh	r1, [r2, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b2c      	ldr	r3, [pc, #176]	; (800184c <sendWarning+0xd8>)
 800179c:	213a      	movs	r1, #58	; 0x3a
 800179e:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'W';
 80017a0:	4b29      	ldr	r3, [pc, #164]	; (8001848 <sendWarning+0xd4>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	b291      	uxth	r1, r2
 80017a8:	4a27      	ldr	r2, [pc, #156]	; (8001848 <sendWarning+0xd4>)
 80017aa:	8011      	strh	r1, [r2, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <sendWarning+0xd8>)
 80017b0:	2157      	movs	r1, #87	; 0x57
 80017b2:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'a';
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <sendWarning+0xd4>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	b291      	uxth	r1, r2
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <sendWarning+0xd4>)
 80017be:	8011      	strh	r1, [r2, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <sendWarning+0xd8>)
 80017c4:	2161      	movs	r1, #97	; 0x61
 80017c6:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'r';
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <sendWarning+0xd4>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	b291      	uxth	r1, r2
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <sendWarning+0xd4>)
 80017d2:	8011      	strh	r1, [r2, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <sendWarning+0xd8>)
 80017d8:	2172      	movs	r1, #114	; 0x72
 80017da:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'n';
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <sendWarning+0xd4>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	b291      	uxth	r1, r2
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <sendWarning+0xd4>)
 80017e6:	8011      	strh	r1, [r2, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <sendWarning+0xd8>)
 80017ec:	216e      	movs	r1, #110	; 0x6e
 80017ee:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'i';
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <sendWarning+0xd4>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	b291      	uxth	r1, r2
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <sendWarning+0xd4>)
 80017fa:	8011      	strh	r1, [r2, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <sendWarning+0xd8>)
 8001800:	2169      	movs	r1, #105	; 0x69
 8001802:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'n';
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <sendWarning+0xd4>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	b291      	uxth	r1, r2
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <sendWarning+0xd4>)
 800180e:	8011      	strh	r1, [r2, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <sendWarning+0xd8>)
 8001814:	216e      	movs	r1, #110	; 0x6e
 8001816:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'g';
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <sendWarning+0xd4>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	b291      	uxth	r1, r2
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <sendWarning+0xd4>)
 8001822:	8011      	strh	r1, [r2, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <sendWarning+0xd8>)
 8001828:	2167      	movs	r1, #103	; 0x67
 800182a:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = '?';
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <sendWarning+0xd4>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	b291      	uxth	r1, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <sendWarning+0xd4>)
 8001836:	8011      	strh	r1, [r2, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <sendWarning+0xd8>)
 800183c:	213f      	movs	r1, #63	; 0x3f
 800183e:	5499      	strb	r1, [r3, r2]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	2000021e 	.word	0x2000021e
 800184c:	20000724 	.word	0x20000724

08001850 <analysis>:

void analysis(void)
{
 8001850:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001854:	af00      	add	r7, sp, #0
	for(t = 0; t < 10; t++)
 8001856:	4b02      	ldr	r3, [pc, #8]	; (8001860 <analysis+0x10>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	e19f      	b.n	8001b9e <analysis+0x34e>
 800185e:	bf00      	nop
 8001860:	20000222 	.word	0x20000222
	{
		// Car analysis
		car.dx = car.Vx * t + .5 * car.Ax * t * t;
 8001864:	4bb7      	ldr	r3, [pc, #732]	; (8001b44 <analysis+0x2f4>)
 8001866:	699c      	ldr	r4, [r3, #24]
 8001868:	4bb7      	ldr	r3, [pc, #732]	; (8001b48 <analysis+0x2f8>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fad3 	bl	8000e18 <__aeabi_i2f>
 8001872:	4603      	mov	r3, r0
 8001874:	4619      	mov	r1, r3
 8001876:	4620      	mov	r0, r4
 8001878:	f7fe fc72 	bl	8000160 <__aeabi_fmul>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe86 	bl	8000590 <__aeabi_f2d>
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	4bae      	ldr	r3, [pc, #696]	; (8001b44 <analysis+0x2f4>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe7f 	bl	8000590 <__aeabi_f2d>
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4bad      	ldr	r3, [pc, #692]	; (8001b4c <analysis+0x2fc>)
 8001898:	f7fe fed2 	bl	8000640 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4690      	mov	r8, r2
 80018a2:	4699      	mov	r9, r3
 80018a4:	4ba8      	ldr	r3, [pc, #672]	; (8001b48 <analysis+0x2f8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe5f 	bl	800056c <__aeabi_i2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4640      	mov	r0, r8
 80018b4:	4649      	mov	r1, r9
 80018b6:	f7fe fec3 	bl	8000640 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4690      	mov	r8, r2
 80018c0:	4699      	mov	r9, r3
 80018c2:	4ba1      	ldr	r3, [pc, #644]	; (8001b48 <analysis+0x2f8>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe50 	bl	800056c <__aeabi_i2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4640      	mov	r0, r8
 80018d2:	4649      	mov	r1, r9
 80018d4:	f7fe feb4 	bl	8000640 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fcf8 	bl	80002d4 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f98a 	bl	8000c04 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a94      	ldr	r2, [pc, #592]	; (8001b44 <analysis+0x2f4>)
 80018f4:	6213      	str	r3, [r2, #32]
		car.dy = car.Vy * t + .5 * car.Ay * t * t;
 80018f6:	4b93      	ldr	r3, [pc, #588]	; (8001b44 <analysis+0x2f4>)
 80018f8:	69dc      	ldr	r4, [r3, #28]
 80018fa:	4b93      	ldr	r3, [pc, #588]	; (8001b48 <analysis+0x2f8>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fa8a 	bl	8000e18 <__aeabi_i2f>
 8001904:	4603      	mov	r3, r0
 8001906:	4619      	mov	r1, r3
 8001908:	4620      	mov	r0, r4
 800190a:	f7fe fc29 	bl	8000160 <__aeabi_fmul>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe3d 	bl	8000590 <__aeabi_f2d>
 8001916:	4604      	mov	r4, r0
 8001918:	460d      	mov	r5, r1
 800191a:	4b8a      	ldr	r3, [pc, #552]	; (8001b44 <analysis+0x2f4>)
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe36 	bl	8000590 <__aeabi_f2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b88      	ldr	r3, [pc, #544]	; (8001b4c <analysis+0x2fc>)
 800192a:	f7fe fe89 	bl	8000640 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4690      	mov	r8, r2
 8001934:	4699      	mov	r9, r3
 8001936:	4b84      	ldr	r3, [pc, #528]	; (8001b48 <analysis+0x2f8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe16 	bl	800056c <__aeabi_i2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4640      	mov	r0, r8
 8001946:	4649      	mov	r1, r9
 8001948:	f7fe fe7a 	bl	8000640 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4690      	mov	r8, r2
 8001952:	4699      	mov	r9, r3
 8001954:	4b7c      	ldr	r3, [pc, #496]	; (8001b48 <analysis+0x2f8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fe07 	bl	800056c <__aeabi_i2d>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4640      	mov	r0, r8
 8001964:	4649      	mov	r1, r9
 8001966:	f7fe fe6b 	bl	8000640 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4620      	mov	r0, r4
 8001970:	4629      	mov	r1, r5
 8001972:	f7fe fcaf 	bl	80002d4 <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f941 	bl	8000c04 <__aeabi_d2f>
 8001982:	4603      	mov	r3, r0
 8001984:	4a6f      	ldr	r2, [pc, #444]	; (8001b44 <analysis+0x2f4>)
 8001986:	6253      	str	r3, [r2, #36]	; 0x24

		// Neighbor analysis
		neighbor.dx = neighbor.Vx * t + .5 * neighbor.Ax * t * t;
 8001988:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <analysis+0x300>)
 800198a:	699c      	ldr	r4, [r3, #24]
 800198c:	4b6e      	ldr	r3, [pc, #440]	; (8001b48 <analysis+0x2f8>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fa41 	bl	8000e18 <__aeabi_i2f>
 8001996:	4603      	mov	r3, r0
 8001998:	4619      	mov	r1, r3
 800199a:	4620      	mov	r0, r4
 800199c:	f7fe fbe0 	bl	8000160 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdf4 	bl	8000590 <__aeabi_f2d>
 80019a8:	4604      	mov	r4, r0
 80019aa:	460d      	mov	r5, r1
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <analysis+0x300>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fded 	bl	8000590 <__aeabi_f2d>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b64      	ldr	r3, [pc, #400]	; (8001b4c <analysis+0x2fc>)
 80019bc:	f7fe fe40 	bl	8000640 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4690      	mov	r8, r2
 80019c6:	4699      	mov	r9, r3
 80019c8:	4b5f      	ldr	r3, [pc, #380]	; (8001b48 <analysis+0x2f8>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdcd 	bl	800056c <__aeabi_i2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4640      	mov	r0, r8
 80019d8:	4649      	mov	r1, r9
 80019da:	f7fe fe31 	bl	8000640 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <analysis+0x2f8>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdbe 	bl	800056c <__aeabi_i2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4640      	mov	r0, r8
 80019f6:	4649      	mov	r1, r9
 80019f8:	f7fe fe22 	bl	8000640 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7fe fc66 	bl	80002d4 <__adddf3>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f8f8 	bl	8000c04 <__aeabi_d2f>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a4e      	ldr	r2, [pc, #312]	; (8001b50 <analysis+0x300>)
 8001a18:	6213      	str	r3, [r2, #32]
		neighbor.dy = neighbor.Vy * t + .5 * neighbor.Ay * t * t;
 8001a1a:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <analysis+0x300>)
 8001a1c:	69dc      	ldr	r4, [r3, #28]
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	; (8001b48 <analysis+0x2f8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f9f8 	bl	8000e18 <__aeabi_i2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7fe fb97 	bl	8000160 <__aeabi_fmul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fdab 	bl	8000590 <__aeabi_f2d>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <analysis+0x300>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fda4 	bl	8000590 <__aeabi_f2d>
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <analysis+0x2fc>)
 8001a4e:	f7fe fdf7 	bl	8000640 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <analysis+0x2f8>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd84 	bl	800056c <__aeabi_i2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4640      	mov	r0, r8
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	f7fe fde8 	bl	8000640 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4690      	mov	r8, r2
 8001a76:	4699      	mov	r9, r3
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <analysis+0x2f8>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd75 	bl	800056c <__aeabi_i2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4640      	mov	r0, r8
 8001a88:	4649      	mov	r1, r9
 8001a8a:	f7fe fdd9 	bl	8000640 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fc1d 	bl	80002d4 <__adddf3>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff f8af 	bl	8000c04 <__aeabi_d2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a29      	ldr	r2, [pc, #164]	; (8001b50 <analysis+0x300>)
 8001aaa:	6253      	str	r3, [r2, #36]	; 0x24

		// New Cartesian points for this car
		car.x2 = car.dx + car.longitude;
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <analysis+0x2f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a24      	ldr	r2, [pc, #144]	; (8001b44 <analysis+0x2f4>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8fa 	bl	8000cb0 <__addsf3>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <analysis+0x2f4>)
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
		car.y2 = car.dy + car.latitude;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <analysis+0x2f4>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	; (8001b44 <analysis+0x2f4>)
 8001aca:	6852      	ldr	r2, [r2, #4]
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f8ee 	bl	8000cb0 <__addsf3>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <analysis+0x2f4>)
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c

		// New Cartesian points for neighbor car
		neighbor.x2 = neighbor.dx + neighbor.longitude;
 8001adc:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <analysis+0x300>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <analysis+0x300>)
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f8e2 	bl	8000cb0 <__addsf3>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <analysis+0x300>)
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
		neighbor.y2 = neighbor.dy + neighbor.latitude;
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <analysis+0x300>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <analysis+0x300>)
 8001afa:	6852      	ldr	r2, [r2, #4]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f8d6 	bl	8000cb0 <__addsf3>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <analysis+0x300>)
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c

		xDiff = neighbor.x2 - car.x2;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <analysis+0x300>)
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <analysis+0x2f4>)
 8001b12:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f8c8 	bl	8000cac <__aeabi_fsub>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <analysis+0x304>)
 8001b22:	601a      	str	r2, [r3, #0]
		yDiff = neighbor.y2 - car.y2;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <analysis+0x300>)
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <analysis+0x2f4>)
 8001b2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f8bc 	bl	8000cac <__aeabi_fsub>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <analysis+0x308>)
 8001b3a:	601a      	str	r2, [r3, #0]
		if((getAbsolute(xDiff) <= DX_MIN)  || (getAbsolute(yDiff) <= DY_MIN))
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <analysis+0x304>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	e00c      	b.n	8001b5c <analysis+0x30c>
 8001b42:	bf00      	nop
 8001b44:	20000658 	.word	0x20000658
 8001b48:	20000222 	.word	0x20000222
 8001b4c:	3fe00000 	.word	0x3fe00000
 8001b50:	2000068c 	.word	0x2000068c
 8001b54:	20000224 	.word	0x20000224
 8001b58:	20000228 	.word	0x20000228
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fdf3 	bl	8001748 <getAbsolute>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4912      	ldr	r1, [pc, #72]	; (8001bb0 <analysis+0x360>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fa02 	bl	8000f70 <__aeabi_fcmple>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <analysis+0x33c>
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <analysis+0x364>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fde6 	bl	8001748 <getAbsolute>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <analysis+0x360>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f9f5 	bl	8000f70 <__aeabi_fcmple>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <analysis+0x342>
		{
			sendWarning();
 8001b8c:	f7ff fdf2 	bl	8001774 <sendWarning>
			break;
 8001b90:	e00b      	b.n	8001baa <analysis+0x35a>
	for(t = 0; t < 10; t++)
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <analysis+0x368>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <analysis+0x368>)
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <analysis+0x368>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b09      	cmp	r3, #9
 8001ba4:	f67f ae5e 	bls.w	8001864 <analysis+0x14>
		}

	}
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bb0:	40400000 	.word	0x40400000
 8001bb4:	20000228 	.word	0x20000228
 8001bb8:	20000222 	.word	0x20000222

08001bbc <mergeData>:

void mergeData(float value)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

	gcvt(value, TEMP_ARR_SIZE, tempArray);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7fe fce3 	bl	8000590 <__aeabi_f2d>
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <mergeData+0xa8>)
 8001bcc:	2214      	movs	r2, #20
 8001bce:	f006 f9df 	bl	8007f90 <gcvt>

	for(indexTempArray = 0; indexTempArray < MAX_FLOAT_DIGITS; indexTempArray++)
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <mergeData+0xac>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	e01c      	b.n	8001c14 <mergeData+0x58>
	{
		if(tempArray[indexTempArray] == '\0') break;
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <mergeData+0xac>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <mergeData+0xa8>)
 8001be2:	5c9b      	ldrb	r3, [r3, r2]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01a      	beq.n	8001c1e <mergeData+0x62>
		bufferTX[indexBufferTX] = tempArray[indexTempArray];
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <mergeData+0xac>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <mergeData+0xb0>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <mergeData+0xa8>)
 8001bf6:	5c59      	ldrb	r1, [r3, r1]
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <mergeData+0xb4>)
 8001bfa:	5499      	strb	r1, [r3, r2]
		indexBufferTX++;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <mergeData+0xb0>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <mergeData+0xb0>)
 8001c06:	801a      	strh	r2, [r3, #0]
	for(indexTempArray = 0; indexTempArray < MAX_FLOAT_DIGITS; indexTempArray++)
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <mergeData+0xac>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <mergeData+0xac>)
 8001c12:	801a      	strh	r2, [r3, #0]
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <mergeData+0xac>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d9de      	bls.n	8001bda <mergeData+0x1e>
 8001c1c:	e000      	b.n	8001c20 <mergeData+0x64>
		if(tempArray[indexTempArray] == '\0') break;
 8001c1e:	bf00      	nop
	}
	bufferTX[indexBufferTX++] = ',';
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <mergeData+0xb0>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	b291      	uxth	r1, r2
 8001c28:	4a10      	ldr	r2, [pc, #64]	; (8001c6c <mergeData+0xb0>)
 8001c2a:	8011      	strh	r1, [r2, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <mergeData+0xb4>)
 8001c30:	212c      	movs	r1, #44	; 0x2c
 8001c32:	5499      	strb	r1, [r3, r2]


	for(globalIndex = 0; globalIndex < TEMP_ARR_SIZE; globalIndex++)
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <mergeData+0xb8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e009      	b.n	8001c50 <mergeData+0x94>
		tempArray[globalIndex] = '0';
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <mergeData+0xb8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <mergeData+0xa8>)
 8001c42:	2130      	movs	r1, #48	; 0x30
 8001c44:	54d1      	strb	r1, [r2, r3]
	for(globalIndex = 0; globalIndex < TEMP_ARR_SIZE; globalIndex++)
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <mergeData+0xb8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <mergeData+0xb8>)
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <mergeData+0xb8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b13      	cmp	r3, #19
 8001c56:	ddf1      	ble.n	8001c3c <mergeData+0x80>
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000220 	.word	0x20000220
 8001c6c:	2000021e 	.word	0x2000021e
 8001c70:	20000724 	.word	0x20000724
 8001c74:	200006bc 	.word	0x200006bc

08001c78 <generateTransmitBuffer>:

void generateTransmitBuffer(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	bufferTX[indexBufferTX++] = 'D';
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	b291      	uxth	r1, r2
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001c86:	8011      	strh	r1, [r2, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <generateTransmitBuffer+0xbc>)
 8001c8c:	2144      	movs	r1, #68	; 0x44
 8001c8e:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = ':';
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	b291      	uxth	r1, r2
 8001c98:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001c9a:	8011      	strh	r1, [r2, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <generateTransmitBuffer+0xbc>)
 8001ca0:	213a      	movs	r1, #58	; 0x3a
 8001ca2:	5499      	strb	r1, [r3, r2]

	mergeData(car.longitude);
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <generateTransmitBuffer+0xc0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff87 	bl	8001bbc <mergeData>
	mergeData(car.latitude);
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <generateTransmitBuffer+0xc0>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff82 	bl	8001bbc <mergeData>
	mergeData(car.speed);
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <generateTransmitBuffer+0xc0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff7d 	bl	8001bbc <mergeData>
	mergeData(car.Ax);
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <generateTransmitBuffer+0xc0>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff78 	bl	8001bbc <mergeData>
	mergeData(car.Ay);
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <generateTransmitBuffer+0xc0>)
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff73 	bl	8001bbc <mergeData>
	mergeData(car.angle);
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <generateTransmitBuffer+0xc0>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff6e 	bl	8001bbc <mergeData>
	mergeData(car.Vx);
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <generateTransmitBuffer+0xc0>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff69 	bl	8001bbc <mergeData>
	mergeData(car.Vy);
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <generateTransmitBuffer+0xc0>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff64 	bl	8001bbc <mergeData>
	bufferTX[indexBufferTX++] = '?';
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	b291      	uxth	r1, r2
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001cfe:	8011      	strh	r1, [r2, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <generateTransmitBuffer+0xbc>)
 8001d04:	213f      	movs	r1, #63	; 0x3f
 8001d06:	5499      	strb	r1, [r3, r2]

	for(; indexBufferTX < TX_SIZE; indexBufferTX++)
 8001d08:	e00b      	b.n	8001d22 <generateTransmitBuffer+0xaa>
	{
		bufferTX[indexBufferTX] = '!';
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <generateTransmitBuffer+0xbc>)
 8001d12:	2121      	movs	r1, #33	; 0x21
 8001d14:	5499      	strb	r1, [r3, r2]
	for(; indexBufferTX < TX_SIZE; indexBufferTX++)
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <generateTransmitBuffer+0xb8>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	2b63      	cmp	r3, #99	; 0x63
 8001d28:	d9ef      	bls.n	8001d0a <generateTransmitBuffer+0x92>
	}
}
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000021e 	.word	0x2000021e
 8001d34:	20000724 	.word	0x20000724
 8001d38:	20000658 	.word	0x20000658

08001d3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]


}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]


}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001d6c:	f043 0320 	orr.w	r3, r3, #32
 8001d70:	6193      	str	r3, [r2, #24]
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6193      	str	r3, [r2, #24]
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6193      	str	r3, [r2, #24]
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <MX_GPIO_Init+0x58>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]

}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000

08001dbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <MX_I2C1_Init+0x54>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <MX_I2C1_Init+0x58>)
 8001dca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dfa:	f001 fc5b 	bl	80036b4 <HAL_I2C_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e04:	f000 f9f7 	bl	80021f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000788 	.word	0x20000788
 8001e10:	40005400 	.word	0x40005400
 8001e14:	000186a0 	.word	0x000186a0

08001e18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_I2C_MspInit+0x90>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d133      	bne.n	8001ea0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e50:	23c0      	movs	r3, #192	; 0xc0
 8001e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e54:	2312      	movs	r3, #18
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4619      	mov	r1, r3
 8001e62:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <HAL_I2C_MspInit+0x98>)
 8001e64:	f001 faa2 	bl	80033ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e72:	61d3      	str	r3, [r2, #28]
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	201f      	movs	r0, #31
 8001e86:	f001 f99e 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e8a:	201f      	movs	r0, #31
 8001e8c:	f001 f9b7 	bl	80031fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2020      	movs	r0, #32
 8001e96:	f001 f996 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e9a:	2020      	movs	r0, #32
 8001e9c:	f001 f9af 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40005400 	.word	0x40005400
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40010c00 	.word	0x40010c00

08001eb4 <HAL_IMU_Init>:

/*Functions*/

/*This function is to initiate the IMU*/
void HAL_IMU_Init(I2C_HandleTypeDef *I2Cx)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af04      	add	r7, sp, #16
 8001eba:	6078      	str	r0, [r7, #4]
		Error_Handler();
	}
#endif

	/*Powering on the IMU*/
	data_write = IMU_POWER_ON|0x01;
 8001ebc:	2309      	movs	r3, #9
 8001ebe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 8001ec0:	2364      	movs	r3, #100	; 0x64
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	f107 030f 	add.w	r3, r7, #15
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	226b      	movs	r2, #107	; 0x6b
 8001ed2:	21d2      	movs	r1, #210	; 0xd2
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f001 fd31 	bl	800393c <HAL_I2C_Mem_Write>

	/*Defining the digital LPF order (3-bit number)*/
	data_write = (IMU_DLPF_ORDER & 0b00000111);
 8001eda:	2305      	movs	r3, #5
 8001edc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, CONFIG, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 8001ede:	2364      	movs	r3, #100	; 0x64
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	f107 030f 	add.w	r3, r7, #15
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2301      	movs	r3, #1
 8001eee:	221a      	movs	r2, #26
 8001ef0:	21d2      	movs	r1, #210	; 0xd2
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f001 fd22 	bl	800393c <HAL_I2C_Mem_Write>

	/*Defining the scale of the gyroscope*/
	data_write = (IMU_GYRO_SCALE << 3);
 8001ef8:	2310      	movs	r3, #16
 8001efa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 8001efc:	2364      	movs	r3, #100	; 0x64
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	2301      	movs	r3, #1
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	f107 030f 	add.w	r3, r7, #15
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	221b      	movs	r2, #27
 8001f0e:	21d2      	movs	r1, #210	; 0xd2
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 fd13 	bl	800393c <HAL_I2C_Mem_Write>

	/*Defining the scale of the accelerometer*/
	data_write = (IMU_ACCEL_SCALE << 3);
 8001f16:	2308      	movs	r3, #8
 8001f18:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2Cx, IMU_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_write, 1, i2c_timeout);
 8001f1a:	2364      	movs	r3, #100	; 0x64
 8001f1c:	9302      	str	r3, [sp, #8]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	f107 030f 	add.w	r3, r7, #15
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	221c      	movs	r2, #28
 8001f2c:	21d2      	movs	r1, #210	; 0xd2
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f001 fd04 	bl	800393c <HAL_I2C_Mem_Write>
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	0000      	movs	r0, r0
	...

08001f40 <HAL_IMU_Read_Accel>:

/*This function is to read the acceleration*/
void HAL_IMU_Read_Accel(I2C_HandleTypeDef *I2Cx, IMU_TypeDef *DataStruct)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af04      	add	r7, sp, #16
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];
	uint8_t scale = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]

    /* Read 6 bytes of data starting from ACCEL_XOUT_H register */
    if(HAL_I2C_Mem_Read(I2Cx, IMU_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, Rec_Data, 6, i2c_timeout) != HAL_OK)
 8001f4e:	2364      	movs	r3, #100	; 0x64
 8001f50:	9302      	str	r3, [sp, #8]
 8001f52:	2306      	movs	r3, #6
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	223b      	movs	r2, #59	; 0x3b
 8001f60:	21d2      	movs	r1, #210	; 0xd2
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f001 fde4 	bl	8003b30 <HAL_I2C_Mem_Read>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_IMU_Read_Accel+0x36>
	{
    	/*Reinitiate I2C*/
    	HAL_I2C_Init(I2Cx);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f001 fba0 	bl	80036b4 <HAL_I2C_Init>
		DataStruct->Ax = ((DataStruct->Accel_X_RAW * scale * 2) / 32768.0)*9.8;
		DataStruct->Ay = ((DataStruct->Accel_Y_RAW * scale * 2) / 32768.0)*9.8;
		DataStruct->Az = ((DataStruct->Accel_Z_RAW * scale * 2) / 32768.0)*9.8;
	}

}
 8001f74:	e080      	b.n	8002078 <HAL_IMU_Read_Accel+0x138>
		DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001f76:	7a3b      	ldrb	r3, [r7, #8]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	7a7b      	ldrb	r3, [r7, #9]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	801a      	strh	r2, [r3, #0]
		DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001f88:	7abb      	ldrb	r3, [r7, #10]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	b21a      	sxth	r2, r3
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	805a      	strh	r2, [r3, #2]
		DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001f9a:	7b3b      	ldrb	r3, [r7, #12]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	7b7b      	ldrb	r3, [r7, #13]
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < IMU_ACCEL_SCALE; i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	73bb      	strb	r3, [r7, #14]
 8001fb0:	e005      	b.n	8001fbe <HAL_IMU_Read_Accel+0x7e>
			scale *= 2;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i = 0; i < IMU_ACCEL_SCALE; i++)
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	73bb      	strb	r3, [r7, #14]
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f6      	beq.n	8001fb2 <HAL_IMU_Read_Accel+0x72>
		DataStruct->Ax = ((DataStruct->Accel_X_RAW * scale * 2) / 32768.0)*9.8;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	fb03 f302 	mul.w	r3, r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fac9 	bl	800056c <__aeabi_i2d>
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_IMU_Read_Accel+0x148>)
 8001fe0:	f7fe fc58 	bl	8000894 <__aeabi_ddiv>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	a324      	add	r3, pc, #144	; (adr r3, 8002080 <HAL_IMU_Read_Accel+0x140>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe fb25 	bl	8000640 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	6839      	ldr	r1, [r7, #0]
 8001ffc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		DataStruct->Ay = ((DataStruct->Accel_Y_RAW * scale * 2) / 32768.0)*9.8;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002006:	461a      	mov	r2, r3
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	fb03 f302 	mul.w	r3, r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe faab 	bl	800056c <__aeabi_i2d>
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_IMU_Read_Accel+0x148>)
 800201c:	f7fe fc3a 	bl	8000894 <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	a315      	add	r3, pc, #84	; (adr r3, 8002080 <HAL_IMU_Read_Accel+0x140>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe fb07 	bl	8000640 <__aeabi_dmul>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	e9c1 2304 	strd	r2, r3, [r1, #16]
		DataStruct->Az = ((DataStruct->Accel_Z_RAW * scale * 2) / 32768.0)*9.8;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002042:	461a      	mov	r2, r3
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	fb03 f302 	mul.w	r3, r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fa8d 	bl	800056c <__aeabi_i2d>
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_IMU_Read_Accel+0x148>)
 8002058:	f7fe fc1c 	bl	8000894 <__aeabi_ddiv>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	a306      	add	r3, pc, #24	; (adr r3, 8002080 <HAL_IMU_Read_Accel+0x140>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fae9 	bl	8000640 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	6839      	ldr	r1, [r7, #0]
 8002074:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	9999999a 	.word	0x9999999a
 8002084:	40239999 	.word	0x40239999
 8002088:	40e00000 	.word	0x40e00000

0800208c <HAL_IMU_Read>:
	
}

/*This function is to read both acceleration and angular velocity*/
void HAL_IMU_Read(I2C_HandleTypeDef *I2Cx, IMU_TypeDef *DataStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
    HAL_IMU_Read_Accel(I2Cx, DataStruct);
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff51 	bl	8001f40 <HAL_IMU_Read_Accel>
	//HAL_IMU_Read_Gyro(I2Cx, DataStruct);
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ac:	f000 ff2e 	bl	8002f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b0:	f000 f85c 	bl	800216c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b4:	f7ff fe54 	bl	8001d60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020b8:	f000 fe12 	bl	8002ce0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80020bc:	f7ff fe7e 	bl	8001dbc <MX_I2C1_Init>
  MX_TIM1_Init();
 80020c0:	f000 faf2 	bl	80026a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80020c4:	f000 fb48 	bl	8002758 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80020c8:	f000 fe34 	bl	8002d34 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 80020cc:	f000 fbf8 	bl	80028c0 <Ringbuf_init>
  HAL_Delay(500);
 80020d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020d4:	f000 ff7c 	bl	8002fd0 <HAL_Delay>
  HAL_ROTARY_Start(&htim1, &htim3, 8000);
 80020d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80020dc:	4919      	ldr	r1, [pc, #100]	; (8002144 <main+0x9c>)
 80020de:	481a      	ldr	r0, [pc, #104]	; (8002148 <main+0xa0>)
 80020e0:	f000 f88e 	bl	8002200 <HAL_ROTARY_Start>
  HAL_IMU_Init(&hi2c1);
 80020e4:	4819      	ldr	r0, [pc, #100]	; (800214c <main+0xa4>)
 80020e6:	f7ff fee5 	bl	8001eb4 <HAL_IMU_Init>
  HAL_Delay(2000);
 80020ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020ee:	f000 ff6f 	bl	8002fd0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Wait_for("RMC") == 1)
 80020f2:	4817      	ldr	r0, [pc, #92]	; (8002150 <main+0xa8>)
 80020f4:	f000 fd0e 	bl	8002b14 <Wait_for>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d105      	bne.n	800210a <main+0x62>
	  {
	  	Copy_upto("*", RMC);
 80020fe:	4915      	ldr	r1, [pc, #84]	; (8002154 <main+0xac>)
 8002100:	4815      	ldr	r0, [pc, #84]	; (8002158 <main+0xb0>)
 8002102:	f000 fc87 	bl	8002a14 <Copy_upto>
	  	getGPSData();
 8002106:	f7fe ff89 	bl	800101c <getGPSData>

	  }
	  HAL_IMU_Read(&hi2c1, &himu);
 800210a:	4914      	ldr	r1, [pc, #80]	; (800215c <main+0xb4>)
 800210c:	480f      	ldr	r0, [pc, #60]	; (800214c <main+0xa4>)
 800210e:	f7ff ffbd 	bl	800208c <HAL_IMU_Read>
	  HAL_UART_Receive(&huart2, bufferRX, sizeof(bufferRX), 0xFFFF);
 8002112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002116:	2264      	movs	r2, #100	; 0x64
 8002118:	4911      	ldr	r1, [pc, #68]	; (8002160 <main+0xb8>)
 800211a:	4812      	ldr	r0, [pc, #72]	; (8002164 <main+0xbc>)
 800211c:	f005 faab 	bl	8007676 <HAL_UART_Receive>
	  resetBuffersIndexes();
 8002120:	f7ff f998 	bl	8001454 <resetBuffersIndexes>
	  getNeighborData();
 8002124:	f7ff fa18 	bl	8001558 <getNeighborData>
	  getCarData();
 8002128:	f7ff fa72 	bl	8001610 <getCarData>
	  analysis();
 800212c:	f7ff fb90 	bl	8001850 <analysis>
	  generateTransmitBuffer();
 8002130:	f7ff fda2 	bl	8001c78 <generateTransmitBuffer>
	  HAL_UART_Transmit(&huart2, bufferTX, sizeof(bufferTX), 0xFF);
 8002134:	23ff      	movs	r3, #255	; 0xff
 8002136:	2264      	movs	r2, #100	; 0x64
 8002138:	490b      	ldr	r1, [pc, #44]	; (8002168 <main+0xc0>)
 800213a:	480a      	ldr	r0, [pc, #40]	; (8002164 <main+0xbc>)
 800213c:	f005 fa09 	bl	8007552 <HAL_UART_Transmit>
	  if(Wait_for("RMC") == 1)
 8002140:	e7d7      	b.n	80020f2 <main+0x4a>
 8002142:	bf00      	nop
 8002144:	20000924 	.word	0x20000924
 8002148:	2000096c 	.word	0x2000096c
 800214c:	20000788 	.word	0x20000788
 8002150:	0800cd58 	.word	0x0800cd58
 8002154:	20000820 	.word	0x20000820
 8002158:	0800cd5c 	.word	0x0800cd5c
 800215c:	200007e0 	.word	0x200007e0
 8002160:	200006c0 	.word	0x200006c0
 8002164:	20000a04 	.word	0x20000a04
 8002168:	20000724 	.word	0x20000724

0800216c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b090      	sub	sp, #64	; 0x40
 8002170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	2228      	movs	r2, #40	; 0x28
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f005 ff64 	bl	8008048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800219c:	2301      	movs	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a0:	2302      	movs	r3, #2
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b0:	f107 0318 	add.w	r3, r7, #24
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 ff51 	bl	800605c <HAL_RCC_OscConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021c0:	f000 f819 	bl	80021f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c4:	230f      	movs	r3, #15
 80021c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c8:	2302      	movs	r3, #2
 80021ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	2102      	movs	r1, #2
 80021de:	4618      	mov	r0, r3
 80021e0:	f004 f9bc 	bl	800655c <HAL_RCC_ClockConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80021ea:	f000 f804 	bl	80021f6 <Error_Handler>
  }
}
 80021ee:	bf00      	nop
 80021f0:	3740      	adds	r7, #64	; 0x40
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fe:	e7fe      	b.n	80021fe <Error_Handler+0x8>

08002200 <HAL_ROTARY_Start>:
/*Functions*/

/*This function is to start encoder and update data continuously.*/
/*APB_Timer_Clock is in kHz*/
void HAL_ROTARY_Start(TIM_HandleTypeDef* Encoder,TIM_HandleTypeDef* Timer,uint32_t APB_Timer_Clock)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	Read_Data = ROTARY_READ_DATA_CONT;
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_ROTARY_Start+0x9c>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
	if((Timer->Init.Prescaler != 0 )&&(Timer->Init.Period != 0))
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d013      	beq.n	8002242 <HAL_ROTARY_Start+0x42>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00f      	beq.n	8002242 <HAL_ROTARY_Start+0x42>
	{
		frequency = ((APB_Timer_Clock*1000)/Timer->Init.Prescaler)/Timer->Init.Period;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002228:	fb02 f203 	mul.w	r2, r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	fbb2 f2f3 	udiv	r2, r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_ROTARY_Start+0xa0>)
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e010      	b.n	8002264 <HAL_ROTARY_Start+0x64>
	}
	else if ((Timer->Init.Prescaler = 0 )&&(Timer->Init.Period != 0))
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
	{
		frequency = (APB_Timer_Clock*1000)/Timer->Init.Period;
	}
	else if ((Timer->Init.Prescaler != 0 )&&(Timer->Init.Period = 0))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_ROTARY_Start+0x56>
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
	{
		frequency = (APB_Timer_Clock*1000)/Timer->Init.Prescaler;
	}
	else
	{
		frequency = APB_Timer_Clock*1000;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_ROTARY_Start+0xa0>)
 8002262:	6013      	str	r3, [r2, #0]
	}
	hencoder = *Encoder;
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_ROTARY_Start+0xa4>)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	2348      	movs	r3, #72	; 0x48
 800226e:	461a      	mov	r2, r3
 8002270:	f005 fedc 	bl	800802c <memcpy>
	htimer = *Timer;
 8002274:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_ROTARY_Start+0xa8>)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	2348      	movs	r3, #72	; 0x48
 800227e:	461a      	mov	r2, r3
 8002280:	f005 fed4 	bl	800802c <memcpy>
	/*Starting the encoder*/
	HAL_TIM_Encoder_Start(Encoder,TIM_CHANNEL_ALL);
 8002284:	213c      	movs	r1, #60	; 0x3c
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f004 fc74 	bl	8006b74 <HAL_TIM_Encoder_Start>
	/*Starting the timer*/
	HAL_TIM_Base_Start_IT(Timer);
 800228c:	68b8      	ldr	r0, [r7, #8]
 800228e:	f004 fb4f 	bl	8006930 <HAL_TIM_Base_Start_IT>
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000888 	.word	0x20000888
 80022a0:	20000884 	.word	0x20000884
 80022a4:	200008d4 	.word	0x200008d4
 80022a8:	2000088c 	.word	0x2000088c

080022ac <HAL_ROTARY_Stop>:
	HAL_TIM_Base_Start_IT(Timer);
}

/*This function is to stop the encoder.*/
void HAL_ROTARY_Stop(TIM_HandleTypeDef* Encoder,TIM_HandleTypeDef* Timer)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	/*Stopping the encoder*/
	HAL_TIM_Encoder_Stop(Encoder,TIM_CHANNEL_ALL);
 80022b6:	213c      	movs	r1, #60	; 0x3c
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f004 fce9 	bl	8006c90 <HAL_TIM_Encoder_Stop>
	/*Stopping the timer*/
	HAL_TIM_Base_Stop_IT(Timer);
 80022be:	6838      	ldr	r0, [r7, #0]
 80022c0:	f004 fb88 	bl	80069d4 <HAL_TIM_Base_Stop_IT>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_TIM_PeriodElapsedCallback>:

/*This function generates the data from the interrupt of the timer*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	/*Reading the register of the encoder timer*/
	Count2 = hencoder.Instance->CNT;
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 80022de:	801a      	strh	r2, [r3, #0]
	/*Disabling the timer if the data is read once*/
	if (Read_Data == ROTARY_READ_DATA_ONCE)
 80022e0:	4b3f      	ldr	r3, [pc, #252]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_ROTARY_Stop(&hencoder,&htimer);
 80022e8:	493e      	ldr	r1, [pc, #248]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80022ea:	483b      	ldr	r0, [pc, #236]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80022ec:	f7ff ffde 	bl	80022ac <HAL_ROTARY_Stop>
		htimer.Instance->CNT = 0x00UL;
 80022f0:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2200      	movs	r2, #0
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/*Checking if the number is negative to detect the direction*/
	if ((Count2 - Count1) < 0)
 80022f8:	4b38      	ldr	r3, [pc, #224]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	461a      	mov	r2, r3
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	da0f      	bge.n	800232c <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		hrotary.Pulses = Count1 - Count2;
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800230e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002312:	b29a      	uxth	r2, r3
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231a:	b29b      	uxth	r3, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b32      	ldr	r3, [pc, #200]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002322:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_CW;
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002326:	22ff      	movs	r2, #255	; 0xff
 8002328:	711a      	strb	r2, [r3, #4]
 800232a:	e028      	b.n	800237e <HAL_TIM_PeriodElapsedCallback+0xb2>
	}
	else if ((Count2 - Count1) > 0)
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 800232e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002332:	461a      	mov	r2, r3
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	dd0f      	ble.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		hrotary.Pulses = Count2 - Count1;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800234a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234e:	b29b      	uxth	r3, r3
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002356:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_CCW;
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 800235a:	2201      	movs	r2, #1
 800235c:	711a      	strb	r2, [r3, #4]
 800235e:	e00e      	b.n	800237e <HAL_TIM_PeriodElapsedCallback+0xb2>
	}
	else
	{
		hrotary.Pulses = Count2 - Count1;
 8002360:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800236a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236e:	b29b      	uxth	r3, r3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002376:	805a      	strh	r2, [r3, #2]
		hrotary.Dir = ROTARY_ENCODER_STILL;
 8002378:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 800237a:	2200      	movs	r2, #0
 800237c:	711a      	strb	r2, [r3, #4]
	}
	/*Calculating the RPM*/
	hrotary.RPM = hrotary.Pulses*frequency*60/80;
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002380:	885b      	ldrh	r3, [r3, #2]
 8002382:	461a      	mov	r2, r3
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fb03 f202 	mul.w	r2, r3, r2
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002398:	fba3 2302 	umull	r2, r3, r3, r2
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	b29a      	uxth	r2, r3
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 80023a2:	801a      	strh	r2, [r3, #0]
	if (Read_Data == ROTARY_READ_DATA_CONT)
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_TIM_PeriodElapsedCallback+0xec>
	{
		/*Assigning the register value used earlier to be used as start of the next calculation*/
		Count1 = Count2;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 80023ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80023b4:	801a      	strh	r2, [r3, #0]
		/*Reseting the counters*/
		hencoder.Instance->CNT = 0x00UL;
		Count1 = 0;
	}

}
 80023b6:	e00a      	b.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x102>
	else if (Read_Data == ROTARY_READ_DATA_ONCE)
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d106      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x102>
		hencoder.Instance->CNT = 0x00UL;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
		Count1 = 0;
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200008d4 	.word	0x200008d4
 80023dc:	2000022e 	.word	0x2000022e
 80023e0:	20000888 	.word	0x20000888
 80023e4:	2000088c 	.word	0x2000088c
 80023e8:	2000022c 	.word	0x2000022c
 80023ec:	2000091c 	.word	0x2000091c
 80023f0:	20000884 	.word	0x20000884
 80023f4:	cccccccd 	.word	0xcccccccd

080023f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_MspInit+0x5c>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	4a14      	ldr	r2, [pc, #80]	; (8002454 <HAL_MspInit+0x5c>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6193      	str	r3, [r2, #24]
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_MspInit+0x5c>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_MspInit+0x5c>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <HAL_MspInit+0x5c>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	61d3      	str	r3, [r2, #28]
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_MspInit+0x5c>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_MspInit+0x60>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	4a04      	ldr	r2, [pc, #16]	; (8002458 <HAL_MspInit+0x60>)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40021000 	.word	0x40021000
 8002458:	40010000 	.word	0x40010000

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <NMI_Handler+0x4>

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout > 0) timeout--;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <SysTick_Handler+0x20>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <SysTick_Handler+0x18>
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Handler+0x20>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <SysTick_Handler+0x20>)
 80024b6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b8:	f000 fd6e 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200009bc 	.word	0x200009bc

080024c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM3_IRQHandler+0x10>)
 80024ca:	f004 fc78 	bl	8006dbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000924 	.word	0x20000924

080024d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <I2C1_EV_IRQHandler+0x10>)
 80024de:	f001 fd8f 	bl	8004000 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000788 	.word	0x20000788

080024ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <I2C1_ER_IRQHandler+0x10>)
 80024f2:	f001 fef6 	bl	80042e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000788 	.word	0x20000788

08002500 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <USART2_IRQHandler+0x10>)
 8002506:	f005 f959 	bl	80077bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000a04 	.word	0x20000a04

08002514 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <USART3_IRQHandler+0x10>)
 800251a:	f000 fb83 	bl	8002c24 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200009c0 	.word	0x200009c0

08002528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
	return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <_kill>:

int _kill(int pid, int sig)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002540:	f005 fd4a 	bl	8007fd8 <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	2216      	movs	r2, #22
 8002548:	601a      	str	r2, [r3, #0]
	return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_exit>:

void _exit (int status)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800255e:	f04f 31ff 	mov.w	r1, #4294967295
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffe7 	bl	8002536 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002568:	e7fe      	b.n	8002568 <_exit+0x12>

0800256a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e00a      	b.n	8002592 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800257c:	f3af 8000 	nop.w
 8002580:	4601      	mov	r1, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	60ba      	str	r2, [r7, #8]
 8002588:	b2ca      	uxtb	r2, r1
 800258a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	dbf0      	blt.n	800257c <_read+0x12>
	}

return len;
 800259a:	687b      	ldr	r3, [r7, #4]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e009      	b.n	80025ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	60ba      	str	r2, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dbf1      	blt.n	80025b6 <_write+0x12>
	}
	return len;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_close>:

int _close(int file)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002602:	605a      	str	r2, [r3, #4]
	return 0;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <_isatty>:

int _isatty(int file)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	return 1;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
	return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <_sbrk+0x5c>)
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <_sbrk+0x60>)
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <_sbrk+0x64>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <_sbrk+0x68>)
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	d207      	bcs.n	800267c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800266c:	f005 fcb4 	bl	8007fd8 <__errno>
 8002670:	4603      	mov	r3, r0
 8002672:	220c      	movs	r2, #12
 8002674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	e009      	b.n	8002690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <_sbrk+0x64>)
 800268c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20005000 	.word	0x20005000
 800269c:	00000400 	.word	0x00000400
 80026a0:	20000230 	.word	0x20000230
 80026a4:	20000a60 	.word	0x20000a60

080026a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 fcc6 	bl	8008048 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026c6:	4a23      	ldr	r2, [pc, #140]	; (8002754 <MX_TIM1_Init+0xac>)
 80026c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <MX_TIM1_Init+0xa8>)
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026f0:	2303      	movs	r3, #3
 80026f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026f8:	2301      	movs	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002700:	230f      	movs	r3, #15
 8002702:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002708:	2301      	movs	r3, #1
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002710:	230f      	movs	r3, #15
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4619      	mov	r1, r3
 800271a:	480d      	ldr	r0, [pc, #52]	; (8002750 <MX_TIM1_Init+0xa8>)
 800271c:	f004 f988 	bl	8006a30 <HAL_TIM_Encoder_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002726:	f7ff fd66 	bl	80021f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4806      	ldr	r0, [pc, #24]	; (8002750 <MX_TIM1_Init+0xa8>)
 8002738:	f004 fe4e 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002742:	f7ff fd58 	bl	80021f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	3730      	adds	r7, #48	; 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000096c 	.word	0x2000096c
 8002754:	40012c00 	.word	0x40012c00

08002758 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	463b      	mov	r3, r7
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <MX_TIM3_Init+0x94>)
 8002776:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <MX_TIM3_Init+0x98>)
 8002778:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_TIM3_Init+0x94>)
 800277c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_TIM3_Init+0x94>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MX_TIM3_Init+0x94>)
 800278a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800278e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_TIM3_Init+0x94>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_TIM3_Init+0x94>)
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800279c:	4813      	ldr	r0, [pc, #76]	; (80027ec <MX_TIM3_Init+0x94>)
 800279e:	f004 f877 	bl	8006890 <HAL_TIM_Base_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80027a8:	f7ff fd25 	bl	80021f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	4619      	mov	r1, r3
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <MX_TIM3_Init+0x94>)
 80027ba:	f004 fc08 	bl	8006fce <HAL_TIM_ConfigClockSource>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80027c4:	f7ff fd17 	bl	80021f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027d0:	463b      	mov	r3, r7
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_TIM3_Init+0x94>)
 80027d6:	f004 fdff 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80027e0:	f7ff fd09 	bl	80021f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000924 	.word	0x20000924
 80027f0:	40000400 	.word	0x40000400

080027f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <HAL_TIM_Encoder_MspInit+0x74>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d124      	bne.n	800285e <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_TIM_Encoder_MspInit+0x78>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_TIM_Encoder_MspInit+0x78>)
 800281a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_TIM_Encoder_MspInit+0x78>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_TIM_Encoder_MspInit+0x78>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a0e      	ldr	r2, [pc, #56]	; (800286c <HAL_TIM_Encoder_MspInit+0x78>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6193      	str	r3, [r2, #24]
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_TIM_Encoder_MspInit+0x78>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002844:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0310 	add.w	r3, r7, #16
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <HAL_TIM_Encoder_MspInit+0x7c>)
 800285a:	f000 fda7 	bl	80033ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800285e:	bf00      	nop
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40012c00 	.word	0x40012c00
 800286c:	40021000 	.word	0x40021000
 8002870:	40010800 	.word	0x40010800

08002874 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_TIM_Base_MspInit+0x44>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d113      	bne.n	80028ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_TIM_Base_MspInit+0x48>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <HAL_TIM_Base_MspInit+0x48>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_TIM_Base_MspInit+0x48>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	201d      	movs	r0, #29
 80028a4:	f000 fc8f 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028a8:	201d      	movs	r0, #29
 80028aa:	f000 fca8 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40021000 	.word	0x40021000

080028c0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <Ringbuf_init+0x38>)
 80028c6:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <Ringbuf_init+0x3c>)
 80028c8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <Ringbuf_init+0x40>)
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <Ringbuf_init+0x44>)
 80028ce:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <Ringbuf_init+0x48>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <Ringbuf_init+0x48>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <Ringbuf_init+0x48>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <Ringbuf_init+0x48>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0220 	orr.w	r2, r2, #32
 80028ee:	60da      	str	r2, [r3, #12]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	200009b8 	.word	0x200009b8
 80028fc:	20000234 	.word	0x20000234
 8002900:	200009b4 	.word	0x200009b4
 8002904:	2000043c 	.word	0x2000043c
 8002908:	200009c0 	.word	0x200009c0

0800290c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	429a      	cmp	r2, r3
 8002930:	d009      	beq.n	8002946 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	79f9      	ldrb	r1, [r7, #7]
 800293c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <Uart_read+0x54>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <Uart_read+0x54>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002966:	429a      	cmp	r2, r3
 8002968:	d102      	bne.n	8002970 <Uart_read+0x20>
  {
    return -1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	e013      	b.n	8002998 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <Uart_read+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <Uart_read+0x54>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <Uart_read+0x54>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <Uart_read+0x54>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002992:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8002996:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	200009b8 	.word	0x200009b8

080029a8 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <IsDataAvailable+0x30>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <IsDataAvailable+0x30>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80029be:	b29b      	uxth	r3, r3
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	200009b8 	.word	0x200009b8

080029dc <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <Uart_peek+0x34>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <Uart_peek+0x34>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d102      	bne.n	80029fa <Uart_peek+0x1e>
  {
    return -1;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	e006      	b.n	8002a08 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <Uart_peek+0x34>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <Uart_peek+0x34>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	200009b8 	.word	0x200009b8

08002a14 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fd fb94 	bl	8000150 <strlen>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002a30:	e01e      	b.n	8002a70 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002a32:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <Copy_upto+0xf8>)
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <Copy_upto+0xf8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6838      	ldr	r0, [r7, #0]
 8002a42:	4403      	add	r3, r0
 8002a44:	5c8a      	ldrb	r2, [r1, r2]
 8002a46:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <Copy_upto+0xf8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <Copy_upto+0xf8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3301      	adds	r3, #1
 8002a62:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002a64:	bf00      	nop
 8002a66:	f7ff ff9f 	bl	80029a8 <IsDataAvailable>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0fa      	beq.n	8002a66 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002a70:	f7ff ffb4 	bl	80029dc <Uart_peek>
 8002a74:	4601      	mov	r1, r0
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	4299      	cmp	r1, r3
 8002a80:	d1d7      	bne.n	8002a32 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002a82:	e027      	b.n	8002ad4 <Copy_upto+0xc0>
	{
		so_far++;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3301      	adds	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002a8a:	f7ff ff61 	bl	8002950 <Uart_read>
 8002a8e:	4601      	mov	r1, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	613a      	str	r2, [r7, #16]
 8002a96:	461a      	mov	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	b2ca      	uxtb	r2, r1
 8002a9e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d101      	bne.n	8002aac <Copy_upto+0x98>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e02a      	b.n	8002b02 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <Copy_upto+0xfc>)
 8002aae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ab2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002ab4:	bf00      	nop
 8002ab6:	f7ff ff77 	bl	80029a8 <IsDataAvailable>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <Copy_upto+0xb4>
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <Copy_upto+0xfc>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f6      	bne.n	8002ab6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <Copy_upto+0xfc>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <Copy_upto+0xc0>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e016      	b.n	8002b02 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002ad4:	f7ff ff82 	bl	80029dc <Uart_peek>
 8002ad8:	4601      	mov	r1, r0
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4299      	cmp	r1, r3
 8002ae4:	d0ce      	beq.n	8002a84 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d002      	beq.n	8002af4 <Copy_upto+0xe0>
	{
		so_far = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
		goto again;
 8002af2:	e79d      	b.n	8002a30 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d101      	bne.n	8002b00 <Copy_upto+0xec>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <Copy_upto+0xee>
	else return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200009b8 	.word	0x200009b8
 8002b10:	200009bc 	.word	0x200009bc

08002b14 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fd fb15 	bl	8000150 <strlen>
 8002b26:	4603      	mov	r3, r0
 8002b28:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002b2a:	4b3c      	ldr	r3, [pc, #240]	; (8002c1c <Wait_for+0x108>)
 8002b2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b30:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002b32:	bf00      	nop
 8002b34:	f7ff ff38 	bl	80029a8 <IsDataAvailable>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <Wait_for+0x32>
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <Wait_for+0x108>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f6      	bne.n	8002b34 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002b46:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <Wait_for+0x108>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d119      	bne.n	8002b82 <Wait_for+0x6e>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e060      	b.n	8002c14 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002b52:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <Wait_for+0x10c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <Wait_for+0x10c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d00b      	beq.n	8002b7e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <Wait_for+0x10c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <Wait_for+0x10c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b7c:	e001      	b.n	8002b82 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e048      	b.n	8002c14 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002b82:	f7ff ff2b 	bl	80029dc <Uart_peek>
 8002b86:	4601      	mov	r1, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4299      	cmp	r1, r3
 8002b92:	d1de      	bne.n	8002b52 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002b94:	e027      	b.n	8002be6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002b9c:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <Wait_for+0x10c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <Wait_for+0x10c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d101      	bne.n	8002bbe <Wait_for+0xaa>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e02a      	b.n	8002c14 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <Wait_for+0x108>)
 8002bc0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002bc4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002bc6:	bf00      	nop
 8002bc8:	f7ff feee 	bl	80029a8 <IsDataAvailable>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <Wait_for+0xc6>
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <Wait_for+0x108>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f6      	bne.n	8002bc8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <Wait_for+0x108>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <Wait_for+0xd2>
 8002be2:	2300      	movs	r3, #0
 8002be4:	e016      	b.n	8002c14 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002be6:	f7ff fef9 	bl	80029dc <Uart_peek>
 8002bea:	4601      	mov	r1, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4299      	cmp	r1, r3
 8002bf6:	d0ce      	beq.n	8002b96 <Wait_for+0x82>
	}

	if (so_far != len)
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d002      	beq.n	8002c06 <Wait_for+0xf2>
	{
		so_far = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
		goto again;
 8002c04:	e791      	b.n	8002b2a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d101      	bne.n	8002c12 <Wait_for+0xfe>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <Wait_for+0x100>
	else return 0;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200009bc 	.word	0x200009bc
 8002c20:	200009b8 	.word	0x200009b8

08002c24 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d013      	beq.n	8002c6e <Uart_isr+0x4a>
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <Uart_isr+0xb4>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fe50 	bl	800290c <store_char>
        return;
 8002c6c:	e031      	b.n	8002cd2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d02c      	beq.n	8002cd2 <Uart_isr+0xae>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d027      	beq.n	8002cd2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <Uart_isr+0xb8>)
 8002c84:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <Uart_isr+0xb8>)
 8002c8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d108      	bne.n	8002ca4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002ca2:	e015      	b.n	8002cd0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <Uart_isr+0xb8>)
 8002ca6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002caa:	4a0c      	ldr	r2, [pc, #48]	; (8002cdc <Uart_isr+0xb8>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <Uart_isr+0xb8>)
 8002cb2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbc:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <Uart_isr+0xb8>)
 8002cbe:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	7bba      	ldrb	r2, [r7, #14]
 8002cce:	605a      	str	r2, [r3, #4]
    	return;
 8002cd0:	bf00      	nop
    }
}
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200009b8 	.word	0x200009b8
 8002cdc:	2000043c 	.word	0x2000043c

08002ce0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	; (8002d30 <MX_USART2_UART_Init+0x50>)
 8002ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d06:	220c      	movs	r2, #12
 8002d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_USART2_UART_Init+0x4c>)
 8002d18:	f004 fbce 	bl	80074b8 <HAL_UART_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d22:	f7ff fa68 	bl	80021f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000a04 	.word	0x20000a04
 8002d30:	40004400 	.word	0x40004400

08002d34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <MX_USART3_UART_Init+0x50>)
 8002d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <MX_USART3_UART_Init+0x4c>)
 8002d6c:	f004 fba4 	bl	80074b8 <HAL_UART_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d76:	f7ff fa3e 	bl	80021f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200009c0 	.word	0x200009c0
 8002d84:	40004800 	.word	0x40004800

08002d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 0318 	add.w	r3, r7, #24
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a3f      	ldr	r2, [pc, #252]	; (8002ea0 <HAL_UART_MspInit+0x118>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d138      	bne.n	8002e1a <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da8:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a3d      	ldr	r2, [pc, #244]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db2:	61d3      	str	r3, [r2, #28]
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc0:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4a37      	ldr	r2, [pc, #220]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6193      	str	r3, [r2, #24]
 8002dcc:	4b35      	ldr	r3, [pc, #212]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dd8:	2304      	movs	r3, #4
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 0318 	add.w	r3, r7, #24
 8002de8:	4619      	mov	r1, r3
 8002dea:	482f      	ldr	r0, [pc, #188]	; (8002ea8 <HAL_UART_MspInit+0x120>)
 8002dec:	f000 fade 	bl	80033ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002df0:	2308      	movs	r3, #8
 8002df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfc:	f107 0318 	add.w	r3, r7, #24
 8002e00:	4619      	mov	r1, r3
 8002e02:	4829      	ldr	r0, [pc, #164]	; (8002ea8 <HAL_UART_MspInit+0x120>)
 8002e04:	f000 fad2 	bl	80033ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2026      	movs	r0, #38	; 0x26
 8002e0e:	f000 f9da 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e12:	2026      	movs	r0, #38	; 0x26
 8002e14:	f000 f9f3 	bl	80031fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e18:	e03e      	b.n	8002e98 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART3)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a23      	ldr	r2, [pc, #140]	; (8002eac <HAL_UART_MspInit+0x124>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d139      	bne.n	8002e98 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e2e:	61d3      	str	r3, [r2, #28]
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_UART_MspInit+0x11c>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e62:	f107 0318 	add.w	r3, r7, #24
 8002e66:	4619      	mov	r1, r3
 8002e68:	4811      	ldr	r0, [pc, #68]	; (8002eb0 <HAL_UART_MspInit+0x128>)
 8002e6a:	f000 fa9f 	bl	80033ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	4619      	mov	r1, r3
 8002e82:	480b      	ldr	r0, [pc, #44]	; (8002eb0 <HAL_UART_MspInit+0x128>)
 8002e84:	f000 fa92 	bl	80033ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	2027      	movs	r0, #39	; 0x27
 8002e8e:	f000 f99a 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e92:	2027      	movs	r0, #39	; 0x27
 8002e94:	f000 f9b3 	bl	80031fe <HAL_NVIC_EnableIRQ>
}
 8002e98:	bf00      	nop
 8002e9a:	3728      	adds	r7, #40	; 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40004400 	.word	0x40004400
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010800 	.word	0x40010800
 8002eac:	40004800 	.word	0x40004800
 8002eb0:	40010c00 	.word	0x40010c00

08002eb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eb6:	490d      	ldr	r1, [pc, #52]	; (8002eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	; (8002ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eda:	f000 f810 	bl	8002efe <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f005 f881 	bl	8007fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ee2:	f7ff f8e1 	bl	80020a8 <main>
  bx lr
 8002ee6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002ef0:	0800d410 	.word	0x0800d410
  ldr r2, =_sbss
 8002ef4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002ef8:	20000a5c 	.word	0x20000a5c

08002efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC1_2_IRQHandler>

08002efe <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_Init+0x28>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_Init+0x28>)
 8002f16:	f043 0310 	orr.w	r3, r3, #16
 8002f1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f000 f947 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f22:	200f      	movs	r0, #15
 8002f24:	f000 f808 	bl	8002f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f28:	f7ff fa66 	bl	80023f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40022000 	.word	0x40022000

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_InitTick+0x54>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x58>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f95f 	bl	800321a <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f000 f927 	bl	80031c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HAL_InitTick+0x5c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000018 	.word	0x20000018
 8002f90:	20000020 	.word	0x20000020
 8002f94:	2000001c 	.word	0x2000001c

08002f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_IncTick+0x1c>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_IncTick+0x20>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a03      	ldr	r2, [pc, #12]	; (8002fb8 <HAL_IncTick+0x20>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	20000020 	.word	0x20000020
 8002fb8:	20000a48 	.word	0x20000a48

08002fbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc0:	4b02      	ldr	r3, [pc, #8]	; (8002fcc <HAL_GetTick+0x10>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	20000a48 	.word	0x20000a48

08002fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff fff0 	bl	8002fbc <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d005      	beq.n	8002ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_Delay+0x44>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ff6:	bf00      	nop
 8002ff8:	f7ff ffe0 	bl	8002fbc <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d8f7      	bhi.n	8002ff8 <HAL_Delay+0x28>
  {
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000020 	.word	0x20000020

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4906      	ldr	r1, [pc, #24]	; (80030b0 <__NVIC_EnableIRQ+0x34>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	; (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	; 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800317c:	d301      	bcc.n	8003182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317e:	2301      	movs	r3, #1
 8003180:	e00f      	b.n	80031a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <SysTick_Config+0x40>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318a:	210f      	movs	r1, #15
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f7ff ff90 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <SysTick_Config+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <SysTick_Config+0x40>)
 800319c:	2207      	movs	r2, #7
 800319e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	e000e010 	.word	0xe000e010

080031b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff2d 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d8:	f7ff ff42 	bl	8003060 <__NVIC_GetPriorityGrouping>
 80031dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f7ff ff90 	bl	8003108 <NVIC_EncodePriority>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff5f 	bl	80030b4 <__NVIC_SetPriority>
}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff35 	bl	800307c <__NVIC_EnableIRQ>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffa2 	bl	800316c <SysTick_Config>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003244:	2b02      	cmp	r3, #2
 8003246:	d008      	beq.n	800325a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2204      	movs	r2, #4
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e020      	b.n	800329c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 020e 	bic.w	r2, r2, #14
 8003268:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	2101      	movs	r1, #1
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800329a:	7bfb      	ldrb	r3, [r7, #15]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d005      	beq.n	80032ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2204      	movs	r2, #4
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e051      	b.n	800336e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 020e 	bic.w	r2, r2, #14
 80032d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a22      	ldr	r2, [pc, #136]	; (8003378 <HAL_DMA_Abort_IT+0xd0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d029      	beq.n	8003348 <HAL_DMA_Abort_IT+0xa0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a20      	ldr	r2, [pc, #128]	; (800337c <HAL_DMA_Abort_IT+0xd4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d022      	beq.n	8003344 <HAL_DMA_Abort_IT+0x9c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <HAL_DMA_Abort_IT+0xd8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d01a      	beq.n	800333e <HAL_DMA_Abort_IT+0x96>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <HAL_DMA_Abort_IT+0xdc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d012      	beq.n	8003338 <HAL_DMA_Abort_IT+0x90>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <HAL_DMA_Abort_IT+0xe0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00a      	beq.n	8003332 <HAL_DMA_Abort_IT+0x8a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1a      	ldr	r2, [pc, #104]	; (800338c <HAL_DMA_Abort_IT+0xe4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d102      	bne.n	800332c <HAL_DMA_Abort_IT+0x84>
 8003326:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800332a:	e00e      	b.n	800334a <HAL_DMA_Abort_IT+0xa2>
 800332c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003330:	e00b      	b.n	800334a <HAL_DMA_Abort_IT+0xa2>
 8003332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003336:	e008      	b.n	800334a <HAL_DMA_Abort_IT+0xa2>
 8003338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333c:	e005      	b.n	800334a <HAL_DMA_Abort_IT+0xa2>
 800333e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003342:	e002      	b.n	800334a <HAL_DMA_Abort_IT+0xa2>
 8003344:	2310      	movs	r3, #16
 8003346:	e000      	b.n	800334a <HAL_DMA_Abort_IT+0xa2>
 8003348:	2301      	movs	r3, #1
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <HAL_DMA_Abort_IT+0xe8>)
 800334c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
    } 
  }
  return status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40020008 	.word	0x40020008
 800337c:	4002001c 	.word	0x4002001c
 8003380:	40020030 	.word	0x40020030
 8003384:	40020044 	.word	0x40020044
 8003388:	40020058 	.word	0x40020058
 800338c:	4002006c 	.word	0x4002006c
 8003390:	40020000 	.word	0x40020000

08003394 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b08b      	sub	sp, #44	; 0x2c
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033be:	e169      	b.n	8003694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033c0:	2201      	movs	r2, #1
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	429a      	cmp	r2, r3
 80033da:	f040 8158 	bne.w	800368e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a9a      	ldr	r2, [pc, #616]	; (800364c <HAL_GPIO_Init+0x2a0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d05e      	beq.n	80034a6 <HAL_GPIO_Init+0xfa>
 80033e8:	4a98      	ldr	r2, [pc, #608]	; (800364c <HAL_GPIO_Init+0x2a0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d875      	bhi.n	80034da <HAL_GPIO_Init+0x12e>
 80033ee:	4a98      	ldr	r2, [pc, #608]	; (8003650 <HAL_GPIO_Init+0x2a4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d058      	beq.n	80034a6 <HAL_GPIO_Init+0xfa>
 80033f4:	4a96      	ldr	r2, [pc, #600]	; (8003650 <HAL_GPIO_Init+0x2a4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d86f      	bhi.n	80034da <HAL_GPIO_Init+0x12e>
 80033fa:	4a96      	ldr	r2, [pc, #600]	; (8003654 <HAL_GPIO_Init+0x2a8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d052      	beq.n	80034a6 <HAL_GPIO_Init+0xfa>
 8003400:	4a94      	ldr	r2, [pc, #592]	; (8003654 <HAL_GPIO_Init+0x2a8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d869      	bhi.n	80034da <HAL_GPIO_Init+0x12e>
 8003406:	4a94      	ldr	r2, [pc, #592]	; (8003658 <HAL_GPIO_Init+0x2ac>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d04c      	beq.n	80034a6 <HAL_GPIO_Init+0xfa>
 800340c:	4a92      	ldr	r2, [pc, #584]	; (8003658 <HAL_GPIO_Init+0x2ac>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d863      	bhi.n	80034da <HAL_GPIO_Init+0x12e>
 8003412:	4a92      	ldr	r2, [pc, #584]	; (800365c <HAL_GPIO_Init+0x2b0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d046      	beq.n	80034a6 <HAL_GPIO_Init+0xfa>
 8003418:	4a90      	ldr	r2, [pc, #576]	; (800365c <HAL_GPIO_Init+0x2b0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d85d      	bhi.n	80034da <HAL_GPIO_Init+0x12e>
 800341e:	2b12      	cmp	r3, #18
 8003420:	d82a      	bhi.n	8003478 <HAL_GPIO_Init+0xcc>
 8003422:	2b12      	cmp	r3, #18
 8003424:	d859      	bhi.n	80034da <HAL_GPIO_Init+0x12e>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <HAL_GPIO_Init+0x80>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	080034a7 	.word	0x080034a7
 8003430:	08003481 	.word	0x08003481
 8003434:	08003493 	.word	0x08003493
 8003438:	080034d5 	.word	0x080034d5
 800343c:	080034db 	.word	0x080034db
 8003440:	080034db 	.word	0x080034db
 8003444:	080034db 	.word	0x080034db
 8003448:	080034db 	.word	0x080034db
 800344c:	080034db 	.word	0x080034db
 8003450:	080034db 	.word	0x080034db
 8003454:	080034db 	.word	0x080034db
 8003458:	080034db 	.word	0x080034db
 800345c:	080034db 	.word	0x080034db
 8003460:	080034db 	.word	0x080034db
 8003464:	080034db 	.word	0x080034db
 8003468:	080034db 	.word	0x080034db
 800346c:	080034db 	.word	0x080034db
 8003470:	08003489 	.word	0x08003489
 8003474:	0800349d 	.word	0x0800349d
 8003478:	4a79      	ldr	r2, [pc, #484]	; (8003660 <HAL_GPIO_Init+0x2b4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800347e:	e02c      	b.n	80034da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	623b      	str	r3, [r7, #32]
          break;
 8003486:	e029      	b.n	80034dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	3304      	adds	r3, #4
 800348e:	623b      	str	r3, [r7, #32]
          break;
 8003490:	e024      	b.n	80034dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	3308      	adds	r3, #8
 8003498:	623b      	str	r3, [r7, #32]
          break;
 800349a:	e01f      	b.n	80034dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	330c      	adds	r3, #12
 80034a2:	623b      	str	r3, [r7, #32]
          break;
 80034a4:	e01a      	b.n	80034dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034ae:	2304      	movs	r3, #4
 80034b0:	623b      	str	r3, [r7, #32]
          break;
 80034b2:	e013      	b.n	80034dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034bc:	2308      	movs	r3, #8
 80034be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	611a      	str	r2, [r3, #16]
          break;
 80034c6:	e009      	b.n	80034dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034c8:	2308      	movs	r3, #8
 80034ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	615a      	str	r2, [r3, #20]
          break;
 80034d2:	e003      	b.n	80034dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034d4:	2300      	movs	r3, #0
 80034d6:	623b      	str	r3, [r7, #32]
          break;
 80034d8:	e000      	b.n	80034dc <HAL_GPIO_Init+0x130>
          break;
 80034da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2bff      	cmp	r3, #255	; 0xff
 80034e0:	d801      	bhi.n	80034e6 <HAL_GPIO_Init+0x13a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	e001      	b.n	80034ea <HAL_GPIO_Init+0x13e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2bff      	cmp	r3, #255	; 0xff
 80034f0:	d802      	bhi.n	80034f8 <HAL_GPIO_Init+0x14c>
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	e002      	b.n	80034fe <HAL_GPIO_Init+0x152>
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	3b08      	subs	r3, #8
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	210f      	movs	r1, #15
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	401a      	ands	r2, r3
 8003510:	6a39      	ldr	r1, [r7, #32]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	431a      	orrs	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80b1 	beq.w	800368e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <HAL_GPIO_Init+0x2b8>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	4a4c      	ldr	r2, [pc, #304]	; (8003664 <HAL_GPIO_Init+0x2b8>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6193      	str	r3, [r2, #24]
 8003538:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_GPIO_Init+0x2b8>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003544:	4a48      	ldr	r2, [pc, #288]	; (8003668 <HAL_GPIO_Init+0x2bc>)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	089b      	lsrs	r3, r3, #2
 800354a:	3302      	adds	r3, #2
 800354c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003550:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	220f      	movs	r2, #15
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4013      	ands	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a40      	ldr	r2, [pc, #256]	; (800366c <HAL_GPIO_Init+0x2c0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_GPIO_Init+0x1ec>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <HAL_GPIO_Init+0x2c4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00d      	beq.n	8003594 <HAL_GPIO_Init+0x1e8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a3e      	ldr	r2, [pc, #248]	; (8003674 <HAL_GPIO_Init+0x2c8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <HAL_GPIO_Init+0x1e4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3d      	ldr	r2, [pc, #244]	; (8003678 <HAL_GPIO_Init+0x2cc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_GPIO_Init+0x1e0>
 8003588:	2303      	movs	r3, #3
 800358a:	e006      	b.n	800359a <HAL_GPIO_Init+0x1ee>
 800358c:	2304      	movs	r3, #4
 800358e:	e004      	b.n	800359a <HAL_GPIO_Init+0x1ee>
 8003590:	2302      	movs	r3, #2
 8003592:	e002      	b.n	800359a <HAL_GPIO_Init+0x1ee>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_GPIO_Init+0x1ee>
 8003598:	2300      	movs	r3, #0
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	f002 0203 	and.w	r2, r2, #3
 80035a0:	0092      	lsls	r2, r2, #2
 80035a2:	4093      	lsls	r3, r2
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035aa:	492f      	ldr	r1, [pc, #188]	; (8003668 <HAL_GPIO_Init+0x2bc>)
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035c4:	4b2d      	ldr	r3, [pc, #180]	; (800367c <HAL_GPIO_Init+0x2d0>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	492c      	ldr	r1, [pc, #176]	; (800367c <HAL_GPIO_Init+0x2d0>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
 80035d0:	e006      	b.n	80035e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035d2:	4b2a      	ldr	r3, [pc, #168]	; (800367c <HAL_GPIO_Init+0x2d0>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	43db      	mvns	r3, r3
 80035da:	4928      	ldr	r1, [pc, #160]	; (800367c <HAL_GPIO_Init+0x2d0>)
 80035dc:	4013      	ands	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d006      	beq.n	80035fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035ec:	4b23      	ldr	r3, [pc, #140]	; (800367c <HAL_GPIO_Init+0x2d0>)
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4922      	ldr	r1, [pc, #136]	; (800367c <HAL_GPIO_Init+0x2d0>)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	e006      	b.n	8003608 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_GPIO_Init+0x2d0>)
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	43db      	mvns	r3, r3
 8003602:	491e      	ldr	r1, [pc, #120]	; (800367c <HAL_GPIO_Init+0x2d0>)
 8003604:	4013      	ands	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d006      	beq.n	8003622 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_GPIO_Init+0x2d0>)
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	4918      	ldr	r1, [pc, #96]	; (800367c <HAL_GPIO_Init+0x2d0>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003622:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_GPIO_Init+0x2d0>)
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	43db      	mvns	r3, r3
 800362a:	4914      	ldr	r1, [pc, #80]	; (800367c <HAL_GPIO_Init+0x2d0>)
 800362c:	4013      	ands	r3, r2
 800362e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d021      	beq.n	8003680 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800363c:	4b0f      	ldr	r3, [pc, #60]	; (800367c <HAL_GPIO_Init+0x2d0>)
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	490e      	ldr	r1, [pc, #56]	; (800367c <HAL_GPIO_Init+0x2d0>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	60cb      	str	r3, [r1, #12]
 8003648:	e021      	b.n	800368e <HAL_GPIO_Init+0x2e2>
 800364a:	bf00      	nop
 800364c:	10320000 	.word	0x10320000
 8003650:	10310000 	.word	0x10310000
 8003654:	10220000 	.word	0x10220000
 8003658:	10210000 	.word	0x10210000
 800365c:	10120000 	.word	0x10120000
 8003660:	10110000 	.word	0x10110000
 8003664:	40021000 	.word	0x40021000
 8003668:	40010000 	.word	0x40010000
 800366c:	40010800 	.word	0x40010800
 8003670:	40010c00 	.word	0x40010c00
 8003674:	40011000 	.word	0x40011000
 8003678:	40011400 	.word	0x40011400
 800367c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_GPIO_Init+0x304>)
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	43db      	mvns	r3, r3
 8003688:	4909      	ldr	r1, [pc, #36]	; (80036b0 <HAL_GPIO_Init+0x304>)
 800368a:	4013      	ands	r3, r2
 800368c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	3301      	adds	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	fa22 f303 	lsr.w	r3, r2, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f47f ae8e 	bne.w	80033c0 <HAL_GPIO_Init+0x14>
  }
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	372c      	adds	r7, #44	; 0x2c
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	40010400 	.word	0x40010400

080036b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e12b      	b.n	800391e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fe fb9c 	bl	8001e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	; 0x24
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003718:	f003 f874 	bl	8006804 <HAL_RCC_GetPCLK1Freq>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a81      	ldr	r2, [pc, #516]	; (8003928 <HAL_I2C_Init+0x274>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d807      	bhi.n	8003738 <HAL_I2C_Init+0x84>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a80      	ldr	r2, [pc, #512]	; (800392c <HAL_I2C_Init+0x278>)
 800372c:	4293      	cmp	r3, r2
 800372e:	bf94      	ite	ls
 8003730:	2301      	movls	r3, #1
 8003732:	2300      	movhi	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e006      	b.n	8003746 <HAL_I2C_Init+0x92>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a7d      	ldr	r2, [pc, #500]	; (8003930 <HAL_I2C_Init+0x27c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0e7      	b.n	800391e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a78      	ldr	r2, [pc, #480]	; (8003934 <HAL_I2C_Init+0x280>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a6a      	ldr	r2, [pc, #424]	; (8003928 <HAL_I2C_Init+0x274>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d802      	bhi.n	8003788 <HAL_I2C_Init+0xd4>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3301      	adds	r3, #1
 8003786:	e009      	b.n	800379c <HAL_I2C_Init+0xe8>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	4a69      	ldr	r2, [pc, #420]	; (8003938 <HAL_I2C_Init+0x284>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	3301      	adds	r3, #1
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	495c      	ldr	r1, [pc, #368]	; (8003928 <HAL_I2C_Init+0x274>)
 80037b8:	428b      	cmp	r3, r1
 80037ba:	d819      	bhi.n	80037f0 <HAL_I2C_Init+0x13c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e59      	subs	r1, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ca:	1c59      	adds	r1, r3, #1
 80037cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037d0:	400b      	ands	r3, r1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_I2C_Init+0x138>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1e59      	subs	r1, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	e051      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 80037ec:	2304      	movs	r3, #4
 80037ee:	e04f      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d111      	bne.n	800381c <HAL_I2C_Init+0x168>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1e58      	subs	r0, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	440b      	add	r3, r1
 8003806:	fbb0 f3f3 	udiv	r3, r0, r3
 800380a:	3301      	adds	r3, #1
 800380c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e012      	b.n	8003842 <HAL_I2C_Init+0x18e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1e58      	subs	r0, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	0099      	lsls	r1, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Init+0x196>
 8003846:	2301      	movs	r3, #1
 8003848:	e022      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10e      	bne.n	8003870 <HAL_I2C_Init+0x1bc>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e58      	subs	r0, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	440b      	add	r3, r1
 8003860:	fbb0 f3f3 	udiv	r3, r0, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386e:	e00f      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	0099      	lsls	r1, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	fbb0 f3f3 	udiv	r3, r0, r3
 8003886:	3301      	adds	r3, #1
 8003888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	6809      	ldr	r1, [r1, #0]
 8003894:	4313      	orrs	r3, r2
 8003896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6911      	ldr	r1, [r2, #16]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	000186a0 	.word	0x000186a0
 800392c:	001e847f 	.word	0x001e847f
 8003930:	003d08ff 	.word	0x003d08ff
 8003934:	431bde83 	.word	0x431bde83
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	817b      	strh	r3, [r7, #10]
 800394e:	460b      	mov	r3, r1
 8003950:	813b      	strh	r3, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003956:	f7ff fb31 	bl	8002fbc <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b20      	cmp	r3, #32
 8003966:	f040 80d9 	bne.w	8003b1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	2319      	movs	r3, #25
 8003970:	2201      	movs	r2, #1
 8003972:	496d      	ldr	r1, [pc, #436]	; (8003b28 <HAL_I2C_Mem_Write+0x1ec>)
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f002 f949 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
 8003982:	e0cc      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_I2C_Mem_Write+0x56>
 800398e:	2302      	movs	r3, #2
 8003990:	e0c5      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d007      	beq.n	80039b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2221      	movs	r2, #33	; 0x21
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a4d      	ldr	r2, [pc, #308]	; (8003b2c <HAL_I2C_Mem_Write+0x1f0>)
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039fa:	88f8      	ldrh	r0, [r7, #6]
 80039fc:	893a      	ldrh	r2, [r7, #8]
 80039fe:	8979      	ldrh	r1, [r7, #10]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	4603      	mov	r3, r0
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f001 fed8 	bl	80057c0 <I2C_RequestMemoryWrite>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d052      	beq.n	8003abc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e081      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f002 f9ca 	bl	8005db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d107      	bne.n	8003a42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06b      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d11b      	bne.n	8003abc <HAL_I2C_Mem_Write+0x180>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d017      	beq.n	8003abc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1aa      	bne.n	8003a1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f002 f9b6 	bl	8005e3a <I2C_WaitOnBTFFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00d      	beq.n	8003af0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d107      	bne.n	8003aec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e016      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e000      	b.n	8003b1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
  }
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	00100002 	.word	0x00100002
 8003b2c:	ffff0000 	.word	0xffff0000

08003b30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08c      	sub	sp, #48	; 0x30
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	460b      	mov	r3, r1
 8003b44:	813b      	strh	r3, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b4e:	f7ff fa35 	bl	8002fbc <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	f040 8244 	bne.w	8003fea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2319      	movs	r3, #25
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4982      	ldr	r1, [pc, #520]	; (8003d74 <HAL_I2C_Mem_Read+0x244>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f002 f84d 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e237      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Mem_Read+0x5a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e230      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d007      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2222      	movs	r2, #34	; 0x22
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a62      	ldr	r2, [pc, #392]	; (8003d78 <HAL_I2C_Mem_Read+0x248>)
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bf2:	88f8      	ldrh	r0, [r7, #6]
 8003bf4:	893a      	ldrh	r2, [r7, #8]
 8003bf6:	8979      	ldrh	r1, [r7, #10]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f001 fe72 	bl	80058ec <I2C_RequestMemoryRead>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e1ec      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d113      	bne.n	8003c42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e1c0      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d11e      	bne.n	8003c88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c5a:	b672      	cpsid	i
}
 8003c5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c84:	b662      	cpsie	i
}
 8003c86:	e035      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d11e      	bne.n	8003cce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ca0:	b672      	cpsid	i
}
 8003ca2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cca:	b662      	cpsie	i
}
 8003ccc:	e012      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cdc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003cf4:	e166      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	f200 811f 	bhi.w	8003f3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d123      	bne.n	8003d50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f002 f907 	bl	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e167      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d4e:	e139      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d152      	bne.n	8003dfe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4906      	ldr	r1, [pc, #24]	; (8003d7c <HAL_I2C_Mem_Read+0x24c>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f001 ff52 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e13c      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
 8003d72:	bf00      	nop
 8003d74:	00100002 	.word	0x00100002
 8003d78:	ffff0000 	.word	0xffff0000
 8003d7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d80:	b672      	cpsid	i
}
 8003d82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc6:	b662      	cpsie	i
}
 8003dc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dfc:	e0e2      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	2200      	movs	r2, #0
 8003e06:	497b      	ldr	r1, [pc, #492]	; (8003ff4 <HAL_I2C_Mem_Read+0x4c4>)
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f001 feff 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0e9      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e28:	b672      	cpsid	i
}
 8003e2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e5e:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_I2C_Mem_Read+0x4c8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	08db      	lsrs	r3, r3, #3
 8003e64:	4a65      	ldr	r2, [pc, #404]	; (8003ffc <HAL_I2C_Mem_Read+0x4cc>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0a1a      	lsrs	r2, r3, #8
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00da      	lsls	r2, r3, #3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d118      	bne.n	8003eb6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ea6:	b662      	cpsie	i
}
 8003ea8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e09a      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d1d9      	bne.n	8003e78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f06:	b662      	cpsie	i
}
 8003f08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f3c:	e042      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f001 ffec 	bl	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e04c      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d118      	bne.n	8003fc4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f ae94 	bne.w	8003cf6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e000      	b.n	8003fec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
  }
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3728      	adds	r7, #40	; 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	00010004 	.word	0x00010004
 8003ff8:	20000018 	.word	0x20000018
 8003ffc:	14f8b589 	.word	0x14f8b589

08004000 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004020:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b10      	cmp	r3, #16
 800402e:	d003      	beq.n	8004038 <HAL_I2C_EV_IRQHandler+0x38>
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	f040 80c1 	bne.w	80041ba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <HAL_I2C_EV_IRQHandler+0x6e>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004058:	d003      	beq.n	8004062 <HAL_I2C_EV_IRQHandler+0x62>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004060:	d101      	bne.n	8004066 <HAL_I2C_EV_IRQHandler+0x66>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_I2C_EV_IRQHandler+0x68>
 8004066:	2300      	movs	r3, #0
 8004068:	2b01      	cmp	r3, #1
 800406a:	f000 8132 	beq.w	80042d2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00c      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0x92>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	0a5b      	lsrs	r3, r3, #9
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d006      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f001 ffcf 	bl	8006028 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fd77 	bl	8004b7e <I2C_Master_SB>
 8004090:	e092      	b.n	80041b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	08db      	lsrs	r3, r3, #3
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_I2C_EV_IRQHandler+0xb2>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	0a5b      	lsrs	r3, r3, #9
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fdec 	bl	8004c88 <I2C_Master_ADD10>
 80040b0:	e082      	b.n	80041b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	0a5b      	lsrs	r3, r3, #9
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fe05 	bl	8004cda <I2C_Master_ADDR>
 80040d0:	e072      	b.n	80041b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d03b      	beq.n	8004156 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ec:	f000 80f3 	beq.w	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	09db      	lsrs	r3, r3, #7
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00f      	beq.n	800411c <HAL_I2C_EV_IRQHandler+0x11c>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d009      	beq.n	800411c <HAL_I2C_EV_IRQHandler+0x11c>
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f9f1 	bl	80044fc <I2C_MasterTransmit_TXE>
 800411a:	e04d      	b.n	80041b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80d6 	beq.w	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	0a5b      	lsrs	r3, r3, #9
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80cf 	beq.w	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004138:	7bbb      	ldrb	r3, [r7, #14]
 800413a:	2b21      	cmp	r3, #33	; 0x21
 800413c:	d103      	bne.n	8004146 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa78 	bl	8004634 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004144:	e0c7      	b.n	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	f040 80c4 	bne.w	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fae6 	bl	8004720 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004154:	e0bf      	b.n	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004164:	f000 80b7 	beq.w	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00f      	beq.n	8004194 <HAL_I2C_EV_IRQHandler+0x194>
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <HAL_I2C_EV_IRQHandler+0x194>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fb5b 	bl	8004848 <I2C_MasterReceive_RXNE>
 8004192:	e011      	b.n	80041b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 809a 	beq.w	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	0a5b      	lsrs	r3, r3, #9
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8093 	beq.w	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fbfa 	bl	80049aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b6:	e08e      	b.n	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80041b8:	e08d      	b.n	80042d6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d004      	beq.n	80041cc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e007      	b.n	80041dc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_I2C_EV_IRQHandler+0x20e>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	0a5b      	lsrs	r3, r3, #9
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 ffbe 	bl	8005188 <I2C_Slave_ADDR>
 800420c:	e066      	b.n	80042dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_I2C_EV_IRQHandler+0x22e>
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	0a5b      	lsrs	r3, r3, #9
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fff8 	bl	800521c <I2C_Slave_STOPF>
 800422c:	e056      	b.n	80042dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800422e:	7bbb      	ldrb	r3, [r7, #14]
 8004230:	2b21      	cmp	r3, #33	; 0x21
 8004232:	d002      	beq.n	800423a <HAL_I2C_EV_IRQHandler+0x23a>
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	2b29      	cmp	r3, #41	; 0x29
 8004238:	d125      	bne.n	8004286 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	09db      	lsrs	r3, r3, #7
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00f      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0x266>
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	0a9b      	lsrs	r3, r3, #10
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0x266>
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fed6 	bl	8005010 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004264:	e039      	b.n	80042da <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d033      	beq.n	80042da <HAL_I2C_EV_IRQHandler+0x2da>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	0a5b      	lsrs	r3, r3, #9
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02d      	beq.n	80042da <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 ff03 	bl	800508a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004284:	e029      	b.n	80042da <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00f      	beq.n	80042b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	0a9b      	lsrs	r3, r3, #10
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	089b      	lsrs	r3, r3, #2
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 ff0d 	bl	80050ca <I2C_SlaveReceive_RXNE>
 80042b0:	e014      	b.n	80042dc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <HAL_I2C_EV_IRQHandler+0x2dc>
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	0a5b      	lsrs	r3, r3, #9
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 ff3b 	bl	8005146 <I2C_SlaveReceive_BTF>
 80042d0:	e004      	b.n	80042dc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b08a      	sub	sp, #40	; 0x28
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004304:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_I2C_ER_IRQHandler+0x5e>
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	0a1b      	lsrs	r3, r3, #8
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d010      	beq.n	8004340 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800432e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800433e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	0a5b      	lsrs	r3, r3, #9
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <HAL_I2C_ER_IRQHandler+0x88>
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	f043 0302 	orr.w	r3, r3, #2
 800435e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004368:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	0a9b      	lsrs	r3, r3, #10
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03f      	beq.n	80043f6 <HAL_I2C_ER_IRQHandler+0x114>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d039      	beq.n	80043f6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004382:	7efb      	ldrb	r3, [r7, #27]
 8004384:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800439c:	7ebb      	ldrb	r3, [r7, #26]
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d112      	bne.n	80043c8 <HAL_I2C_ER_IRQHandler+0xe6>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10f      	bne.n	80043c8 <HAL_I2C_ER_IRQHandler+0xe6>
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b21      	cmp	r3, #33	; 0x21
 80043ac:	d008      	beq.n	80043c0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b29      	cmp	r3, #41	; 0x29
 80043b2:	d005      	beq.n	80043c0 <HAL_I2C_ER_IRQHandler+0xde>
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	2b28      	cmp	r3, #40	; 0x28
 80043b8:	d106      	bne.n	80043c8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b21      	cmp	r3, #33	; 0x21
 80043be:	d103      	bne.n	80043c8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f001 f85b 	bl	800547c <I2C_Slave_AF>
 80043c6:	e016      	b.n	80043f6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043da:	7efb      	ldrb	r3, [r7, #27]
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d002      	beq.n	80043e6 <HAL_I2C_ER_IRQHandler+0x104>
 80043e0:	7efb      	ldrb	r3, [r7, #27]
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d107      	bne.n	80043f6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	0adb      	lsrs	r3, r3, #11
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <HAL_I2C_ER_IRQHandler+0x13e>
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	f043 0308 	orr.w	r3, r3, #8
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800441e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f001 f892 	bl	800555c <I2C_ITError>
  }
}
 8004438:	bf00      	nop
 800443a:	3728      	adds	r7, #40	; 0x28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
 8004494:	4613      	mov	r3, r2
 8004496:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004512:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	2b00      	cmp	r3, #0
 8004520:	d150      	bne.n	80045c4 <I2C_MasterTransmit_TXE+0xc8>
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b21      	cmp	r3, #33	; 0x21
 8004526:	d14d      	bne.n	80045c4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b08      	cmp	r3, #8
 800452c:	d01d      	beq.n	800456a <I2C_MasterTransmit_TXE+0x6e>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b20      	cmp	r3, #32
 8004532:	d01a      	beq.n	800456a <I2C_MasterTransmit_TXE+0x6e>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800453a:	d016      	beq.n	800456a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800454a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2211      	movs	r2, #17
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ff6c 	bl	8004440 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004568:	e060      	b.n	800462c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004578:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004588:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d107      	bne.n	80045b4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ff81 	bl	80044b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045b2:	e03b      	b.n	800462c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff3f 	bl	8004440 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045c2:	e033      	b.n	800462c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b21      	cmp	r3, #33	; 0x21
 80045c8:	d005      	beq.n	80045d6 <I2C_MasterTransmit_TXE+0xda>
 80045ca:	7bbb      	ldrb	r3, [r7, #14]
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d12d      	bne.n	800462c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b22      	cmp	r3, #34	; 0x22
 80045d4:	d12a      	bne.n	800462c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045f0:	e01c      	b.n	800462c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d103      	bne.n	8004606 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f88e 	bl	8004720 <I2C_MemoryTransmit_TXE_BTF>
}
 8004604:	e012      	b.n	800462c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800462a:	e7ff      	b.n	800462c <I2C_MasterTransmit_TXE+0x130>
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b21      	cmp	r3, #33	; 0x21
 800464c:	d164      	bne.n	8004718 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800467c:	e04c      	b.n	8004718 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d01d      	beq.n	80046c0 <I2C_MasterTransmit_BTF+0x8c>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b20      	cmp	r3, #32
 8004688:	d01a      	beq.n	80046c0 <I2C_MasterTransmit_BTF+0x8c>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004690:	d016      	beq.n	80046c0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046a0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2211      	movs	r2, #17
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fec1 	bl	8004440 <HAL_I2C_MasterTxCpltCallback>
}
 80046be:	e02b      	b.n	8004718 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d107      	bne.n	800470a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fed6 	bl	80044b4 <HAL_I2C_MemTxCpltCallback>
}
 8004708:	e006      	b.n	8004718 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff fe94 	bl	8004440 <HAL_I2C_MasterTxCpltCallback>
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11d      	bne.n	8004774 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10b      	bne.n	8004758 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	b2da      	uxtb	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004750:	1c9a      	adds	r2, r3, #2
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004756:	e073      	b.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475c:	b29b      	uxth	r3, r3
 800475e:	121b      	asrs	r3, r3, #8
 8004760:	b2da      	uxtb	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004772:	e065      	b.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10b      	bne.n	8004794 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004780:	b2da      	uxtb	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004792:	e055      	b.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004798:	2b02      	cmp	r3, #2
 800479a:	d151      	bne.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b22      	cmp	r3, #34	; 0x22
 80047a0:	d10d      	bne.n	80047be <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047bc:	e040      	b.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d015      	beq.n	80047f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b21      	cmp	r3, #33	; 0x21
 80047cc:	d112      	bne.n	80047f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047f2:	e025      	b.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d120      	bne.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b21      	cmp	r3, #33	; 0x21
 8004802:	d11d      	bne.n	8004840 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004812:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004822:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fe3a 	bl	80044b4 <HAL_I2C_MemTxCpltCallback>
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b22      	cmp	r3, #34	; 0x22
 800485a:	f040 80a2 	bne.w	80049a2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d921      	bls.n	80048b0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b03      	cmp	r3, #3
 800489a:	f040 8082 	bne.w	80049a2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80048ae:	e078      	b.n	80049a2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d074      	beq.n	80049a2 <I2C_MasterReceive_RXNE+0x15a>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d002      	beq.n	80048c4 <I2C_MasterReceive_RXNE+0x7c>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d16e      	bne.n	80049a2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 faf9 	bl	8005ebc <I2C_WaitOnSTOPRequestThroughIT>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d142      	bne.n	8004956 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048de:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d10a      	bne.n	8004940 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff fdc4 	bl	80044c6 <HAL_I2C_MemRxCpltCallback>
}
 800493e:	e030      	b.n	80049a2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2212      	movs	r2, #18
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fd7f 	bl	8004452 <HAL_I2C_MasterRxCpltCallback>
}
 8004954:	e025      	b.n	80049a2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004964:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fd9b 	bl	80044d8 <HAL_I2C_ErrorCallback>
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d11b      	bne.n	80049fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049f8:	e0bd      	b.n	8004b76 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d129      	bne.n	8004a58 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d00a      	beq.n	8004a30 <I2C_MasterReceive_BTF+0x86>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d007      	beq.n	8004a30 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a56:	e08e      	b.n	8004b76 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d176      	bne.n	8004b50 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d002      	beq.n	8004a6e <I2C_MasterReceive_BTF+0xc4>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d108      	bne.n	8004a80 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e019      	b.n	8004ab4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d002      	beq.n	8004a8c <I2C_MasterReceive_BTF+0xe2>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d108      	bne.n	8004a9e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e00a      	b.n	8004ab4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d007      	beq.n	8004ab4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b0e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d10a      	bne.n	8004b3a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fcc7 	bl	80044c6 <HAL_I2C_MemRxCpltCallback>
}
 8004b38:	e01d      	b.n	8004b76 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2212      	movs	r2, #18
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fc82 	bl	8004452 <HAL_I2C_MasterRxCpltCallback>
}
 8004b4e:	e012      	b.n	8004b76 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d117      	bne.n	8004bc2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004baa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004bac:	e067      	b.n	8004c7e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]
}
 8004bc0:	e05d      	b.n	8004c7e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bca:	d133      	bne.n	8004c34 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b21      	cmp	r3, #33	; 0x21
 8004bd6:	d109      	bne.n	8004bec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004be8:	611a      	str	r2, [r3, #16]
 8004bea:	e008      	b.n	8004bfe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <I2C_Master_SB+0x92>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d108      	bne.n	8004c22 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d032      	beq.n	8004c7e <I2C_Master_SB+0x100>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d02d      	beq.n	8004c7e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c30:	605a      	str	r2, [r3, #4]
}
 8004c32:	e024      	b.n	8004c7e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10e      	bne.n	8004c5a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	11db      	asrs	r3, r3, #7
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f003 0306 	and.w	r3, r3, #6
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f063 030f 	orn	r3, r3, #15
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]
}
 8004c58:	e011      	b.n	8004c7e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d10d      	bne.n	8004c7e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	11db      	asrs	r3, r3, #7
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 0306 	and.w	r3, r3, #6
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f063 030e 	orn	r3, r3, #14
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	611a      	str	r2, [r3, #16]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <I2C_Master_ADD10+0x26>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d108      	bne.n	8004cc0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <I2C_Master_ADD10+0x48>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	605a      	str	r2, [r3, #4]
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b091      	sub	sp, #68	; 0x44
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b22      	cmp	r3, #34	; 0x22
 8004d02:	f040 8174 	bne.w	8004fee <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <I2C_Master_ADDR+0x54>
 8004d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d10b      	bne.n	8004d2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d16:	2300      	movs	r3, #0
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	633b      	str	r3, [r7, #48]	; 0x30
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	e16b      	b.n	8005006 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11d      	bne.n	8004d72 <I2C_Master_ADDR+0x98>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d3e:	d118      	bne.n	8004d72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d40:	2300      	movs	r3, #0
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8004d70:	e149      	b.n	8005006 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d113      	bne.n	8004da4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e120      	b.n	8004fe6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	f040 808a 	bne.w	8004ec4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004db6:	d137      	bne.n	8004e28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd6:	d113      	bne.n	8004e00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	e0f2      	b.n	8004fe6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e00:	2300      	movs	r3, #0
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	623b      	str	r3, [r7, #32]
 8004e14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e0de      	b.n	8004fe6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d02e      	beq.n	8004e8c <I2C_Master_ADDR+0x1b2>
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d02b      	beq.n	8004e8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	2b12      	cmp	r3, #18
 8004e38:	d102      	bne.n	8004e40 <I2C_Master_ADDR+0x166>
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d125      	bne.n	8004e8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d00e      	beq.n	8004e64 <I2C_Master_ADDR+0x18a>
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d00b      	beq.n	8004e64 <I2C_Master_ADDR+0x18a>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d008      	beq.n	8004e64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e007      	b.n	8004e74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	e0ac      	b.n	8004fe6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	61bb      	str	r3, [r7, #24]
 8004eb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e090      	b.n	8004fe6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d158      	bne.n	8004f80 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d021      	beq.n	8004f18 <I2C_Master_ADDR+0x23e>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d01e      	beq.n	8004f18 <I2C_Master_ADDR+0x23e>
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d01b      	beq.n	8004f18 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e012      	b.n	8004f3e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4c:	d14b      	bne.n	8004fe6 <I2C_Master_ADDR+0x30c>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f54:	d00b      	beq.n	8004f6e <I2C_Master_ADDR+0x294>
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d008      	beq.n	8004f6e <I2C_Master_ADDR+0x294>
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d005      	beq.n	8004f6e <I2C_Master_ADDR+0x294>
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d002      	beq.n	8004f6e <I2C_Master_ADDR+0x294>
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d13b      	bne.n	8004fe6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	e032      	b.n	8004fe6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f8e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9e:	d117      	bne.n	8004fd0 <I2C_Master_ADDR+0x2f6>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fa6:	d00b      	beq.n	8004fc0 <I2C_Master_ADDR+0x2e6>
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d008      	beq.n	8004fc0 <I2C_Master_ADDR+0x2e6>
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d005      	beq.n	8004fc0 <I2C_Master_ADDR+0x2e6>
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d002      	beq.n	8004fc0 <I2C_Master_ADDR+0x2e6>
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d107      	bne.n	8004fd0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004fec:	e00b      	b.n	8005006 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
}
 8005004:	e7ff      	b.n	8005006 <I2C_Master_ADDR+0x32c>
 8005006:	bf00      	nop
 8005008:	3744      	adds	r7, #68	; 0x44
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d02b      	beq.n	8005082 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	781a      	ldrb	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d114      	bne.n	8005082 <I2C_SlaveTransmit_TXE+0x72>
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b29      	cmp	r3, #41	; 0x29
 800505c:	d111      	bne.n	8005082 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2221      	movs	r2, #33	; 0x21
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2228      	movs	r2, #40	; 0x28
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff f9f1 	bl	8004464 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d011      	beq.n	80050c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d02c      	beq.n	800513e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d114      	bne.n	800513e <I2C_SlaveReceive_RXNE+0x74>
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	2b2a      	cmp	r3, #42	; 0x2a
 8005118:	d111      	bne.n	800513e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005128:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2222      	movs	r2, #34	; 0x22
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2228      	movs	r2, #40	; 0x28
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff f99c 	bl	8004476 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d012      	beq.n	800517e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051a2:	2b28      	cmp	r3, #40	; 0x28
 80051a4:	d127      	bne.n	80051f6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	09db      	lsrs	r3, r3, #7
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	81bb      	strh	r3, [r7, #12]
 80051d8:	e002      	b.n	80051e0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051e8:	89ba      	ldrh	r2, [r7, #12]
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff f94a 	bl	8004488 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051f4:	e00e      	b.n	8005214 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800523a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800523c:	2300      	movs	r3, #0
 800523e:	60bb      	str	r3, [r7, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005268:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005278:	d172      	bne.n	8005360 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	2b22      	cmp	r3, #34	; 0x22
 800527e:	d002      	beq.n	8005286 <I2C_Slave_STOPF+0x6a>
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b2a      	cmp	r3, #42	; 0x2a
 8005284:	d135      	bne.n	80052f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f043 0204 	orr.w	r2, r3, #4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe f868 	bl	8003394 <HAL_DMA_GetState>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d049      	beq.n	800535e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	4a69      	ldr	r2, [pc, #420]	; (8005474 <I2C_Slave_STOPF+0x258>)
 80052d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fd ffe6 	bl	80032a8 <HAL_DMA_Abort_IT>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d03d      	beq.n	800535e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052ec:	4610      	mov	r0, r2
 80052ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052f0:	e035      	b.n	800535e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f043 0204 	orr.w	r2, r3, #4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005324:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe f832 	bl	8003394 <HAL_DMA_GetState>
 8005330:	4603      	mov	r3, r0
 8005332:	2b01      	cmp	r3, #1
 8005334:	d014      	beq.n	8005360 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533a:	4a4e      	ldr	r2, [pc, #312]	; (8005474 <I2C_Slave_STOPF+0x258>)
 800533c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	4618      	mov	r0, r3
 8005344:	f7fd ffb0 	bl	80032a8 <HAL_DMA_Abort_IT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005358:	4610      	mov	r0, r2
 800535a:	4798      	blx	r3
 800535c:	e000      	b.n	8005360 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800535e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03e      	beq.n	80053e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b04      	cmp	r3, #4
 8005376:	d112      	bne.n	800539e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d112      	bne.n	80053d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	f043 0204 	orr.w	r2, r3, #4
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f8b3 	bl	800555c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053f6:	e039      	b.n	800546c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b2a      	cmp	r3, #42	; 0x2a
 80053fc:	d109      	bne.n	8005412 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2228      	movs	r2, #40	; 0x28
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff f832 	bl	8004476 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b28      	cmp	r3, #40	; 0x28
 800541c:	d111      	bne.n	8005442 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <I2C_Slave_STOPF+0x25c>)
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff f831 	bl	80044a2 <HAL_I2C_ListenCpltCallback>
}
 8005440:	e014      	b.n	800546c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	2b22      	cmp	r3, #34	; 0x22
 8005448:	d002      	beq.n	8005450 <I2C_Slave_STOPF+0x234>
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b22      	cmp	r3, #34	; 0x22
 800544e:	d10d      	bne.n	800546c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff f805 	bl	8004476 <HAL_I2C_SlaveRxCpltCallback>
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	08005abd 	.word	0x08005abd
 8005478:	ffff0000 	.word	0xffff0000

0800547c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d002      	beq.n	800549e <I2C_Slave_AF+0x22>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b20      	cmp	r3, #32
 800549c:	d129      	bne.n	80054f2 <I2C_Slave_AF+0x76>
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	2b28      	cmp	r3, #40	; 0x28
 80054a2:	d126      	bne.n	80054f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a2c      	ldr	r2, [pc, #176]	; (8005558 <I2C_Slave_AF+0xdc>)
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fe ffd9 	bl	80044a2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054f0:	e02e      	b.n	8005550 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	2b21      	cmp	r3, #33	; 0x21
 80054f6:	d126      	bne.n	8005546 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <I2C_Slave_AF+0xdc>)
 80054fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2221      	movs	r2, #33	; 0x21
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005522:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800552c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fe ff90 	bl	8004464 <HAL_I2C_SlaveTxCpltCallback>
}
 8005544:	e004      	b.n	8005550 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800554e:	615a      	str	r2, [r3, #20]
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	ffff0000 	.word	0xffff0000

0800555c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005572:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005574:	7bbb      	ldrb	r3, [r7, #14]
 8005576:	2b10      	cmp	r3, #16
 8005578:	d002      	beq.n	8005580 <I2C_ITError+0x24>
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d10a      	bne.n	8005596 <I2C_ITError+0x3a>
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b22      	cmp	r3, #34	; 0x22
 8005584:	d107      	bne.n	8005596 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005594:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800559c:	2b28      	cmp	r3, #40	; 0x28
 800559e:	d107      	bne.n	80055b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2228      	movs	r2, #40	; 0x28
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055ae:	e015      	b.n	80055dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055be:	d00a      	beq.n	80055d6 <I2C_ITError+0x7a>
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2b60      	cmp	r3, #96	; 0x60
 80055c4:	d007      	beq.n	80055d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ea:	d161      	bne.n	80056b0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005604:	2b01      	cmp	r3, #1
 8005606:	d020      	beq.n	800564a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	4a6a      	ldr	r2, [pc, #424]	; (80057b8 <I2C_ITError+0x25c>)
 800560e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	4618      	mov	r0, r3
 8005616:	f7fd fe47 	bl	80032a8 <HAL_DMA_Abort_IT>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8089 	beq.w	8005734 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
 8005648:	e074      	b.n	8005734 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	4a5a      	ldr	r2, [pc, #360]	; (80057b8 <I2C_ITError+0x25c>)
 8005650:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd fe26 	bl	80032a8 <HAL_DMA_Abort_IT>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d068      	beq.n	8005734 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d10b      	bne.n	8005688 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056aa:	4610      	mov	r0, r2
 80056ac:	4798      	blx	r3
 80056ae:	e041      	b.n	8005734 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b60      	cmp	r3, #96	; 0x60
 80056ba:	d125      	bne.n	8005708 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d4:	2b40      	cmp	r3, #64	; 0x40
 80056d6:	d10b      	bne.n	80056f0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fe fef2 	bl	80044ea <HAL_I2C_AbortCpltCallback>
 8005706:	e015      	b.n	8005734 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d10b      	bne.n	800572e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fe fed2 	bl	80044d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10e      	bne.n	8005762 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005770:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b04      	cmp	r3, #4
 8005784:	d113      	bne.n	80057ae <I2C_ITError+0x252>
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b28      	cmp	r3, #40	; 0x28
 800578a:	d110      	bne.n	80057ae <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <I2C_ITError+0x260>)
 8005790:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fe fe7a 	bl	80044a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	08005abd 	.word	0x08005abd
 80057bc:	ffff0000 	.word	0xffff0000

080057c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	817b      	strh	r3, [r7, #10]
 80057d2:	460b      	mov	r3, r1
 80057d4:	813b      	strh	r3, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fa08 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005810:	d103      	bne.n	800581a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e05f      	b.n	80058de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800582c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	6a3a      	ldr	r2, [r7, #32]
 8005832:	492d      	ldr	r1, [pc, #180]	; (80058e8 <I2C_RequestMemoryWrite+0x128>)
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa40 	bl	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e04c      	b.n	80058de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	6a39      	ldr	r1, [r7, #32]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 faaa 	bl	8005db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00d      	beq.n	8005886 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b04      	cmp	r3, #4
 8005870:	d107      	bne.n	8005882 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e02b      	b.n	80058de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800588c:	893b      	ldrh	r3, [r7, #8]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	611a      	str	r2, [r3, #16]
 8005896:	e021      	b.n	80058dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	b29b      	uxth	r3, r3
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a8:	6a39      	ldr	r1, [r7, #32]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fa84 	bl	8005db8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d107      	bne.n	80058ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e005      	b.n	80058de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058d2:	893b      	ldrh	r3, [r7, #8]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	00010002 	.word	0x00010002

080058ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	2200      	movs	r2, #0
 800592e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f96a 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594c:	d103      	bne.n	8005956 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e0aa      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800595a:	897b      	ldrh	r3, [r7, #10]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	4952      	ldr	r1, [pc, #328]	; (8005ab8 <I2C_RequestMemoryRead+0x1cc>)
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f9a2 	bl	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e097      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005998:	6a39      	ldr	r1, [r7, #32]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fa0c 	bl	8005db8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d107      	bne.n	80059be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e076      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d105      	bne.n	80059d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059c8:	893b      	ldrh	r3, [r7, #8]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	611a      	str	r2, [r3, #16]
 80059d2:	e021      	b.n	8005a18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059d4:	893b      	ldrh	r3, [r7, #8]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e4:	6a39      	ldr	r1, [r7, #32]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f9e6 	bl	8005db8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d107      	bne.n	8005a0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e050      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a0e:	893b      	ldrh	r3, [r7, #8]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1a:	6a39      	ldr	r1, [r7, #32]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f9cb 	bl	8005db8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d107      	bne.n	8005a40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e035      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f8d3 	bl	8005c0c <I2C_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00d      	beq.n	8005a88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	d103      	bne.n	8005a84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e013      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a88:	897b      	ldrh	r3, [r7, #10]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	6a3a      	ldr	r2, [r7, #32]
 8005a9c:	4906      	ldr	r1, [pc, #24]	; (8005ab8 <I2C_RequestMemoryRead+0x1cc>)
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f90b 	bl	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	00010002 	.word	0x00010002

08005abc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ad6:	4b4b      	ldr	r3, [pc, #300]	; (8005c04 <I2C_DMAAbort+0x148>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	4a4a      	ldr	r2, [pc, #296]	; (8005c08 <I2C_DMAAbort+0x14c>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	0a1a      	lsrs	r2, r3, #8
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	00da      	lsls	r2, r3, #3
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f043 0220 	orr.w	r2, r3, #32
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b02:	e00a      	b.n	8005b1a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b18:	d0ea      	beq.n	8005af0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b26:	2200      	movs	r2, #0
 8005b28:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	2200      	movs	r2, #0
 8005b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b48:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b60      	cmp	r3, #96	; 0x60
 8005b8a:	d10e      	bne.n	8005baa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ba2:	6978      	ldr	r0, [r7, #20]
 8005ba4:	f7fe fca1 	bl	80044ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ba8:	e027      	b.n	8005bfa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bb0:	2b28      	cmp	r3, #40	; 0x28
 8005bb2:	d117      	bne.n	8005be4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bd2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2228      	movs	r2, #40	; 0x28
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005be2:	e007      	b.n	8005bf4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005bf4:	6978      	ldr	r0, [r7, #20]
 8005bf6:	f7fe fc6f 	bl	80044d8 <HAL_I2C_ErrorCallback>
}
 8005bfa:	bf00      	nop
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000018 	.word	0x20000018
 8005c08:	14f8b589 	.word	0x14f8b589

08005c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c1c:	e025      	b.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d021      	beq.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c26:	f7fd f9c9 	bl	8002fbc <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d116      	bne.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f043 0220 	orr.w	r2, r3, #32
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e023      	b.n	8005cb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	0c1b      	lsrs	r3, r3, #16
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d10d      	bne.n	8005c90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	43da      	mvns	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bf0c      	ite	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	2300      	movne	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	e00c      	b.n	8005caa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	43da      	mvns	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d0b6      	beq.n	8005c1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
 8005cc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cc8:	e051      	b.n	8005d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd8:	d123      	bne.n	8005d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f043 0204 	orr.w	r2, r3, #4
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e046      	b.n	8005db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d021      	beq.n	8005d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2a:	f7fd f947 	bl	8002fbc <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d302      	bcc.n	8005d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d116      	bne.n	8005d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f043 0220 	orr.w	r2, r3, #32
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e020      	b.n	8005db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	0c1b      	lsrs	r3, r3, #16
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d10c      	bne.n	8005d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	43da      	mvns	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4013      	ands	r3, r2
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bf14      	ite	ne
 8005d8a:	2301      	movne	r3, #1
 8005d8c:	2300      	moveq	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	e00b      	b.n	8005daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	43da      	mvns	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bf14      	ite	ne
 8005da4:	2301      	movne	r3, #1
 8005da6:	2300      	moveq	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d18d      	bne.n	8005cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dc4:	e02d      	b.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f900 	bl	8005fcc <I2C_IsAcknowledgeFailed>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e02d      	b.n	8005e32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d021      	beq.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7fd f8ed 	bl	8002fbc <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d116      	bne.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e007      	b.n	8005e32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d1ca      	bne.n	8005dc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e46:	e02d      	b.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f8bf 	bl	8005fcc <I2C_IsAcknowledgeFailed>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e02d      	b.n	8005eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d021      	beq.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e60:	f7fd f8ac 	bl	8002fbc <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d302      	bcc.n	8005e76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d116      	bne.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e007      	b.n	8005eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d1ca      	bne.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ec8:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	0a1a      	lsrs	r2, r3, #8
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d107      	bne.n	8005efa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f043 0220 	orr.w	r2, r3, #32
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e008      	b.n	8005f0c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f08:	d0e9      	beq.n	8005ede <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000018 	.word	0x20000018
 8005f1c:	14f8b589 	.word	0x14f8b589

08005f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f2c:	e042      	b.n	8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d119      	bne.n	8005f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0210 	mvn.w	r2, #16
 8005f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e029      	b.n	8005fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f70:	f7fd f824 	bl	8002fbc <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d302      	bcc.n	8005f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d116      	bne.n	8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e007      	b.n	8005fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d1b5      	bne.n	8005f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	d11b      	bne.n	800601c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	f043 0204 	orr.w	r2, r3, #4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr

08006028 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006038:	d103      	bne.n	8006042 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006040:	e007      	b.n	8006052 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800604a:	d102      	bne.n	8006052 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2208      	movs	r2, #8
 8006050:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e26c      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8087 	beq.w	800618a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800607c:	4b92      	ldr	r3, [pc, #584]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	2b04      	cmp	r3, #4
 8006086:	d00c      	beq.n	80060a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006088:	4b8f      	ldr	r3, [pc, #572]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 030c 	and.w	r3, r3, #12
 8006090:	2b08      	cmp	r3, #8
 8006092:	d112      	bne.n	80060ba <HAL_RCC_OscConfig+0x5e>
 8006094:	4b8c      	ldr	r3, [pc, #560]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d10b      	bne.n	80060ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a2:	4b89      	ldr	r3, [pc, #548]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d06c      	beq.n	8006188 <HAL_RCC_OscConfig+0x12c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d168      	bne.n	8006188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e246      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c2:	d106      	bne.n	80060d2 <HAL_RCC_OscConfig+0x76>
 80060c4:	4b80      	ldr	r3, [pc, #512]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a7f      	ldr	r2, [pc, #508]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80060ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	e02e      	b.n	8006130 <HAL_RCC_OscConfig+0xd4>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCC_OscConfig+0x98>
 80060da:	4b7b      	ldr	r3, [pc, #492]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a7a      	ldr	r2, [pc, #488]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80060e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	4b78      	ldr	r3, [pc, #480]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a77      	ldr	r2, [pc, #476]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80060ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e01d      	b.n	8006130 <HAL_RCC_OscConfig+0xd4>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060fc:	d10c      	bne.n	8006118 <HAL_RCC_OscConfig+0xbc>
 80060fe:	4b72      	ldr	r3, [pc, #456]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a71      	ldr	r2, [pc, #452]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4b6f      	ldr	r3, [pc, #444]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a6e      	ldr	r2, [pc, #440]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e00b      	b.n	8006130 <HAL_RCC_OscConfig+0xd4>
 8006118:	4b6b      	ldr	r3, [pc, #428]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a6a      	ldr	r2, [pc, #424]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800611e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	4b68      	ldr	r3, [pc, #416]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a67      	ldr	r2, [pc, #412]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800612a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800612e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d013      	beq.n	8006160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006138:	f7fc ff40 	bl	8002fbc <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006140:	f7fc ff3c 	bl	8002fbc <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	; 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e1fa      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006152:	4b5d      	ldr	r3, [pc, #372]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0xe4>
 800615e:	e014      	b.n	800618a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006160:	f7fc ff2c 	bl	8002fbc <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006168:	f7fc ff28 	bl	8002fbc <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b64      	cmp	r3, #100	; 0x64
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e1e6      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800617a:	4b53      	ldr	r3, [pc, #332]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x10c>
 8006186:	e000      	b.n	800618a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d063      	beq.n	800625e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006196:	4b4c      	ldr	r3, [pc, #304]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061a2:	4b49      	ldr	r3, [pc, #292]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 030c 	and.w	r3, r3, #12
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d11c      	bne.n	80061e8 <HAL_RCC_OscConfig+0x18c>
 80061ae:	4b46      	ldr	r3, [pc, #280]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d116      	bne.n	80061e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ba:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_RCC_OscConfig+0x176>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d001      	beq.n	80061d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e1ba      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d2:	4b3d      	ldr	r3, [pc, #244]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4939      	ldr	r1, [pc, #228]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061e6:	e03a      	b.n	800625e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d020      	beq.n	8006232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061f0:	4b36      	ldr	r3, [pc, #216]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f6:	f7fc fee1 	bl	8002fbc <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061fe:	f7fc fedd 	bl	8002fbc <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e19b      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006210:	4b2d      	ldr	r3, [pc, #180]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621c:	4b2a      	ldr	r3, [pc, #168]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4927      	ldr	r1, [pc, #156]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]
 8006230:	e015      	b.n	800625e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006232:	4b26      	ldr	r3, [pc, #152]	; (80062cc <HAL_RCC_OscConfig+0x270>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006238:	f7fc fec0 	bl	8002fbc <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006240:	f7fc febc 	bl	8002fbc <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e17a      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006252:	4b1d      	ldr	r3, [pc, #116]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f0      	bne.n	8006240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d03a      	beq.n	80062e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d019      	beq.n	80062a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006274:	2201      	movs	r2, #1
 8006276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006278:	f7fc fea0 	bl	8002fbc <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006280:	f7fc fe9c 	bl	8002fbc <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e15a      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006292:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <HAL_RCC_OscConfig+0x26c>)
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800629e:	2001      	movs	r0, #1
 80062a0:	f000 fad8 	bl	8006854 <RCC_Delay>
 80062a4:	e01c      	b.n	80062e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <HAL_RCC_OscConfig+0x274>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ac:	f7fc fe86 	bl	8002fbc <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b2:	e00f      	b.n	80062d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b4:	f7fc fe82 	bl	8002fbc <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d908      	bls.n	80062d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e140      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
 80062c6:	bf00      	nop
 80062c8:	40021000 	.word	0x40021000
 80062cc:	42420000 	.word	0x42420000
 80062d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062d4:	4b9e      	ldr	r3, [pc, #632]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e9      	bne.n	80062b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80a6 	beq.w	800643a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ee:	2300      	movs	r3, #0
 80062f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062f2:	4b97      	ldr	r3, [pc, #604]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10d      	bne.n	800631a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062fe:	4b94      	ldr	r3, [pc, #592]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	4a93      	ldr	r2, [pc, #588]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006308:	61d3      	str	r3, [r2, #28]
 800630a:	4b91      	ldr	r3, [pc, #580]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006312:	60bb      	str	r3, [r7, #8]
 8006314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006316:	2301      	movs	r3, #1
 8006318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800631a:	4b8e      	ldr	r3, [pc, #568]	; (8006554 <HAL_RCC_OscConfig+0x4f8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006322:	2b00      	cmp	r3, #0
 8006324:	d118      	bne.n	8006358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006326:	4b8b      	ldr	r3, [pc, #556]	; (8006554 <HAL_RCC_OscConfig+0x4f8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a8a      	ldr	r2, [pc, #552]	; (8006554 <HAL_RCC_OscConfig+0x4f8>)
 800632c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006332:	f7fc fe43 	bl	8002fbc <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633a:	f7fc fe3f 	bl	8002fbc <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b64      	cmp	r3, #100	; 0x64
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e0fd      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634c:	4b81      	ldr	r3, [pc, #516]	; (8006554 <HAL_RCC_OscConfig+0x4f8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f0      	beq.n	800633a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d106      	bne.n	800636e <HAL_RCC_OscConfig+0x312>
 8006360:	4b7b      	ldr	r3, [pc, #492]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4a7a      	ldr	r2, [pc, #488]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	6213      	str	r3, [r2, #32]
 800636c:	e02d      	b.n	80063ca <HAL_RCC_OscConfig+0x36e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10c      	bne.n	8006390 <HAL_RCC_OscConfig+0x334>
 8006376:	4b76      	ldr	r3, [pc, #472]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	4a75      	ldr	r2, [pc, #468]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	6213      	str	r3, [r2, #32]
 8006382:	4b73      	ldr	r3, [pc, #460]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	4a72      	ldr	r2, [pc, #456]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	6213      	str	r3, [r2, #32]
 800638e:	e01c      	b.n	80063ca <HAL_RCC_OscConfig+0x36e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2b05      	cmp	r3, #5
 8006396:	d10c      	bne.n	80063b2 <HAL_RCC_OscConfig+0x356>
 8006398:	4b6d      	ldr	r3, [pc, #436]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	4a6c      	ldr	r2, [pc, #432]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 800639e:	f043 0304 	orr.w	r3, r3, #4
 80063a2:	6213      	str	r3, [r2, #32]
 80063a4:	4b6a      	ldr	r3, [pc, #424]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	4a69      	ldr	r2, [pc, #420]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	6213      	str	r3, [r2, #32]
 80063b0:	e00b      	b.n	80063ca <HAL_RCC_OscConfig+0x36e>
 80063b2:	4b67      	ldr	r3, [pc, #412]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	4a66      	ldr	r2, [pc, #408]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80063b8:	f023 0301 	bic.w	r3, r3, #1
 80063bc:	6213      	str	r3, [r2, #32]
 80063be:	4b64      	ldr	r3, [pc, #400]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	4a63      	ldr	r2, [pc, #396]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80063c4:	f023 0304 	bic.w	r3, r3, #4
 80063c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d015      	beq.n	80063fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d2:	f7fc fdf3 	bl	8002fbc <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d8:	e00a      	b.n	80063f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063da:	f7fc fdef 	bl	8002fbc <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e0ab      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f0:	4b57      	ldr	r3, [pc, #348]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0ee      	beq.n	80063da <HAL_RCC_OscConfig+0x37e>
 80063fc:	e014      	b.n	8006428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063fe:	f7fc fddd 	bl	8002fbc <HAL_GetTick>
 8006402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006404:	e00a      	b.n	800641c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006406:	f7fc fdd9 	bl	8002fbc <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f241 3288 	movw	r2, #5000	; 0x1388
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e095      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800641c:	4b4c      	ldr	r3, [pc, #304]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ee      	bne.n	8006406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d105      	bne.n	800643a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800642e:	4b48      	ldr	r3, [pc, #288]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4a47      	ldr	r2, [pc, #284]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8081 	beq.w	8006546 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006444:	4b42      	ldr	r3, [pc, #264]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 030c 	and.w	r3, r3, #12
 800644c:	2b08      	cmp	r3, #8
 800644e:	d061      	beq.n	8006514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d146      	bne.n	80064e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006458:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_OscConfig+0x4fc>)
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645e:	f7fc fdad 	bl	8002fbc <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006466:	f7fc fda9 	bl	8002fbc <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e067      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006478:	4b35      	ldr	r3, [pc, #212]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648c:	d108      	bne.n	80064a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800648e:	4b30      	ldr	r3, [pc, #192]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	492d      	ldr	r1, [pc, #180]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 800649c:	4313      	orrs	r3, r2
 800649e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a0:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a19      	ldr	r1, [r3, #32]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	430b      	orrs	r3, r1
 80064b2:	4927      	ldr	r1, [pc, #156]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064b8:	4b27      	ldr	r3, [pc, #156]	; (8006558 <HAL_RCC_OscConfig+0x4fc>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064be:	f7fc fd7d 	bl	8002fbc <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c6:	f7fc fd79 	bl	8002fbc <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e037      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0f0      	beq.n	80064c6 <HAL_RCC_OscConfig+0x46a>
 80064e4:	e02f      	b.n	8006546 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e6:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <HAL_RCC_OscConfig+0x4fc>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ec:	f7fc fd66 	bl	8002fbc <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fc fd62 	bl	8002fbc <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e020      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x498>
 8006512:	e018      	b.n	8006546 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e013      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_OscConfig+0x4f4>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	429a      	cmp	r2, r3
 8006532:	d106      	bne.n	8006542 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800653e:	429a      	cmp	r2, r3
 8006540:	d001      	beq.n	8006546 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40021000 	.word	0x40021000
 8006554:	40007000 	.word	0x40007000
 8006558:	42420060 	.word	0x42420060

0800655c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0d0      	b.n	8006712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006570:	4b6a      	ldr	r3, [pc, #424]	; (800671c <HAL_RCC_ClockConfig+0x1c0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d910      	bls.n	80065a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657e:	4b67      	ldr	r3, [pc, #412]	; (800671c <HAL_RCC_ClockConfig+0x1c0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f023 0207 	bic.w	r2, r3, #7
 8006586:	4965      	ldr	r1, [pc, #404]	; (800671c <HAL_RCC_ClockConfig+0x1c0>)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	4313      	orrs	r3, r2
 800658c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b63      	ldr	r3, [pc, #396]	; (800671c <HAL_RCC_ClockConfig+0x1c0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d001      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e0b8      	b.n	8006712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d020      	beq.n	80065ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065b8:	4b59      	ldr	r3, [pc, #356]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4a58      	ldr	r2, [pc, #352]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80065be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065d0:	4b53      	ldr	r3, [pc, #332]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	4a52      	ldr	r2, [pc, #328]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80065d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80065da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065dc:	4b50      	ldr	r3, [pc, #320]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	494d      	ldr	r1, [pc, #308]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d040      	beq.n	800667c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d107      	bne.n	8006612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006602:	4b47      	ldr	r3, [pc, #284]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d115      	bne.n	800663a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e07f      	b.n	8006712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d107      	bne.n	800662a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800661a:	4b41      	ldr	r3, [pc, #260]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e073      	b.n	8006712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662a:	4b3d      	ldr	r3, [pc, #244]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e06b      	b.n	8006712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800663a:	4b39      	ldr	r3, [pc, #228]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f023 0203 	bic.w	r2, r3, #3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	4936      	ldr	r1, [pc, #216]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 8006648:	4313      	orrs	r3, r2
 800664a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800664c:	f7fc fcb6 	bl	8002fbc <HAL_GetTick>
 8006650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006652:	e00a      	b.n	800666a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006654:	f7fc fcb2 	bl	8002fbc <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e053      	b.n	8006712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800666a:	4b2d      	ldr	r3, [pc, #180]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 020c 	and.w	r2, r3, #12
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	429a      	cmp	r2, r3
 800667a:	d1eb      	bne.n	8006654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800667c:	4b27      	ldr	r3, [pc, #156]	; (800671c <HAL_RCC_ClockConfig+0x1c0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d210      	bcs.n	80066ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668a:	4b24      	ldr	r3, [pc, #144]	; (800671c <HAL_RCC_ClockConfig+0x1c0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f023 0207 	bic.w	r2, r3, #7
 8006692:	4922      	ldr	r1, [pc, #136]	; (800671c <HAL_RCC_ClockConfig+0x1c0>)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	4313      	orrs	r3, r2
 8006698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800669a:	4b20      	ldr	r3, [pc, #128]	; (800671c <HAL_RCC_ClockConfig+0x1c0>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e032      	b.n	8006712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d008      	beq.n	80066ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066b8:	4b19      	ldr	r3, [pc, #100]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	4916      	ldr	r1, [pc, #88]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80066d6:	4b12      	ldr	r3, [pc, #72]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	490e      	ldr	r1, [pc, #56]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066ea:	f000 f821 	bl	8006730 <HAL_RCC_GetSysClockFreq>
 80066ee:	4602      	mov	r2, r0
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	091b      	lsrs	r3, r3, #4
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	490a      	ldr	r1, [pc, #40]	; (8006724 <HAL_RCC_ClockConfig+0x1c8>)
 80066fc:	5ccb      	ldrb	r3, [r1, r3]
 80066fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006702:	4a09      	ldr	r2, [pc, #36]	; (8006728 <HAL_RCC_ClockConfig+0x1cc>)
 8006704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <HAL_RCC_ClockConfig+0x1d0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7fc fc14 	bl	8002f38 <HAL_InitTick>

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40022000 	.word	0x40022000
 8006720:	40021000 	.word	0x40021000
 8006724:	0800cd70 	.word	0x0800cd70
 8006728:	20000018 	.word	0x20000018
 800672c:	2000001c 	.word	0x2000001c

08006730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006730:	b490      	push	{r4, r7}
 8006732:	b08a      	sub	sp, #40	; 0x28
 8006734:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006736:	4b2a      	ldr	r3, [pc, #168]	; (80067e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006738:	1d3c      	adds	r4, r7, #4
 800673a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800673c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006740:	f240 2301 	movw	r3, #513	; 0x201
 8006744:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	61fb      	str	r3, [r7, #28]
 800674a:	2300      	movs	r3, #0
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	2300      	movs	r3, #0
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800675a:	4b22      	ldr	r3, [pc, #136]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f003 030c 	and.w	r3, r3, #12
 8006766:	2b04      	cmp	r3, #4
 8006768:	d002      	beq.n	8006770 <HAL_RCC_GetSysClockFreq+0x40>
 800676a:	2b08      	cmp	r3, #8
 800676c:	d003      	beq.n	8006776 <HAL_RCC_GetSysClockFreq+0x46>
 800676e:	e02d      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006770:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006772:	623b      	str	r3, [r7, #32]
      break;
 8006774:	e02d      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	0c9b      	lsrs	r3, r3, #18
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006782:	4413      	add	r3, r2
 8006784:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006788:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d013      	beq.n	80067bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006794:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	0c5b      	lsrs	r3, r3, #17
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80067a2:	4413      	add	r3, r2
 80067a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80067a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4a0e      	ldr	r2, [pc, #56]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ae:	fb02 f203 	mul.w	r2, r2, r3
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ba:	e004      	b.n	80067c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4a0b      	ldr	r2, [pc, #44]	; (80067ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	623b      	str	r3, [r7, #32]
      break;
 80067ca:	e002      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ce:	623b      	str	r3, [r7, #32]
      break;
 80067d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067d2:	6a3b      	ldr	r3, [r7, #32]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3728      	adds	r7, #40	; 0x28
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc90      	pop	{r4, r7}
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	0800cd60 	.word	0x0800cd60
 80067e4:	40021000 	.word	0x40021000
 80067e8:	007a1200 	.word	0x007a1200
 80067ec:	003d0900 	.word	0x003d0900

080067f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067f4:	4b02      	ldr	r3, [pc, #8]	; (8006800 <HAL_RCC_GetHCLKFreq+0x10>)
 80067f6:	681b      	ldr	r3, [r3, #0]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	20000018 	.word	0x20000018

08006804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006808:	f7ff fff2 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 800680c:	4602      	mov	r2, r0
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	4903      	ldr	r1, [pc, #12]	; (8006828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800681a:	5ccb      	ldrb	r3, [r1, r3]
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006820:	4618      	mov	r0, r3
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40021000 	.word	0x40021000
 8006828:	0800cd80 	.word	0x0800cd80

0800682c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006830:	f7ff ffde 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8006834:	4602      	mov	r2, r0
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	0adb      	lsrs	r3, r3, #11
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	4903      	ldr	r1, [pc, #12]	; (8006850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006842:	5ccb      	ldrb	r3, [r1, r3]
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006848:	4618      	mov	r0, r3
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40021000 	.word	0x40021000
 8006850:	0800cd80 	.word	0x0800cd80

08006854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800685c:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <RCC_Delay+0x34>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0a      	ldr	r2, [pc, #40]	; (800688c <RCC_Delay+0x38>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	0a5b      	lsrs	r3, r3, #9
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006870:	bf00      	nop
  }
  while (Delay --);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1e5a      	subs	r2, r3, #1
 8006876:	60fa      	str	r2, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f9      	bne.n	8006870 <RCC_Delay+0x1c>
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr
 8006888:	20000018 	.word	0x20000018
 800688c:	10624dd3 	.word	0x10624dd3

08006890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e041      	b.n	8006926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fb ffdc 	bl	8002874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f000 fc66 	bl	80071a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d001      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e03a      	b.n	80069be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <HAL_TIM_Base_Start_IT+0x98>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00e      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x58>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006972:	d009      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x58>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a14      	ldr	r2, [pc, #80]	; (80069cc <HAL_TIM_Base_Start_IT+0x9c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x58>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a13      	ldr	r2, [pc, #76]	; (80069d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d111      	bne.n	80069ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b06      	cmp	r3, #6
 8006998:	d010      	beq.n	80069bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069aa:	e007      	b.n	80069bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40000400 	.word	0x40000400
 80069d0:	40000800 	.word	0x40000800

080069d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0201 	bic.w	r2, r2, #1
 80069ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6a1a      	ldr	r2, [r3, #32]
 80069f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10f      	bne.n	8006a1c <HAL_TIM_Base_Stop_IT+0x48>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a1a      	ldr	r2, [r3, #32]
 8006a02:	f240 4344 	movw	r3, #1092	; 0x444
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d107      	bne.n	8006a1c <HAL_TIM_Base_Stop_IT+0x48>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e093      	b.n	8006b6c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d106      	bne.n	8006a5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7fb fecb 	bl	80027f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a74:	f023 0307 	bic.w	r3, r3, #7
 8006a78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f000 fb8b 	bl	80071a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ad0:	f023 030c 	bic.w	r3, r3, #12
 8006ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006adc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	4313      	orrs	r3, r2
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	011a      	lsls	r2, r3, #4
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	031b      	lsls	r3, r3, #12
 8006b00:	4313      	orrs	r3, r2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d110      	bne.n	8006bc6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d102      	bne.n	8006bb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006baa:	7b7b      	ldrb	r3, [r7, #13]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d001      	beq.n	8006bb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e069      	b.n	8006c88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc4:	e031      	b.n	8006c2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d110      	bne.n	8006bee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d102      	bne.n	8006bd8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bd2:	7b3b      	ldrb	r3, [r7, #12]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d001      	beq.n	8006bdc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e055      	b.n	8006c88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bec:	e01d      	b.n	8006c2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d108      	bne.n	8006c06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d105      	bne.n	8006c06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bfa:	7b7b      	ldrb	r3, [r7, #13]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d102      	bne.n	8006c06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c00:	7b3b      	ldrb	r3, [r7, #12]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d001      	beq.n	8006c0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e03e      	b.n	8006c88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2202      	movs	r2, #2
 8006c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2202      	movs	r2, #2
 8006c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_TIM_Encoder_Start+0xc4>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d008      	beq.n	8006c48 <HAL_TIM_Encoder_Start+0xd4>
 8006c36:	e00f      	b.n	8006c58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fba5 	bl	8007390 <TIM_CCxChannelCmd>
      break;
 8006c46:	e016      	b.n	8006c76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	2104      	movs	r1, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fb9d 	bl	8007390 <TIM_CCxChannelCmd>
      break;
 8006c56:	e00e      	b.n	8006c76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fb95 	bl	8007390 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	2104      	movs	r1, #4
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fb8e 	bl	8007390 <TIM_CCxChannelCmd>
      break;
 8006c74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 0201 	orr.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_TIM_Encoder_Stop+0x18>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d008      	beq.n	8006cb8 <HAL_TIM_Encoder_Stop+0x28>
 8006ca6:	e00f      	b.n	8006cc8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2200      	movs	r2, #0
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fb6d 	bl	8007390 <TIM_CCxChannelCmd>
      break;
 8006cb6:	e016      	b.n	8006ce6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2104      	movs	r1, #4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fb65 	bl	8007390 <TIM_CCxChannelCmd>
      break;
 8006cc6:	e00e      	b.n	8006ce6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fb5d 	bl	8007390 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2104      	movs	r1, #4
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb56 	bl	8007390 <TIM_CCxChannelCmd>
      break;
 8006ce4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a1a      	ldr	r2, [r3, #32]
 8006cec:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10f      	bne.n	8006d16 <HAL_TIM_Encoder_Stop+0x86>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6a1a      	ldr	r2, [r3, #32]
 8006cfc:	f240 4344 	movw	r3, #1092	; 0x444
 8006d00:	4013      	ands	r3, r2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d107      	bne.n	8006d16 <HAL_TIM_Encoder_Stop+0x86>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0201 	bic.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <HAL_TIM_Encoder_Stop+0x92>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d138      	bne.n	8006d94 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_Encoder_Stop+0xa2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d30:	e013      	b.n	8006d5a <HAL_TIM_Encoder_Stop+0xca>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d104      	bne.n	8006d42 <HAL_TIM_Encoder_Stop+0xb2>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d40:	e00b      	b.n	8006d5a <HAL_TIM_Encoder_Stop+0xca>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_Encoder_Stop+0xc2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d50:	e003      	b.n	8006d5a <HAL_TIM_Encoder_Stop+0xca>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <HAL_TIM_Encoder_Stop+0xda>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d68:	e024      	b.n	8006db4 <HAL_TIM_Encoder_Stop+0x124>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d104      	bne.n	8006d7a <HAL_TIM_Encoder_Stop+0xea>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d78:	e01c      	b.n	8006db4 <HAL_TIM_Encoder_Stop+0x124>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d104      	bne.n	8006d8a <HAL_TIM_Encoder_Stop+0xfa>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d88:	e014      	b.n	8006db4 <HAL_TIM_Encoder_Stop+0x124>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d92:	e00f      	b.n	8006db4 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d122      	bne.n	8006e1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d11b      	bne.n	8006e1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f06f 0202 	mvn.w	r2, #2
 8006dea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f9b1 	bl	8007168 <HAL_TIM_IC_CaptureCallback>
 8006e06:	e005      	b.n	8006e14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9a4 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f9b3 	bl	800717a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d122      	bne.n	8006e6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d11b      	bne.n	8006e6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f06f 0204 	mvn.w	r2, #4
 8006e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f987 	bl	8007168 <HAL_TIM_IC_CaptureCallback>
 8006e5a:	e005      	b.n	8006e68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f97a 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f989 	bl	800717a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d122      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d11b      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f06f 0208 	mvn.w	r2, #8
 8006e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2204      	movs	r2, #4
 8006e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f95d 	bl	8007168 <HAL_TIM_IC_CaptureCallback>
 8006eae:	e005      	b.n	8006ebc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f950 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f95f 	bl	800717a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d122      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b10      	cmp	r3, #16
 8006edc:	d11b      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f06f 0210 	mvn.w	r2, #16
 8006ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2208      	movs	r2, #8
 8006eec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f933 	bl	8007168 <HAL_TIM_IC_CaptureCallback>
 8006f02:	e005      	b.n	8006f10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f926 	bl	8007156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f935 	bl	800717a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d10e      	bne.n	8006f42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d107      	bne.n	8006f42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f06f 0201 	mvn.w	r2, #1
 8006f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7fb f9c5 	bl	80022cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4c:	2b80      	cmp	r3, #128	; 0x80
 8006f4e:	d10e      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b80      	cmp	r3, #128	; 0x80
 8006f5c:	d107      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fa9c 	bl	80074a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d10e      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b40      	cmp	r3, #64	; 0x40
 8006f88:	d107      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f8f9 	bl	800718c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d10e      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d107      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f06f 0220 	mvn.w	r2, #32
 8006fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa67 	bl	8007494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_ConfigClockSource+0x18>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e0b3      	b.n	800714e <HAL_TIM_ConfigClockSource+0x180>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007004:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800700c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800701e:	d03e      	beq.n	800709e <HAL_TIM_ConfigClockSource+0xd0>
 8007020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007024:	f200 8087 	bhi.w	8007136 <HAL_TIM_ConfigClockSource+0x168>
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702c:	f000 8085 	beq.w	800713a <HAL_TIM_ConfigClockSource+0x16c>
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007034:	d87f      	bhi.n	8007136 <HAL_TIM_ConfigClockSource+0x168>
 8007036:	2b70      	cmp	r3, #112	; 0x70
 8007038:	d01a      	beq.n	8007070 <HAL_TIM_ConfigClockSource+0xa2>
 800703a:	2b70      	cmp	r3, #112	; 0x70
 800703c:	d87b      	bhi.n	8007136 <HAL_TIM_ConfigClockSource+0x168>
 800703e:	2b60      	cmp	r3, #96	; 0x60
 8007040:	d050      	beq.n	80070e4 <HAL_TIM_ConfigClockSource+0x116>
 8007042:	2b60      	cmp	r3, #96	; 0x60
 8007044:	d877      	bhi.n	8007136 <HAL_TIM_ConfigClockSource+0x168>
 8007046:	2b50      	cmp	r3, #80	; 0x50
 8007048:	d03c      	beq.n	80070c4 <HAL_TIM_ConfigClockSource+0xf6>
 800704a:	2b50      	cmp	r3, #80	; 0x50
 800704c:	d873      	bhi.n	8007136 <HAL_TIM_ConfigClockSource+0x168>
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d058      	beq.n	8007104 <HAL_TIM_ConfigClockSource+0x136>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d86f      	bhi.n	8007136 <HAL_TIM_ConfigClockSource+0x168>
 8007056:	2b30      	cmp	r3, #48	; 0x30
 8007058:	d064      	beq.n	8007124 <HAL_TIM_ConfigClockSource+0x156>
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	d86b      	bhi.n	8007136 <HAL_TIM_ConfigClockSource+0x168>
 800705e:	2b20      	cmp	r3, #32
 8007060:	d060      	beq.n	8007124 <HAL_TIM_ConfigClockSource+0x156>
 8007062:	2b20      	cmp	r3, #32
 8007064:	d867      	bhi.n	8007136 <HAL_TIM_ConfigClockSource+0x168>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d05c      	beq.n	8007124 <HAL_TIM_ConfigClockSource+0x156>
 800706a:	2b10      	cmp	r3, #16
 800706c:	d05a      	beq.n	8007124 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800706e:	e062      	b.n	8007136 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	6899      	ldr	r1, [r3, #8]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f000 f967 	bl	8007352 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007092:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	609a      	str	r2, [r3, #8]
      break;
 800709c:	e04e      	b.n	800713c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	6899      	ldr	r1, [r3, #8]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f000 f950 	bl	8007352 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070c0:	609a      	str	r2, [r3, #8]
      break;
 80070c2:	e03b      	b.n	800713c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	6859      	ldr	r1, [r3, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	461a      	mov	r2, r3
 80070d2:	f000 f8c7 	bl	8007264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2150      	movs	r1, #80	; 0x50
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 f91e 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 80070e2:	e02b      	b.n	800713c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	6859      	ldr	r1, [r3, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	461a      	mov	r2, r3
 80070f2:	f000 f8e5 	bl	80072c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2160      	movs	r1, #96	; 0x60
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 f90e 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8007102:	e01b      	b.n	800713c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	461a      	mov	r2, r3
 8007112:	f000 f8a7 	bl	8007264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2140      	movs	r1, #64	; 0x40
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f8fe 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8007122:	e00b      	b.n	800713c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f000 f8f5 	bl	800731e <TIM_ITRx_SetConfig>
        break;
 8007134:	e002      	b.n	800713c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007136:	bf00      	nop
 8007138:	e000      	b.n	800713c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800713a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr

0800717a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr
	...

080071a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a29      	ldr	r2, [pc, #164]	; (8007258 <TIM_Base_SetConfig+0xb8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00b      	beq.n	80071d0 <TIM_Base_SetConfig+0x30>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071be:	d007      	beq.n	80071d0 <TIM_Base_SetConfig+0x30>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a26      	ldr	r2, [pc, #152]	; (800725c <TIM_Base_SetConfig+0xbc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_Base_SetConfig+0x30>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a25      	ldr	r2, [pc, #148]	; (8007260 <TIM_Base_SetConfig+0xc0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d108      	bne.n	80071e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a1c      	ldr	r2, [pc, #112]	; (8007258 <TIM_Base_SetConfig+0xb8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00b      	beq.n	8007202 <TIM_Base_SetConfig+0x62>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f0:	d007      	beq.n	8007202 <TIM_Base_SetConfig+0x62>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a19      	ldr	r2, [pc, #100]	; (800725c <TIM_Base_SetConfig+0xbc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_Base_SetConfig+0x62>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a18      	ldr	r2, [pc, #96]	; (8007260 <TIM_Base_SetConfig+0xc0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a07      	ldr	r2, [pc, #28]	; (8007258 <TIM_Base_SetConfig+0xb8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	615a      	str	r2, [r3, #20]
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	40012c00 	.word	0x40012c00
 800725c:	40000400 	.word	0x40000400
 8007260:	40000800 	.word	0x40000800

08007264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f023 030a 	bic.w	r3, r3, #10
 80072a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr

080072c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	f023 0210 	bic.w	r2, r3, #16
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	031b      	lsls	r3, r3, #12
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	621a      	str	r2, [r3, #32]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr

0800731e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	f043 0307 	orr.w	r3, r3, #7
 8007340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	609a      	str	r2, [r3, #8]
}
 8007348:	bf00      	nop
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007352:	b480      	push	{r7}
 8007354:	b087      	sub	sp, #28
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800736c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	021a      	lsls	r2, r3, #8
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	431a      	orrs	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4313      	orrs	r3, r2
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	609a      	str	r2, [r3, #8]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	2201      	movs	r2, #1
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1a      	ldr	r2, [r3, #32]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	43db      	mvns	r3, r3
 80073b2:	401a      	ands	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a1a      	ldr	r2, [r3, #32]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	fa01 f303 	lsl.w	r3, r1, r3
 80073c8:	431a      	orrs	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e046      	b.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a16      	ldr	r2, [pc, #88]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743c:	d009      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a12      	ldr	r2, [pc, #72]	; (800748c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a10      	ldr	r2, [pc, #64]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10c      	bne.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	4313      	orrs	r3, r2
 8007462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	40012c00 	.word	0x40012c00
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800

08007494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e03f      	b.n	800754a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fb fc52 	bl	8002d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2224      	movs	r2, #36	; 0x24
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fcb5 	bl	8007e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695a      	ldr	r2, [r3, #20]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b08a      	sub	sp, #40	; 0x28
 8007556:	af02      	add	r7, sp, #8
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	603b      	str	r3, [r7, #0]
 800755e:	4613      	mov	r3, r2
 8007560:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b20      	cmp	r3, #32
 8007570:	d17c      	bne.n	800766c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <HAL_UART_Transmit+0x2c>
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e075      	b.n	800766e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_UART_Transmit+0x3e>
 800758c:	2302      	movs	r3, #2
 800758e:	e06e      	b.n	800766e <HAL_UART_Transmit+0x11c>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2221      	movs	r2, #33	; 0x21
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075a6:	f7fb fd09 	bl	8002fbc <HAL_GetTick>
 80075aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	88fa      	ldrh	r2, [r7, #6]
 80075b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	88fa      	ldrh	r2, [r7, #6]
 80075b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c0:	d108      	bne.n	80075d4 <HAL_UART_Transmit+0x82>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d104      	bne.n	80075d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	e003      	b.n	80075dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80075e4:	e02a      	b.n	800763c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2200      	movs	r2, #0
 80075ee:	2180      	movs	r1, #128	; 0x80
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 faa1 	bl	8007b38 <UART_WaitOnFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e036      	b.n	800766e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10b      	bne.n	800761e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007614:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	3302      	adds	r3, #2
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	e007      	b.n	800762e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	3301      	adds	r3, #1
 800762c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007632:	b29b      	uxth	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1cf      	bne.n	80075e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2200      	movs	r2, #0
 800764e:	2140      	movs	r1, #64	; 0x40
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fa71 	bl	8007b38 <UART_WaitOnFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e006      	b.n	800766e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e000      	b.n	800766e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800766c:	2302      	movs	r3, #2
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b08a      	sub	sp, #40	; 0x28
 800767a:	af02      	add	r7, sp, #8
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b20      	cmp	r3, #32
 8007694:	f040 808c 	bne.w	80077b0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <HAL_UART_Receive+0x2e>
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e084      	b.n	80077b2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_UART_Receive+0x40>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e07d      	b.n	80077b2 <HAL_UART_Receive+0x13c>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2222      	movs	r2, #34	; 0x22
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076d2:	f7fb fc73 	bl	8002fbc <HAL_GetTick>
 80076d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	88fa      	ldrh	r2, [r7, #6]
 80076e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ec:	d108      	bne.n	8007700 <HAL_UART_Receive+0x8a>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d104      	bne.n	8007700 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	e003      	b.n	8007708 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007710:	e043      	b.n	800779a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2200      	movs	r2, #0
 800771a:	2120      	movs	r1, #32
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fa0b 	bl	8007b38 <UART_WaitOnFlagUntilTimeout>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e042      	b.n	80077b2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10c      	bne.n	800774c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	b29b      	uxth	r3, r3
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	b29a      	uxth	r2, r3
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	3302      	adds	r3, #2
 8007748:	61bb      	str	r3, [r7, #24]
 800774a:	e01f      	b.n	800778c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007754:	d007      	beq.n	8007766 <HAL_UART_Receive+0xf0>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <HAL_UART_Receive+0xfe>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e008      	b.n	8007786 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007780:	b2da      	uxtb	r2, r3
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	3301      	adds	r3, #1
 800778a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1b6      	bne.n	8007712 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	e000      	b.n	80077b2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80077b0:	2302      	movs	r3, #2
  }
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08a      	sub	sp, #40	; 0x28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80077dc:	2300      	movs	r3, #0
 80077de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <HAL_UART_IRQHandler+0x52>
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa87 	bl	8007d1a <UART_Receive_IT>
      return;
 800780c:	e17b      	b.n	8007b06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 80b1 	beq.w	8007978 <HAL_UART_IRQHandler+0x1bc>
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d105      	bne.n	800782c <HAL_UART_IRQHandler+0x70>
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 80a6 	beq.w	8007978 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <HAL_UART_IRQHandler+0x90>
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	f043 0201 	orr.w	r2, r3, #1
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <HAL_UART_IRQHandler+0xb0>
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	f043 0202 	orr.w	r2, r3, #2
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <HAL_UART_IRQHandler+0xd0>
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	f043 0204 	orr.w	r2, r3, #4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00f      	beq.n	80078b6 <HAL_UART_IRQHandler+0xfa>
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <HAL_UART_IRQHandler+0xee>
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	f043 0208 	orr.w	r2, r3, #8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 811e 	beq.w	8007afc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d007      	beq.n	80078da <HAL_UART_IRQHandler+0x11e>
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fa20 	bl	8007d1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bf14      	ite	ne
 80078e8:	2301      	movne	r3, #1
 80078ea:	2300      	moveq	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <HAL_UART_IRQHandler+0x146>
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d031      	beq.n	8007966 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f962 	bl	8007bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d023      	beq.n	800795e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	695a      	ldr	r2, [r3, #20]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007924:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	2b00      	cmp	r3, #0
 800792c:	d013      	beq.n	8007956 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	4a76      	ldr	r2, [pc, #472]	; (8007b0c <HAL_UART_IRQHandler+0x350>)
 8007934:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	4618      	mov	r0, r3
 800793c:	f7fb fcb4 	bl	80032a8 <HAL_DMA_Abort_IT>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d016      	beq.n	8007974 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007950:	4610      	mov	r0, r2
 8007952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	e00e      	b.n	8007974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f8da 	bl	8007b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795c:	e00a      	b.n	8007974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f8d6 	bl	8007b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007964:	e006      	b.n	8007974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f8d2 	bl	8007b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007972:	e0c3      	b.n	8007afc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007974:	bf00      	nop
    return;
 8007976:	e0c1      	b.n	8007afc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	2b01      	cmp	r3, #1
 800797e:	f040 80a1 	bne.w	8007ac4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 809b 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 8095 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d04e      	beq.n	8007a5c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80079c8:	8a3b      	ldrh	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 8098 	beq.w	8007b00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079d4:	8a3a      	ldrh	r2, [r7, #16]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	f080 8092 	bcs.w	8007b00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8a3a      	ldrh	r2, [r7, #16]
 80079e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d02b      	beq.n	8007a44 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0201 	bic.w	r2, r2, #1
 8007a0a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695a      	ldr	r2, [r3, #20]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a1a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0210 	bic.w	r2, r2, #16
 8007a38:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fb fbf7 	bl	8003232 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f864 	bl	8007b22 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a5a:	e051      	b.n	8007b00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d047      	beq.n	8007b04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007a74:	8a7b      	ldrh	r3, [r7, #18]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d044      	beq.n	8007b04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a88:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695a      	ldr	r2, [r3, #20]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0201 	bic.w	r2, r2, #1
 8007a98:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0210 	bic.w	r2, r2, #16
 8007ab6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab8:	8a7b      	ldrh	r3, [r7, #18]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f830 	bl	8007b22 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ac2:	e01f      	b.n	8007b04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x324>
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f8b7 	bl	8007c4c <UART_Transmit_IT>
    return;
 8007ade:	e012      	b.n	8007b06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00d      	beq.n	8007b06 <HAL_UART_IRQHandler+0x34a>
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f8f8 	bl	8007cea <UART_EndTransmit_IT>
    return;
 8007afa:	e004      	b.n	8007b06 <HAL_UART_IRQHandler+0x34a>
    return;
 8007afc:	bf00      	nop
 8007afe:	e002      	b.n	8007b06 <HAL_UART_IRQHandler+0x34a>
      return;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <HAL_UART_IRQHandler+0x34a>
      return;
 8007b04:	bf00      	nop
  }
}
 8007b06:	3728      	adds	r7, #40	; 0x28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	08007c25 	.word	0x08007c25

08007b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr

08007b22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b48:	e02c      	b.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d028      	beq.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b58:	f7fb fa30 	bl	8002fbc <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d21d      	bcs.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695a      	ldr	r2, [r3, #20]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e00f      	b.n	8007bc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	4013      	ands	r3, r2
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	bf0c      	ite	eq
 8007bb4:	2301      	moveq	r3, #1
 8007bb6:	2300      	movne	r3, #0
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d0c3      	beq.n	8007b4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007be2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695a      	ldr	r2, [r3, #20]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0201 	bic.w	r2, r2, #1
 8007bf2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d107      	bne.n	8007c0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0210 	bic.w	r2, r2, #16
 8007c0a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff ff66 	bl	8007b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b21      	cmp	r3, #33	; 0x21
 8007c5e:	d13e      	bne.n	8007cde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c68:	d114      	bne.n	8007c94 <UART_Transmit_IT+0x48>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d110      	bne.n	8007c94 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	1c9a      	adds	r2, r3, #2
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	621a      	str	r2, [r3, #32]
 8007c92:	e008      	b.n	8007ca6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	1c59      	adds	r1, r3, #1
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6211      	str	r1, [r2, #32]
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10f      	bne.n	8007cda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e000      	b.n	8007ce0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cde:	2302      	movs	r3, #2
  }
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7fa f816 	bl	8001d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b086      	sub	sp, #24
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b22      	cmp	r3, #34	; 0x22
 8007d2c:	f040 8099 	bne.w	8007e62 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d38:	d117      	bne.n	8007d6a <UART_Receive_IT+0x50>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d113      	bne.n	8007d6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	1c9a      	adds	r2, r3, #2
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28
 8007d68:	e026      	b.n	8007db8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7c:	d007      	beq.n	8007d8e <UART_Receive_IT+0x74>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <UART_Receive_IT+0x82>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	e008      	b.n	8007dae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d148      	bne.n	8007e5e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0220 	bic.w	r2, r2, #32
 8007dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695a      	ldr	r2, [r3, #20]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 0201 	bic.w	r2, r2, #1
 8007dfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d123      	bne.n	8007e54 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0210 	bic.w	r2, r2, #16
 8007e20:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	2b10      	cmp	r3, #16
 8007e2e:	d10a      	bne.n	8007e46 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fe68 	bl	8007b22 <HAL_UARTEx_RxEventCallback>
 8007e52:	e002      	b.n	8007e5a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7f9 ff7a 	bl	8001d4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e002      	b.n	8007e64 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e000      	b.n	8007e64 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007e62:	2302      	movs	r3, #2
  }
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007ea6:	f023 030c 	bic.w	r3, r3, #12
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a2c      	ldr	r2, [pc, #176]	; (8007f80 <UART_SetConfig+0x114>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d103      	bne.n	8007edc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ed4:	f7fe fcaa 	bl	800682c <HAL_RCC_GetPCLK2Freq>
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	e002      	b.n	8007ee2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007edc:	f7fe fc92 	bl	8006804 <HAL_RCC_GetPCLK1Freq>
 8007ee0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009a      	lsls	r2, r3, #2
 8007eec:	441a      	add	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef8:	4a22      	ldr	r2, [pc, #136]	; (8007f84 <UART_SetConfig+0x118>)
 8007efa:	fba2 2303 	umull	r2, r3, r2, r3
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	0119      	lsls	r1, r3, #4
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009a      	lsls	r2, r3, #2
 8007f0c:	441a      	add	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f18:	4b1a      	ldr	r3, [pc, #104]	; (8007f84 <UART_SetConfig+0x118>)
 8007f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	2064      	movs	r0, #100	; 0x64
 8007f22:	fb00 f303 	mul.w	r3, r0, r3
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	3332      	adds	r3, #50	; 0x32
 8007f2c:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <UART_SetConfig+0x118>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f38:	4419      	add	r1, r3
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009a      	lsls	r2, r3, #2
 8007f44:	441a      	add	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f50:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <UART_SetConfig+0x118>)
 8007f52:	fba3 0302 	umull	r0, r3, r3, r2
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	2064      	movs	r0, #100	; 0x64
 8007f5a:	fb00 f303 	mul.w	r3, r0, r3
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	3332      	adds	r3, #50	; 0x32
 8007f64:	4a07      	ldr	r2, [pc, #28]	; (8007f84 <UART_SetConfig+0x118>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	f003 020f 	and.w	r2, r3, #15
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	440a      	add	r2, r1
 8007f76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f78:	bf00      	nop
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	40013800 	.word	0x40013800
 8007f84:	51eb851f 	.word	0x51eb851f

08007f88 <atof>:
 8007f88:	2100      	movs	r1, #0
 8007f8a:	f000 be7d 	b.w	8008c88 <strtod>
	...

08007f90 <gcvt>:
 8007f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f92:	461c      	mov	r4, r3
 8007f94:	4615      	mov	r5, r2
 8007f96:	2300      	movs	r3, #0
 8007f98:	2200      	movs	r2, #0
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	f7f8 fdc0 	bl	8000b24 <__aeabi_dcmplt>
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	b118      	cbz	r0, 8007fb0 <gcvt+0x20>
 8007fa8:	222d      	movs	r2, #45	; 0x2d
 8007faa:	3d01      	subs	r5, #1
 8007fac:	f803 2b01 	strb.w	r2, [r3], #1
 8007fb0:	2267      	movs	r2, #103	; 0x67
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	e9cd 5300 	strd	r5, r3, [sp]
 8007fb8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8007fbc:	4905      	ldr	r1, [pc, #20]	; (8007fd4 <gcvt+0x44>)
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	6808      	ldr	r0, [r1, #0]
 8007fc4:	f000 fee4 	bl	8008d90 <_gcvt>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	bf14      	ite	ne
 8007fcc:	4620      	movne	r0, r4
 8007fce:	2000      	moveq	r0, #0
 8007fd0:	b005      	add	sp, #20
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd4:	20000024 	.word	0x20000024

08007fd8 <__errno>:
 8007fd8:	4b01      	ldr	r3, [pc, #4]	; (8007fe0 <__errno+0x8>)
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	20000024 	.word	0x20000024

08007fe4 <__libc_init_array>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	4d0c      	ldr	r5, [pc, #48]	; (800801c <__libc_init_array+0x38>)
 8007fea:	4c0d      	ldr	r4, [pc, #52]	; (8008020 <__libc_init_array+0x3c>)
 8007fec:	1b64      	subs	r4, r4, r5
 8007fee:	10a4      	asrs	r4, r4, #2
 8007ff0:	42a6      	cmp	r6, r4
 8007ff2:	d109      	bne.n	8008008 <__libc_init_array+0x24>
 8007ff4:	f004 fea2 	bl	800cd3c <_init>
 8007ff8:	2600      	movs	r6, #0
 8007ffa:	4d0a      	ldr	r5, [pc, #40]	; (8008024 <__libc_init_array+0x40>)
 8007ffc:	4c0a      	ldr	r4, [pc, #40]	; (8008028 <__libc_init_array+0x44>)
 8007ffe:	1b64      	subs	r4, r4, r5
 8008000:	10a4      	asrs	r4, r4, #2
 8008002:	42a6      	cmp	r6, r4
 8008004:	d105      	bne.n	8008012 <__libc_init_array+0x2e>
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	f855 3b04 	ldr.w	r3, [r5], #4
 800800c:	4798      	blx	r3
 800800e:	3601      	adds	r6, #1
 8008010:	e7ee      	b.n	8007ff0 <__libc_init_array+0xc>
 8008012:	f855 3b04 	ldr.w	r3, [r5], #4
 8008016:	4798      	blx	r3
 8008018:	3601      	adds	r6, #1
 800801a:	e7f2      	b.n	8008002 <__libc_init_array+0x1e>
 800801c:	0800d408 	.word	0x0800d408
 8008020:	0800d408 	.word	0x0800d408
 8008024:	0800d408 	.word	0x0800d408
 8008028:	0800d40c 	.word	0x0800d40c

0800802c <memcpy>:
 800802c:	440a      	add	r2, r1
 800802e:	4291      	cmp	r1, r2
 8008030:	f100 33ff 	add.w	r3, r0, #4294967295
 8008034:	d100      	bne.n	8008038 <memcpy+0xc>
 8008036:	4770      	bx	lr
 8008038:	b510      	push	{r4, lr}
 800803a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800803e:	4291      	cmp	r1, r2
 8008040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008044:	d1f9      	bne.n	800803a <memcpy+0xe>
 8008046:	bd10      	pop	{r4, pc}

08008048 <memset>:
 8008048:	4603      	mov	r3, r0
 800804a:	4402      	add	r2, r0
 800804c:	4293      	cmp	r3, r2
 800804e:	d100      	bne.n	8008052 <memset+0xa>
 8008050:	4770      	bx	lr
 8008052:	f803 1b01 	strb.w	r1, [r3], #1
 8008056:	e7f9      	b.n	800804c <memset+0x4>

08008058 <sulp>:
 8008058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805c:	460f      	mov	r7, r1
 800805e:	4690      	mov	r8, r2
 8008060:	f001 fe3e 	bl	8009ce0 <__ulp>
 8008064:	4604      	mov	r4, r0
 8008066:	460d      	mov	r5, r1
 8008068:	f1b8 0f00 	cmp.w	r8, #0
 800806c:	d011      	beq.n	8008092 <sulp+0x3a>
 800806e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008076:	2b00      	cmp	r3, #0
 8008078:	dd0b      	ble.n	8008092 <sulp+0x3a>
 800807a:	2400      	movs	r4, #0
 800807c:	051b      	lsls	r3, r3, #20
 800807e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008082:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008086:	4622      	mov	r2, r4
 8008088:	462b      	mov	r3, r5
 800808a:	f7f8 fad9 	bl	8000640 <__aeabi_dmul>
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809a:	0000      	movs	r0, r0
 800809c:	0000      	movs	r0, r0
	...

080080a0 <_strtod_l>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	469b      	mov	fp, r3
 80080a6:	2300      	movs	r3, #0
 80080a8:	b0a1      	sub	sp, #132	; 0x84
 80080aa:	931c      	str	r3, [sp, #112]	; 0x70
 80080ac:	4ba1      	ldr	r3, [pc, #644]	; (8008334 <_strtod_l+0x294>)
 80080ae:	4682      	mov	sl, r0
 80080b0:	681f      	ldr	r7, [r3, #0]
 80080b2:	460e      	mov	r6, r1
 80080b4:	4638      	mov	r0, r7
 80080b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80080b8:	f7f8 f84a 	bl	8000150 <strlen>
 80080bc:	f04f 0800 	mov.w	r8, #0
 80080c0:	4604      	mov	r4, r0
 80080c2:	f04f 0900 	mov.w	r9, #0
 80080c6:	961b      	str	r6, [sp, #108]	; 0x6c
 80080c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080ca:	781a      	ldrb	r2, [r3, #0]
 80080cc:	2a2b      	cmp	r2, #43	; 0x2b
 80080ce:	d04c      	beq.n	800816a <_strtod_l+0xca>
 80080d0:	d83a      	bhi.n	8008148 <_strtod_l+0xa8>
 80080d2:	2a0d      	cmp	r2, #13
 80080d4:	d833      	bhi.n	800813e <_strtod_l+0x9e>
 80080d6:	2a08      	cmp	r2, #8
 80080d8:	d833      	bhi.n	8008142 <_strtod_l+0xa2>
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d03d      	beq.n	800815a <_strtod_l+0xba>
 80080de:	2300      	movs	r3, #0
 80080e0:	930c      	str	r3, [sp, #48]	; 0x30
 80080e2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80080e4:	782b      	ldrb	r3, [r5, #0]
 80080e6:	2b30      	cmp	r3, #48	; 0x30
 80080e8:	f040 80af 	bne.w	800824a <_strtod_l+0x1aa>
 80080ec:	786b      	ldrb	r3, [r5, #1]
 80080ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080f2:	2b58      	cmp	r3, #88	; 0x58
 80080f4:	d16c      	bne.n	80081d0 <_strtod_l+0x130>
 80080f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080f8:	4650      	mov	r0, sl
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	ab1c      	add	r3, sp, #112	; 0x70
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4a8d      	ldr	r2, [pc, #564]	; (8008338 <_strtod_l+0x298>)
 8008102:	f8cd b008 	str.w	fp, [sp, #8]
 8008106:	ab1d      	add	r3, sp, #116	; 0x74
 8008108:	a91b      	add	r1, sp, #108	; 0x6c
 800810a:	f000 ff69 	bl	8008fe0 <__gethex>
 800810e:	f010 0607 	ands.w	r6, r0, #7
 8008112:	4604      	mov	r4, r0
 8008114:	d005      	beq.n	8008122 <_strtod_l+0x82>
 8008116:	2e06      	cmp	r6, #6
 8008118:	d129      	bne.n	800816e <_strtod_l+0xce>
 800811a:	2300      	movs	r3, #0
 800811c:	3501      	adds	r5, #1
 800811e:	951b      	str	r5, [sp, #108]	; 0x6c
 8008120:	930c      	str	r3, [sp, #48]	; 0x30
 8008122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 8596 	bne.w	8008c56 <_strtod_l+0xbb6>
 800812a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800812c:	b1d3      	cbz	r3, 8008164 <_strtod_l+0xc4>
 800812e:	4642      	mov	r2, r8
 8008130:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008134:	4610      	mov	r0, r2
 8008136:	4619      	mov	r1, r3
 8008138:	b021      	add	sp, #132	; 0x84
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	2a20      	cmp	r2, #32
 8008140:	d1cd      	bne.n	80080de <_strtod_l+0x3e>
 8008142:	3301      	adds	r3, #1
 8008144:	931b      	str	r3, [sp, #108]	; 0x6c
 8008146:	e7bf      	b.n	80080c8 <_strtod_l+0x28>
 8008148:	2a2d      	cmp	r2, #45	; 0x2d
 800814a:	d1c8      	bne.n	80080de <_strtod_l+0x3e>
 800814c:	2201      	movs	r2, #1
 800814e:	920c      	str	r2, [sp, #48]	; 0x30
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	921b      	str	r2, [sp, #108]	; 0x6c
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1c3      	bne.n	80080e2 <_strtod_l+0x42>
 800815a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800815c:	961b      	str	r6, [sp, #108]	; 0x6c
 800815e:	2b00      	cmp	r3, #0
 8008160:	f040 8577 	bne.w	8008c52 <_strtod_l+0xbb2>
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	e7e4      	b.n	8008134 <_strtod_l+0x94>
 800816a:	2200      	movs	r2, #0
 800816c:	e7ef      	b.n	800814e <_strtod_l+0xae>
 800816e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008170:	b13a      	cbz	r2, 8008182 <_strtod_l+0xe2>
 8008172:	2135      	movs	r1, #53	; 0x35
 8008174:	a81e      	add	r0, sp, #120	; 0x78
 8008176:	f001 fed3 	bl	8009f20 <__copybits>
 800817a:	4650      	mov	r0, sl
 800817c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800817e:	f001 fa7f 	bl	8009680 <_Bfree>
 8008182:	3e01      	subs	r6, #1
 8008184:	2e05      	cmp	r6, #5
 8008186:	d807      	bhi.n	8008198 <_strtod_l+0xf8>
 8008188:	e8df f006 	tbb	[pc, r6]
 800818c:	1d180b0e 	.word	0x1d180b0e
 8008190:	030e      	.short	0x030e
 8008192:	f04f 0900 	mov.w	r9, #0
 8008196:	46c8      	mov	r8, r9
 8008198:	0721      	lsls	r1, r4, #28
 800819a:	d5c2      	bpl.n	8008122 <_strtod_l+0x82>
 800819c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80081a0:	e7bf      	b.n	8008122 <_strtod_l+0x82>
 80081a2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80081a6:	e7f7      	b.n	8008198 <_strtod_l+0xf8>
 80081a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80081aa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80081ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80081ba:	e7ed      	b.n	8008198 <_strtod_l+0xf8>
 80081bc:	f04f 0800 	mov.w	r8, #0
 80081c0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800833c <_strtod_l+0x29c>
 80081c4:	e7e8      	b.n	8008198 <_strtod_l+0xf8>
 80081c6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80081ca:	f04f 38ff 	mov.w	r8, #4294967295
 80081ce:	e7e3      	b.n	8008198 <_strtod_l+0xf8>
 80081d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b30      	cmp	r3, #48	; 0x30
 80081da:	d0f9      	beq.n	80081d0 <_strtod_l+0x130>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0a0      	beq.n	8008122 <_strtod_l+0x82>
 80081e0:	2301      	movs	r3, #1
 80081e2:	9307      	str	r3, [sp, #28]
 80081e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081e6:	220a      	movs	r2, #10
 80081e8:	9308      	str	r3, [sp, #32]
 80081ea:	2300      	movs	r3, #0
 80081ec:	469b      	mov	fp, r3
 80081ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80081f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80081f4:	7805      	ldrb	r5, [r0, #0]
 80081f6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80081fa:	b2d9      	uxtb	r1, r3
 80081fc:	2909      	cmp	r1, #9
 80081fe:	d926      	bls.n	800824e <_strtod_l+0x1ae>
 8008200:	4622      	mov	r2, r4
 8008202:	4639      	mov	r1, r7
 8008204:	f001 ff56 	bl	800a0b4 <strncmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	d032      	beq.n	8008272 <_strtod_l+0x1d2>
 800820c:	2000      	movs	r0, #0
 800820e:	462b      	mov	r3, r5
 8008210:	465c      	mov	r4, fp
 8008212:	4602      	mov	r2, r0
 8008214:	9004      	str	r0, [sp, #16]
 8008216:	2b65      	cmp	r3, #101	; 0x65
 8008218:	d001      	beq.n	800821e <_strtod_l+0x17e>
 800821a:	2b45      	cmp	r3, #69	; 0x45
 800821c:	d113      	bne.n	8008246 <_strtod_l+0x1a6>
 800821e:	b91c      	cbnz	r4, 8008228 <_strtod_l+0x188>
 8008220:	9b07      	ldr	r3, [sp, #28]
 8008222:	4303      	orrs	r3, r0
 8008224:	d099      	beq.n	800815a <_strtod_l+0xba>
 8008226:	2400      	movs	r4, #0
 8008228:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800822a:	1c73      	adds	r3, r6, #1
 800822c:	931b      	str	r3, [sp, #108]	; 0x6c
 800822e:	7873      	ldrb	r3, [r6, #1]
 8008230:	2b2b      	cmp	r3, #43	; 0x2b
 8008232:	d078      	beq.n	8008326 <_strtod_l+0x286>
 8008234:	2b2d      	cmp	r3, #45	; 0x2d
 8008236:	d07b      	beq.n	8008330 <_strtod_l+0x290>
 8008238:	2700      	movs	r7, #0
 800823a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800823e:	2909      	cmp	r1, #9
 8008240:	f240 8082 	bls.w	8008348 <_strtod_l+0x2a8>
 8008244:	961b      	str	r6, [sp, #108]	; 0x6c
 8008246:	2500      	movs	r5, #0
 8008248:	e09e      	b.n	8008388 <_strtod_l+0x2e8>
 800824a:	2300      	movs	r3, #0
 800824c:	e7c9      	b.n	80081e2 <_strtod_l+0x142>
 800824e:	f1bb 0f08 	cmp.w	fp, #8
 8008252:	bfd5      	itete	le
 8008254:	9906      	ldrle	r1, [sp, #24]
 8008256:	9905      	ldrgt	r1, [sp, #20]
 8008258:	fb02 3301 	mlale	r3, r2, r1, r3
 800825c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008260:	f100 0001 	add.w	r0, r0, #1
 8008264:	bfd4      	ite	le
 8008266:	9306      	strle	r3, [sp, #24]
 8008268:	9305      	strgt	r3, [sp, #20]
 800826a:	f10b 0b01 	add.w	fp, fp, #1
 800826e:	901b      	str	r0, [sp, #108]	; 0x6c
 8008270:	e7bf      	b.n	80081f2 <_strtod_l+0x152>
 8008272:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008274:	191a      	adds	r2, r3, r4
 8008276:	921b      	str	r2, [sp, #108]	; 0x6c
 8008278:	5d1b      	ldrb	r3, [r3, r4]
 800827a:	f1bb 0f00 	cmp.w	fp, #0
 800827e:	d036      	beq.n	80082ee <_strtod_l+0x24e>
 8008280:	465c      	mov	r4, fp
 8008282:	9004      	str	r0, [sp, #16]
 8008284:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008288:	2a09      	cmp	r2, #9
 800828a:	d912      	bls.n	80082b2 <_strtod_l+0x212>
 800828c:	2201      	movs	r2, #1
 800828e:	e7c2      	b.n	8008216 <_strtod_l+0x176>
 8008290:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008292:	3001      	adds	r0, #1
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	921b      	str	r2, [sp, #108]	; 0x6c
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	2b30      	cmp	r3, #48	; 0x30
 800829c:	d0f8      	beq.n	8008290 <_strtod_l+0x1f0>
 800829e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80082a2:	2a08      	cmp	r2, #8
 80082a4:	f200 84dc 	bhi.w	8008c60 <_strtod_l+0xbc0>
 80082a8:	9004      	str	r0, [sp, #16]
 80082aa:	2000      	movs	r0, #0
 80082ac:	4604      	mov	r4, r0
 80082ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082b0:	9208      	str	r2, [sp, #32]
 80082b2:	3b30      	subs	r3, #48	; 0x30
 80082b4:	f100 0201 	add.w	r2, r0, #1
 80082b8:	d013      	beq.n	80082e2 <_strtod_l+0x242>
 80082ba:	9904      	ldr	r1, [sp, #16]
 80082bc:	1905      	adds	r5, r0, r4
 80082be:	4411      	add	r1, r2
 80082c0:	9104      	str	r1, [sp, #16]
 80082c2:	4622      	mov	r2, r4
 80082c4:	210a      	movs	r1, #10
 80082c6:	42aa      	cmp	r2, r5
 80082c8:	d113      	bne.n	80082f2 <_strtod_l+0x252>
 80082ca:	1822      	adds	r2, r4, r0
 80082cc:	2a08      	cmp	r2, #8
 80082ce:	f104 0401 	add.w	r4, r4, #1
 80082d2:	4404      	add	r4, r0
 80082d4:	dc1b      	bgt.n	800830e <_strtod_l+0x26e>
 80082d6:	220a      	movs	r2, #10
 80082d8:	9906      	ldr	r1, [sp, #24]
 80082da:	fb02 3301 	mla	r3, r2, r1, r3
 80082de:	9306      	str	r3, [sp, #24]
 80082e0:	2200      	movs	r2, #0
 80082e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082e4:	4610      	mov	r0, r2
 80082e6:	1c59      	adds	r1, r3, #1
 80082e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	e7ca      	b.n	8008284 <_strtod_l+0x1e4>
 80082ee:	4658      	mov	r0, fp
 80082f0:	e7d3      	b.n	800829a <_strtod_l+0x1fa>
 80082f2:	2a08      	cmp	r2, #8
 80082f4:	dc04      	bgt.n	8008300 <_strtod_l+0x260>
 80082f6:	9f06      	ldr	r7, [sp, #24]
 80082f8:	434f      	muls	r7, r1
 80082fa:	9706      	str	r7, [sp, #24]
 80082fc:	3201      	adds	r2, #1
 80082fe:	e7e2      	b.n	80082c6 <_strtod_l+0x226>
 8008300:	1c57      	adds	r7, r2, #1
 8008302:	2f10      	cmp	r7, #16
 8008304:	bfde      	ittt	le
 8008306:	9f05      	ldrle	r7, [sp, #20]
 8008308:	434f      	mulle	r7, r1
 800830a:	9705      	strle	r7, [sp, #20]
 800830c:	e7f6      	b.n	80082fc <_strtod_l+0x25c>
 800830e:	2c10      	cmp	r4, #16
 8008310:	bfdf      	itttt	le
 8008312:	220a      	movle	r2, #10
 8008314:	9905      	ldrle	r1, [sp, #20]
 8008316:	fb02 3301 	mlale	r3, r2, r1, r3
 800831a:	9305      	strle	r3, [sp, #20]
 800831c:	e7e0      	b.n	80082e0 <_strtod_l+0x240>
 800831e:	2300      	movs	r3, #0
 8008320:	2201      	movs	r2, #1
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	e77c      	b.n	8008220 <_strtod_l+0x180>
 8008326:	2700      	movs	r7, #0
 8008328:	1cb3      	adds	r3, r6, #2
 800832a:	931b      	str	r3, [sp, #108]	; 0x6c
 800832c:	78b3      	ldrb	r3, [r6, #2]
 800832e:	e784      	b.n	800823a <_strtod_l+0x19a>
 8008330:	2701      	movs	r7, #1
 8008332:	e7f9      	b.n	8008328 <_strtod_l+0x288>
 8008334:	0800ce64 	.word	0x0800ce64
 8008338:	0800cd94 	.word	0x0800cd94
 800833c:	7ff00000 	.word	0x7ff00000
 8008340:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008342:	1c59      	adds	r1, r3, #1
 8008344:	911b      	str	r1, [sp, #108]	; 0x6c
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b30      	cmp	r3, #48	; 0x30
 800834a:	d0f9      	beq.n	8008340 <_strtod_l+0x2a0>
 800834c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008350:	2908      	cmp	r1, #8
 8008352:	f63f af78 	bhi.w	8008246 <_strtod_l+0x1a6>
 8008356:	f04f 0e0a 	mov.w	lr, #10
 800835a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800835e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008360:	9309      	str	r3, [sp, #36]	; 0x24
 8008362:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008364:	1c59      	adds	r1, r3, #1
 8008366:	911b      	str	r1, [sp, #108]	; 0x6c
 8008368:	785b      	ldrb	r3, [r3, #1]
 800836a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800836e:	2d09      	cmp	r5, #9
 8008370:	d935      	bls.n	80083de <_strtod_l+0x33e>
 8008372:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008374:	1b49      	subs	r1, r1, r5
 8008376:	2908      	cmp	r1, #8
 8008378:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800837c:	dc02      	bgt.n	8008384 <_strtod_l+0x2e4>
 800837e:	4565      	cmp	r5, ip
 8008380:	bfa8      	it	ge
 8008382:	4665      	movge	r5, ip
 8008384:	b107      	cbz	r7, 8008388 <_strtod_l+0x2e8>
 8008386:	426d      	negs	r5, r5
 8008388:	2c00      	cmp	r4, #0
 800838a:	d14c      	bne.n	8008426 <_strtod_l+0x386>
 800838c:	9907      	ldr	r1, [sp, #28]
 800838e:	4301      	orrs	r1, r0
 8008390:	f47f aec7 	bne.w	8008122 <_strtod_l+0x82>
 8008394:	2a00      	cmp	r2, #0
 8008396:	f47f aee0 	bne.w	800815a <_strtod_l+0xba>
 800839a:	2b69      	cmp	r3, #105	; 0x69
 800839c:	d026      	beq.n	80083ec <_strtod_l+0x34c>
 800839e:	dc23      	bgt.n	80083e8 <_strtod_l+0x348>
 80083a0:	2b49      	cmp	r3, #73	; 0x49
 80083a2:	d023      	beq.n	80083ec <_strtod_l+0x34c>
 80083a4:	2b4e      	cmp	r3, #78	; 0x4e
 80083a6:	f47f aed8 	bne.w	800815a <_strtod_l+0xba>
 80083aa:	499c      	ldr	r1, [pc, #624]	; (800861c <_strtod_l+0x57c>)
 80083ac:	a81b      	add	r0, sp, #108	; 0x6c
 80083ae:	f001 f865 	bl	800947c <__match>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	f43f aed1 	beq.w	800815a <_strtod_l+0xba>
 80083b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2b28      	cmp	r3, #40	; 0x28
 80083be:	d12c      	bne.n	800841a <_strtod_l+0x37a>
 80083c0:	4997      	ldr	r1, [pc, #604]	; (8008620 <_strtod_l+0x580>)
 80083c2:	aa1e      	add	r2, sp, #120	; 0x78
 80083c4:	a81b      	add	r0, sp, #108	; 0x6c
 80083c6:	f001 f86d 	bl	80094a4 <__hexnan>
 80083ca:	2805      	cmp	r0, #5
 80083cc:	d125      	bne.n	800841a <_strtod_l+0x37a>
 80083ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083d0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80083d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80083d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80083dc:	e6a1      	b.n	8008122 <_strtod_l+0x82>
 80083de:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80083e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80083e6:	e7bc      	b.n	8008362 <_strtod_l+0x2c2>
 80083e8:	2b6e      	cmp	r3, #110	; 0x6e
 80083ea:	e7dc      	b.n	80083a6 <_strtod_l+0x306>
 80083ec:	498d      	ldr	r1, [pc, #564]	; (8008624 <_strtod_l+0x584>)
 80083ee:	a81b      	add	r0, sp, #108	; 0x6c
 80083f0:	f001 f844 	bl	800947c <__match>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f43f aeb0 	beq.w	800815a <_strtod_l+0xba>
 80083fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083fc:	498a      	ldr	r1, [pc, #552]	; (8008628 <_strtod_l+0x588>)
 80083fe:	3b01      	subs	r3, #1
 8008400:	a81b      	add	r0, sp, #108	; 0x6c
 8008402:	931b      	str	r3, [sp, #108]	; 0x6c
 8008404:	f001 f83a 	bl	800947c <__match>
 8008408:	b910      	cbnz	r0, 8008410 <_strtod_l+0x370>
 800840a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800840c:	3301      	adds	r3, #1
 800840e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008410:	f04f 0800 	mov.w	r8, #0
 8008414:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008638 <_strtod_l+0x598>
 8008418:	e683      	b.n	8008122 <_strtod_l+0x82>
 800841a:	4884      	ldr	r0, [pc, #528]	; (800862c <_strtod_l+0x58c>)
 800841c:	f001 fe2c 	bl	800a078 <nan>
 8008420:	4680      	mov	r8, r0
 8008422:	4689      	mov	r9, r1
 8008424:	e67d      	b.n	8008122 <_strtod_l+0x82>
 8008426:	9b04      	ldr	r3, [sp, #16]
 8008428:	f1bb 0f00 	cmp.w	fp, #0
 800842c:	bf08      	it	eq
 800842e:	46a3      	moveq	fp, r4
 8008430:	1aeb      	subs	r3, r5, r3
 8008432:	2c10      	cmp	r4, #16
 8008434:	9806      	ldr	r0, [sp, #24]
 8008436:	4626      	mov	r6, r4
 8008438:	9307      	str	r3, [sp, #28]
 800843a:	bfa8      	it	ge
 800843c:	2610      	movge	r6, #16
 800843e:	f7f8 f885 	bl	800054c <__aeabi_ui2d>
 8008442:	2c09      	cmp	r4, #9
 8008444:	4680      	mov	r8, r0
 8008446:	4689      	mov	r9, r1
 8008448:	dd13      	ble.n	8008472 <_strtod_l+0x3d2>
 800844a:	4b79      	ldr	r3, [pc, #484]	; (8008630 <_strtod_l+0x590>)
 800844c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008450:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008454:	f7f8 f8f4 	bl	8000640 <__aeabi_dmul>
 8008458:	4680      	mov	r8, r0
 800845a:	9805      	ldr	r0, [sp, #20]
 800845c:	4689      	mov	r9, r1
 800845e:	f7f8 f875 	bl	800054c <__aeabi_ui2d>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	f7f7 ff33 	bl	80002d4 <__adddf3>
 800846e:	4680      	mov	r8, r0
 8008470:	4689      	mov	r9, r1
 8008472:	2c0f      	cmp	r4, #15
 8008474:	dc36      	bgt.n	80084e4 <_strtod_l+0x444>
 8008476:	9b07      	ldr	r3, [sp, #28]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f43f ae52 	beq.w	8008122 <_strtod_l+0x82>
 800847e:	dd22      	ble.n	80084c6 <_strtod_l+0x426>
 8008480:	2b16      	cmp	r3, #22
 8008482:	dc09      	bgt.n	8008498 <_strtod_l+0x3f8>
 8008484:	4c6a      	ldr	r4, [pc, #424]	; (8008630 <_strtod_l+0x590>)
 8008486:	4642      	mov	r2, r8
 8008488:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800848c:	464b      	mov	r3, r9
 800848e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008492:	f7f8 f8d5 	bl	8000640 <__aeabi_dmul>
 8008496:	e7c3      	b.n	8008420 <_strtod_l+0x380>
 8008498:	9a07      	ldr	r2, [sp, #28]
 800849a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800849e:	4293      	cmp	r3, r2
 80084a0:	db20      	blt.n	80084e4 <_strtod_l+0x444>
 80084a2:	4d63      	ldr	r5, [pc, #396]	; (8008630 <_strtod_l+0x590>)
 80084a4:	f1c4 040f 	rsb	r4, r4, #15
 80084a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80084ac:	4642      	mov	r2, r8
 80084ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b2:	464b      	mov	r3, r9
 80084b4:	f7f8 f8c4 	bl	8000640 <__aeabi_dmul>
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	1b1c      	subs	r4, r3, r4
 80084bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80084c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084c4:	e7e5      	b.n	8008492 <_strtod_l+0x3f2>
 80084c6:	9b07      	ldr	r3, [sp, #28]
 80084c8:	3316      	adds	r3, #22
 80084ca:	db0b      	blt.n	80084e4 <_strtod_l+0x444>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	4a58      	ldr	r2, [pc, #352]	; (8008630 <_strtod_l+0x590>)
 80084d0:	1b5d      	subs	r5, r3, r5
 80084d2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80084d6:	4640      	mov	r0, r8
 80084d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f8 f9d9 	bl	8000894 <__aeabi_ddiv>
 80084e2:	e79d      	b.n	8008420 <_strtod_l+0x380>
 80084e4:	9b07      	ldr	r3, [sp, #28]
 80084e6:	1ba6      	subs	r6, r4, r6
 80084e8:	441e      	add	r6, r3
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	dd71      	ble.n	80085d2 <_strtod_l+0x532>
 80084ee:	f016 030f 	ands.w	r3, r6, #15
 80084f2:	d00a      	beq.n	800850a <_strtod_l+0x46a>
 80084f4:	494e      	ldr	r1, [pc, #312]	; (8008630 <_strtod_l+0x590>)
 80084f6:	4642      	mov	r2, r8
 80084f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008500:	464b      	mov	r3, r9
 8008502:	f7f8 f89d 	bl	8000640 <__aeabi_dmul>
 8008506:	4680      	mov	r8, r0
 8008508:	4689      	mov	r9, r1
 800850a:	f036 060f 	bics.w	r6, r6, #15
 800850e:	d050      	beq.n	80085b2 <_strtod_l+0x512>
 8008510:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008514:	dd27      	ble.n	8008566 <_strtod_l+0x4c6>
 8008516:	f04f 0b00 	mov.w	fp, #0
 800851a:	f8cd b010 	str.w	fp, [sp, #16]
 800851e:	f8cd b020 	str.w	fp, [sp, #32]
 8008522:	f8cd b018 	str.w	fp, [sp, #24]
 8008526:	2322      	movs	r3, #34	; 0x22
 8008528:	f04f 0800 	mov.w	r8, #0
 800852c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008638 <_strtod_l+0x598>
 8008530:	f8ca 3000 	str.w	r3, [sl]
 8008534:	9b08      	ldr	r3, [sp, #32]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f43f adf3 	beq.w	8008122 <_strtod_l+0x82>
 800853c:	4650      	mov	r0, sl
 800853e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008540:	f001 f89e 	bl	8009680 <_Bfree>
 8008544:	4650      	mov	r0, sl
 8008546:	9906      	ldr	r1, [sp, #24]
 8008548:	f001 f89a 	bl	8009680 <_Bfree>
 800854c:	4650      	mov	r0, sl
 800854e:	9904      	ldr	r1, [sp, #16]
 8008550:	f001 f896 	bl	8009680 <_Bfree>
 8008554:	4650      	mov	r0, sl
 8008556:	9908      	ldr	r1, [sp, #32]
 8008558:	f001 f892 	bl	8009680 <_Bfree>
 800855c:	4659      	mov	r1, fp
 800855e:	4650      	mov	r0, sl
 8008560:	f001 f88e 	bl	8009680 <_Bfree>
 8008564:	e5dd      	b.n	8008122 <_strtod_l+0x82>
 8008566:	2300      	movs	r3, #0
 8008568:	4640      	mov	r0, r8
 800856a:	4649      	mov	r1, r9
 800856c:	461f      	mov	r7, r3
 800856e:	1136      	asrs	r6, r6, #4
 8008570:	2e01      	cmp	r6, #1
 8008572:	dc21      	bgt.n	80085b8 <_strtod_l+0x518>
 8008574:	b10b      	cbz	r3, 800857a <_strtod_l+0x4da>
 8008576:	4680      	mov	r8, r0
 8008578:	4689      	mov	r9, r1
 800857a:	4b2e      	ldr	r3, [pc, #184]	; (8008634 <_strtod_l+0x594>)
 800857c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008580:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008584:	4642      	mov	r2, r8
 8008586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800858a:	464b      	mov	r3, r9
 800858c:	f7f8 f858 	bl	8000640 <__aeabi_dmul>
 8008590:	4b29      	ldr	r3, [pc, #164]	; (8008638 <_strtod_l+0x598>)
 8008592:	460a      	mov	r2, r1
 8008594:	400b      	ands	r3, r1
 8008596:	4929      	ldr	r1, [pc, #164]	; (800863c <_strtod_l+0x59c>)
 8008598:	4680      	mov	r8, r0
 800859a:	428b      	cmp	r3, r1
 800859c:	d8bb      	bhi.n	8008516 <_strtod_l+0x476>
 800859e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085a2:	428b      	cmp	r3, r1
 80085a4:	bf86      	itte	hi
 80085a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80085aa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008640 <_strtod_l+0x5a0>
 80085ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80085b2:	2300      	movs	r3, #0
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	e07e      	b.n	80086b6 <_strtod_l+0x616>
 80085b8:	07f2      	lsls	r2, r6, #31
 80085ba:	d507      	bpl.n	80085cc <_strtod_l+0x52c>
 80085bc:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <_strtod_l+0x594>)
 80085be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f7f8 f83b 	bl	8000640 <__aeabi_dmul>
 80085ca:	2301      	movs	r3, #1
 80085cc:	3701      	adds	r7, #1
 80085ce:	1076      	asrs	r6, r6, #1
 80085d0:	e7ce      	b.n	8008570 <_strtod_l+0x4d0>
 80085d2:	d0ee      	beq.n	80085b2 <_strtod_l+0x512>
 80085d4:	4276      	negs	r6, r6
 80085d6:	f016 020f 	ands.w	r2, r6, #15
 80085da:	d00a      	beq.n	80085f2 <_strtod_l+0x552>
 80085dc:	4b14      	ldr	r3, [pc, #80]	; (8008630 <_strtod_l+0x590>)
 80085de:	4640      	mov	r0, r8
 80085e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085e4:	4649      	mov	r1, r9
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f8 f953 	bl	8000894 <__aeabi_ddiv>
 80085ee:	4680      	mov	r8, r0
 80085f0:	4689      	mov	r9, r1
 80085f2:	1136      	asrs	r6, r6, #4
 80085f4:	d0dd      	beq.n	80085b2 <_strtod_l+0x512>
 80085f6:	2e1f      	cmp	r6, #31
 80085f8:	dd24      	ble.n	8008644 <_strtod_l+0x5a4>
 80085fa:	f04f 0b00 	mov.w	fp, #0
 80085fe:	f8cd b010 	str.w	fp, [sp, #16]
 8008602:	f8cd b020 	str.w	fp, [sp, #32]
 8008606:	f8cd b018 	str.w	fp, [sp, #24]
 800860a:	2322      	movs	r3, #34	; 0x22
 800860c:	f04f 0800 	mov.w	r8, #0
 8008610:	f04f 0900 	mov.w	r9, #0
 8008614:	f8ca 3000 	str.w	r3, [sl]
 8008618:	e78c      	b.n	8008534 <_strtod_l+0x494>
 800861a:	bf00      	nop
 800861c:	0800cd8f 	.word	0x0800cd8f
 8008620:	0800cda8 	.word	0x0800cda8
 8008624:	0800cd8c 	.word	0x0800cd8c
 8008628:	0800d12c 	.word	0x0800d12c
 800862c:	0800d027 	.word	0x0800d027
 8008630:	0800cf18 	.word	0x0800cf18
 8008634:	0800cef0 	.word	0x0800cef0
 8008638:	7ff00000 	.word	0x7ff00000
 800863c:	7ca00000 	.word	0x7ca00000
 8008640:	7fefffff 	.word	0x7fefffff
 8008644:	f016 0310 	ands.w	r3, r6, #16
 8008648:	bf18      	it	ne
 800864a:	236a      	movne	r3, #106	; 0x6a
 800864c:	4640      	mov	r0, r8
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	4649      	mov	r1, r9
 8008652:	2300      	movs	r3, #0
 8008654:	4fb2      	ldr	r7, [pc, #712]	; (8008920 <_strtod_l+0x880>)
 8008656:	07f2      	lsls	r2, r6, #31
 8008658:	d504      	bpl.n	8008664 <_strtod_l+0x5c4>
 800865a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865e:	f7f7 ffef 	bl	8000640 <__aeabi_dmul>
 8008662:	2301      	movs	r3, #1
 8008664:	1076      	asrs	r6, r6, #1
 8008666:	f107 0708 	add.w	r7, r7, #8
 800866a:	d1f4      	bne.n	8008656 <_strtod_l+0x5b6>
 800866c:	b10b      	cbz	r3, 8008672 <_strtod_l+0x5d2>
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	b1bb      	cbz	r3, 80086a6 <_strtod_l+0x606>
 8008676:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800867a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800867e:	2b00      	cmp	r3, #0
 8008680:	4649      	mov	r1, r9
 8008682:	dd10      	ble.n	80086a6 <_strtod_l+0x606>
 8008684:	2b1f      	cmp	r3, #31
 8008686:	f340 812b 	ble.w	80088e0 <_strtod_l+0x840>
 800868a:	2b34      	cmp	r3, #52	; 0x34
 800868c:	bfd8      	it	le
 800868e:	f04f 32ff 	movle.w	r2, #4294967295
 8008692:	f04f 0800 	mov.w	r8, #0
 8008696:	bfcf      	iteee	gt
 8008698:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800869c:	3b20      	suble	r3, #32
 800869e:	fa02 f303 	lslle.w	r3, r2, r3
 80086a2:	ea03 0901 	andle.w	r9, r3, r1
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	4640      	mov	r0, r8
 80086ac:	4649      	mov	r1, r9
 80086ae:	f7f8 fa2f 	bl	8000b10 <__aeabi_dcmpeq>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d1a1      	bne.n	80085fa <_strtod_l+0x55a>
 80086b6:	9b06      	ldr	r3, [sp, #24]
 80086b8:	465a      	mov	r2, fp
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	4650      	mov	r0, sl
 80086be:	4623      	mov	r3, r4
 80086c0:	9908      	ldr	r1, [sp, #32]
 80086c2:	f001 f849 	bl	8009758 <__s2b>
 80086c6:	9008      	str	r0, [sp, #32]
 80086c8:	2800      	cmp	r0, #0
 80086ca:	f43f af24 	beq.w	8008516 <_strtod_l+0x476>
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	f04f 0b00 	mov.w	fp, #0
 80086d4:	1b5d      	subs	r5, r3, r5
 80086d6:	9b07      	ldr	r3, [sp, #28]
 80086d8:	f8cd b010 	str.w	fp, [sp, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfb4      	ite	lt
 80086e0:	462b      	movlt	r3, r5
 80086e2:	2300      	movge	r3, #0
 80086e4:	930e      	str	r3, [sp, #56]	; 0x38
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80086ec:	9316      	str	r3, [sp, #88]	; 0x58
 80086ee:	9b08      	ldr	r3, [sp, #32]
 80086f0:	4650      	mov	r0, sl
 80086f2:	6859      	ldr	r1, [r3, #4]
 80086f4:	f000 ff84 	bl	8009600 <_Balloc>
 80086f8:	9006      	str	r0, [sp, #24]
 80086fa:	2800      	cmp	r0, #0
 80086fc:	f43f af13 	beq.w	8008526 <_strtod_l+0x486>
 8008700:	9b08      	ldr	r3, [sp, #32]
 8008702:	300c      	adds	r0, #12
 8008704:	691a      	ldr	r2, [r3, #16]
 8008706:	f103 010c 	add.w	r1, r3, #12
 800870a:	3202      	adds	r2, #2
 800870c:	0092      	lsls	r2, r2, #2
 800870e:	f7ff fc8d 	bl	800802c <memcpy>
 8008712:	ab1e      	add	r3, sp, #120	; 0x78
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	ab1d      	add	r3, sp, #116	; 0x74
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	4642      	mov	r2, r8
 800871c:	464b      	mov	r3, r9
 800871e:	4650      	mov	r0, sl
 8008720:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8008724:	f001 fb56 	bl	8009dd4 <__d2b>
 8008728:	901c      	str	r0, [sp, #112]	; 0x70
 800872a:	2800      	cmp	r0, #0
 800872c:	f43f aefb 	beq.w	8008526 <_strtod_l+0x486>
 8008730:	2101      	movs	r1, #1
 8008732:	4650      	mov	r0, sl
 8008734:	f001 f8a8 	bl	8009888 <__i2b>
 8008738:	4603      	mov	r3, r0
 800873a:	9004      	str	r0, [sp, #16]
 800873c:	2800      	cmp	r0, #0
 800873e:	f43f aef2 	beq.w	8008526 <_strtod_l+0x486>
 8008742:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008744:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008746:	2d00      	cmp	r5, #0
 8008748:	bfab      	itete	ge
 800874a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800874c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800874e:	18ee      	addge	r6, r5, r3
 8008750:	1b5c      	sublt	r4, r3, r5
 8008752:	9b05      	ldr	r3, [sp, #20]
 8008754:	bfa8      	it	ge
 8008756:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008758:	eba5 0503 	sub.w	r5, r5, r3
 800875c:	4415      	add	r5, r2
 800875e:	4b71      	ldr	r3, [pc, #452]	; (8008924 <_strtod_l+0x884>)
 8008760:	f105 35ff 	add.w	r5, r5, #4294967295
 8008764:	bfb8      	it	lt
 8008766:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008768:	429d      	cmp	r5, r3
 800876a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800876e:	f280 80c9 	bge.w	8008904 <_strtod_l+0x864>
 8008772:	1b5b      	subs	r3, r3, r5
 8008774:	2b1f      	cmp	r3, #31
 8008776:	f04f 0701 	mov.w	r7, #1
 800877a:	eba2 0203 	sub.w	r2, r2, r3
 800877e:	f300 80b6 	bgt.w	80088ee <_strtod_l+0x84e>
 8008782:	2500      	movs	r5, #0
 8008784:	fa07 f303 	lsl.w	r3, r7, r3
 8008788:	930f      	str	r3, [sp, #60]	; 0x3c
 800878a:	18b7      	adds	r7, r6, r2
 800878c:	9b05      	ldr	r3, [sp, #20]
 800878e:	42be      	cmp	r6, r7
 8008790:	4414      	add	r4, r2
 8008792:	441c      	add	r4, r3
 8008794:	4633      	mov	r3, r6
 8008796:	bfa8      	it	ge
 8008798:	463b      	movge	r3, r7
 800879a:	42a3      	cmp	r3, r4
 800879c:	bfa8      	it	ge
 800879e:	4623      	movge	r3, r4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bfc2      	ittt	gt
 80087a4:	1aff      	subgt	r7, r7, r3
 80087a6:	1ae4      	subgt	r4, r4, r3
 80087a8:	1af6      	subgt	r6, r6, r3
 80087aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd17      	ble.n	80087e0 <_strtod_l+0x740>
 80087b0:	461a      	mov	r2, r3
 80087b2:	4650      	mov	r0, sl
 80087b4:	9904      	ldr	r1, [sp, #16]
 80087b6:	f001 f921 	bl	80099fc <__pow5mult>
 80087ba:	9004      	str	r0, [sp, #16]
 80087bc:	2800      	cmp	r0, #0
 80087be:	f43f aeb2 	beq.w	8008526 <_strtod_l+0x486>
 80087c2:	4601      	mov	r1, r0
 80087c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80087c6:	4650      	mov	r0, sl
 80087c8:	f001 f874 	bl	80098b4 <__multiply>
 80087cc:	9009      	str	r0, [sp, #36]	; 0x24
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f43f aea9 	beq.w	8008526 <_strtod_l+0x486>
 80087d4:	4650      	mov	r0, sl
 80087d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087d8:	f000 ff52 	bl	8009680 <_Bfree>
 80087dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087de:	931c      	str	r3, [sp, #112]	; 0x70
 80087e0:	2f00      	cmp	r7, #0
 80087e2:	f300 8093 	bgt.w	800890c <_strtod_l+0x86c>
 80087e6:	9b07      	ldr	r3, [sp, #28]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dd08      	ble.n	80087fe <_strtod_l+0x75e>
 80087ec:	4650      	mov	r0, sl
 80087ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80087f0:	9906      	ldr	r1, [sp, #24]
 80087f2:	f001 f903 	bl	80099fc <__pow5mult>
 80087f6:	9006      	str	r0, [sp, #24]
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f43f ae94 	beq.w	8008526 <_strtod_l+0x486>
 80087fe:	2c00      	cmp	r4, #0
 8008800:	dd08      	ble.n	8008814 <_strtod_l+0x774>
 8008802:	4622      	mov	r2, r4
 8008804:	4650      	mov	r0, sl
 8008806:	9906      	ldr	r1, [sp, #24]
 8008808:	f001 f952 	bl	8009ab0 <__lshift>
 800880c:	9006      	str	r0, [sp, #24]
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f ae89 	beq.w	8008526 <_strtod_l+0x486>
 8008814:	2e00      	cmp	r6, #0
 8008816:	dd08      	ble.n	800882a <_strtod_l+0x78a>
 8008818:	4632      	mov	r2, r6
 800881a:	4650      	mov	r0, sl
 800881c:	9904      	ldr	r1, [sp, #16]
 800881e:	f001 f947 	bl	8009ab0 <__lshift>
 8008822:	9004      	str	r0, [sp, #16]
 8008824:	2800      	cmp	r0, #0
 8008826:	f43f ae7e 	beq.w	8008526 <_strtod_l+0x486>
 800882a:	4650      	mov	r0, sl
 800882c:	9a06      	ldr	r2, [sp, #24]
 800882e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008830:	f001 f9c6 	bl	8009bc0 <__mdiff>
 8008834:	4683      	mov	fp, r0
 8008836:	2800      	cmp	r0, #0
 8008838:	f43f ae75 	beq.w	8008526 <_strtod_l+0x486>
 800883c:	2400      	movs	r4, #0
 800883e:	68c3      	ldr	r3, [r0, #12]
 8008840:	9904      	ldr	r1, [sp, #16]
 8008842:	60c4      	str	r4, [r0, #12]
 8008844:	930d      	str	r3, [sp, #52]	; 0x34
 8008846:	f001 f99f 	bl	8009b88 <__mcmp>
 800884a:	42a0      	cmp	r0, r4
 800884c:	da70      	bge.n	8008930 <_strtod_l+0x890>
 800884e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008850:	ea53 0308 	orrs.w	r3, r3, r8
 8008854:	f040 8096 	bne.w	8008984 <_strtod_l+0x8e4>
 8008858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 8091 	bne.w	8008984 <_strtod_l+0x8e4>
 8008862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008866:	0d1b      	lsrs	r3, r3, #20
 8008868:	051b      	lsls	r3, r3, #20
 800886a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800886e:	f240 8089 	bls.w	8008984 <_strtod_l+0x8e4>
 8008872:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008876:	b923      	cbnz	r3, 8008882 <_strtod_l+0x7e2>
 8008878:	f8db 3010 	ldr.w	r3, [fp, #16]
 800887c:	2b01      	cmp	r3, #1
 800887e:	f340 8081 	ble.w	8008984 <_strtod_l+0x8e4>
 8008882:	4659      	mov	r1, fp
 8008884:	2201      	movs	r2, #1
 8008886:	4650      	mov	r0, sl
 8008888:	f001 f912 	bl	8009ab0 <__lshift>
 800888c:	9904      	ldr	r1, [sp, #16]
 800888e:	4683      	mov	fp, r0
 8008890:	f001 f97a 	bl	8009b88 <__mcmp>
 8008894:	2800      	cmp	r0, #0
 8008896:	dd75      	ble.n	8008984 <_strtod_l+0x8e4>
 8008898:	9905      	ldr	r1, [sp, #20]
 800889a:	464b      	mov	r3, r9
 800889c:	4a22      	ldr	r2, [pc, #136]	; (8008928 <_strtod_l+0x888>)
 800889e:	2900      	cmp	r1, #0
 80088a0:	f000 8091 	beq.w	80089c6 <_strtod_l+0x926>
 80088a4:	ea02 0109 	and.w	r1, r2, r9
 80088a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80088ac:	f300 808b 	bgt.w	80089c6 <_strtod_l+0x926>
 80088b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088b4:	f77f aea9 	ble.w	800860a <_strtod_l+0x56a>
 80088b8:	2300      	movs	r3, #0
 80088ba:	4a1c      	ldr	r2, [pc, #112]	; (800892c <_strtod_l+0x88c>)
 80088bc:	4640      	mov	r0, r8
 80088be:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80088c2:	4649      	mov	r1, r9
 80088c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80088c8:	f7f7 feba 	bl	8000640 <__aeabi_dmul>
 80088cc:	460b      	mov	r3, r1
 80088ce:	4303      	orrs	r3, r0
 80088d0:	bf08      	it	eq
 80088d2:	2322      	moveq	r3, #34	; 0x22
 80088d4:	4680      	mov	r8, r0
 80088d6:	4689      	mov	r9, r1
 80088d8:	bf08      	it	eq
 80088da:	f8ca 3000 	streq.w	r3, [sl]
 80088de:	e62d      	b.n	800853c <_strtod_l+0x49c>
 80088e0:	f04f 32ff 	mov.w	r2, #4294967295
 80088e4:	fa02 f303 	lsl.w	r3, r2, r3
 80088e8:	ea03 0808 	and.w	r8, r3, r8
 80088ec:	e6db      	b.n	80086a6 <_strtod_l+0x606>
 80088ee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80088f2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80088f6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80088fa:	35e2      	adds	r5, #226	; 0xe2
 80088fc:	fa07 f505 	lsl.w	r5, r7, r5
 8008900:	970f      	str	r7, [sp, #60]	; 0x3c
 8008902:	e742      	b.n	800878a <_strtod_l+0x6ea>
 8008904:	2301      	movs	r3, #1
 8008906:	2500      	movs	r5, #0
 8008908:	930f      	str	r3, [sp, #60]	; 0x3c
 800890a:	e73e      	b.n	800878a <_strtod_l+0x6ea>
 800890c:	463a      	mov	r2, r7
 800890e:	4650      	mov	r0, sl
 8008910:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008912:	f001 f8cd 	bl	8009ab0 <__lshift>
 8008916:	901c      	str	r0, [sp, #112]	; 0x70
 8008918:	2800      	cmp	r0, #0
 800891a:	f47f af64 	bne.w	80087e6 <_strtod_l+0x746>
 800891e:	e602      	b.n	8008526 <_strtod_l+0x486>
 8008920:	0800cdc0 	.word	0x0800cdc0
 8008924:	fffffc02 	.word	0xfffffc02
 8008928:	7ff00000 	.word	0x7ff00000
 800892c:	39500000 	.word	0x39500000
 8008930:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008934:	d166      	bne.n	8008a04 <_strtod_l+0x964>
 8008936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800893c:	b35a      	cbz	r2, 8008996 <_strtod_l+0x8f6>
 800893e:	4a9c      	ldr	r2, [pc, #624]	; (8008bb0 <_strtod_l+0xb10>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d12c      	bne.n	800899e <_strtod_l+0x8fe>
 8008944:	9b05      	ldr	r3, [sp, #20]
 8008946:	4640      	mov	r0, r8
 8008948:	b303      	cbz	r3, 800898c <_strtod_l+0x8ec>
 800894a:	464b      	mov	r3, r9
 800894c:	4a99      	ldr	r2, [pc, #612]	; (8008bb4 <_strtod_l+0xb14>)
 800894e:	f04f 31ff 	mov.w	r1, #4294967295
 8008952:	401a      	ands	r2, r3
 8008954:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008958:	d81b      	bhi.n	8008992 <_strtod_l+0x8f2>
 800895a:	0d12      	lsrs	r2, r2, #20
 800895c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008960:	fa01 f303 	lsl.w	r3, r1, r3
 8008964:	4298      	cmp	r0, r3
 8008966:	d11a      	bne.n	800899e <_strtod_l+0x8fe>
 8008968:	4b93      	ldr	r3, [pc, #588]	; (8008bb8 <_strtod_l+0xb18>)
 800896a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800896c:	429a      	cmp	r2, r3
 800896e:	d102      	bne.n	8008976 <_strtod_l+0x8d6>
 8008970:	3001      	adds	r0, #1
 8008972:	f43f add8 	beq.w	8008526 <_strtod_l+0x486>
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	4b8e      	ldr	r3, [pc, #568]	; (8008bb4 <_strtod_l+0xb14>)
 800897c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800897e:	401a      	ands	r2, r3
 8008980:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008984:	9b05      	ldr	r3, [sp, #20]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d196      	bne.n	80088b8 <_strtod_l+0x818>
 800898a:	e5d7      	b.n	800853c <_strtod_l+0x49c>
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	e7e8      	b.n	8008964 <_strtod_l+0x8c4>
 8008992:	460b      	mov	r3, r1
 8008994:	e7e6      	b.n	8008964 <_strtod_l+0x8c4>
 8008996:	ea53 0308 	orrs.w	r3, r3, r8
 800899a:	f43f af7d 	beq.w	8008898 <_strtod_l+0x7f8>
 800899e:	b1e5      	cbz	r5, 80089da <_strtod_l+0x93a>
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	421d      	tst	r5, r3
 80089a4:	d0ee      	beq.n	8008984 <_strtod_l+0x8e4>
 80089a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089a8:	4640      	mov	r0, r8
 80089aa:	4649      	mov	r1, r9
 80089ac:	9a05      	ldr	r2, [sp, #20]
 80089ae:	b1c3      	cbz	r3, 80089e2 <_strtod_l+0x942>
 80089b0:	f7ff fb52 	bl	8008058 <sulp>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089bc:	f7f7 fc8a 	bl	80002d4 <__adddf3>
 80089c0:	4680      	mov	r8, r0
 80089c2:	4689      	mov	r9, r1
 80089c4:	e7de      	b.n	8008984 <_strtod_l+0x8e4>
 80089c6:	4013      	ands	r3, r2
 80089c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089cc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80089d0:	f04f 38ff 	mov.w	r8, #4294967295
 80089d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80089d8:	e7d4      	b.n	8008984 <_strtod_l+0x8e4>
 80089da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089dc:	ea13 0f08 	tst.w	r3, r8
 80089e0:	e7e0      	b.n	80089a4 <_strtod_l+0x904>
 80089e2:	f7ff fb39 	bl	8008058 <sulp>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089ee:	f7f7 fc6f 	bl	80002d0 <__aeabi_dsub>
 80089f2:	2200      	movs	r2, #0
 80089f4:	2300      	movs	r3, #0
 80089f6:	4680      	mov	r8, r0
 80089f8:	4689      	mov	r9, r1
 80089fa:	f7f8 f889 	bl	8000b10 <__aeabi_dcmpeq>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d0c0      	beq.n	8008984 <_strtod_l+0x8e4>
 8008a02:	e602      	b.n	800860a <_strtod_l+0x56a>
 8008a04:	4658      	mov	r0, fp
 8008a06:	9904      	ldr	r1, [sp, #16]
 8008a08:	f001 fa40 	bl	8009e8c <__ratio>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a12:	4606      	mov	r6, r0
 8008a14:	460f      	mov	r7, r1
 8008a16:	f7f8 f88f 	bl	8000b38 <__aeabi_dcmple>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d075      	beq.n	8008b0a <_strtod_l+0xa6a>
 8008a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d047      	beq.n	8008ab4 <_strtod_l+0xa14>
 8008a24:	2600      	movs	r6, #0
 8008a26:	4f65      	ldr	r7, [pc, #404]	; (8008bbc <_strtod_l+0xb1c>)
 8008a28:	4d64      	ldr	r5, [pc, #400]	; (8008bbc <_strtod_l+0xb1c>)
 8008a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a30:	0d1b      	lsrs	r3, r3, #20
 8008a32:	051b      	lsls	r3, r3, #20
 8008a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a38:	4b61      	ldr	r3, [pc, #388]	; (8008bc0 <_strtod_l+0xb20>)
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	f040 80c8 	bne.w	8008bd0 <_strtod_l+0xb30>
 8008a40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008a50:	4649      	mov	r1, r9
 8008a52:	f001 f945 	bl	8009ce0 <__ulp>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	f7f7 fdef 	bl	8000640 <__aeabi_dmul>
 8008a62:	4642      	mov	r2, r8
 8008a64:	464b      	mov	r3, r9
 8008a66:	f7f7 fc35 	bl	80002d4 <__adddf3>
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4951      	ldr	r1, [pc, #324]	; (8008bb4 <_strtod_l+0xb14>)
 8008a6e:	4a55      	ldr	r2, [pc, #340]	; (8008bc4 <_strtod_l+0xb24>)
 8008a70:	4019      	ands	r1, r3
 8008a72:	4291      	cmp	r1, r2
 8008a74:	4680      	mov	r8, r0
 8008a76:	d95e      	bls.n	8008b36 <_strtod_l+0xa96>
 8008a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d103      	bne.n	8008a8a <_strtod_l+0x9ea>
 8008a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a84:	3301      	adds	r3, #1
 8008a86:	f43f ad4e 	beq.w	8008526 <_strtod_l+0x486>
 8008a8a:	f04f 38ff 	mov.w	r8, #4294967295
 8008a8e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008bb8 <_strtod_l+0xb18>
 8008a92:	4650      	mov	r0, sl
 8008a94:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a96:	f000 fdf3 	bl	8009680 <_Bfree>
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	9906      	ldr	r1, [sp, #24]
 8008a9e:	f000 fdef 	bl	8009680 <_Bfree>
 8008aa2:	4650      	mov	r0, sl
 8008aa4:	9904      	ldr	r1, [sp, #16]
 8008aa6:	f000 fdeb 	bl	8009680 <_Bfree>
 8008aaa:	4659      	mov	r1, fp
 8008aac:	4650      	mov	r0, sl
 8008aae:	f000 fde7 	bl	8009680 <_Bfree>
 8008ab2:	e61c      	b.n	80086ee <_strtod_l+0x64e>
 8008ab4:	f1b8 0f00 	cmp.w	r8, #0
 8008ab8:	d119      	bne.n	8008aee <_strtod_l+0xa4e>
 8008aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac0:	b9e3      	cbnz	r3, 8008afc <_strtod_l+0xa5c>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	4b3c      	ldr	r3, [pc, #240]	; (8008bbc <_strtod_l+0xb1c>)
 8008aca:	f7f8 f82b 	bl	8000b24 <__aeabi_dcmplt>
 8008ace:	b9c8      	cbnz	r0, 8008b04 <_strtod_l+0xa64>
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	4b3c      	ldr	r3, [pc, #240]	; (8008bc8 <_strtod_l+0xb28>)
 8008ad8:	f7f7 fdb2 	bl	8000640 <__aeabi_dmul>
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008ae4:	9418      	str	r4, [sp, #96]	; 0x60
 8008ae6:	9319      	str	r3, [sp, #100]	; 0x64
 8008ae8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008aec:	e79d      	b.n	8008a2a <_strtod_l+0x98a>
 8008aee:	f1b8 0f01 	cmp.w	r8, #1
 8008af2:	d103      	bne.n	8008afc <_strtod_l+0xa5c>
 8008af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f43f ad87 	beq.w	800860a <_strtod_l+0x56a>
 8008afc:	2600      	movs	r6, #0
 8008afe:	2400      	movs	r4, #0
 8008b00:	4f32      	ldr	r7, [pc, #200]	; (8008bcc <_strtod_l+0xb2c>)
 8008b02:	e791      	b.n	8008a28 <_strtod_l+0x988>
 8008b04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008b06:	4d30      	ldr	r5, [pc, #192]	; (8008bc8 <_strtod_l+0xb28>)
 8008b08:	e7ea      	b.n	8008ae0 <_strtod_l+0xa40>
 8008b0a:	4b2f      	ldr	r3, [pc, #188]	; (8008bc8 <_strtod_l+0xb28>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f7 fd95 	bl	8000640 <__aeabi_dmul>
 8008b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b18:	4604      	mov	r4, r0
 8008b1a:	460d      	mov	r5, r1
 8008b1c:	b933      	cbnz	r3, 8008b2c <_strtod_l+0xa8c>
 8008b1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b22:	9010      	str	r0, [sp, #64]	; 0x40
 8008b24:	9311      	str	r3, [sp, #68]	; 0x44
 8008b26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008b2a:	e77e      	b.n	8008a2a <_strtod_l+0x98a>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008b34:	e7f7      	b.n	8008b26 <_strtod_l+0xa86>
 8008b36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1a8      	bne.n	8008a92 <_strtod_l+0x9f2>
 8008b40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b46:	0d1b      	lsrs	r3, r3, #20
 8008b48:	051b      	lsls	r3, r3, #20
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d1a1      	bne.n	8008a92 <_strtod_l+0x9f2>
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f8 fa2b 	bl	8000fac <__aeabi_d2lz>
 8008b56:	f7f7 fd45 	bl	80005e4 <__aeabi_l2d>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7f7 fbb5 	bl	80002d0 <__aeabi_dsub>
 8008b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b6c:	ea43 0308 	orr.w	r3, r3, r8
 8008b70:	4313      	orrs	r3, r2
 8008b72:	4604      	mov	r4, r0
 8008b74:	460d      	mov	r5, r1
 8008b76:	d066      	beq.n	8008c46 <_strtod_l+0xba6>
 8008b78:	a309      	add	r3, pc, #36	; (adr r3, 8008ba0 <_strtod_l+0xb00>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 ffd1 	bl	8000b24 <__aeabi_dcmplt>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	f47f acda 	bne.w	800853c <_strtod_l+0x49c>
 8008b88:	a307      	add	r3, pc, #28	; (adr r3, 8008ba8 <_strtod_l+0xb08>)
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7f7 ffe5 	bl	8000b60 <__aeabi_dcmpgt>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	f43f af7b 	beq.w	8008a92 <_strtod_l+0x9f2>
 8008b9c:	e4ce      	b.n	800853c <_strtod_l+0x49c>
 8008b9e:	bf00      	nop
 8008ba0:	94a03595 	.word	0x94a03595
 8008ba4:	3fdfffff 	.word	0x3fdfffff
 8008ba8:	35afe535 	.word	0x35afe535
 8008bac:	3fe00000 	.word	0x3fe00000
 8008bb0:	000fffff 	.word	0x000fffff
 8008bb4:	7ff00000 	.word	0x7ff00000
 8008bb8:	7fefffff 	.word	0x7fefffff
 8008bbc:	3ff00000 	.word	0x3ff00000
 8008bc0:	7fe00000 	.word	0x7fe00000
 8008bc4:	7c9fffff 	.word	0x7c9fffff
 8008bc8:	3fe00000 	.word	0x3fe00000
 8008bcc:	bff00000 	.word	0xbff00000
 8008bd0:	9b05      	ldr	r3, [sp, #20]
 8008bd2:	b313      	cbz	r3, 8008c1a <_strtod_l+0xb7a>
 8008bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bda:	d81e      	bhi.n	8008c1a <_strtod_l+0xb7a>
 8008bdc:	a326      	add	r3, pc, #152	; (adr r3, 8008c78 <_strtod_l+0xbd8>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	4620      	mov	r0, r4
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7f7 ffa7 	bl	8000b38 <__aeabi_dcmple>
 8008bea:	b190      	cbz	r0, 8008c12 <_strtod_l+0xb72>
 8008bec:	4629      	mov	r1, r5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f7f7 ffe8 	bl	8000bc4 <__aeabi_d2uiz>
 8008bf4:	2801      	cmp	r0, #1
 8008bf6:	bf38      	it	cc
 8008bf8:	2001      	movcc	r0, #1
 8008bfa:	f7f7 fca7 	bl	800054c <__aeabi_ui2d>
 8008bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c00:	4604      	mov	r4, r0
 8008c02:	460d      	mov	r5, r1
 8008c04:	b9d3      	cbnz	r3, 8008c3c <_strtod_l+0xb9c>
 8008c06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c0a:	9012      	str	r0, [sp, #72]	; 0x48
 8008c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008c12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c14:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008c18:	1a9f      	subs	r7, r3, r2
 8008c1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c1e:	f001 f85f 	bl	8009ce0 <__ulp>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4630      	mov	r0, r6
 8008c28:	4639      	mov	r1, r7
 8008c2a:	f7f7 fd09 	bl	8000640 <__aeabi_dmul>
 8008c2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c32:	f7f7 fb4f 	bl	80002d4 <__adddf3>
 8008c36:	4680      	mov	r8, r0
 8008c38:	4689      	mov	r9, r1
 8008c3a:	e77e      	b.n	8008b3a <_strtod_l+0xa9a>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008c44:	e7e3      	b.n	8008c0e <_strtod_l+0xb6e>
 8008c46:	a30e      	add	r3, pc, #56	; (adr r3, 8008c80 <_strtod_l+0xbe0>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	f7f7 ff6a 	bl	8000b24 <__aeabi_dcmplt>
 8008c50:	e7a1      	b.n	8008b96 <_strtod_l+0xaf6>
 8008c52:	2300      	movs	r3, #0
 8008c54:	930c      	str	r3, [sp, #48]	; 0x30
 8008c56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c5a:	6013      	str	r3, [r2, #0]
 8008c5c:	f7ff ba65 	b.w	800812a <_strtod_l+0x8a>
 8008c60:	2b65      	cmp	r3, #101	; 0x65
 8008c62:	f43f ab5c 	beq.w	800831e <_strtod_l+0x27e>
 8008c66:	2b45      	cmp	r3, #69	; 0x45
 8008c68:	f43f ab59 	beq.w	800831e <_strtod_l+0x27e>
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f7ff bb8d 	b.w	800838c <_strtod_l+0x2ec>
 8008c72:	bf00      	nop
 8008c74:	f3af 8000 	nop.w
 8008c78:	ffc00000 	.word	0xffc00000
 8008c7c:	41dfffff 	.word	0x41dfffff
 8008c80:	94a03595 	.word	0x94a03595
 8008c84:	3fcfffff 	.word	0x3fcfffff

08008c88 <strtod>:
 8008c88:	460a      	mov	r2, r1
 8008c8a:	4601      	mov	r1, r0
 8008c8c:	4802      	ldr	r0, [pc, #8]	; (8008c98 <strtod+0x10>)
 8008c8e:	4b03      	ldr	r3, [pc, #12]	; (8008c9c <strtod+0x14>)
 8008c90:	6800      	ldr	r0, [r0, #0]
 8008c92:	f7ff ba05 	b.w	80080a0 <_strtod_l>
 8008c96:	bf00      	nop
 8008c98:	20000024 	.word	0x20000024
 8008c9c:	2000008c 	.word	0x2000008c

08008ca0 <print_e>:
 8008ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ca2:	b08b      	sub	sp, #44	; 0x2c
 8008ca4:	460d      	mov	r5, r1
 8008ca6:	a908      	add	r1, sp, #32
 8008ca8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008caa:	9104      	str	r1, [sp, #16]
 8008cac:	a907      	add	r1, sp, #28
 8008cae:	9103      	str	r1, [sp, #12]
 8008cb0:	a909      	add	r1, sp, #36	; 0x24
 8008cb2:	9102      	str	r1, [sp, #8]
 8008cb4:	1c71      	adds	r1, r6, #1
 8008cb6:	9101      	str	r1, [sp, #4]
 8008cb8:	2102      	movs	r1, #2
 8008cba:	9100      	str	r1, [sp, #0]
 8008cbc:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8008cc0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008cc2:	f001 fac5 	bl	800a250 <_dtoa_r>
 8008cc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ccc:	4601      	mov	r1, r0
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d104      	bne.n	8008cdc <print_e+0x3c>
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f001 f9e6 	bl	800a0a4 <strcpy>
 8008cd8:	b00b      	add	sp, #44	; 0x2c
 8008cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cdc:	462b      	mov	r3, r5
 8008cde:	7800      	ldrb	r0, [r0, #0]
 8008ce0:	2e00      	cmp	r6, #0
 8008ce2:	f803 0b01 	strb.w	r0, [r3], #1
 8008ce6:	bfc8      	it	gt
 8008ce8:	2401      	movgt	r4, #1
 8008cea:	4608      	mov	r0, r1
 8008cec:	212e      	movs	r1, #46	; 0x2e
 8008cee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008cf2:	b10d      	cbz	r5, 8008cf8 <print_e+0x58>
 8008cf4:	2e00      	cmp	r6, #0
 8008cf6:	dc36      	bgt.n	8008d66 <print_e+0xc6>
 8008cf8:	2f67      	cmp	r7, #103	; 0x67
 8008cfa:	d045      	beq.n	8008d88 <print_e+0xe8>
 8008cfc:	2f47      	cmp	r7, #71	; 0x47
 8008cfe:	d045      	beq.n	8008d8c <print_e+0xec>
 8008d00:	212e      	movs	r1, #46	; 0x2e
 8008d02:	2030      	movs	r0, #48	; 0x30
 8008d04:	2e00      	cmp	r6, #0
 8008d06:	dc37      	bgt.n	8008d78 <print_e+0xd8>
 8008d08:	1e51      	subs	r1, r2, #1
 8008d0a:	2900      	cmp	r1, #0
 8008d0c:	9109      	str	r1, [sp, #36]	; 0x24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	bfb7      	itett	lt
 8008d12:	212d      	movlt	r1, #45	; 0x2d
 8008d14:	222b      	movge	r2, #43	; 0x2b
 8008d16:	f1c2 0201 	rsblt	r2, r2, #1
 8008d1a:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008d1c:	f800 7b02 	strb.w	r7, [r0], #2
 8008d20:	bfb8      	it	lt
 8008d22:	7059      	strblt	r1, [r3, #1]
 8008d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d26:	bfa8      	it	ge
 8008d28:	705a      	strbge	r2, [r3, #1]
 8008d2a:	2963      	cmp	r1, #99	; 0x63
 8008d2c:	dd0b      	ble.n	8008d46 <print_e+0xa6>
 8008d2e:	2264      	movs	r2, #100	; 0x64
 8008d30:	fb91 f2f2 	sdiv	r2, r1, r2
 8008d34:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8008d38:	1cd8      	adds	r0, r3, #3
 8008d3a:	709c      	strb	r4, [r3, #2]
 8008d3c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008d40:	fb03 1202 	mla	r2, r3, r2, r1
 8008d44:	9209      	str	r2, [sp, #36]	; 0x24
 8008d46:	230a      	movs	r3, #10
 8008d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8008d4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d52:	7001      	strb	r1, [r0, #0]
 8008d54:	f06f 0109 	mvn.w	r1, #9
 8008d58:	fb01 2303 	mla	r3, r1, r3, r2
 8008d5c:	3330      	adds	r3, #48	; 0x30
 8008d5e:	7043      	strb	r3, [r0, #1]
 8008d60:	2300      	movs	r3, #0
 8008d62:	7083      	strb	r3, [r0, #2]
 8008d64:	e7b8      	b.n	8008cd8 <print_e+0x38>
 8008d66:	b10c      	cbz	r4, 8008d6c <print_e+0xcc>
 8008d68:	f803 1b01 	strb.w	r1, [r3], #1
 8008d6c:	7804      	ldrb	r4, [r0, #0]
 8008d6e:	3e01      	subs	r6, #1
 8008d70:	f803 4b01 	strb.w	r4, [r3], #1
 8008d74:	2400      	movs	r4, #0
 8008d76:	e7ba      	b.n	8008cee <print_e+0x4e>
 8008d78:	b10c      	cbz	r4, 8008d7e <print_e+0xde>
 8008d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d7e:	2400      	movs	r4, #0
 8008d80:	f803 0b01 	strb.w	r0, [r3], #1
 8008d84:	3e01      	subs	r6, #1
 8008d86:	e7bd      	b.n	8008d04 <print_e+0x64>
 8008d88:	2765      	movs	r7, #101	; 0x65
 8008d8a:	e7bd      	b.n	8008d08 <print_e+0x68>
 8008d8c:	2745      	movs	r7, #69	; 0x45
 8008d8e:	e7bb      	b.n	8008d08 <print_e+0x68>

08008d90 <_gcvt>:
 8008d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d94:	4690      	mov	r8, r2
 8008d96:	461c      	mov	r4, r3
 8008d98:	b08b      	sub	sp, #44	; 0x2c
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8008da0:	2200      	movs	r2, #0
 8008da2:	2300      	movs	r3, #0
 8008da4:	4640      	mov	r0, r8
 8008da6:	4621      	mov	r1, r4
 8008da8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008daa:	f7f7 febb 	bl	8000b24 <__aeabi_dcmplt>
 8008dae:	b108      	cbz	r0, 8008db4 <_gcvt+0x24>
 8008db0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8008db4:	2200      	movs	r2, #0
 8008db6:	2300      	movs	r3, #0
 8008db8:	4640      	mov	r0, r8
 8008dba:	4621      	mov	r1, r4
 8008dbc:	f7f7 fea8 	bl	8000b10 <__aeabi_dcmpeq>
 8008dc0:	b138      	cbz	r0, 8008dd2 <_gcvt+0x42>
 8008dc2:	2330      	movs	r3, #48	; 0x30
 8008dc4:	702b      	strb	r3, [r5, #0]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	706b      	strb	r3, [r5, #1]
 8008dca:	4628      	mov	r0, r5
 8008dcc:	b00b      	add	sp, #44	; 0x2c
 8008dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	a34c      	add	r3, pc, #304	; (adr r3, 8008f08 <_gcvt+0x178>)
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	4621      	mov	r1, r4
 8008ddc:	f7f7 feac 	bl	8000b38 <__aeabi_dcmple>
 8008de0:	b160      	cbz	r0, 8008dfc <_gcvt+0x6c>
 8008de2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008de6:	3f01      	subs	r7, #1
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	4642      	mov	r2, r8
 8008dec:	4623      	mov	r3, r4
 8008dee:	4629      	mov	r1, r5
 8008df0:	4648      	mov	r0, r9
 8008df2:	9602      	str	r6, [sp, #8]
 8008df4:	9700      	str	r7, [sp, #0]
 8008df6:	f7ff ff53 	bl	8008ca0 <print_e>
 8008dfa:	e7e6      	b.n	8008dca <_gcvt+0x3a>
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f001 f873 	bl	8009ee8 <_mprec_log10>
 8008e02:	4642      	mov	r2, r8
 8008e04:	4623      	mov	r3, r4
 8008e06:	f7f7 fe97 	bl	8000b38 <__aeabi_dcmple>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d1e9      	bne.n	8008de2 <_gcvt+0x52>
 8008e0e:	ab09      	add	r3, sp, #36	; 0x24
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	ab08      	add	r3, sp, #32
 8008e14:	9303      	str	r3, [sp, #12]
 8008e16:	ab07      	add	r3, sp, #28
 8008e18:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	4642      	mov	r2, r8
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	4648      	mov	r0, r9
 8008e24:	4623      	mov	r3, r4
 8008e26:	f001 fa13 	bl	800a250 <_dtoa_r>
 8008e2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e2e:	9a07      	ldr	r2, [sp, #28]
 8008e30:	4601      	mov	r1, r0
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d00f      	beq.n	8008e56 <_gcvt+0xc6>
 8008e36:	462b      	mov	r3, r5
 8008e38:	442f      	add	r7, r5
 8008e3a:	4608      	mov	r0, r1
 8008e3c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008e40:	9a07      	ldr	r2, [sp, #28]
 8008e42:	1afc      	subs	r4, r7, r3
 8008e44:	f1bc 0f00 	cmp.w	ip, #0
 8008e48:	d001      	beq.n	8008e4e <_gcvt+0xbe>
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	dc07      	bgt.n	8008e5e <_gcvt+0xce>
 8008e4e:	2100      	movs	r1, #0
 8008e50:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008e54:	e00c      	b.n	8008e70 <_gcvt+0xe0>
 8008e56:	4628      	mov	r0, r5
 8008e58:	f001 f924 	bl	800a0a4 <strcpy>
 8008e5c:	e7b5      	b.n	8008dca <_gcvt+0x3a>
 8008e5e:	3a01      	subs	r2, #1
 8008e60:	f803 cb01 	strb.w	ip, [r3], #1
 8008e64:	9207      	str	r2, [sp, #28]
 8008e66:	e7e8      	b.n	8008e3a <_gcvt+0xaa>
 8008e68:	2101      	movs	r1, #1
 8008e6a:	f803 cb01 	strb.w	ip, [r3], #1
 8008e6e:	3c01      	subs	r4, #1
 8008e70:	2a00      	cmp	r2, #0
 8008e72:	4617      	mov	r7, r2
 8008e74:	dc2a      	bgt.n	8008ecc <_gcvt+0x13c>
 8008e76:	b101      	cbz	r1, 8008e7a <_gcvt+0xea>
 8008e78:	9207      	str	r2, [sp, #28]
 8008e7a:	b90e      	cbnz	r6, 8008e80 <_gcvt+0xf0>
 8008e7c:	7802      	ldrb	r2, [r0, #0]
 8008e7e:	b312      	cbz	r2, 8008ec6 <_gcvt+0x136>
 8008e80:	42ab      	cmp	r3, r5
 8008e82:	bf04      	itt	eq
 8008e84:	2230      	moveq	r2, #48	; 0x30
 8008e86:	f803 2b01 	strbeq.w	r2, [r3], #1
 8008e8a:	222e      	movs	r2, #46	; 0x2e
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	2700      	movs	r7, #0
 8008e90:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	9a07      	ldr	r2, [sp, #28]
 8008e98:	eba2 0c03 	sub.w	ip, r2, r3
 8008e9c:	eb1c 0f01 	cmn.w	ip, r1
 8008ea0:	d41c      	bmi.n	8008edc <_gcvt+0x14c>
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	f1c2 0100 	rsb	r1, r2, #0
 8008ea8:	bfc8      	it	gt
 8008eaa:	2100      	movgt	r1, #0
 8008eac:	f101 0c01 	add.w	ip, r1, #1
 8008eb0:	4463      	add	r3, ip
 8008eb2:	440a      	add	r2, r1
 8008eb4:	b107      	cbz	r7, 8008eb8 <_gcvt+0x128>
 8008eb6:	9207      	str	r2, [sp, #28]
 8008eb8:	1e42      	subs	r2, r0, #1
 8008eba:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008ebe:	b109      	cbz	r1, 8008ec4 <_gcvt+0x134>
 8008ec0:	2c00      	cmp	r4, #0
 8008ec2:	dc0f      	bgt.n	8008ee4 <_gcvt+0x154>
 8008ec4:	b9de      	cbnz	r6, 8008efe <_gcvt+0x16e>
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e77e      	b.n	8008dca <_gcvt+0x3a>
 8008ecc:	2c00      	cmp	r4, #0
 8008ece:	f102 32ff 	add.w	r2, r2, #4294967295
 8008ed2:	dcc9      	bgt.n	8008e68 <_gcvt+0xd8>
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	d0d0      	beq.n	8008e7a <_gcvt+0xea>
 8008ed8:	9707      	str	r7, [sp, #28]
 8008eda:	e7ce      	b.n	8008e7a <_gcvt+0xea>
 8008edc:	2701      	movs	r7, #1
 8008ede:	f801 ef01 	strb.w	lr, [r1, #1]!
 8008ee2:	e7db      	b.n	8008e9c <_gcvt+0x10c>
 8008ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee8:	3c01      	subs	r4, #1
 8008eea:	e7e6      	b.n	8008eba <_gcvt+0x12a>
 8008eec:	f802 6b01 	strb.w	r6, [r2], #1
 8008ef0:	1a81      	subs	r1, r0, r2
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	dcfa      	bgt.n	8008eec <_gcvt+0x15c>
 8008ef6:	2c00      	cmp	r4, #0
 8008ef8:	bfa8      	it	ge
 8008efa:	191b      	addge	r3, r3, r4
 8008efc:	e7e3      	b.n	8008ec6 <_gcvt+0x136>
 8008efe:	461a      	mov	r2, r3
 8008f00:	2630      	movs	r6, #48	; 0x30
 8008f02:	1918      	adds	r0, r3, r4
 8008f04:	e7f4      	b.n	8008ef0 <_gcvt+0x160>
 8008f06:	bf00      	nop
 8008f08:	eb1c432d 	.word	0xeb1c432d
 8008f0c:	3f1a36e2 	.word	0x3f1a36e2

08008f10 <rshift>:
 8008f10:	6903      	ldr	r3, [r0, #16]
 8008f12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f1a:	f100 0414 	add.w	r4, r0, #20
 8008f1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f22:	dd46      	ble.n	8008fb2 <rshift+0xa2>
 8008f24:	f011 011f 	ands.w	r1, r1, #31
 8008f28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f30:	d10c      	bne.n	8008f4c <rshift+0x3c>
 8008f32:	4629      	mov	r1, r5
 8008f34:	f100 0710 	add.w	r7, r0, #16
 8008f38:	42b1      	cmp	r1, r6
 8008f3a:	d335      	bcc.n	8008fa8 <rshift+0x98>
 8008f3c:	1a9b      	subs	r3, r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	1eea      	subs	r2, r5, #3
 8008f42:	4296      	cmp	r6, r2
 8008f44:	bf38      	it	cc
 8008f46:	2300      	movcc	r3, #0
 8008f48:	4423      	add	r3, r4
 8008f4a:	e015      	b.n	8008f78 <rshift+0x68>
 8008f4c:	46a1      	mov	r9, r4
 8008f4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f52:	f1c1 0820 	rsb	r8, r1, #32
 8008f56:	40cf      	lsrs	r7, r1
 8008f58:	f105 0e04 	add.w	lr, r5, #4
 8008f5c:	4576      	cmp	r6, lr
 8008f5e:	46f4      	mov	ip, lr
 8008f60:	d816      	bhi.n	8008f90 <rshift+0x80>
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	009a      	lsls	r2, r3, #2
 8008f66:	3a04      	subs	r2, #4
 8008f68:	3501      	adds	r5, #1
 8008f6a:	42ae      	cmp	r6, r5
 8008f6c:	bf38      	it	cc
 8008f6e:	2200      	movcc	r2, #0
 8008f70:	18a3      	adds	r3, r4, r2
 8008f72:	50a7      	str	r7, [r4, r2]
 8008f74:	b107      	cbz	r7, 8008f78 <rshift+0x68>
 8008f76:	3304      	adds	r3, #4
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	eba3 0204 	sub.w	r2, r3, r4
 8008f7e:	bf08      	it	eq
 8008f80:	2300      	moveq	r3, #0
 8008f82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f86:	6102      	str	r2, [r0, #16]
 8008f88:	bf08      	it	eq
 8008f8a:	6143      	streq	r3, [r0, #20]
 8008f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f90:	f8dc c000 	ldr.w	ip, [ip]
 8008f94:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f98:	ea4c 0707 	orr.w	r7, ip, r7
 8008f9c:	f849 7b04 	str.w	r7, [r9], #4
 8008fa0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fa4:	40cf      	lsrs	r7, r1
 8008fa6:	e7d9      	b.n	8008f5c <rshift+0x4c>
 8008fa8:	f851 cb04 	ldr.w	ip, [r1], #4
 8008fac:	f847 cf04 	str.w	ip, [r7, #4]!
 8008fb0:	e7c2      	b.n	8008f38 <rshift+0x28>
 8008fb2:	4623      	mov	r3, r4
 8008fb4:	e7e0      	b.n	8008f78 <rshift+0x68>

08008fb6 <__hexdig_fun>:
 8008fb6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008fba:	2b09      	cmp	r3, #9
 8008fbc:	d802      	bhi.n	8008fc4 <__hexdig_fun+0xe>
 8008fbe:	3820      	subs	r0, #32
 8008fc0:	b2c0      	uxtb	r0, r0
 8008fc2:	4770      	bx	lr
 8008fc4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008fc8:	2b05      	cmp	r3, #5
 8008fca:	d801      	bhi.n	8008fd0 <__hexdig_fun+0x1a>
 8008fcc:	3847      	subs	r0, #71	; 0x47
 8008fce:	e7f7      	b.n	8008fc0 <__hexdig_fun+0xa>
 8008fd0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008fd4:	2b05      	cmp	r3, #5
 8008fd6:	d801      	bhi.n	8008fdc <__hexdig_fun+0x26>
 8008fd8:	3827      	subs	r0, #39	; 0x27
 8008fda:	e7f1      	b.n	8008fc0 <__hexdig_fun+0xa>
 8008fdc:	2000      	movs	r0, #0
 8008fde:	4770      	bx	lr

08008fe0 <__gethex>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	b08b      	sub	sp, #44	; 0x2c
 8008fe6:	9306      	str	r3, [sp, #24]
 8008fe8:	4bb9      	ldr	r3, [pc, #740]	; (80092d0 <__gethex+0x2f0>)
 8008fea:	9002      	str	r0, [sp, #8]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	468b      	mov	fp, r1
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	4690      	mov	r8, r2
 8008ff4:	9303      	str	r3, [sp, #12]
 8008ff6:	f7f7 f8ab 	bl	8000150 <strlen>
 8008ffa:	4682      	mov	sl, r0
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	f8db 2000 	ldr.w	r2, [fp]
 8009002:	4403      	add	r3, r0
 8009004:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	1c93      	adds	r3, r2, #2
 800900c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009010:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009014:	32fe      	adds	r2, #254	; 0xfe
 8009016:	18d1      	adds	r1, r2, r3
 8009018:	461f      	mov	r7, r3
 800901a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800901e:	9101      	str	r1, [sp, #4]
 8009020:	2830      	cmp	r0, #48	; 0x30
 8009022:	d0f8      	beq.n	8009016 <__gethex+0x36>
 8009024:	f7ff ffc7 	bl	8008fb6 <__hexdig_fun>
 8009028:	4604      	mov	r4, r0
 800902a:	2800      	cmp	r0, #0
 800902c:	d13a      	bne.n	80090a4 <__gethex+0xc4>
 800902e:	4652      	mov	r2, sl
 8009030:	4638      	mov	r0, r7
 8009032:	9903      	ldr	r1, [sp, #12]
 8009034:	f001 f83e 	bl	800a0b4 <strncmp>
 8009038:	4605      	mov	r5, r0
 800903a:	2800      	cmp	r0, #0
 800903c:	d166      	bne.n	800910c <__gethex+0x12c>
 800903e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009042:	eb07 060a 	add.w	r6, r7, sl
 8009046:	f7ff ffb6 	bl	8008fb6 <__hexdig_fun>
 800904a:	2800      	cmp	r0, #0
 800904c:	d060      	beq.n	8009110 <__gethex+0x130>
 800904e:	4633      	mov	r3, r6
 8009050:	7818      	ldrb	r0, [r3, #0]
 8009052:	461f      	mov	r7, r3
 8009054:	2830      	cmp	r0, #48	; 0x30
 8009056:	f103 0301 	add.w	r3, r3, #1
 800905a:	d0f9      	beq.n	8009050 <__gethex+0x70>
 800905c:	f7ff ffab 	bl	8008fb6 <__hexdig_fun>
 8009060:	2301      	movs	r3, #1
 8009062:	fab0 f480 	clz	r4, r0
 8009066:	4635      	mov	r5, r6
 8009068:	0964      	lsrs	r4, r4, #5
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	463a      	mov	r2, r7
 800906e:	4616      	mov	r6, r2
 8009070:	7830      	ldrb	r0, [r6, #0]
 8009072:	3201      	adds	r2, #1
 8009074:	f7ff ff9f 	bl	8008fb6 <__hexdig_fun>
 8009078:	2800      	cmp	r0, #0
 800907a:	d1f8      	bne.n	800906e <__gethex+0x8e>
 800907c:	4652      	mov	r2, sl
 800907e:	4630      	mov	r0, r6
 8009080:	9903      	ldr	r1, [sp, #12]
 8009082:	f001 f817 	bl	800a0b4 <strncmp>
 8009086:	b980      	cbnz	r0, 80090aa <__gethex+0xca>
 8009088:	b94d      	cbnz	r5, 800909e <__gethex+0xbe>
 800908a:	eb06 050a 	add.w	r5, r6, sl
 800908e:	462a      	mov	r2, r5
 8009090:	4616      	mov	r6, r2
 8009092:	7830      	ldrb	r0, [r6, #0]
 8009094:	3201      	adds	r2, #1
 8009096:	f7ff ff8e 	bl	8008fb6 <__hexdig_fun>
 800909a:	2800      	cmp	r0, #0
 800909c:	d1f8      	bne.n	8009090 <__gethex+0xb0>
 800909e:	1bad      	subs	r5, r5, r6
 80090a0:	00ad      	lsls	r5, r5, #2
 80090a2:	e004      	b.n	80090ae <__gethex+0xce>
 80090a4:	2400      	movs	r4, #0
 80090a6:	4625      	mov	r5, r4
 80090a8:	e7e0      	b.n	800906c <__gethex+0x8c>
 80090aa:	2d00      	cmp	r5, #0
 80090ac:	d1f7      	bne.n	800909e <__gethex+0xbe>
 80090ae:	7833      	ldrb	r3, [r6, #0]
 80090b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090b4:	2b50      	cmp	r3, #80	; 0x50
 80090b6:	d139      	bne.n	800912c <__gethex+0x14c>
 80090b8:	7873      	ldrb	r3, [r6, #1]
 80090ba:	2b2b      	cmp	r3, #43	; 0x2b
 80090bc:	d02a      	beq.n	8009114 <__gethex+0x134>
 80090be:	2b2d      	cmp	r3, #45	; 0x2d
 80090c0:	d02c      	beq.n	800911c <__gethex+0x13c>
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	1c71      	adds	r1, r6, #1
 80090c8:	7808      	ldrb	r0, [r1, #0]
 80090ca:	f7ff ff74 	bl	8008fb6 <__hexdig_fun>
 80090ce:	1e43      	subs	r3, r0, #1
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b18      	cmp	r3, #24
 80090d4:	d82a      	bhi.n	800912c <__gethex+0x14c>
 80090d6:	f1a0 0210 	sub.w	r2, r0, #16
 80090da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80090de:	f7ff ff6a 	bl	8008fb6 <__hexdig_fun>
 80090e2:	1e43      	subs	r3, r0, #1
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b18      	cmp	r3, #24
 80090e8:	d91b      	bls.n	8009122 <__gethex+0x142>
 80090ea:	f1b9 0f00 	cmp.w	r9, #0
 80090ee:	d000      	beq.n	80090f2 <__gethex+0x112>
 80090f0:	4252      	negs	r2, r2
 80090f2:	4415      	add	r5, r2
 80090f4:	f8cb 1000 	str.w	r1, [fp]
 80090f8:	b1d4      	cbz	r4, 8009130 <__gethex+0x150>
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bf14      	ite	ne
 8009100:	2700      	movne	r7, #0
 8009102:	2706      	moveq	r7, #6
 8009104:	4638      	mov	r0, r7
 8009106:	b00b      	add	sp, #44	; 0x2c
 8009108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910c:	463e      	mov	r6, r7
 800910e:	4625      	mov	r5, r4
 8009110:	2401      	movs	r4, #1
 8009112:	e7cc      	b.n	80090ae <__gethex+0xce>
 8009114:	f04f 0900 	mov.w	r9, #0
 8009118:	1cb1      	adds	r1, r6, #2
 800911a:	e7d5      	b.n	80090c8 <__gethex+0xe8>
 800911c:	f04f 0901 	mov.w	r9, #1
 8009120:	e7fa      	b.n	8009118 <__gethex+0x138>
 8009122:	230a      	movs	r3, #10
 8009124:	fb03 0202 	mla	r2, r3, r2, r0
 8009128:	3a10      	subs	r2, #16
 800912a:	e7d6      	b.n	80090da <__gethex+0xfa>
 800912c:	4631      	mov	r1, r6
 800912e:	e7e1      	b.n	80090f4 <__gethex+0x114>
 8009130:	4621      	mov	r1, r4
 8009132:	1bf3      	subs	r3, r6, r7
 8009134:	3b01      	subs	r3, #1
 8009136:	2b07      	cmp	r3, #7
 8009138:	dc0a      	bgt.n	8009150 <__gethex+0x170>
 800913a:	9802      	ldr	r0, [sp, #8]
 800913c:	f000 fa60 	bl	8009600 <_Balloc>
 8009140:	4604      	mov	r4, r0
 8009142:	b940      	cbnz	r0, 8009156 <__gethex+0x176>
 8009144:	4602      	mov	r2, r0
 8009146:	21de      	movs	r1, #222	; 0xde
 8009148:	4b62      	ldr	r3, [pc, #392]	; (80092d4 <__gethex+0x2f4>)
 800914a:	4863      	ldr	r0, [pc, #396]	; (80092d8 <__gethex+0x2f8>)
 800914c:	f000 ffd2 	bl	800a0f4 <__assert_func>
 8009150:	3101      	adds	r1, #1
 8009152:	105b      	asrs	r3, r3, #1
 8009154:	e7ef      	b.n	8009136 <__gethex+0x156>
 8009156:	f04f 0b00 	mov.w	fp, #0
 800915a:	f100 0914 	add.w	r9, r0, #20
 800915e:	f1ca 0301 	rsb	r3, sl, #1
 8009162:	f8cd 9010 	str.w	r9, [sp, #16]
 8009166:	f8cd b004 	str.w	fp, [sp, #4]
 800916a:	9308      	str	r3, [sp, #32]
 800916c:	42b7      	cmp	r7, r6
 800916e:	d33f      	bcc.n	80091f0 <__gethex+0x210>
 8009170:	9f04      	ldr	r7, [sp, #16]
 8009172:	9b01      	ldr	r3, [sp, #4]
 8009174:	f847 3b04 	str.w	r3, [r7], #4
 8009178:	eba7 0709 	sub.w	r7, r7, r9
 800917c:	10bf      	asrs	r7, r7, #2
 800917e:	6127      	str	r7, [r4, #16]
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fb33 	bl	80097ec <__hi0bits>
 8009186:	017f      	lsls	r7, r7, #5
 8009188:	f8d8 6000 	ldr.w	r6, [r8]
 800918c:	1a3f      	subs	r7, r7, r0
 800918e:	42b7      	cmp	r7, r6
 8009190:	dd62      	ble.n	8009258 <__gethex+0x278>
 8009192:	1bbf      	subs	r7, r7, r6
 8009194:	4639      	mov	r1, r7
 8009196:	4620      	mov	r0, r4
 8009198:	f000 fee5 	bl	8009f66 <__any_on>
 800919c:	4682      	mov	sl, r0
 800919e:	b1a8      	cbz	r0, 80091cc <__gethex+0x1ec>
 80091a0:	f04f 0a01 	mov.w	sl, #1
 80091a4:	1e7b      	subs	r3, r7, #1
 80091a6:	1159      	asrs	r1, r3, #5
 80091a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80091ac:	f003 021f 	and.w	r2, r3, #31
 80091b0:	fa0a f202 	lsl.w	r2, sl, r2
 80091b4:	420a      	tst	r2, r1
 80091b6:	d009      	beq.n	80091cc <__gethex+0x1ec>
 80091b8:	4553      	cmp	r3, sl
 80091ba:	dd05      	ble.n	80091c8 <__gethex+0x1e8>
 80091bc:	4620      	mov	r0, r4
 80091be:	1eb9      	subs	r1, r7, #2
 80091c0:	f000 fed1 	bl	8009f66 <__any_on>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d144      	bne.n	8009252 <__gethex+0x272>
 80091c8:	f04f 0a02 	mov.w	sl, #2
 80091cc:	4639      	mov	r1, r7
 80091ce:	4620      	mov	r0, r4
 80091d0:	f7ff fe9e 	bl	8008f10 <rshift>
 80091d4:	443d      	add	r5, r7
 80091d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091da:	42ab      	cmp	r3, r5
 80091dc:	da4a      	bge.n	8009274 <__gethex+0x294>
 80091de:	4621      	mov	r1, r4
 80091e0:	9802      	ldr	r0, [sp, #8]
 80091e2:	f000 fa4d 	bl	8009680 <_Bfree>
 80091e6:	2300      	movs	r3, #0
 80091e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091ea:	27a3      	movs	r7, #163	; 0xa3
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	e789      	b.n	8009104 <__gethex+0x124>
 80091f0:	1e73      	subs	r3, r6, #1
 80091f2:	9a07      	ldr	r2, [sp, #28]
 80091f4:	9305      	str	r3, [sp, #20]
 80091f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d019      	beq.n	8009232 <__gethex+0x252>
 80091fe:	f1bb 0f20 	cmp.w	fp, #32
 8009202:	d107      	bne.n	8009214 <__gethex+0x234>
 8009204:	9b04      	ldr	r3, [sp, #16]
 8009206:	9a01      	ldr	r2, [sp, #4]
 8009208:	f843 2b04 	str.w	r2, [r3], #4
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	2300      	movs	r3, #0
 8009210:	469b      	mov	fp, r3
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009218:	f7ff fecd 	bl	8008fb6 <__hexdig_fun>
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	f000 000f 	and.w	r0, r0, #15
 8009222:	fa00 f00b 	lsl.w	r0, r0, fp
 8009226:	4303      	orrs	r3, r0
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	f10b 0b04 	add.w	fp, fp, #4
 800922e:	9b05      	ldr	r3, [sp, #20]
 8009230:	e00d      	b.n	800924e <__gethex+0x26e>
 8009232:	9b05      	ldr	r3, [sp, #20]
 8009234:	9a08      	ldr	r2, [sp, #32]
 8009236:	4413      	add	r3, r2
 8009238:	42bb      	cmp	r3, r7
 800923a:	d3e0      	bcc.n	80091fe <__gethex+0x21e>
 800923c:	4618      	mov	r0, r3
 800923e:	4652      	mov	r2, sl
 8009240:	9903      	ldr	r1, [sp, #12]
 8009242:	9309      	str	r3, [sp, #36]	; 0x24
 8009244:	f000 ff36 	bl	800a0b4 <strncmp>
 8009248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924a:	2800      	cmp	r0, #0
 800924c:	d1d7      	bne.n	80091fe <__gethex+0x21e>
 800924e:	461e      	mov	r6, r3
 8009250:	e78c      	b.n	800916c <__gethex+0x18c>
 8009252:	f04f 0a03 	mov.w	sl, #3
 8009256:	e7b9      	b.n	80091cc <__gethex+0x1ec>
 8009258:	da09      	bge.n	800926e <__gethex+0x28e>
 800925a:	1bf7      	subs	r7, r6, r7
 800925c:	4621      	mov	r1, r4
 800925e:	463a      	mov	r2, r7
 8009260:	9802      	ldr	r0, [sp, #8]
 8009262:	f000 fc25 	bl	8009ab0 <__lshift>
 8009266:	4604      	mov	r4, r0
 8009268:	1bed      	subs	r5, r5, r7
 800926a:	f100 0914 	add.w	r9, r0, #20
 800926e:	f04f 0a00 	mov.w	sl, #0
 8009272:	e7b0      	b.n	80091d6 <__gethex+0x1f6>
 8009274:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009278:	42a8      	cmp	r0, r5
 800927a:	dd71      	ble.n	8009360 <__gethex+0x380>
 800927c:	1b45      	subs	r5, r0, r5
 800927e:	42ae      	cmp	r6, r5
 8009280:	dc34      	bgt.n	80092ec <__gethex+0x30c>
 8009282:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009286:	2b02      	cmp	r3, #2
 8009288:	d028      	beq.n	80092dc <__gethex+0x2fc>
 800928a:	2b03      	cmp	r3, #3
 800928c:	d02a      	beq.n	80092e4 <__gethex+0x304>
 800928e:	2b01      	cmp	r3, #1
 8009290:	d115      	bne.n	80092be <__gethex+0x2de>
 8009292:	42ae      	cmp	r6, r5
 8009294:	d113      	bne.n	80092be <__gethex+0x2de>
 8009296:	2e01      	cmp	r6, #1
 8009298:	d10b      	bne.n	80092b2 <__gethex+0x2d2>
 800929a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800929e:	9a06      	ldr	r2, [sp, #24]
 80092a0:	2762      	movs	r7, #98	; 0x62
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	2301      	movs	r3, #1
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	f8c9 3000 	str.w	r3, [r9]
 80092ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092ae:	601c      	str	r4, [r3, #0]
 80092b0:	e728      	b.n	8009104 <__gethex+0x124>
 80092b2:	4620      	mov	r0, r4
 80092b4:	1e71      	subs	r1, r6, #1
 80092b6:	f000 fe56 	bl	8009f66 <__any_on>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d1ed      	bne.n	800929a <__gethex+0x2ba>
 80092be:	4621      	mov	r1, r4
 80092c0:	9802      	ldr	r0, [sp, #8]
 80092c2:	f000 f9dd 	bl	8009680 <_Bfree>
 80092c6:	2300      	movs	r3, #0
 80092c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092ca:	2750      	movs	r7, #80	; 0x50
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	e719      	b.n	8009104 <__gethex+0x124>
 80092d0:	0800ce64 	.word	0x0800ce64
 80092d4:	0800cde8 	.word	0x0800cde8
 80092d8:	0800cdf9 	.word	0x0800cdf9
 80092dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1ed      	bne.n	80092be <__gethex+0x2de>
 80092e2:	e7da      	b.n	800929a <__gethex+0x2ba>
 80092e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1d7      	bne.n	800929a <__gethex+0x2ba>
 80092ea:	e7e8      	b.n	80092be <__gethex+0x2de>
 80092ec:	1e6f      	subs	r7, r5, #1
 80092ee:	f1ba 0f00 	cmp.w	sl, #0
 80092f2:	d132      	bne.n	800935a <__gethex+0x37a>
 80092f4:	b127      	cbz	r7, 8009300 <__gethex+0x320>
 80092f6:	4639      	mov	r1, r7
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 fe34 	bl	8009f66 <__any_on>
 80092fe:	4682      	mov	sl, r0
 8009300:	2101      	movs	r1, #1
 8009302:	117b      	asrs	r3, r7, #5
 8009304:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009308:	f007 071f 	and.w	r7, r7, #31
 800930c:	fa01 f707 	lsl.w	r7, r1, r7
 8009310:	421f      	tst	r7, r3
 8009312:	f04f 0702 	mov.w	r7, #2
 8009316:	4629      	mov	r1, r5
 8009318:	4620      	mov	r0, r4
 800931a:	bf18      	it	ne
 800931c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009320:	1b76      	subs	r6, r6, r5
 8009322:	f7ff fdf5 	bl	8008f10 <rshift>
 8009326:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800932a:	f1ba 0f00 	cmp.w	sl, #0
 800932e:	d048      	beq.n	80093c2 <__gethex+0x3e2>
 8009330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d015      	beq.n	8009364 <__gethex+0x384>
 8009338:	2b03      	cmp	r3, #3
 800933a:	d017      	beq.n	800936c <__gethex+0x38c>
 800933c:	2b01      	cmp	r3, #1
 800933e:	d109      	bne.n	8009354 <__gethex+0x374>
 8009340:	f01a 0f02 	tst.w	sl, #2
 8009344:	d006      	beq.n	8009354 <__gethex+0x374>
 8009346:	f8d9 0000 	ldr.w	r0, [r9]
 800934a:	ea4a 0a00 	orr.w	sl, sl, r0
 800934e:	f01a 0f01 	tst.w	sl, #1
 8009352:	d10e      	bne.n	8009372 <__gethex+0x392>
 8009354:	f047 0710 	orr.w	r7, r7, #16
 8009358:	e033      	b.n	80093c2 <__gethex+0x3e2>
 800935a:	f04f 0a01 	mov.w	sl, #1
 800935e:	e7cf      	b.n	8009300 <__gethex+0x320>
 8009360:	2701      	movs	r7, #1
 8009362:	e7e2      	b.n	800932a <__gethex+0x34a>
 8009364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009366:	f1c3 0301 	rsb	r3, r3, #1
 800936a:	9315      	str	r3, [sp, #84]	; 0x54
 800936c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f0      	beq.n	8009354 <__gethex+0x374>
 8009372:	f04f 0c00 	mov.w	ip, #0
 8009376:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800937a:	f104 0314 	add.w	r3, r4, #20
 800937e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009382:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009386:	4618      	mov	r0, r3
 8009388:	f853 2b04 	ldr.w	r2, [r3], #4
 800938c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009390:	d01c      	beq.n	80093cc <__gethex+0x3ec>
 8009392:	3201      	adds	r2, #1
 8009394:	6002      	str	r2, [r0, #0]
 8009396:	2f02      	cmp	r7, #2
 8009398:	f104 0314 	add.w	r3, r4, #20
 800939c:	d13d      	bne.n	800941a <__gethex+0x43a>
 800939e:	f8d8 2000 	ldr.w	r2, [r8]
 80093a2:	3a01      	subs	r2, #1
 80093a4:	42b2      	cmp	r2, r6
 80093a6:	d10a      	bne.n	80093be <__gethex+0x3de>
 80093a8:	2201      	movs	r2, #1
 80093aa:	1171      	asrs	r1, r6, #5
 80093ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093b0:	f006 061f 	and.w	r6, r6, #31
 80093b4:	fa02 f606 	lsl.w	r6, r2, r6
 80093b8:	421e      	tst	r6, r3
 80093ba:	bf18      	it	ne
 80093bc:	4617      	movne	r7, r2
 80093be:	f047 0720 	orr.w	r7, r7, #32
 80093c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093c4:	601c      	str	r4, [r3, #0]
 80093c6:	9b06      	ldr	r3, [sp, #24]
 80093c8:	601d      	str	r5, [r3, #0]
 80093ca:	e69b      	b.n	8009104 <__gethex+0x124>
 80093cc:	4299      	cmp	r1, r3
 80093ce:	f843 cc04 	str.w	ip, [r3, #-4]
 80093d2:	d8d8      	bhi.n	8009386 <__gethex+0x3a6>
 80093d4:	68a3      	ldr	r3, [r4, #8]
 80093d6:	459b      	cmp	fp, r3
 80093d8:	db17      	blt.n	800940a <__gethex+0x42a>
 80093da:	6861      	ldr	r1, [r4, #4]
 80093dc:	9802      	ldr	r0, [sp, #8]
 80093de:	3101      	adds	r1, #1
 80093e0:	f000 f90e 	bl	8009600 <_Balloc>
 80093e4:	4681      	mov	r9, r0
 80093e6:	b918      	cbnz	r0, 80093f0 <__gethex+0x410>
 80093e8:	4602      	mov	r2, r0
 80093ea:	2184      	movs	r1, #132	; 0x84
 80093ec:	4b19      	ldr	r3, [pc, #100]	; (8009454 <__gethex+0x474>)
 80093ee:	e6ac      	b.n	800914a <__gethex+0x16a>
 80093f0:	6922      	ldr	r2, [r4, #16]
 80093f2:	f104 010c 	add.w	r1, r4, #12
 80093f6:	3202      	adds	r2, #2
 80093f8:	0092      	lsls	r2, r2, #2
 80093fa:	300c      	adds	r0, #12
 80093fc:	f7fe fe16 	bl	800802c <memcpy>
 8009400:	4621      	mov	r1, r4
 8009402:	9802      	ldr	r0, [sp, #8]
 8009404:	f000 f93c 	bl	8009680 <_Bfree>
 8009408:	464c      	mov	r4, r9
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	6122      	str	r2, [r4, #16]
 8009410:	2201      	movs	r2, #1
 8009412:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009416:	615a      	str	r2, [r3, #20]
 8009418:	e7bd      	b.n	8009396 <__gethex+0x3b6>
 800941a:	6922      	ldr	r2, [r4, #16]
 800941c:	455a      	cmp	r2, fp
 800941e:	dd0b      	ble.n	8009438 <__gethex+0x458>
 8009420:	2101      	movs	r1, #1
 8009422:	4620      	mov	r0, r4
 8009424:	f7ff fd74 	bl	8008f10 <rshift>
 8009428:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800942c:	3501      	adds	r5, #1
 800942e:	42ab      	cmp	r3, r5
 8009430:	f6ff aed5 	blt.w	80091de <__gethex+0x1fe>
 8009434:	2701      	movs	r7, #1
 8009436:	e7c2      	b.n	80093be <__gethex+0x3de>
 8009438:	f016 061f 	ands.w	r6, r6, #31
 800943c:	d0fa      	beq.n	8009434 <__gethex+0x454>
 800943e:	449a      	add	sl, r3
 8009440:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009444:	f000 f9d2 	bl	80097ec <__hi0bits>
 8009448:	f1c6 0620 	rsb	r6, r6, #32
 800944c:	42b0      	cmp	r0, r6
 800944e:	dbe7      	blt.n	8009420 <__gethex+0x440>
 8009450:	e7f0      	b.n	8009434 <__gethex+0x454>
 8009452:	bf00      	nop
 8009454:	0800cde8 	.word	0x0800cde8

08009458 <L_shift>:
 8009458:	f1c2 0208 	rsb	r2, r2, #8
 800945c:	0092      	lsls	r2, r2, #2
 800945e:	b570      	push	{r4, r5, r6, lr}
 8009460:	f1c2 0620 	rsb	r6, r2, #32
 8009464:	6843      	ldr	r3, [r0, #4]
 8009466:	6804      	ldr	r4, [r0, #0]
 8009468:	fa03 f506 	lsl.w	r5, r3, r6
 800946c:	432c      	orrs	r4, r5
 800946e:	40d3      	lsrs	r3, r2
 8009470:	6004      	str	r4, [r0, #0]
 8009472:	f840 3f04 	str.w	r3, [r0, #4]!
 8009476:	4288      	cmp	r0, r1
 8009478:	d3f4      	bcc.n	8009464 <L_shift+0xc>
 800947a:	bd70      	pop	{r4, r5, r6, pc}

0800947c <__match>:
 800947c:	b530      	push	{r4, r5, lr}
 800947e:	6803      	ldr	r3, [r0, #0]
 8009480:	3301      	adds	r3, #1
 8009482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009486:	b914      	cbnz	r4, 800948e <__match+0x12>
 8009488:	6003      	str	r3, [r0, #0]
 800948a:	2001      	movs	r0, #1
 800948c:	bd30      	pop	{r4, r5, pc}
 800948e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009492:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009496:	2d19      	cmp	r5, #25
 8009498:	bf98      	it	ls
 800949a:	3220      	addls	r2, #32
 800949c:	42a2      	cmp	r2, r4
 800949e:	d0f0      	beq.n	8009482 <__match+0x6>
 80094a0:	2000      	movs	r0, #0
 80094a2:	e7f3      	b.n	800948c <__match+0x10>

080094a4 <__hexnan>:
 80094a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a8:	2500      	movs	r5, #0
 80094aa:	680b      	ldr	r3, [r1, #0]
 80094ac:	4682      	mov	sl, r0
 80094ae:	115e      	asrs	r6, r3, #5
 80094b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094b4:	f013 031f 	ands.w	r3, r3, #31
 80094b8:	bf18      	it	ne
 80094ba:	3604      	addne	r6, #4
 80094bc:	1f37      	subs	r7, r6, #4
 80094be:	4690      	mov	r8, r2
 80094c0:	46b9      	mov	r9, r7
 80094c2:	463c      	mov	r4, r7
 80094c4:	46ab      	mov	fp, r5
 80094c6:	b087      	sub	sp, #28
 80094c8:	6801      	ldr	r1, [r0, #0]
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80094d0:	9502      	str	r5, [sp, #8]
 80094d2:	784a      	ldrb	r2, [r1, #1]
 80094d4:	1c4b      	adds	r3, r1, #1
 80094d6:	9303      	str	r3, [sp, #12]
 80094d8:	b342      	cbz	r2, 800952c <__hexnan+0x88>
 80094da:	4610      	mov	r0, r2
 80094dc:	9105      	str	r1, [sp, #20]
 80094de:	9204      	str	r2, [sp, #16]
 80094e0:	f7ff fd69 	bl	8008fb6 <__hexdig_fun>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d14f      	bne.n	8009588 <__hexnan+0xe4>
 80094e8:	9a04      	ldr	r2, [sp, #16]
 80094ea:	9905      	ldr	r1, [sp, #20]
 80094ec:	2a20      	cmp	r2, #32
 80094ee:	d818      	bhi.n	8009522 <__hexnan+0x7e>
 80094f0:	9b02      	ldr	r3, [sp, #8]
 80094f2:	459b      	cmp	fp, r3
 80094f4:	dd13      	ble.n	800951e <__hexnan+0x7a>
 80094f6:	454c      	cmp	r4, r9
 80094f8:	d206      	bcs.n	8009508 <__hexnan+0x64>
 80094fa:	2d07      	cmp	r5, #7
 80094fc:	dc04      	bgt.n	8009508 <__hexnan+0x64>
 80094fe:	462a      	mov	r2, r5
 8009500:	4649      	mov	r1, r9
 8009502:	4620      	mov	r0, r4
 8009504:	f7ff ffa8 	bl	8009458 <L_shift>
 8009508:	4544      	cmp	r4, r8
 800950a:	d950      	bls.n	80095ae <__hexnan+0x10a>
 800950c:	2300      	movs	r3, #0
 800950e:	f1a4 0904 	sub.w	r9, r4, #4
 8009512:	f844 3c04 	str.w	r3, [r4, #-4]
 8009516:	461d      	mov	r5, r3
 8009518:	464c      	mov	r4, r9
 800951a:	f8cd b008 	str.w	fp, [sp, #8]
 800951e:	9903      	ldr	r1, [sp, #12]
 8009520:	e7d7      	b.n	80094d2 <__hexnan+0x2e>
 8009522:	2a29      	cmp	r2, #41	; 0x29
 8009524:	d156      	bne.n	80095d4 <__hexnan+0x130>
 8009526:	3102      	adds	r1, #2
 8009528:	f8ca 1000 	str.w	r1, [sl]
 800952c:	f1bb 0f00 	cmp.w	fp, #0
 8009530:	d050      	beq.n	80095d4 <__hexnan+0x130>
 8009532:	454c      	cmp	r4, r9
 8009534:	d206      	bcs.n	8009544 <__hexnan+0xa0>
 8009536:	2d07      	cmp	r5, #7
 8009538:	dc04      	bgt.n	8009544 <__hexnan+0xa0>
 800953a:	462a      	mov	r2, r5
 800953c:	4649      	mov	r1, r9
 800953e:	4620      	mov	r0, r4
 8009540:	f7ff ff8a 	bl	8009458 <L_shift>
 8009544:	4544      	cmp	r4, r8
 8009546:	d934      	bls.n	80095b2 <__hexnan+0x10e>
 8009548:	4623      	mov	r3, r4
 800954a:	f1a8 0204 	sub.w	r2, r8, #4
 800954e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009552:	429f      	cmp	r7, r3
 8009554:	f842 1f04 	str.w	r1, [r2, #4]!
 8009558:	d2f9      	bcs.n	800954e <__hexnan+0xaa>
 800955a:	1b3b      	subs	r3, r7, r4
 800955c:	f023 0303 	bic.w	r3, r3, #3
 8009560:	3304      	adds	r3, #4
 8009562:	3401      	adds	r4, #1
 8009564:	3e03      	subs	r6, #3
 8009566:	42b4      	cmp	r4, r6
 8009568:	bf88      	it	hi
 800956a:	2304      	movhi	r3, #4
 800956c:	2200      	movs	r2, #0
 800956e:	4443      	add	r3, r8
 8009570:	f843 2b04 	str.w	r2, [r3], #4
 8009574:	429f      	cmp	r7, r3
 8009576:	d2fb      	bcs.n	8009570 <__hexnan+0xcc>
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	b91b      	cbnz	r3, 8009584 <__hexnan+0xe0>
 800957c:	4547      	cmp	r7, r8
 800957e:	d127      	bne.n	80095d0 <__hexnan+0x12c>
 8009580:	2301      	movs	r3, #1
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	2005      	movs	r0, #5
 8009586:	e026      	b.n	80095d6 <__hexnan+0x132>
 8009588:	3501      	adds	r5, #1
 800958a:	2d08      	cmp	r5, #8
 800958c:	f10b 0b01 	add.w	fp, fp, #1
 8009590:	dd06      	ble.n	80095a0 <__hexnan+0xfc>
 8009592:	4544      	cmp	r4, r8
 8009594:	d9c3      	bls.n	800951e <__hexnan+0x7a>
 8009596:	2300      	movs	r3, #0
 8009598:	2501      	movs	r5, #1
 800959a:	f844 3c04 	str.w	r3, [r4, #-4]
 800959e:	3c04      	subs	r4, #4
 80095a0:	6822      	ldr	r2, [r4, #0]
 80095a2:	f000 000f 	and.w	r0, r0, #15
 80095a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80095aa:	6022      	str	r2, [r4, #0]
 80095ac:	e7b7      	b.n	800951e <__hexnan+0x7a>
 80095ae:	2508      	movs	r5, #8
 80095b0:	e7b5      	b.n	800951e <__hexnan+0x7a>
 80095b2:	9b01      	ldr	r3, [sp, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0df      	beq.n	8009578 <__hexnan+0xd4>
 80095b8:	f04f 32ff 	mov.w	r2, #4294967295
 80095bc:	f1c3 0320 	rsb	r3, r3, #32
 80095c0:	fa22 f303 	lsr.w	r3, r2, r3
 80095c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095c8:	401a      	ands	r2, r3
 80095ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80095ce:	e7d3      	b.n	8009578 <__hexnan+0xd4>
 80095d0:	3f04      	subs	r7, #4
 80095d2:	e7d1      	b.n	8009578 <__hexnan+0xd4>
 80095d4:	2004      	movs	r0, #4
 80095d6:	b007      	add	sp, #28
 80095d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095dc <__ascii_mbtowc>:
 80095dc:	b082      	sub	sp, #8
 80095de:	b901      	cbnz	r1, 80095e2 <__ascii_mbtowc+0x6>
 80095e0:	a901      	add	r1, sp, #4
 80095e2:	b142      	cbz	r2, 80095f6 <__ascii_mbtowc+0x1a>
 80095e4:	b14b      	cbz	r3, 80095fa <__ascii_mbtowc+0x1e>
 80095e6:	7813      	ldrb	r3, [r2, #0]
 80095e8:	600b      	str	r3, [r1, #0]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	1e10      	subs	r0, r2, #0
 80095ee:	bf18      	it	ne
 80095f0:	2001      	movne	r0, #1
 80095f2:	b002      	add	sp, #8
 80095f4:	4770      	bx	lr
 80095f6:	4610      	mov	r0, r2
 80095f8:	e7fb      	b.n	80095f2 <__ascii_mbtowc+0x16>
 80095fa:	f06f 0001 	mvn.w	r0, #1
 80095fe:	e7f8      	b.n	80095f2 <__ascii_mbtowc+0x16>

08009600 <_Balloc>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009604:	4604      	mov	r4, r0
 8009606:	460d      	mov	r5, r1
 8009608:	b976      	cbnz	r6, 8009628 <_Balloc+0x28>
 800960a:	2010      	movs	r0, #16
 800960c:	f001 fc20 	bl	800ae50 <malloc>
 8009610:	4602      	mov	r2, r0
 8009612:	6260      	str	r0, [r4, #36]	; 0x24
 8009614:	b920      	cbnz	r0, 8009620 <_Balloc+0x20>
 8009616:	2166      	movs	r1, #102	; 0x66
 8009618:	4b17      	ldr	r3, [pc, #92]	; (8009678 <_Balloc+0x78>)
 800961a:	4818      	ldr	r0, [pc, #96]	; (800967c <_Balloc+0x7c>)
 800961c:	f000 fd6a 	bl	800a0f4 <__assert_func>
 8009620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009624:	6006      	str	r6, [r0, #0]
 8009626:	60c6      	str	r6, [r0, #12]
 8009628:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800962a:	68f3      	ldr	r3, [r6, #12]
 800962c:	b183      	cbz	r3, 8009650 <_Balloc+0x50>
 800962e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009636:	b9b8      	cbnz	r0, 8009668 <_Balloc+0x68>
 8009638:	2101      	movs	r1, #1
 800963a:	fa01 f605 	lsl.w	r6, r1, r5
 800963e:	1d72      	adds	r2, r6, #5
 8009640:	4620      	mov	r0, r4
 8009642:	0092      	lsls	r2, r2, #2
 8009644:	f000 fcb0 	bl	8009fa8 <_calloc_r>
 8009648:	b160      	cbz	r0, 8009664 <_Balloc+0x64>
 800964a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800964e:	e00e      	b.n	800966e <_Balloc+0x6e>
 8009650:	2221      	movs	r2, #33	; 0x21
 8009652:	2104      	movs	r1, #4
 8009654:	4620      	mov	r0, r4
 8009656:	f000 fca7 	bl	8009fa8 <_calloc_r>
 800965a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800965c:	60f0      	str	r0, [r6, #12]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e4      	bne.n	800962e <_Balloc+0x2e>
 8009664:	2000      	movs	r0, #0
 8009666:	bd70      	pop	{r4, r5, r6, pc}
 8009668:	6802      	ldr	r2, [r0, #0]
 800966a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800966e:	2300      	movs	r3, #0
 8009670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009674:	e7f7      	b.n	8009666 <_Balloc+0x66>
 8009676:	bf00      	nop
 8009678:	0800ce78 	.word	0x0800ce78
 800967c:	0800ce8f 	.word	0x0800ce8f

08009680 <_Bfree>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009684:	4605      	mov	r5, r0
 8009686:	460c      	mov	r4, r1
 8009688:	b976      	cbnz	r6, 80096a8 <_Bfree+0x28>
 800968a:	2010      	movs	r0, #16
 800968c:	f001 fbe0 	bl	800ae50 <malloc>
 8009690:	4602      	mov	r2, r0
 8009692:	6268      	str	r0, [r5, #36]	; 0x24
 8009694:	b920      	cbnz	r0, 80096a0 <_Bfree+0x20>
 8009696:	218a      	movs	r1, #138	; 0x8a
 8009698:	4b08      	ldr	r3, [pc, #32]	; (80096bc <_Bfree+0x3c>)
 800969a:	4809      	ldr	r0, [pc, #36]	; (80096c0 <_Bfree+0x40>)
 800969c:	f000 fd2a 	bl	800a0f4 <__assert_func>
 80096a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a4:	6006      	str	r6, [r0, #0]
 80096a6:	60c6      	str	r6, [r0, #12]
 80096a8:	b13c      	cbz	r4, 80096ba <_Bfree+0x3a>
 80096aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096ac:	6862      	ldr	r2, [r4, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096b4:	6021      	str	r1, [r4, #0]
 80096b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096ba:	bd70      	pop	{r4, r5, r6, pc}
 80096bc:	0800ce78 	.word	0x0800ce78
 80096c0:	0800ce8f 	.word	0x0800ce8f

080096c4 <__multadd>:
 80096c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	4698      	mov	r8, r3
 80096ca:	460c      	mov	r4, r1
 80096cc:	2300      	movs	r3, #0
 80096ce:	690e      	ldr	r6, [r1, #16]
 80096d0:	4607      	mov	r7, r0
 80096d2:	f101 0014 	add.w	r0, r1, #20
 80096d6:	6805      	ldr	r5, [r0, #0]
 80096d8:	3301      	adds	r3, #1
 80096da:	b2a9      	uxth	r1, r5
 80096dc:	fb02 8101 	mla	r1, r2, r1, r8
 80096e0:	0c2d      	lsrs	r5, r5, #16
 80096e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80096e6:	fb02 c505 	mla	r5, r2, r5, ip
 80096ea:	b289      	uxth	r1, r1
 80096ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80096f0:	429e      	cmp	r6, r3
 80096f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80096f6:	f840 1b04 	str.w	r1, [r0], #4
 80096fa:	dcec      	bgt.n	80096d6 <__multadd+0x12>
 80096fc:	f1b8 0f00 	cmp.w	r8, #0
 8009700:	d022      	beq.n	8009748 <__multadd+0x84>
 8009702:	68a3      	ldr	r3, [r4, #8]
 8009704:	42b3      	cmp	r3, r6
 8009706:	dc19      	bgt.n	800973c <__multadd+0x78>
 8009708:	6861      	ldr	r1, [r4, #4]
 800970a:	4638      	mov	r0, r7
 800970c:	3101      	adds	r1, #1
 800970e:	f7ff ff77 	bl	8009600 <_Balloc>
 8009712:	4605      	mov	r5, r0
 8009714:	b928      	cbnz	r0, 8009722 <__multadd+0x5e>
 8009716:	4602      	mov	r2, r0
 8009718:	21b5      	movs	r1, #181	; 0xb5
 800971a:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <__multadd+0x8c>)
 800971c:	480d      	ldr	r0, [pc, #52]	; (8009754 <__multadd+0x90>)
 800971e:	f000 fce9 	bl	800a0f4 <__assert_func>
 8009722:	6922      	ldr	r2, [r4, #16]
 8009724:	f104 010c 	add.w	r1, r4, #12
 8009728:	3202      	adds	r2, #2
 800972a:	0092      	lsls	r2, r2, #2
 800972c:	300c      	adds	r0, #12
 800972e:	f7fe fc7d 	bl	800802c <memcpy>
 8009732:	4621      	mov	r1, r4
 8009734:	4638      	mov	r0, r7
 8009736:	f7ff ffa3 	bl	8009680 <_Bfree>
 800973a:	462c      	mov	r4, r5
 800973c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009740:	3601      	adds	r6, #1
 8009742:	f8c3 8014 	str.w	r8, [r3, #20]
 8009746:	6126      	str	r6, [r4, #16]
 8009748:	4620      	mov	r0, r4
 800974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800974e:	bf00      	nop
 8009750:	0800cde8 	.word	0x0800cde8
 8009754:	0800ce8f 	.word	0x0800ce8f

08009758 <__s2b>:
 8009758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975c:	4615      	mov	r5, r2
 800975e:	2209      	movs	r2, #9
 8009760:	461f      	mov	r7, r3
 8009762:	3308      	adds	r3, #8
 8009764:	460c      	mov	r4, r1
 8009766:	fb93 f3f2 	sdiv	r3, r3, r2
 800976a:	4606      	mov	r6, r0
 800976c:	2201      	movs	r2, #1
 800976e:	2100      	movs	r1, #0
 8009770:	429a      	cmp	r2, r3
 8009772:	db09      	blt.n	8009788 <__s2b+0x30>
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ff43 	bl	8009600 <_Balloc>
 800977a:	b940      	cbnz	r0, 800978e <__s2b+0x36>
 800977c:	4602      	mov	r2, r0
 800977e:	21ce      	movs	r1, #206	; 0xce
 8009780:	4b18      	ldr	r3, [pc, #96]	; (80097e4 <__s2b+0x8c>)
 8009782:	4819      	ldr	r0, [pc, #100]	; (80097e8 <__s2b+0x90>)
 8009784:	f000 fcb6 	bl	800a0f4 <__assert_func>
 8009788:	0052      	lsls	r2, r2, #1
 800978a:	3101      	adds	r1, #1
 800978c:	e7f0      	b.n	8009770 <__s2b+0x18>
 800978e:	9b08      	ldr	r3, [sp, #32]
 8009790:	2d09      	cmp	r5, #9
 8009792:	6143      	str	r3, [r0, #20]
 8009794:	f04f 0301 	mov.w	r3, #1
 8009798:	6103      	str	r3, [r0, #16]
 800979a:	dd16      	ble.n	80097ca <__s2b+0x72>
 800979c:	f104 0909 	add.w	r9, r4, #9
 80097a0:	46c8      	mov	r8, r9
 80097a2:	442c      	add	r4, r5
 80097a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80097a8:	4601      	mov	r1, r0
 80097aa:	220a      	movs	r2, #10
 80097ac:	4630      	mov	r0, r6
 80097ae:	3b30      	subs	r3, #48	; 0x30
 80097b0:	f7ff ff88 	bl	80096c4 <__multadd>
 80097b4:	45a0      	cmp	r8, r4
 80097b6:	d1f5      	bne.n	80097a4 <__s2b+0x4c>
 80097b8:	f1a5 0408 	sub.w	r4, r5, #8
 80097bc:	444c      	add	r4, r9
 80097be:	1b2d      	subs	r5, r5, r4
 80097c0:	1963      	adds	r3, r4, r5
 80097c2:	42bb      	cmp	r3, r7
 80097c4:	db04      	blt.n	80097d0 <__s2b+0x78>
 80097c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ca:	2509      	movs	r5, #9
 80097cc:	340a      	adds	r4, #10
 80097ce:	e7f6      	b.n	80097be <__s2b+0x66>
 80097d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097d4:	4601      	mov	r1, r0
 80097d6:	220a      	movs	r2, #10
 80097d8:	4630      	mov	r0, r6
 80097da:	3b30      	subs	r3, #48	; 0x30
 80097dc:	f7ff ff72 	bl	80096c4 <__multadd>
 80097e0:	e7ee      	b.n	80097c0 <__s2b+0x68>
 80097e2:	bf00      	nop
 80097e4:	0800cde8 	.word	0x0800cde8
 80097e8:	0800ce8f 	.word	0x0800ce8f

080097ec <__hi0bits>:
 80097ec:	0c02      	lsrs	r2, r0, #16
 80097ee:	0412      	lsls	r2, r2, #16
 80097f0:	4603      	mov	r3, r0
 80097f2:	b9ca      	cbnz	r2, 8009828 <__hi0bits+0x3c>
 80097f4:	0403      	lsls	r3, r0, #16
 80097f6:	2010      	movs	r0, #16
 80097f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80097fc:	bf04      	itt	eq
 80097fe:	021b      	lsleq	r3, r3, #8
 8009800:	3008      	addeq	r0, #8
 8009802:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009806:	bf04      	itt	eq
 8009808:	011b      	lsleq	r3, r3, #4
 800980a:	3004      	addeq	r0, #4
 800980c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009810:	bf04      	itt	eq
 8009812:	009b      	lsleq	r3, r3, #2
 8009814:	3002      	addeq	r0, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	db05      	blt.n	8009826 <__hi0bits+0x3a>
 800981a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800981e:	f100 0001 	add.w	r0, r0, #1
 8009822:	bf08      	it	eq
 8009824:	2020      	moveq	r0, #32
 8009826:	4770      	bx	lr
 8009828:	2000      	movs	r0, #0
 800982a:	e7e5      	b.n	80097f8 <__hi0bits+0xc>

0800982c <__lo0bits>:
 800982c:	6803      	ldr	r3, [r0, #0]
 800982e:	4602      	mov	r2, r0
 8009830:	f013 0007 	ands.w	r0, r3, #7
 8009834:	d00b      	beq.n	800984e <__lo0bits+0x22>
 8009836:	07d9      	lsls	r1, r3, #31
 8009838:	d422      	bmi.n	8009880 <__lo0bits+0x54>
 800983a:	0798      	lsls	r0, r3, #30
 800983c:	bf49      	itett	mi
 800983e:	085b      	lsrmi	r3, r3, #1
 8009840:	089b      	lsrpl	r3, r3, #2
 8009842:	2001      	movmi	r0, #1
 8009844:	6013      	strmi	r3, [r2, #0]
 8009846:	bf5c      	itt	pl
 8009848:	2002      	movpl	r0, #2
 800984a:	6013      	strpl	r3, [r2, #0]
 800984c:	4770      	bx	lr
 800984e:	b299      	uxth	r1, r3
 8009850:	b909      	cbnz	r1, 8009856 <__lo0bits+0x2a>
 8009852:	2010      	movs	r0, #16
 8009854:	0c1b      	lsrs	r3, r3, #16
 8009856:	f013 0fff 	tst.w	r3, #255	; 0xff
 800985a:	bf04      	itt	eq
 800985c:	0a1b      	lsreq	r3, r3, #8
 800985e:	3008      	addeq	r0, #8
 8009860:	0719      	lsls	r1, r3, #28
 8009862:	bf04      	itt	eq
 8009864:	091b      	lsreq	r3, r3, #4
 8009866:	3004      	addeq	r0, #4
 8009868:	0799      	lsls	r1, r3, #30
 800986a:	bf04      	itt	eq
 800986c:	089b      	lsreq	r3, r3, #2
 800986e:	3002      	addeq	r0, #2
 8009870:	07d9      	lsls	r1, r3, #31
 8009872:	d403      	bmi.n	800987c <__lo0bits+0x50>
 8009874:	085b      	lsrs	r3, r3, #1
 8009876:	f100 0001 	add.w	r0, r0, #1
 800987a:	d003      	beq.n	8009884 <__lo0bits+0x58>
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	4770      	bx	lr
 8009880:	2000      	movs	r0, #0
 8009882:	4770      	bx	lr
 8009884:	2020      	movs	r0, #32
 8009886:	4770      	bx	lr

08009888 <__i2b>:
 8009888:	b510      	push	{r4, lr}
 800988a:	460c      	mov	r4, r1
 800988c:	2101      	movs	r1, #1
 800988e:	f7ff feb7 	bl	8009600 <_Balloc>
 8009892:	4602      	mov	r2, r0
 8009894:	b928      	cbnz	r0, 80098a2 <__i2b+0x1a>
 8009896:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800989a:	4b04      	ldr	r3, [pc, #16]	; (80098ac <__i2b+0x24>)
 800989c:	4804      	ldr	r0, [pc, #16]	; (80098b0 <__i2b+0x28>)
 800989e:	f000 fc29 	bl	800a0f4 <__assert_func>
 80098a2:	2301      	movs	r3, #1
 80098a4:	6144      	str	r4, [r0, #20]
 80098a6:	6103      	str	r3, [r0, #16]
 80098a8:	bd10      	pop	{r4, pc}
 80098aa:	bf00      	nop
 80098ac:	0800cde8 	.word	0x0800cde8
 80098b0:	0800ce8f 	.word	0x0800ce8f

080098b4 <__multiply>:
 80098b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b8:	4614      	mov	r4, r2
 80098ba:	690a      	ldr	r2, [r1, #16]
 80098bc:	6923      	ldr	r3, [r4, #16]
 80098be:	460d      	mov	r5, r1
 80098c0:	429a      	cmp	r2, r3
 80098c2:	bfbe      	ittt	lt
 80098c4:	460b      	movlt	r3, r1
 80098c6:	4625      	movlt	r5, r4
 80098c8:	461c      	movlt	r4, r3
 80098ca:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80098ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098d2:	68ab      	ldr	r3, [r5, #8]
 80098d4:	6869      	ldr	r1, [r5, #4]
 80098d6:	eb0a 0709 	add.w	r7, sl, r9
 80098da:	42bb      	cmp	r3, r7
 80098dc:	b085      	sub	sp, #20
 80098de:	bfb8      	it	lt
 80098e0:	3101      	addlt	r1, #1
 80098e2:	f7ff fe8d 	bl	8009600 <_Balloc>
 80098e6:	b930      	cbnz	r0, 80098f6 <__multiply+0x42>
 80098e8:	4602      	mov	r2, r0
 80098ea:	f240 115d 	movw	r1, #349	; 0x15d
 80098ee:	4b41      	ldr	r3, [pc, #260]	; (80099f4 <__multiply+0x140>)
 80098f0:	4841      	ldr	r0, [pc, #260]	; (80099f8 <__multiply+0x144>)
 80098f2:	f000 fbff 	bl	800a0f4 <__assert_func>
 80098f6:	f100 0614 	add.w	r6, r0, #20
 80098fa:	4633      	mov	r3, r6
 80098fc:	2200      	movs	r2, #0
 80098fe:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009902:	4543      	cmp	r3, r8
 8009904:	d31e      	bcc.n	8009944 <__multiply+0x90>
 8009906:	f105 0c14 	add.w	ip, r5, #20
 800990a:	f104 0314 	add.w	r3, r4, #20
 800990e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009912:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009916:	9202      	str	r2, [sp, #8]
 8009918:	ebac 0205 	sub.w	r2, ip, r5
 800991c:	3a15      	subs	r2, #21
 800991e:	f022 0203 	bic.w	r2, r2, #3
 8009922:	3204      	adds	r2, #4
 8009924:	f105 0115 	add.w	r1, r5, #21
 8009928:	458c      	cmp	ip, r1
 800992a:	bf38      	it	cc
 800992c:	2204      	movcc	r2, #4
 800992e:	9201      	str	r2, [sp, #4]
 8009930:	9a02      	ldr	r2, [sp, #8]
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	429a      	cmp	r2, r3
 8009936:	d808      	bhi.n	800994a <__multiply+0x96>
 8009938:	2f00      	cmp	r7, #0
 800993a:	dc55      	bgt.n	80099e8 <__multiply+0x134>
 800993c:	6107      	str	r7, [r0, #16]
 800993e:	b005      	add	sp, #20
 8009940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009944:	f843 2b04 	str.w	r2, [r3], #4
 8009948:	e7db      	b.n	8009902 <__multiply+0x4e>
 800994a:	f8b3 a000 	ldrh.w	sl, [r3]
 800994e:	f1ba 0f00 	cmp.w	sl, #0
 8009952:	d020      	beq.n	8009996 <__multiply+0xe2>
 8009954:	46b1      	mov	r9, r6
 8009956:	2200      	movs	r2, #0
 8009958:	f105 0e14 	add.w	lr, r5, #20
 800995c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009960:	f8d9 b000 	ldr.w	fp, [r9]
 8009964:	b2a1      	uxth	r1, r4
 8009966:	fa1f fb8b 	uxth.w	fp, fp
 800996a:	fb0a b101 	mla	r1, sl, r1, fp
 800996e:	4411      	add	r1, r2
 8009970:	f8d9 2000 	ldr.w	r2, [r9]
 8009974:	0c24      	lsrs	r4, r4, #16
 8009976:	0c12      	lsrs	r2, r2, #16
 8009978:	fb0a 2404 	mla	r4, sl, r4, r2
 800997c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009980:	b289      	uxth	r1, r1
 8009982:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009986:	45f4      	cmp	ip, lr
 8009988:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800998c:	f849 1b04 	str.w	r1, [r9], #4
 8009990:	d8e4      	bhi.n	800995c <__multiply+0xa8>
 8009992:	9901      	ldr	r1, [sp, #4]
 8009994:	5072      	str	r2, [r6, r1]
 8009996:	9a03      	ldr	r2, [sp, #12]
 8009998:	3304      	adds	r3, #4
 800999a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800999e:	f1b9 0f00 	cmp.w	r9, #0
 80099a2:	d01f      	beq.n	80099e4 <__multiply+0x130>
 80099a4:	46b6      	mov	lr, r6
 80099a6:	f04f 0a00 	mov.w	sl, #0
 80099aa:	6834      	ldr	r4, [r6, #0]
 80099ac:	f105 0114 	add.w	r1, r5, #20
 80099b0:	880a      	ldrh	r2, [r1, #0]
 80099b2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80099b6:	b2a4      	uxth	r4, r4
 80099b8:	fb09 b202 	mla	r2, r9, r2, fp
 80099bc:	4492      	add	sl, r2
 80099be:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80099c2:	f84e 4b04 	str.w	r4, [lr], #4
 80099c6:	f851 4b04 	ldr.w	r4, [r1], #4
 80099ca:	f8be 2000 	ldrh.w	r2, [lr]
 80099ce:	0c24      	lsrs	r4, r4, #16
 80099d0:	fb09 2404 	mla	r4, r9, r4, r2
 80099d4:	458c      	cmp	ip, r1
 80099d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80099da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099de:	d8e7      	bhi.n	80099b0 <__multiply+0xfc>
 80099e0:	9a01      	ldr	r2, [sp, #4]
 80099e2:	50b4      	str	r4, [r6, r2]
 80099e4:	3604      	adds	r6, #4
 80099e6:	e7a3      	b.n	8009930 <__multiply+0x7c>
 80099e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1a5      	bne.n	800993c <__multiply+0x88>
 80099f0:	3f01      	subs	r7, #1
 80099f2:	e7a1      	b.n	8009938 <__multiply+0x84>
 80099f4:	0800cde8 	.word	0x0800cde8
 80099f8:	0800ce8f 	.word	0x0800ce8f

080099fc <__pow5mult>:
 80099fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a00:	4615      	mov	r5, r2
 8009a02:	f012 0203 	ands.w	r2, r2, #3
 8009a06:	4606      	mov	r6, r0
 8009a08:	460f      	mov	r7, r1
 8009a0a:	d007      	beq.n	8009a1c <__pow5mult+0x20>
 8009a0c:	4c25      	ldr	r4, [pc, #148]	; (8009aa4 <__pow5mult+0xa8>)
 8009a0e:	3a01      	subs	r2, #1
 8009a10:	2300      	movs	r3, #0
 8009a12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a16:	f7ff fe55 	bl	80096c4 <__multadd>
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	10ad      	asrs	r5, r5, #2
 8009a1e:	d03d      	beq.n	8009a9c <__pow5mult+0xa0>
 8009a20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a22:	b97c      	cbnz	r4, 8009a44 <__pow5mult+0x48>
 8009a24:	2010      	movs	r0, #16
 8009a26:	f001 fa13 	bl	800ae50 <malloc>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a2e:	b928      	cbnz	r0, 8009a3c <__pow5mult+0x40>
 8009a30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a34:	4b1c      	ldr	r3, [pc, #112]	; (8009aa8 <__pow5mult+0xac>)
 8009a36:	481d      	ldr	r0, [pc, #116]	; (8009aac <__pow5mult+0xb0>)
 8009a38:	f000 fb5c 	bl	800a0f4 <__assert_func>
 8009a3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a40:	6004      	str	r4, [r0, #0]
 8009a42:	60c4      	str	r4, [r0, #12]
 8009a44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a4c:	b94c      	cbnz	r4, 8009a62 <__pow5mult+0x66>
 8009a4e:	f240 2171 	movw	r1, #625	; 0x271
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7ff ff18 	bl	8009888 <__i2b>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a60:	6003      	str	r3, [r0, #0]
 8009a62:	f04f 0900 	mov.w	r9, #0
 8009a66:	07eb      	lsls	r3, r5, #31
 8009a68:	d50a      	bpl.n	8009a80 <__pow5mult+0x84>
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ff20 	bl	80098b4 <__multiply>
 8009a74:	4680      	mov	r8, r0
 8009a76:	4639      	mov	r1, r7
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7ff fe01 	bl	8009680 <_Bfree>
 8009a7e:	4647      	mov	r7, r8
 8009a80:	106d      	asrs	r5, r5, #1
 8009a82:	d00b      	beq.n	8009a9c <__pow5mult+0xa0>
 8009a84:	6820      	ldr	r0, [r4, #0]
 8009a86:	b938      	cbnz	r0, 8009a98 <__pow5mult+0x9c>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff ff11 	bl	80098b4 <__multiply>
 8009a92:	6020      	str	r0, [r4, #0]
 8009a94:	f8c0 9000 	str.w	r9, [r0]
 8009a98:	4604      	mov	r4, r0
 8009a9a:	e7e4      	b.n	8009a66 <__pow5mult+0x6a>
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa2:	bf00      	nop
 8009aa4:	0800cfe0 	.word	0x0800cfe0
 8009aa8:	0800ce78 	.word	0x0800ce78
 8009aac:	0800ce8f 	.word	0x0800ce8f

08009ab0 <__lshift>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	4607      	mov	r7, r0
 8009ab8:	4691      	mov	r9, r2
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	6849      	ldr	r1, [r1, #4]
 8009abe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ac2:	68a3      	ldr	r3, [r4, #8]
 8009ac4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ac8:	f108 0601 	add.w	r6, r8, #1
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	db0b      	blt.n	8009ae8 <__lshift+0x38>
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff fd95 	bl	8009600 <_Balloc>
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	b948      	cbnz	r0, 8009aee <__lshift+0x3e>
 8009ada:	4602      	mov	r2, r0
 8009adc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ae0:	4b27      	ldr	r3, [pc, #156]	; (8009b80 <__lshift+0xd0>)
 8009ae2:	4828      	ldr	r0, [pc, #160]	; (8009b84 <__lshift+0xd4>)
 8009ae4:	f000 fb06 	bl	800a0f4 <__assert_func>
 8009ae8:	3101      	adds	r1, #1
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	e7ee      	b.n	8009acc <__lshift+0x1c>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f100 0114 	add.w	r1, r0, #20
 8009af4:	f100 0210 	add.w	r2, r0, #16
 8009af8:	4618      	mov	r0, r3
 8009afa:	4553      	cmp	r3, sl
 8009afc:	db33      	blt.n	8009b66 <__lshift+0xb6>
 8009afe:	6920      	ldr	r0, [r4, #16]
 8009b00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b04:	f104 0314 	add.w	r3, r4, #20
 8009b08:	f019 091f 	ands.w	r9, r9, #31
 8009b0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b14:	d02b      	beq.n	8009b6e <__lshift+0xbe>
 8009b16:	468a      	mov	sl, r1
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	fa00 f009 	lsl.w	r0, r0, r9
 8009b24:	4302      	orrs	r2, r0
 8009b26:	f84a 2b04 	str.w	r2, [sl], #4
 8009b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2e:	459c      	cmp	ip, r3
 8009b30:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b34:	d8f3      	bhi.n	8009b1e <__lshift+0x6e>
 8009b36:	ebac 0304 	sub.w	r3, ip, r4
 8009b3a:	3b15      	subs	r3, #21
 8009b3c:	f023 0303 	bic.w	r3, r3, #3
 8009b40:	3304      	adds	r3, #4
 8009b42:	f104 0015 	add.w	r0, r4, #21
 8009b46:	4584      	cmp	ip, r0
 8009b48:	bf38      	it	cc
 8009b4a:	2304      	movcc	r3, #4
 8009b4c:	50ca      	str	r2, [r1, r3]
 8009b4e:	b10a      	cbz	r2, 8009b54 <__lshift+0xa4>
 8009b50:	f108 0602 	add.w	r6, r8, #2
 8009b54:	3e01      	subs	r6, #1
 8009b56:	4638      	mov	r0, r7
 8009b58:	4621      	mov	r1, r4
 8009b5a:	612e      	str	r6, [r5, #16]
 8009b5c:	f7ff fd90 	bl	8009680 <_Bfree>
 8009b60:	4628      	mov	r0, r5
 8009b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b66:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	e7c5      	b.n	8009afa <__lshift+0x4a>
 8009b6e:	3904      	subs	r1, #4
 8009b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b74:	459c      	cmp	ip, r3
 8009b76:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b7a:	d8f9      	bhi.n	8009b70 <__lshift+0xc0>
 8009b7c:	e7ea      	b.n	8009b54 <__lshift+0xa4>
 8009b7e:	bf00      	nop
 8009b80:	0800cde8 	.word	0x0800cde8
 8009b84:	0800ce8f 	.word	0x0800ce8f

08009b88 <__mcmp>:
 8009b88:	4603      	mov	r3, r0
 8009b8a:	690a      	ldr	r2, [r1, #16]
 8009b8c:	6900      	ldr	r0, [r0, #16]
 8009b8e:	b530      	push	{r4, r5, lr}
 8009b90:	1a80      	subs	r0, r0, r2
 8009b92:	d10d      	bne.n	8009bb0 <__mcmp+0x28>
 8009b94:	3314      	adds	r3, #20
 8009b96:	3114      	adds	r1, #20
 8009b98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ba0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ba4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ba8:	4295      	cmp	r5, r2
 8009baa:	d002      	beq.n	8009bb2 <__mcmp+0x2a>
 8009bac:	d304      	bcc.n	8009bb8 <__mcmp+0x30>
 8009bae:	2001      	movs	r0, #1
 8009bb0:	bd30      	pop	{r4, r5, pc}
 8009bb2:	42a3      	cmp	r3, r4
 8009bb4:	d3f4      	bcc.n	8009ba0 <__mcmp+0x18>
 8009bb6:	e7fb      	b.n	8009bb0 <__mcmp+0x28>
 8009bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbc:	e7f8      	b.n	8009bb0 <__mcmp+0x28>
	...

08009bc0 <__mdiff>:
 8009bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4692      	mov	sl, r2
 8009bce:	f7ff ffdb 	bl	8009b88 <__mcmp>
 8009bd2:	1e05      	subs	r5, r0, #0
 8009bd4:	d111      	bne.n	8009bfa <__mdiff+0x3a>
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f7ff fd11 	bl	8009600 <_Balloc>
 8009bde:	4602      	mov	r2, r0
 8009be0:	b928      	cbnz	r0, 8009bee <__mdiff+0x2e>
 8009be2:	f240 2132 	movw	r1, #562	; 0x232
 8009be6:	4b3c      	ldr	r3, [pc, #240]	; (8009cd8 <__mdiff+0x118>)
 8009be8:	483c      	ldr	r0, [pc, #240]	; (8009cdc <__mdiff+0x11c>)
 8009bea:	f000 fa83 	bl	800a0f4 <__assert_func>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfa:	bfa4      	itt	ge
 8009bfc:	4653      	movge	r3, sl
 8009bfe:	46a2      	movge	sl, r4
 8009c00:	4630      	mov	r0, r6
 8009c02:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009c06:	bfa6      	itte	ge
 8009c08:	461c      	movge	r4, r3
 8009c0a:	2500      	movge	r5, #0
 8009c0c:	2501      	movlt	r5, #1
 8009c0e:	f7ff fcf7 	bl	8009600 <_Balloc>
 8009c12:	4602      	mov	r2, r0
 8009c14:	b918      	cbnz	r0, 8009c1e <__mdiff+0x5e>
 8009c16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c1a:	4b2f      	ldr	r3, [pc, #188]	; (8009cd8 <__mdiff+0x118>)
 8009c1c:	e7e4      	b.n	8009be8 <__mdiff+0x28>
 8009c1e:	f100 0814 	add.w	r8, r0, #20
 8009c22:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009c26:	60c5      	str	r5, [r0, #12]
 8009c28:	f04f 0c00 	mov.w	ip, #0
 8009c2c:	f10a 0514 	add.w	r5, sl, #20
 8009c30:	f10a 0010 	add.w	r0, sl, #16
 8009c34:	46c2      	mov	sl, r8
 8009c36:	6926      	ldr	r6, [r4, #16]
 8009c38:	f104 0914 	add.w	r9, r4, #20
 8009c3c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009c40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c44:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009c48:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c4c:	fa1f f18b 	uxth.w	r1, fp
 8009c50:	4461      	add	r1, ip
 8009c52:	fa1f fc83 	uxth.w	ip, r3
 8009c56:	0c1b      	lsrs	r3, r3, #16
 8009c58:	eba1 010c 	sub.w	r1, r1, ip
 8009c5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c60:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009c64:	b289      	uxth	r1, r1
 8009c66:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009c6a:	454e      	cmp	r6, r9
 8009c6c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009c70:	f84a 3b04 	str.w	r3, [sl], #4
 8009c74:	d8e6      	bhi.n	8009c44 <__mdiff+0x84>
 8009c76:	1b33      	subs	r3, r6, r4
 8009c78:	3b15      	subs	r3, #21
 8009c7a:	f023 0303 	bic.w	r3, r3, #3
 8009c7e:	3415      	adds	r4, #21
 8009c80:	3304      	adds	r3, #4
 8009c82:	42a6      	cmp	r6, r4
 8009c84:	bf38      	it	cc
 8009c86:	2304      	movcc	r3, #4
 8009c88:	441d      	add	r5, r3
 8009c8a:	4443      	add	r3, r8
 8009c8c:	461e      	mov	r6, r3
 8009c8e:	462c      	mov	r4, r5
 8009c90:	4574      	cmp	r4, lr
 8009c92:	d30e      	bcc.n	8009cb2 <__mdiff+0xf2>
 8009c94:	f10e 0103 	add.w	r1, lr, #3
 8009c98:	1b49      	subs	r1, r1, r5
 8009c9a:	f021 0103 	bic.w	r1, r1, #3
 8009c9e:	3d03      	subs	r5, #3
 8009ca0:	45ae      	cmp	lr, r5
 8009ca2:	bf38      	it	cc
 8009ca4:	2100      	movcc	r1, #0
 8009ca6:	4419      	add	r1, r3
 8009ca8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009cac:	b18b      	cbz	r3, 8009cd2 <__mdiff+0x112>
 8009cae:	6117      	str	r7, [r2, #16]
 8009cb0:	e7a0      	b.n	8009bf4 <__mdiff+0x34>
 8009cb2:	f854 8b04 	ldr.w	r8, [r4], #4
 8009cb6:	fa1f f188 	uxth.w	r1, r8
 8009cba:	4461      	add	r1, ip
 8009cbc:	1408      	asrs	r0, r1, #16
 8009cbe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009cc2:	b289      	uxth	r1, r1
 8009cc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ccc:	f846 1b04 	str.w	r1, [r6], #4
 8009cd0:	e7de      	b.n	8009c90 <__mdiff+0xd0>
 8009cd2:	3f01      	subs	r7, #1
 8009cd4:	e7e8      	b.n	8009ca8 <__mdiff+0xe8>
 8009cd6:	bf00      	nop
 8009cd8:	0800cde8 	.word	0x0800cde8
 8009cdc:	0800ce8f 	.word	0x0800ce8f

08009ce0 <__ulp>:
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <__ulp+0x48>)
 8009ce2:	400b      	ands	r3, r1
 8009ce4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dd02      	ble.n	8009cf2 <__ulp+0x12>
 8009cec:	2000      	movs	r0, #0
 8009cee:	4619      	mov	r1, r3
 8009cf0:	4770      	bx	lr
 8009cf2:	425b      	negs	r3, r3
 8009cf4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009cf8:	f04f 0000 	mov.w	r0, #0
 8009cfc:	f04f 0100 	mov.w	r1, #0
 8009d00:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d04:	da04      	bge.n	8009d10 <__ulp+0x30>
 8009d06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d0a:	fa43 f102 	asr.w	r1, r3, r2
 8009d0e:	4770      	bx	lr
 8009d10:	f1a2 0314 	sub.w	r3, r2, #20
 8009d14:	2b1e      	cmp	r3, #30
 8009d16:	bfd6      	itet	le
 8009d18:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009d1c:	2301      	movgt	r3, #1
 8009d1e:	fa22 f303 	lsrle.w	r3, r2, r3
 8009d22:	4618      	mov	r0, r3
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	7ff00000 	.word	0x7ff00000

08009d2c <__b2d>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	6907      	ldr	r7, [r0, #16]
 8009d32:	f100 0914 	add.w	r9, r0, #20
 8009d36:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009d3a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009d3e:	f1a7 0804 	sub.w	r8, r7, #4
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff fd52 	bl	80097ec <__hi0bits>
 8009d48:	f1c0 0320 	rsb	r3, r0, #32
 8009d4c:	280a      	cmp	r0, #10
 8009d4e:	600b      	str	r3, [r1, #0]
 8009d50:	491f      	ldr	r1, [pc, #124]	; (8009dd0 <__b2d+0xa4>)
 8009d52:	dc17      	bgt.n	8009d84 <__b2d+0x58>
 8009d54:	45c1      	cmp	r9, r8
 8009d56:	bf28      	it	cs
 8009d58:	2200      	movcs	r2, #0
 8009d5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d5e:	fa26 f30c 	lsr.w	r3, r6, ip
 8009d62:	bf38      	it	cc
 8009d64:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009d68:	ea43 0501 	orr.w	r5, r3, r1
 8009d6c:	f100 0315 	add.w	r3, r0, #21
 8009d70:	fa06 f303 	lsl.w	r3, r6, r3
 8009d74:	fa22 f20c 	lsr.w	r2, r2, ip
 8009d78:	ea43 0402 	orr.w	r4, r3, r2
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d84:	45c1      	cmp	r9, r8
 8009d86:	bf2e      	itee	cs
 8009d88:	2200      	movcs	r2, #0
 8009d8a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009d8e:	f1a7 0808 	subcc.w	r8, r7, #8
 8009d92:	f1b0 030b 	subs.w	r3, r0, #11
 8009d96:	d016      	beq.n	8009dc6 <__b2d+0x9a>
 8009d98:	f1c3 0720 	rsb	r7, r3, #32
 8009d9c:	fa22 f107 	lsr.w	r1, r2, r7
 8009da0:	45c8      	cmp	r8, r9
 8009da2:	fa06 f603 	lsl.w	r6, r6, r3
 8009da6:	ea46 0601 	orr.w	r6, r6, r1
 8009daa:	bf94      	ite	ls
 8009dac:	2100      	movls	r1, #0
 8009dae:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009db2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009db6:	fa02 f003 	lsl.w	r0, r2, r3
 8009dba:	40f9      	lsrs	r1, r7
 8009dbc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009dc0:	ea40 0401 	orr.w	r4, r0, r1
 8009dc4:	e7da      	b.n	8009d7c <__b2d+0x50>
 8009dc6:	4614      	mov	r4, r2
 8009dc8:	ea46 0501 	orr.w	r5, r6, r1
 8009dcc:	e7d6      	b.n	8009d7c <__b2d+0x50>
 8009dce:	bf00      	nop
 8009dd0:	3ff00000 	.word	0x3ff00000

08009dd4 <__d2b>:
 8009dd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009dd8:	2101      	movs	r1, #1
 8009dda:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009dde:	4690      	mov	r8, r2
 8009de0:	461d      	mov	r5, r3
 8009de2:	f7ff fc0d 	bl	8009600 <_Balloc>
 8009de6:	4604      	mov	r4, r0
 8009de8:	b930      	cbnz	r0, 8009df8 <__d2b+0x24>
 8009dea:	4602      	mov	r2, r0
 8009dec:	f240 310a 	movw	r1, #778	; 0x30a
 8009df0:	4b24      	ldr	r3, [pc, #144]	; (8009e84 <__d2b+0xb0>)
 8009df2:	4825      	ldr	r0, [pc, #148]	; (8009e88 <__d2b+0xb4>)
 8009df4:	f000 f97e 	bl	800a0f4 <__assert_func>
 8009df8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009dfc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009e00:	bb2d      	cbnz	r5, 8009e4e <__d2b+0x7a>
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	f1b8 0300 	subs.w	r3, r8, #0
 8009e08:	d026      	beq.n	8009e58 <__d2b+0x84>
 8009e0a:	4668      	mov	r0, sp
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	f7ff fd0d 	bl	800982c <__lo0bits>
 8009e12:	9900      	ldr	r1, [sp, #0]
 8009e14:	b1f0      	cbz	r0, 8009e54 <__d2b+0x80>
 8009e16:	9a01      	ldr	r2, [sp, #4]
 8009e18:	f1c0 0320 	rsb	r3, r0, #32
 8009e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e20:	430b      	orrs	r3, r1
 8009e22:	40c2      	lsrs	r2, r0
 8009e24:	6163      	str	r3, [r4, #20]
 8009e26:	9201      	str	r2, [sp, #4]
 8009e28:	9b01      	ldr	r3, [sp, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bf14      	ite	ne
 8009e2e:	2102      	movne	r1, #2
 8009e30:	2101      	moveq	r1, #1
 8009e32:	61a3      	str	r3, [r4, #24]
 8009e34:	6121      	str	r1, [r4, #16]
 8009e36:	b1c5      	cbz	r5, 8009e6a <__d2b+0x96>
 8009e38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e3c:	4405      	add	r5, r0
 8009e3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e42:	603d      	str	r5, [r7, #0]
 8009e44:	6030      	str	r0, [r6, #0]
 8009e46:	4620      	mov	r0, r4
 8009e48:	b002      	add	sp, #8
 8009e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e52:	e7d6      	b.n	8009e02 <__d2b+0x2e>
 8009e54:	6161      	str	r1, [r4, #20]
 8009e56:	e7e7      	b.n	8009e28 <__d2b+0x54>
 8009e58:	a801      	add	r0, sp, #4
 8009e5a:	f7ff fce7 	bl	800982c <__lo0bits>
 8009e5e:	2101      	movs	r1, #1
 8009e60:	9b01      	ldr	r3, [sp, #4]
 8009e62:	6121      	str	r1, [r4, #16]
 8009e64:	6163      	str	r3, [r4, #20]
 8009e66:	3020      	adds	r0, #32
 8009e68:	e7e5      	b.n	8009e36 <__d2b+0x62>
 8009e6a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009e6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e72:	6038      	str	r0, [r7, #0]
 8009e74:	6918      	ldr	r0, [r3, #16]
 8009e76:	f7ff fcb9 	bl	80097ec <__hi0bits>
 8009e7a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009e7e:	6031      	str	r1, [r6, #0]
 8009e80:	e7e1      	b.n	8009e46 <__d2b+0x72>
 8009e82:	bf00      	nop
 8009e84:	0800cde8 	.word	0x0800cde8
 8009e88:	0800ce8f 	.word	0x0800ce8f

08009e8c <__ratio>:
 8009e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e90:	4688      	mov	r8, r1
 8009e92:	4669      	mov	r1, sp
 8009e94:	4681      	mov	r9, r0
 8009e96:	f7ff ff49 	bl	8009d2c <__b2d>
 8009e9a:	460f      	mov	r7, r1
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	460d      	mov	r5, r1
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	a901      	add	r1, sp, #4
 8009ea4:	f7ff ff42 	bl	8009d2c <__b2d>
 8009ea8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009eac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009eb0:	468b      	mov	fp, r1
 8009eb2:	eba3 0c02 	sub.w	ip, r3, r2
 8009eb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009eba:	1a9b      	subs	r3, r3, r2
 8009ebc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bfd5      	itete	le
 8009ec4:	460a      	movle	r2, r1
 8009ec6:	462a      	movgt	r2, r5
 8009ec8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ecc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ed0:	bfd8      	it	le
 8009ed2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ed6:	465b      	mov	r3, fp
 8009ed8:	4602      	mov	r2, r0
 8009eda:	4639      	mov	r1, r7
 8009edc:	4620      	mov	r0, r4
 8009ede:	f7f6 fcd9 	bl	8000894 <__aeabi_ddiv>
 8009ee2:	b003      	add	sp, #12
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ee8 <_mprec_log10>:
 8009ee8:	2817      	cmp	r0, #23
 8009eea:	b5d0      	push	{r4, r6, r7, lr}
 8009eec:	4604      	mov	r4, r0
 8009eee:	dc05      	bgt.n	8009efc <_mprec_log10+0x14>
 8009ef0:	4808      	ldr	r0, [pc, #32]	; (8009f14 <_mprec_log10+0x2c>)
 8009ef2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8009ef6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009efa:	bdd0      	pop	{r4, r6, r7, pc}
 8009efc:	2000      	movs	r0, #0
 8009efe:	2600      	movs	r6, #0
 8009f00:	4905      	ldr	r1, [pc, #20]	; (8009f18 <_mprec_log10+0x30>)
 8009f02:	4f06      	ldr	r7, [pc, #24]	; (8009f1c <_mprec_log10+0x34>)
 8009f04:	4632      	mov	r2, r6
 8009f06:	463b      	mov	r3, r7
 8009f08:	f7f6 fb9a 	bl	8000640 <__aeabi_dmul>
 8009f0c:	3c01      	subs	r4, #1
 8009f0e:	d1f9      	bne.n	8009f04 <_mprec_log10+0x1c>
 8009f10:	e7f3      	b.n	8009efa <_mprec_log10+0x12>
 8009f12:	bf00      	nop
 8009f14:	0800cf18 	.word	0x0800cf18
 8009f18:	3ff00000 	.word	0x3ff00000
 8009f1c:	40240000 	.word	0x40240000

08009f20 <__copybits>:
 8009f20:	3901      	subs	r1, #1
 8009f22:	b570      	push	{r4, r5, r6, lr}
 8009f24:	1149      	asrs	r1, r1, #5
 8009f26:	6914      	ldr	r4, [r2, #16]
 8009f28:	3101      	adds	r1, #1
 8009f2a:	f102 0314 	add.w	r3, r2, #20
 8009f2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f36:	1f05      	subs	r5, r0, #4
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d30c      	bcc.n	8009f56 <__copybits+0x36>
 8009f3c:	1aa3      	subs	r3, r4, r2
 8009f3e:	3b11      	subs	r3, #17
 8009f40:	f023 0303 	bic.w	r3, r3, #3
 8009f44:	3211      	adds	r2, #17
 8009f46:	42a2      	cmp	r2, r4
 8009f48:	bf88      	it	hi
 8009f4a:	2300      	movhi	r3, #0
 8009f4c:	4418      	add	r0, r3
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4288      	cmp	r0, r1
 8009f52:	d305      	bcc.n	8009f60 <__copybits+0x40>
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f5a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f5e:	e7eb      	b.n	8009f38 <__copybits+0x18>
 8009f60:	f840 3b04 	str.w	r3, [r0], #4
 8009f64:	e7f4      	b.n	8009f50 <__copybits+0x30>

08009f66 <__any_on>:
 8009f66:	f100 0214 	add.w	r2, r0, #20
 8009f6a:	6900      	ldr	r0, [r0, #16]
 8009f6c:	114b      	asrs	r3, r1, #5
 8009f6e:	4298      	cmp	r0, r3
 8009f70:	b510      	push	{r4, lr}
 8009f72:	db11      	blt.n	8009f98 <__any_on+0x32>
 8009f74:	dd0a      	ble.n	8009f8c <__any_on+0x26>
 8009f76:	f011 011f 	ands.w	r1, r1, #31
 8009f7a:	d007      	beq.n	8009f8c <__any_on+0x26>
 8009f7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f80:	fa24 f001 	lsr.w	r0, r4, r1
 8009f84:	fa00 f101 	lsl.w	r1, r0, r1
 8009f88:	428c      	cmp	r4, r1
 8009f8a:	d10b      	bne.n	8009fa4 <__any_on+0x3e>
 8009f8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d803      	bhi.n	8009f9c <__any_on+0x36>
 8009f94:	2000      	movs	r0, #0
 8009f96:	bd10      	pop	{r4, pc}
 8009f98:	4603      	mov	r3, r0
 8009f9a:	e7f7      	b.n	8009f8c <__any_on+0x26>
 8009f9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fa0:	2900      	cmp	r1, #0
 8009fa2:	d0f5      	beq.n	8009f90 <__any_on+0x2a>
 8009fa4:	2001      	movs	r0, #1
 8009fa6:	e7f6      	b.n	8009f96 <__any_on+0x30>

08009fa8 <_calloc_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	fb02 f501 	mul.w	r5, r2, r1
 8009fae:	4629      	mov	r1, r5
 8009fb0:	f000 f808 	bl	8009fc4 <_malloc_r>
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	b118      	cbz	r0, 8009fc0 <_calloc_r+0x18>
 8009fb8:	462a      	mov	r2, r5
 8009fba:	2100      	movs	r1, #0
 8009fbc:	f7fe f844 	bl	8008048 <memset>
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}

08009fc4 <_malloc_r>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	1ccd      	adds	r5, r1, #3
 8009fc8:	f025 0503 	bic.w	r5, r5, #3
 8009fcc:	3508      	adds	r5, #8
 8009fce:	2d0c      	cmp	r5, #12
 8009fd0:	bf38      	it	cc
 8009fd2:	250c      	movcc	r5, #12
 8009fd4:	2d00      	cmp	r5, #0
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	db01      	blt.n	8009fde <_malloc_r+0x1a>
 8009fda:	42a9      	cmp	r1, r5
 8009fdc:	d903      	bls.n	8009fe6 <_malloc_r+0x22>
 8009fde:	230c      	movs	r3, #12
 8009fe0:	6033      	str	r3, [r6, #0]
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe6:	f000 ff3b 	bl	800ae60 <__malloc_lock>
 8009fea:	4921      	ldr	r1, [pc, #132]	; (800a070 <_malloc_r+0xac>)
 8009fec:	680a      	ldr	r2, [r1, #0]
 8009fee:	4614      	mov	r4, r2
 8009ff0:	b99c      	cbnz	r4, 800a01a <_malloc_r+0x56>
 8009ff2:	4f20      	ldr	r7, [pc, #128]	; (800a074 <_malloc_r+0xb0>)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	b923      	cbnz	r3, 800a002 <_malloc_r+0x3e>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f000 f842 	bl	800a084 <_sbrk_r>
 800a000:	6038      	str	r0, [r7, #0]
 800a002:	4629      	mov	r1, r5
 800a004:	4630      	mov	r0, r6
 800a006:	f000 f83d 	bl	800a084 <_sbrk_r>
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	d123      	bne.n	800a056 <_malloc_r+0x92>
 800a00e:	230c      	movs	r3, #12
 800a010:	4630      	mov	r0, r6
 800a012:	6033      	str	r3, [r6, #0]
 800a014:	f000 ff2a 	bl	800ae6c <__malloc_unlock>
 800a018:	e7e3      	b.n	8009fe2 <_malloc_r+0x1e>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	1b5b      	subs	r3, r3, r5
 800a01e:	d417      	bmi.n	800a050 <_malloc_r+0x8c>
 800a020:	2b0b      	cmp	r3, #11
 800a022:	d903      	bls.n	800a02c <_malloc_r+0x68>
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	441c      	add	r4, r3
 800a028:	6025      	str	r5, [r4, #0]
 800a02a:	e004      	b.n	800a036 <_malloc_r+0x72>
 800a02c:	6863      	ldr	r3, [r4, #4]
 800a02e:	42a2      	cmp	r2, r4
 800a030:	bf0c      	ite	eq
 800a032:	600b      	streq	r3, [r1, #0]
 800a034:	6053      	strne	r3, [r2, #4]
 800a036:	4630      	mov	r0, r6
 800a038:	f000 ff18 	bl	800ae6c <__malloc_unlock>
 800a03c:	f104 000b 	add.w	r0, r4, #11
 800a040:	1d23      	adds	r3, r4, #4
 800a042:	f020 0007 	bic.w	r0, r0, #7
 800a046:	1ac2      	subs	r2, r0, r3
 800a048:	d0cc      	beq.n	8009fe4 <_malloc_r+0x20>
 800a04a:	1a1b      	subs	r3, r3, r0
 800a04c:	50a3      	str	r3, [r4, r2]
 800a04e:	e7c9      	b.n	8009fe4 <_malloc_r+0x20>
 800a050:	4622      	mov	r2, r4
 800a052:	6864      	ldr	r4, [r4, #4]
 800a054:	e7cc      	b.n	8009ff0 <_malloc_r+0x2c>
 800a056:	1cc4      	adds	r4, r0, #3
 800a058:	f024 0403 	bic.w	r4, r4, #3
 800a05c:	42a0      	cmp	r0, r4
 800a05e:	d0e3      	beq.n	800a028 <_malloc_r+0x64>
 800a060:	1a21      	subs	r1, r4, r0
 800a062:	4630      	mov	r0, r6
 800a064:	f000 f80e 	bl	800a084 <_sbrk_r>
 800a068:	3001      	adds	r0, #1
 800a06a:	d1dd      	bne.n	800a028 <_malloc_r+0x64>
 800a06c:	e7cf      	b.n	800a00e <_malloc_r+0x4a>
 800a06e:	bf00      	nop
 800a070:	20000644 	.word	0x20000644
 800a074:	20000648 	.word	0x20000648

0800a078 <nan>:
 800a078:	2000      	movs	r0, #0
 800a07a:	4901      	ldr	r1, [pc, #4]	; (800a080 <nan+0x8>)
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	7ff80000 	.word	0x7ff80000

0800a084 <_sbrk_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	2300      	movs	r3, #0
 800a088:	4d05      	ldr	r5, [pc, #20]	; (800a0a0 <_sbrk_r+0x1c>)
 800a08a:	4604      	mov	r4, r0
 800a08c:	4608      	mov	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7f8 fad4 	bl	800263c <_sbrk>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_sbrk_r+0x1a>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_sbrk_r+0x1a>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20000a4c 	.word	0x20000a4c

0800a0a4 <strcpy>:
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0aa:	f803 2b01 	strb.w	r2, [r3], #1
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	d1f9      	bne.n	800a0a6 <strcpy+0x2>
 800a0b2:	4770      	bx	lr

0800a0b4 <strncmp>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	b16a      	cbz	r2, 800a0d4 <strncmp+0x20>
 800a0b8:	3901      	subs	r1, #1
 800a0ba:	1884      	adds	r4, r0, r2
 800a0bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a0c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d103      	bne.n	800a0d0 <strncmp+0x1c>
 800a0c8:	42a0      	cmp	r0, r4
 800a0ca:	d001      	beq.n	800a0d0 <strncmp+0x1c>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1f5      	bne.n	800a0bc <strncmp+0x8>
 800a0d0:	1a98      	subs	r0, r3, r2
 800a0d2:	bd10      	pop	{r4, pc}
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	e7fc      	b.n	800a0d2 <strncmp+0x1e>

0800a0d8 <__ascii_wctomb>:
 800a0d8:	4603      	mov	r3, r0
 800a0da:	4608      	mov	r0, r1
 800a0dc:	b141      	cbz	r1, 800a0f0 <__ascii_wctomb+0x18>
 800a0de:	2aff      	cmp	r2, #255	; 0xff
 800a0e0:	d904      	bls.n	800a0ec <__ascii_wctomb+0x14>
 800a0e2:	228a      	movs	r2, #138	; 0x8a
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	601a      	str	r2, [r3, #0]
 800a0ea:	4770      	bx	lr
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	700a      	strb	r2, [r1, #0]
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <__assert_func>:
 800a0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0f6:	4614      	mov	r4, r2
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <__assert_func+0x2c>)
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68d8      	ldr	r0, [r3, #12]
 800a102:	b14c      	cbz	r4, 800a118 <__assert_func+0x24>
 800a104:	4b07      	ldr	r3, [pc, #28]	; (800a124 <__assert_func+0x30>)
 800a106:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a10a:	9100      	str	r1, [sp, #0]
 800a10c:	462b      	mov	r3, r5
 800a10e:	4906      	ldr	r1, [pc, #24]	; (800a128 <__assert_func+0x34>)
 800a110:	f000 fe8c 	bl	800ae2c <fiprintf>
 800a114:	f001 faaa 	bl	800b66c <abort>
 800a118:	4b04      	ldr	r3, [pc, #16]	; (800a12c <__assert_func+0x38>)
 800a11a:	461c      	mov	r4, r3
 800a11c:	e7f3      	b.n	800a106 <__assert_func+0x12>
 800a11e:	bf00      	nop
 800a120:	20000024 	.word	0x20000024
 800a124:	0800cfec 	.word	0x0800cfec
 800a128:	0800cff9 	.word	0x0800cff9
 800a12c:	0800d027 	.word	0x0800d027

0800a130 <quorem>:
 800a130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	6903      	ldr	r3, [r0, #16]
 800a136:	690c      	ldr	r4, [r1, #16]
 800a138:	4607      	mov	r7, r0
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	f2c0 8083 	blt.w	800a246 <quorem+0x116>
 800a140:	3c01      	subs	r4, #1
 800a142:	f100 0514 	add.w	r5, r0, #20
 800a146:	f101 0814 	add.w	r8, r1, #20
 800a14a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a158:	3301      	adds	r3, #1
 800a15a:	429a      	cmp	r2, r3
 800a15c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a160:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a164:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a168:	d332      	bcc.n	800a1d0 <quorem+0xa0>
 800a16a:	f04f 0e00 	mov.w	lr, #0
 800a16e:	4640      	mov	r0, r8
 800a170:	46ac      	mov	ip, r5
 800a172:	46f2      	mov	sl, lr
 800a174:	f850 2b04 	ldr.w	r2, [r0], #4
 800a178:	b293      	uxth	r3, r2
 800a17a:	fb06 e303 	mla	r3, r6, r3, lr
 800a17e:	0c12      	lsrs	r2, r2, #16
 800a180:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a184:	fb06 e202 	mla	r2, r6, r2, lr
 800a188:	b29b      	uxth	r3, r3
 800a18a:	ebaa 0303 	sub.w	r3, sl, r3
 800a18e:	f8dc a000 	ldr.w	sl, [ip]
 800a192:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a196:	fa1f fa8a 	uxth.w	sl, sl
 800a19a:	4453      	add	r3, sl
 800a19c:	fa1f fa82 	uxth.w	sl, r2
 800a1a0:	f8dc 2000 	ldr.w	r2, [ip]
 800a1a4:	4581      	cmp	r9, r0
 800a1a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a1aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1b8:	f84c 3b04 	str.w	r3, [ip], #4
 800a1bc:	d2da      	bcs.n	800a174 <quorem+0x44>
 800a1be:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1c2:	b92b      	cbnz	r3, 800a1d0 <quorem+0xa0>
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	3b04      	subs	r3, #4
 800a1c8:	429d      	cmp	r5, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	d32f      	bcc.n	800a22e <quorem+0xfe>
 800a1ce:	613c      	str	r4, [r7, #16]
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f7ff fcd9 	bl	8009b88 <__mcmp>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	db25      	blt.n	800a226 <quorem+0xf6>
 800a1da:	4628      	mov	r0, r5
 800a1dc:	f04f 0c00 	mov.w	ip, #0
 800a1e0:	3601      	adds	r6, #1
 800a1e2:	f858 1b04 	ldr.w	r1, [r8], #4
 800a1e6:	f8d0 e000 	ldr.w	lr, [r0]
 800a1ea:	b28b      	uxth	r3, r1
 800a1ec:	ebac 0303 	sub.w	r3, ip, r3
 800a1f0:	fa1f f28e 	uxth.w	r2, lr
 800a1f4:	4413      	add	r3, r2
 800a1f6:	0c0a      	lsrs	r2, r1, #16
 800a1f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a200:	b29b      	uxth	r3, r3
 800a202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a206:	45c1      	cmp	r9, r8
 800a208:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a20c:	f840 3b04 	str.w	r3, [r0], #4
 800a210:	d2e7      	bcs.n	800a1e2 <quorem+0xb2>
 800a212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a21a:	b922      	cbnz	r2, 800a226 <quorem+0xf6>
 800a21c:	3b04      	subs	r3, #4
 800a21e:	429d      	cmp	r5, r3
 800a220:	461a      	mov	r2, r3
 800a222:	d30a      	bcc.n	800a23a <quorem+0x10a>
 800a224:	613c      	str	r4, [r7, #16]
 800a226:	4630      	mov	r0, r6
 800a228:	b003      	add	sp, #12
 800a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22e:	6812      	ldr	r2, [r2, #0]
 800a230:	3b04      	subs	r3, #4
 800a232:	2a00      	cmp	r2, #0
 800a234:	d1cb      	bne.n	800a1ce <quorem+0x9e>
 800a236:	3c01      	subs	r4, #1
 800a238:	e7c6      	b.n	800a1c8 <quorem+0x98>
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	3b04      	subs	r3, #4
 800a23e:	2a00      	cmp	r2, #0
 800a240:	d1f0      	bne.n	800a224 <quorem+0xf4>
 800a242:	3c01      	subs	r4, #1
 800a244:	e7eb      	b.n	800a21e <quorem+0xee>
 800a246:	2000      	movs	r0, #0
 800a248:	e7ee      	b.n	800a228 <quorem+0xf8>
 800a24a:	0000      	movs	r0, r0
 800a24c:	0000      	movs	r0, r0
	...

0800a250 <_dtoa_r>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	4616      	mov	r6, r2
 800a256:	461f      	mov	r7, r3
 800a258:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a25a:	b099      	sub	sp, #100	; 0x64
 800a25c:	4605      	mov	r5, r0
 800a25e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a262:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a266:	b974      	cbnz	r4, 800a286 <_dtoa_r+0x36>
 800a268:	2010      	movs	r0, #16
 800a26a:	f000 fdf1 	bl	800ae50 <malloc>
 800a26e:	4602      	mov	r2, r0
 800a270:	6268      	str	r0, [r5, #36]	; 0x24
 800a272:	b920      	cbnz	r0, 800a27e <_dtoa_r+0x2e>
 800a274:	21ea      	movs	r1, #234	; 0xea
 800a276:	4bae      	ldr	r3, [pc, #696]	; (800a530 <_dtoa_r+0x2e0>)
 800a278:	48ae      	ldr	r0, [pc, #696]	; (800a534 <_dtoa_r+0x2e4>)
 800a27a:	f7ff ff3b 	bl	800a0f4 <__assert_func>
 800a27e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a282:	6004      	str	r4, [r0, #0]
 800a284:	60c4      	str	r4, [r0, #12]
 800a286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a288:	6819      	ldr	r1, [r3, #0]
 800a28a:	b151      	cbz	r1, 800a2a2 <_dtoa_r+0x52>
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	2301      	movs	r3, #1
 800a290:	4093      	lsls	r3, r2
 800a292:	604a      	str	r2, [r1, #4]
 800a294:	608b      	str	r3, [r1, #8]
 800a296:	4628      	mov	r0, r5
 800a298:	f7ff f9f2 	bl	8009680 <_Bfree>
 800a29c:	2200      	movs	r2, #0
 800a29e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	1e3b      	subs	r3, r7, #0
 800a2a4:	bfaf      	iteee	ge
 800a2a6:	2300      	movge	r3, #0
 800a2a8:	2201      	movlt	r2, #1
 800a2aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2ae:	9305      	strlt	r3, [sp, #20]
 800a2b0:	bfa8      	it	ge
 800a2b2:	f8c8 3000 	strge.w	r3, [r8]
 800a2b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a2ba:	4b9f      	ldr	r3, [pc, #636]	; (800a538 <_dtoa_r+0x2e8>)
 800a2bc:	bfb8      	it	lt
 800a2be:	f8c8 2000 	strlt.w	r2, [r8]
 800a2c2:	ea33 0309 	bics.w	r3, r3, r9
 800a2c6:	d119      	bne.n	800a2fc <_dtoa_r+0xac>
 800a2c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2d4:	4333      	orrs	r3, r6
 800a2d6:	f000 8580 	beq.w	800adda <_dtoa_r+0xb8a>
 800a2da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2dc:	b953      	cbnz	r3, 800a2f4 <_dtoa_r+0xa4>
 800a2de:	4b97      	ldr	r3, [pc, #604]	; (800a53c <_dtoa_r+0x2ec>)
 800a2e0:	e022      	b.n	800a328 <_dtoa_r+0xd8>
 800a2e2:	4b97      	ldr	r3, [pc, #604]	; (800a540 <_dtoa_r+0x2f0>)
 800a2e4:	9308      	str	r3, [sp, #32]
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	9808      	ldr	r0, [sp, #32]
 800a2ee:	b019      	add	sp, #100	; 0x64
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	4b91      	ldr	r3, [pc, #580]	; (800a53c <_dtoa_r+0x2ec>)
 800a2f6:	9308      	str	r3, [sp, #32]
 800a2f8:	3303      	adds	r3, #3
 800a2fa:	e7f5      	b.n	800a2e8 <_dtoa_r+0x98>
 800a2fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a300:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a308:	2200      	movs	r2, #0
 800a30a:	2300      	movs	r3, #0
 800a30c:	f7f6 fc00 	bl	8000b10 <__aeabi_dcmpeq>
 800a310:	4680      	mov	r8, r0
 800a312:	b158      	cbz	r0, 800a32c <_dtoa_r+0xdc>
 800a314:	2301      	movs	r3, #1
 800a316:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a318:	6013      	str	r3, [r2, #0]
 800a31a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 8559 	beq.w	800add4 <_dtoa_r+0xb84>
 800a322:	4888      	ldr	r0, [pc, #544]	; (800a544 <_dtoa_r+0x2f4>)
 800a324:	6018      	str	r0, [r3, #0]
 800a326:	1e43      	subs	r3, r0, #1
 800a328:	9308      	str	r3, [sp, #32]
 800a32a:	e7df      	b.n	800a2ec <_dtoa_r+0x9c>
 800a32c:	ab16      	add	r3, sp, #88	; 0x58
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	ab17      	add	r3, sp, #92	; 0x5c
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4628      	mov	r0, r5
 800a336:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a33a:	f7ff fd4b 	bl	8009dd4 <__d2b>
 800a33e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a342:	4682      	mov	sl, r0
 800a344:	2c00      	cmp	r4, #0
 800a346:	d07e      	beq.n	800a446 <_dtoa_r+0x1f6>
 800a348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a34e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a356:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a35a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a35e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a362:	2200      	movs	r2, #0
 800a364:	4b78      	ldr	r3, [pc, #480]	; (800a548 <_dtoa_r+0x2f8>)
 800a366:	f7f5 ffb3 	bl	80002d0 <__aeabi_dsub>
 800a36a:	a36b      	add	r3, pc, #428	; (adr r3, 800a518 <_dtoa_r+0x2c8>)
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	f7f6 f966 	bl	8000640 <__aeabi_dmul>
 800a374:	a36a      	add	r3, pc, #424	; (adr r3, 800a520 <_dtoa_r+0x2d0>)
 800a376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37a:	f7f5 ffab 	bl	80002d4 <__adddf3>
 800a37e:	4606      	mov	r6, r0
 800a380:	4620      	mov	r0, r4
 800a382:	460f      	mov	r7, r1
 800a384:	f7f6 f8f2 	bl	800056c <__aeabi_i2d>
 800a388:	a367      	add	r3, pc, #412	; (adr r3, 800a528 <_dtoa_r+0x2d8>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f6 f957 	bl	8000640 <__aeabi_dmul>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f5 ff9b 	bl	80002d4 <__adddf3>
 800a39e:	4606      	mov	r6, r0
 800a3a0:	460f      	mov	r7, r1
 800a3a2:	f7f6 fbe7 	bl	8000b74 <__aeabi_d2iz>
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	f7f6 fbb8 	bl	8000b24 <__aeabi_dcmplt>
 800a3b4:	b148      	cbz	r0, 800a3ca <_dtoa_r+0x17a>
 800a3b6:	4648      	mov	r0, r9
 800a3b8:	f7f6 f8d8 	bl	800056c <__aeabi_i2d>
 800a3bc:	4632      	mov	r2, r6
 800a3be:	463b      	mov	r3, r7
 800a3c0:	f7f6 fba6 	bl	8000b10 <__aeabi_dcmpeq>
 800a3c4:	b908      	cbnz	r0, 800a3ca <_dtoa_r+0x17a>
 800a3c6:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3ca:	f1b9 0f16 	cmp.w	r9, #22
 800a3ce:	d857      	bhi.n	800a480 <_dtoa_r+0x230>
 800a3d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3d4:	4b5d      	ldr	r3, [pc, #372]	; (800a54c <_dtoa_r+0x2fc>)
 800a3d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f7f6 fba1 	bl	8000b24 <__aeabi_dcmplt>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d04e      	beq.n	800a484 <_dtoa_r+0x234>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a3f0:	1b1c      	subs	r4, r3, r4
 800a3f2:	1e63      	subs	r3, r4, #1
 800a3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f6:	bf49      	itett	mi
 800a3f8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a3fc:	2300      	movpl	r3, #0
 800a3fe:	9306      	strmi	r3, [sp, #24]
 800a400:	2300      	movmi	r3, #0
 800a402:	bf54      	ite	pl
 800a404:	9306      	strpl	r3, [sp, #24]
 800a406:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a408:	f1b9 0f00 	cmp.w	r9, #0
 800a40c:	db3c      	blt.n	800a488 <_dtoa_r+0x238>
 800a40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a410:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a414:	444b      	add	r3, r9
 800a416:	9309      	str	r3, [sp, #36]	; 0x24
 800a418:	2300      	movs	r3, #0
 800a41a:	930a      	str	r3, [sp, #40]	; 0x28
 800a41c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a41e:	2b09      	cmp	r3, #9
 800a420:	d86c      	bhi.n	800a4fc <_dtoa_r+0x2ac>
 800a422:	2b05      	cmp	r3, #5
 800a424:	bfc4      	itt	gt
 800a426:	3b04      	subgt	r3, #4
 800a428:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a42a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a42c:	bfc8      	it	gt
 800a42e:	2400      	movgt	r4, #0
 800a430:	f1a3 0302 	sub.w	r3, r3, #2
 800a434:	bfd8      	it	le
 800a436:	2401      	movle	r4, #1
 800a438:	2b03      	cmp	r3, #3
 800a43a:	f200 808b 	bhi.w	800a554 <_dtoa_r+0x304>
 800a43e:	e8df f003 	tbb	[pc, r3]
 800a442:	4f2d      	.short	0x4f2d
 800a444:	5b4d      	.short	0x5b4d
 800a446:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a44a:	441c      	add	r4, r3
 800a44c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a450:	2b20      	cmp	r3, #32
 800a452:	bfc3      	ittte	gt
 800a454:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a458:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a45c:	fa09 f303 	lslgt.w	r3, r9, r3
 800a460:	f1c3 0320 	rsble	r3, r3, #32
 800a464:	bfc6      	itte	gt
 800a466:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a46a:	4318      	orrgt	r0, r3
 800a46c:	fa06 f003 	lslle.w	r0, r6, r3
 800a470:	f7f6 f86c 	bl	800054c <__aeabi_ui2d>
 800a474:	2301      	movs	r3, #1
 800a476:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a47a:	3c01      	subs	r4, #1
 800a47c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a47e:	e770      	b.n	800a362 <_dtoa_r+0x112>
 800a480:	2301      	movs	r3, #1
 800a482:	e7b3      	b.n	800a3ec <_dtoa_r+0x19c>
 800a484:	900f      	str	r0, [sp, #60]	; 0x3c
 800a486:	e7b2      	b.n	800a3ee <_dtoa_r+0x19e>
 800a488:	9b06      	ldr	r3, [sp, #24]
 800a48a:	eba3 0309 	sub.w	r3, r3, r9
 800a48e:	9306      	str	r3, [sp, #24]
 800a490:	f1c9 0300 	rsb	r3, r9, #0
 800a494:	930a      	str	r3, [sp, #40]	; 0x28
 800a496:	2300      	movs	r3, #0
 800a498:	930e      	str	r3, [sp, #56]	; 0x38
 800a49a:	e7bf      	b.n	800a41c <_dtoa_r+0x1cc>
 800a49c:	2300      	movs	r3, #0
 800a49e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dc59      	bgt.n	800a55a <_dtoa_r+0x30a>
 800a4a6:	f04f 0b01 	mov.w	fp, #1
 800a4aa:	465b      	mov	r3, fp
 800a4ac:	f8cd b008 	str.w	fp, [sp, #8]
 800a4b0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a4b8:	6042      	str	r2, [r0, #4]
 800a4ba:	2204      	movs	r2, #4
 800a4bc:	f102 0614 	add.w	r6, r2, #20
 800a4c0:	429e      	cmp	r6, r3
 800a4c2:	6841      	ldr	r1, [r0, #4]
 800a4c4:	d94f      	bls.n	800a566 <_dtoa_r+0x316>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f7ff f89a 	bl	8009600 <_Balloc>
 800a4cc:	9008      	str	r0, [sp, #32]
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d14d      	bne.n	800a56e <_dtoa_r+0x31e>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4d8:	4b1d      	ldr	r3, [pc, #116]	; (800a550 <_dtoa_r+0x300>)
 800a4da:	e6cd      	b.n	800a278 <_dtoa_r+0x28>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e7de      	b.n	800a49e <_dtoa_r+0x24e>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4e6:	eb09 0b03 	add.w	fp, r9, r3
 800a4ea:	f10b 0301 	add.w	r3, fp, #1
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	9302      	str	r3, [sp, #8]
 800a4f2:	bfb8      	it	lt
 800a4f4:	2301      	movlt	r3, #1
 800a4f6:	e7dd      	b.n	800a4b4 <_dtoa_r+0x264>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7f2      	b.n	800a4e2 <_dtoa_r+0x292>
 800a4fc:	2401      	movs	r4, #1
 800a4fe:	2300      	movs	r3, #0
 800a500:	940b      	str	r4, [sp, #44]	; 0x2c
 800a502:	9322      	str	r3, [sp, #136]	; 0x88
 800a504:	f04f 3bff 	mov.w	fp, #4294967295
 800a508:	2200      	movs	r2, #0
 800a50a:	2312      	movs	r3, #18
 800a50c:	f8cd b008 	str.w	fp, [sp, #8]
 800a510:	9223      	str	r2, [sp, #140]	; 0x8c
 800a512:	e7cf      	b.n	800a4b4 <_dtoa_r+0x264>
 800a514:	f3af 8000 	nop.w
 800a518:	636f4361 	.word	0x636f4361
 800a51c:	3fd287a7 	.word	0x3fd287a7
 800a520:	8b60c8b3 	.word	0x8b60c8b3
 800a524:	3fc68a28 	.word	0x3fc68a28
 800a528:	509f79fb 	.word	0x509f79fb
 800a52c:	3fd34413 	.word	0x3fd34413
 800a530:	0800ce78 	.word	0x0800ce78
 800a534:	0800d138 	.word	0x0800d138
 800a538:	7ff00000 	.word	0x7ff00000
 800a53c:	0800d132 	.word	0x0800d132
 800a540:	0800d129 	.word	0x0800d129
 800a544:	0800d137 	.word	0x0800d137
 800a548:	3ff80000 	.word	0x3ff80000
 800a54c:	0800cf18 	.word	0x0800cf18
 800a550:	0800cde8 	.word	0x0800cde8
 800a554:	2301      	movs	r3, #1
 800a556:	930b      	str	r3, [sp, #44]	; 0x2c
 800a558:	e7d4      	b.n	800a504 <_dtoa_r+0x2b4>
 800a55a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a55e:	465b      	mov	r3, fp
 800a560:	f8cd b008 	str.w	fp, [sp, #8]
 800a564:	e7a6      	b.n	800a4b4 <_dtoa_r+0x264>
 800a566:	3101      	adds	r1, #1
 800a568:	6041      	str	r1, [r0, #4]
 800a56a:	0052      	lsls	r2, r2, #1
 800a56c:	e7a6      	b.n	800a4bc <_dtoa_r+0x26c>
 800a56e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a570:	9a08      	ldr	r2, [sp, #32]
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	9b02      	ldr	r3, [sp, #8]
 800a576:	2b0e      	cmp	r3, #14
 800a578:	f200 80a8 	bhi.w	800a6cc <_dtoa_r+0x47c>
 800a57c:	2c00      	cmp	r4, #0
 800a57e:	f000 80a5 	beq.w	800a6cc <_dtoa_r+0x47c>
 800a582:	f1b9 0f00 	cmp.w	r9, #0
 800a586:	dd34      	ble.n	800a5f2 <_dtoa_r+0x3a2>
 800a588:	4a9a      	ldr	r2, [pc, #616]	; (800a7f4 <_dtoa_r+0x5a4>)
 800a58a:	f009 030f 	and.w	r3, r9, #15
 800a58e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a592:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a596:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a59a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a59e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a5a2:	d016      	beq.n	800a5d2 <_dtoa_r+0x382>
 800a5a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5a8:	4b93      	ldr	r3, [pc, #588]	; (800a7f8 <_dtoa_r+0x5a8>)
 800a5aa:	2703      	movs	r7, #3
 800a5ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5b0:	f7f6 f970 	bl	8000894 <__aeabi_ddiv>
 800a5b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5b8:	f004 040f 	and.w	r4, r4, #15
 800a5bc:	4e8e      	ldr	r6, [pc, #568]	; (800a7f8 <_dtoa_r+0x5a8>)
 800a5be:	b954      	cbnz	r4, 800a5d6 <_dtoa_r+0x386>
 800a5c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5c8:	f7f6 f964 	bl	8000894 <__aeabi_ddiv>
 800a5cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5d0:	e029      	b.n	800a626 <_dtoa_r+0x3d6>
 800a5d2:	2702      	movs	r7, #2
 800a5d4:	e7f2      	b.n	800a5bc <_dtoa_r+0x36c>
 800a5d6:	07e1      	lsls	r1, r4, #31
 800a5d8:	d508      	bpl.n	800a5ec <_dtoa_r+0x39c>
 800a5da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5e2:	f7f6 f82d 	bl	8000640 <__aeabi_dmul>
 800a5e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5ea:	3701      	adds	r7, #1
 800a5ec:	1064      	asrs	r4, r4, #1
 800a5ee:	3608      	adds	r6, #8
 800a5f0:	e7e5      	b.n	800a5be <_dtoa_r+0x36e>
 800a5f2:	f000 80a5 	beq.w	800a740 <_dtoa_r+0x4f0>
 800a5f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5fa:	f1c9 0400 	rsb	r4, r9, #0
 800a5fe:	4b7d      	ldr	r3, [pc, #500]	; (800a7f4 <_dtoa_r+0x5a4>)
 800a600:	f004 020f 	and.w	r2, r4, #15
 800a604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f7f6 f818 	bl	8000640 <__aeabi_dmul>
 800a610:	2702      	movs	r7, #2
 800a612:	2300      	movs	r3, #0
 800a614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a618:	4e77      	ldr	r6, [pc, #476]	; (800a7f8 <_dtoa_r+0x5a8>)
 800a61a:	1124      	asrs	r4, r4, #4
 800a61c:	2c00      	cmp	r4, #0
 800a61e:	f040 8084 	bne.w	800a72a <_dtoa_r+0x4da>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1d2      	bne.n	800a5cc <_dtoa_r+0x37c>
 800a626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 808b 	beq.w	800a744 <_dtoa_r+0x4f4>
 800a62e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a632:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a636:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a63a:	2200      	movs	r2, #0
 800a63c:	4b6f      	ldr	r3, [pc, #444]	; (800a7fc <_dtoa_r+0x5ac>)
 800a63e:	f7f6 fa71 	bl	8000b24 <__aeabi_dcmplt>
 800a642:	2800      	cmp	r0, #0
 800a644:	d07e      	beq.n	800a744 <_dtoa_r+0x4f4>
 800a646:	9b02      	ldr	r3, [sp, #8]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d07b      	beq.n	800a744 <_dtoa_r+0x4f4>
 800a64c:	f1bb 0f00 	cmp.w	fp, #0
 800a650:	dd38      	ble.n	800a6c4 <_dtoa_r+0x474>
 800a652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a656:	2200      	movs	r2, #0
 800a658:	4b69      	ldr	r3, [pc, #420]	; (800a800 <_dtoa_r+0x5b0>)
 800a65a:	f7f5 fff1 	bl	8000640 <__aeabi_dmul>
 800a65e:	465c      	mov	r4, fp
 800a660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a664:	f109 38ff 	add.w	r8, r9, #4294967295
 800a668:	3701      	adds	r7, #1
 800a66a:	4638      	mov	r0, r7
 800a66c:	f7f5 ff7e 	bl	800056c <__aeabi_i2d>
 800a670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a674:	f7f5 ffe4 	bl	8000640 <__aeabi_dmul>
 800a678:	2200      	movs	r2, #0
 800a67a:	4b62      	ldr	r3, [pc, #392]	; (800a804 <_dtoa_r+0x5b4>)
 800a67c:	f7f5 fe2a 	bl	80002d4 <__adddf3>
 800a680:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a684:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a688:	9611      	str	r6, [sp, #68]	; 0x44
 800a68a:	2c00      	cmp	r4, #0
 800a68c:	d15d      	bne.n	800a74a <_dtoa_r+0x4fa>
 800a68e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a692:	2200      	movs	r2, #0
 800a694:	4b5c      	ldr	r3, [pc, #368]	; (800a808 <_dtoa_r+0x5b8>)
 800a696:	f7f5 fe1b 	bl	80002d0 <__aeabi_dsub>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6a2:	4633      	mov	r3, r6
 800a6a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6a6:	f7f6 fa5b 	bl	8000b60 <__aeabi_dcmpgt>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f040 829e 	bne.w	800abec <_dtoa_r+0x99c>
 800a6b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a6ba:	f7f6 fa33 	bl	8000b24 <__aeabi_dcmplt>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f040 8292 	bne.w	800abe8 <_dtoa_r+0x998>
 800a6c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a6c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f2c0 8153 	blt.w	800a97a <_dtoa_r+0x72a>
 800a6d4:	f1b9 0f0e 	cmp.w	r9, #14
 800a6d8:	f300 814f 	bgt.w	800a97a <_dtoa_r+0x72a>
 800a6dc:	4b45      	ldr	r3, [pc, #276]	; (800a7f4 <_dtoa_r+0x5a4>)
 800a6de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a6e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a6ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f280 80db 	bge.w	800a8a8 <_dtoa_r+0x658>
 800a6f2:	9b02      	ldr	r3, [sp, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f300 80d7 	bgt.w	800a8a8 <_dtoa_r+0x658>
 800a6fa:	f040 8274 	bne.w	800abe6 <_dtoa_r+0x996>
 800a6fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a702:	2200      	movs	r2, #0
 800a704:	4b40      	ldr	r3, [pc, #256]	; (800a808 <_dtoa_r+0x5b8>)
 800a706:	f7f5 ff9b 	bl	8000640 <__aeabi_dmul>
 800a70a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a70e:	f7f6 fa1d 	bl	8000b4c <__aeabi_dcmpge>
 800a712:	9c02      	ldr	r4, [sp, #8]
 800a714:	4626      	mov	r6, r4
 800a716:	2800      	cmp	r0, #0
 800a718:	f040 824a 	bne.w	800abb0 <_dtoa_r+0x960>
 800a71c:	2331      	movs	r3, #49	; 0x31
 800a71e:	9f08      	ldr	r7, [sp, #32]
 800a720:	f109 0901 	add.w	r9, r9, #1
 800a724:	f807 3b01 	strb.w	r3, [r7], #1
 800a728:	e246      	b.n	800abb8 <_dtoa_r+0x968>
 800a72a:	07e2      	lsls	r2, r4, #31
 800a72c:	d505      	bpl.n	800a73a <_dtoa_r+0x4ea>
 800a72e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a732:	f7f5 ff85 	bl	8000640 <__aeabi_dmul>
 800a736:	2301      	movs	r3, #1
 800a738:	3701      	adds	r7, #1
 800a73a:	1064      	asrs	r4, r4, #1
 800a73c:	3608      	adds	r6, #8
 800a73e:	e76d      	b.n	800a61c <_dtoa_r+0x3cc>
 800a740:	2702      	movs	r7, #2
 800a742:	e770      	b.n	800a626 <_dtoa_r+0x3d6>
 800a744:	46c8      	mov	r8, r9
 800a746:	9c02      	ldr	r4, [sp, #8]
 800a748:	e78f      	b.n	800a66a <_dtoa_r+0x41a>
 800a74a:	9908      	ldr	r1, [sp, #32]
 800a74c:	4b29      	ldr	r3, [pc, #164]	; (800a7f4 <_dtoa_r+0x5a4>)
 800a74e:	4421      	add	r1, r4
 800a750:	9112      	str	r1, [sp, #72]	; 0x48
 800a752:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a754:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a758:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a75c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a760:	2900      	cmp	r1, #0
 800a762:	d055      	beq.n	800a810 <_dtoa_r+0x5c0>
 800a764:	2000      	movs	r0, #0
 800a766:	4929      	ldr	r1, [pc, #164]	; (800a80c <_dtoa_r+0x5bc>)
 800a768:	f7f6 f894 	bl	8000894 <__aeabi_ddiv>
 800a76c:	463b      	mov	r3, r7
 800a76e:	4632      	mov	r2, r6
 800a770:	f7f5 fdae 	bl	80002d0 <__aeabi_dsub>
 800a774:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a778:	9f08      	ldr	r7, [sp, #32]
 800a77a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a77e:	f7f6 f9f9 	bl	8000b74 <__aeabi_d2iz>
 800a782:	4604      	mov	r4, r0
 800a784:	f7f5 fef2 	bl	800056c <__aeabi_i2d>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a790:	f7f5 fd9e 	bl	80002d0 <__aeabi_dsub>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	3430      	adds	r4, #48	; 0x30
 800a79a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a79e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7a2:	f807 4b01 	strb.w	r4, [r7], #1
 800a7a6:	f7f6 f9bd 	bl	8000b24 <__aeabi_dcmplt>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d174      	bne.n	800a898 <_dtoa_r+0x648>
 800a7ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	4911      	ldr	r1, [pc, #68]	; (800a7fc <_dtoa_r+0x5ac>)
 800a7b6:	f7f5 fd8b 	bl	80002d0 <__aeabi_dsub>
 800a7ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7be:	f7f6 f9b1 	bl	8000b24 <__aeabi_dcmplt>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	f040 80b6 	bne.w	800a934 <_dtoa_r+0x6e4>
 800a7c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7ca:	429f      	cmp	r7, r3
 800a7cc:	f43f af7a 	beq.w	800a6c4 <_dtoa_r+0x474>
 800a7d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	4b0a      	ldr	r3, [pc, #40]	; (800a800 <_dtoa_r+0x5b0>)
 800a7d8:	f7f5 ff32 	bl	8000640 <__aeabi_dmul>
 800a7dc:	2200      	movs	r2, #0
 800a7de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7e6:	4b06      	ldr	r3, [pc, #24]	; (800a800 <_dtoa_r+0x5b0>)
 800a7e8:	f7f5 ff2a 	bl	8000640 <__aeabi_dmul>
 800a7ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7f0:	e7c3      	b.n	800a77a <_dtoa_r+0x52a>
 800a7f2:	bf00      	nop
 800a7f4:	0800cf18 	.word	0x0800cf18
 800a7f8:	0800cef0 	.word	0x0800cef0
 800a7fc:	3ff00000 	.word	0x3ff00000
 800a800:	40240000 	.word	0x40240000
 800a804:	401c0000 	.word	0x401c0000
 800a808:	40140000 	.word	0x40140000
 800a80c:	3fe00000 	.word	0x3fe00000
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f5 ff14 	bl	8000640 <__aeabi_dmul>
 800a818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a81a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a81e:	9c08      	ldr	r4, [sp, #32]
 800a820:	9314      	str	r3, [sp, #80]	; 0x50
 800a822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a826:	f7f6 f9a5 	bl	8000b74 <__aeabi_d2iz>
 800a82a:	9015      	str	r0, [sp, #84]	; 0x54
 800a82c:	f7f5 fe9e 	bl	800056c <__aeabi_i2d>
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a838:	f7f5 fd4a 	bl	80002d0 <__aeabi_dsub>
 800a83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a83e:	4606      	mov	r6, r0
 800a840:	3330      	adds	r3, #48	; 0x30
 800a842:	f804 3b01 	strb.w	r3, [r4], #1
 800a846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a848:	460f      	mov	r7, r1
 800a84a:	429c      	cmp	r4, r3
 800a84c:	f04f 0200 	mov.w	r2, #0
 800a850:	d124      	bne.n	800a89c <_dtoa_r+0x64c>
 800a852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a856:	4bb3      	ldr	r3, [pc, #716]	; (800ab24 <_dtoa_r+0x8d4>)
 800a858:	f7f5 fd3c 	bl	80002d4 <__adddf3>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4630      	mov	r0, r6
 800a862:	4639      	mov	r1, r7
 800a864:	f7f6 f97c 	bl	8000b60 <__aeabi_dcmpgt>
 800a868:	2800      	cmp	r0, #0
 800a86a:	d162      	bne.n	800a932 <_dtoa_r+0x6e2>
 800a86c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a870:	2000      	movs	r0, #0
 800a872:	49ac      	ldr	r1, [pc, #688]	; (800ab24 <_dtoa_r+0x8d4>)
 800a874:	f7f5 fd2c 	bl	80002d0 <__aeabi_dsub>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7f6 f950 	bl	8000b24 <__aeabi_dcmplt>
 800a884:	2800      	cmp	r0, #0
 800a886:	f43f af1d 	beq.w	800a6c4 <_dtoa_r+0x474>
 800a88a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a88c:	1e7b      	subs	r3, r7, #1
 800a88e:	9314      	str	r3, [sp, #80]	; 0x50
 800a890:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a894:	2b30      	cmp	r3, #48	; 0x30
 800a896:	d0f8      	beq.n	800a88a <_dtoa_r+0x63a>
 800a898:	46c1      	mov	r9, r8
 800a89a:	e03a      	b.n	800a912 <_dtoa_r+0x6c2>
 800a89c:	4ba2      	ldr	r3, [pc, #648]	; (800ab28 <_dtoa_r+0x8d8>)
 800a89e:	f7f5 fecf 	bl	8000640 <__aeabi_dmul>
 800a8a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8a6:	e7bc      	b.n	800a822 <_dtoa_r+0x5d2>
 800a8a8:	9f08      	ldr	r7, [sp, #32]
 800a8aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8b2:	f7f5 ffef 	bl	8000894 <__aeabi_ddiv>
 800a8b6:	f7f6 f95d 	bl	8000b74 <__aeabi_d2iz>
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	f7f5 fe56 	bl	800056c <__aeabi_i2d>
 800a8c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8c4:	f7f5 febc 	bl	8000640 <__aeabi_dmul>
 800a8c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8d4:	f7f5 fcfc 	bl	80002d0 <__aeabi_dsub>
 800a8d8:	f807 6b01 	strb.w	r6, [r7], #1
 800a8dc:	9e08      	ldr	r6, [sp, #32]
 800a8de:	9b02      	ldr	r3, [sp, #8]
 800a8e0:	1bbe      	subs	r6, r7, r6
 800a8e2:	42b3      	cmp	r3, r6
 800a8e4:	d13a      	bne.n	800a95c <_dtoa_r+0x70c>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	f7f5 fcf3 	bl	80002d4 <__adddf3>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8fa:	f7f6 f931 	bl	8000b60 <__aeabi_dcmpgt>
 800a8fe:	bb58      	cbnz	r0, 800a958 <_dtoa_r+0x708>
 800a900:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a908:	f7f6 f902 	bl	8000b10 <__aeabi_dcmpeq>
 800a90c:	b108      	cbz	r0, 800a912 <_dtoa_r+0x6c2>
 800a90e:	07e1      	lsls	r1, r4, #31
 800a910:	d422      	bmi.n	800a958 <_dtoa_r+0x708>
 800a912:	4628      	mov	r0, r5
 800a914:	4651      	mov	r1, sl
 800a916:	f7fe feb3 	bl	8009680 <_Bfree>
 800a91a:	2300      	movs	r3, #0
 800a91c:	703b      	strb	r3, [r7, #0]
 800a91e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a920:	f109 0001 	add.w	r0, r9, #1
 800a924:	6018      	str	r0, [r3, #0]
 800a926:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f43f acdf 	beq.w	800a2ec <_dtoa_r+0x9c>
 800a92e:	601f      	str	r7, [r3, #0]
 800a930:	e4dc      	b.n	800a2ec <_dtoa_r+0x9c>
 800a932:	4627      	mov	r7, r4
 800a934:	463b      	mov	r3, r7
 800a936:	461f      	mov	r7, r3
 800a938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a93c:	2a39      	cmp	r2, #57	; 0x39
 800a93e:	d107      	bne.n	800a950 <_dtoa_r+0x700>
 800a940:	9a08      	ldr	r2, [sp, #32]
 800a942:	429a      	cmp	r2, r3
 800a944:	d1f7      	bne.n	800a936 <_dtoa_r+0x6e6>
 800a946:	2230      	movs	r2, #48	; 0x30
 800a948:	9908      	ldr	r1, [sp, #32]
 800a94a:	f108 0801 	add.w	r8, r8, #1
 800a94e:	700a      	strb	r2, [r1, #0]
 800a950:	781a      	ldrb	r2, [r3, #0]
 800a952:	3201      	adds	r2, #1
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	e79f      	b.n	800a898 <_dtoa_r+0x648>
 800a958:	46c8      	mov	r8, r9
 800a95a:	e7eb      	b.n	800a934 <_dtoa_r+0x6e4>
 800a95c:	2200      	movs	r2, #0
 800a95e:	4b72      	ldr	r3, [pc, #456]	; (800ab28 <_dtoa_r+0x8d8>)
 800a960:	f7f5 fe6e 	bl	8000640 <__aeabi_dmul>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a96c:	2200      	movs	r2, #0
 800a96e:	2300      	movs	r3, #0
 800a970:	f7f6 f8ce 	bl	8000b10 <__aeabi_dcmpeq>
 800a974:	2800      	cmp	r0, #0
 800a976:	d098      	beq.n	800a8aa <_dtoa_r+0x65a>
 800a978:	e7cb      	b.n	800a912 <_dtoa_r+0x6c2>
 800a97a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a97c:	2a00      	cmp	r2, #0
 800a97e:	f000 80cd 	beq.w	800ab1c <_dtoa_r+0x8cc>
 800a982:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a984:	2a01      	cmp	r2, #1
 800a986:	f300 80af 	bgt.w	800aae8 <_dtoa_r+0x898>
 800a98a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a98c:	2a00      	cmp	r2, #0
 800a98e:	f000 80a7 	beq.w	800aae0 <_dtoa_r+0x890>
 800a992:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a996:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a998:	9f06      	ldr	r7, [sp, #24]
 800a99a:	9a06      	ldr	r2, [sp, #24]
 800a99c:	2101      	movs	r1, #1
 800a99e:	441a      	add	r2, r3
 800a9a0:	9206      	str	r2, [sp, #24]
 800a9a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	441a      	add	r2, r3
 800a9a8:	9209      	str	r2, [sp, #36]	; 0x24
 800a9aa:	f7fe ff6d 	bl	8009888 <__i2b>
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	2f00      	cmp	r7, #0
 800a9b2:	dd0c      	ble.n	800a9ce <_dtoa_r+0x77e>
 800a9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	dd09      	ble.n	800a9ce <_dtoa_r+0x77e>
 800a9ba:	42bb      	cmp	r3, r7
 800a9bc:	bfa8      	it	ge
 800a9be:	463b      	movge	r3, r7
 800a9c0:	9a06      	ldr	r2, [sp, #24]
 800a9c2:	1aff      	subs	r7, r7, r3
 800a9c4:	1ad2      	subs	r2, r2, r3
 800a9c6:	9206      	str	r2, [sp, #24]
 800a9c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d0:	b1f3      	cbz	r3, 800aa10 <_dtoa_r+0x7c0>
 800a9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f000 80a9 	beq.w	800ab2c <_dtoa_r+0x8dc>
 800a9da:	2c00      	cmp	r4, #0
 800a9dc:	dd10      	ble.n	800aa00 <_dtoa_r+0x7b0>
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f7ff f80a 	bl	80099fc <__pow5mult>
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f7fe ff60 	bl	80098b4 <__multiply>
 800a9f4:	4680      	mov	r8, r0
 800a9f6:	4651      	mov	r1, sl
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	f7fe fe41 	bl	8009680 <_Bfree>
 800a9fe:	46c2      	mov	sl, r8
 800aa00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa02:	1b1a      	subs	r2, r3, r4
 800aa04:	d004      	beq.n	800aa10 <_dtoa_r+0x7c0>
 800aa06:	4651      	mov	r1, sl
 800aa08:	4628      	mov	r0, r5
 800aa0a:	f7fe fff7 	bl	80099fc <__pow5mult>
 800aa0e:	4682      	mov	sl, r0
 800aa10:	2101      	movs	r1, #1
 800aa12:	4628      	mov	r0, r5
 800aa14:	f7fe ff38 	bl	8009888 <__i2b>
 800aa18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f340 8087 	ble.w	800ab30 <_dtoa_r+0x8e0>
 800aa22:	461a      	mov	r2, r3
 800aa24:	4601      	mov	r1, r0
 800aa26:	4628      	mov	r0, r5
 800aa28:	f7fe ffe8 	bl	80099fc <__pow5mult>
 800aa2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa2e:	4604      	mov	r4, r0
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	f340 8080 	ble.w	800ab36 <_dtoa_r+0x8e6>
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	6923      	ldr	r3, [r4, #16]
 800aa3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa40:	6918      	ldr	r0, [r3, #16]
 800aa42:	f7fe fed3 	bl	80097ec <__hi0bits>
 800aa46:	f1c0 0020 	rsb	r0, r0, #32
 800aa4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4c:	4418      	add	r0, r3
 800aa4e:	f010 001f 	ands.w	r0, r0, #31
 800aa52:	f000 8092 	beq.w	800ab7a <_dtoa_r+0x92a>
 800aa56:	f1c0 0320 	rsb	r3, r0, #32
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	f340 808a 	ble.w	800ab74 <_dtoa_r+0x924>
 800aa60:	f1c0 001c 	rsb	r0, r0, #28
 800aa64:	9b06      	ldr	r3, [sp, #24]
 800aa66:	4407      	add	r7, r0
 800aa68:	4403      	add	r3, r0
 800aa6a:	9306      	str	r3, [sp, #24]
 800aa6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa6e:	4403      	add	r3, r0
 800aa70:	9309      	str	r3, [sp, #36]	; 0x24
 800aa72:	9b06      	ldr	r3, [sp, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd05      	ble.n	800aa84 <_dtoa_r+0x834>
 800aa78:	4651      	mov	r1, sl
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f7ff f817 	bl	8009ab0 <__lshift>
 800aa82:	4682      	mov	sl, r0
 800aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	dd05      	ble.n	800aa96 <_dtoa_r+0x846>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f7ff f80e 	bl	8009ab0 <__lshift>
 800aa94:	4604      	mov	r4, r0
 800aa96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d070      	beq.n	800ab7e <_dtoa_r+0x92e>
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	f7ff f872 	bl	8009b88 <__mcmp>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	da6a      	bge.n	800ab7e <_dtoa_r+0x92e>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4651      	mov	r1, sl
 800aaac:	220a      	movs	r2, #10
 800aaae:	4628      	mov	r0, r5
 800aab0:	f7fe fe08 	bl	80096c4 <__multadd>
 800aab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aab6:	4682      	mov	sl, r0
 800aab8:	f109 39ff 	add.w	r9, r9, #4294967295
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 8193 	beq.w	800ade8 <_dtoa_r+0xb98>
 800aac2:	4631      	mov	r1, r6
 800aac4:	2300      	movs	r3, #0
 800aac6:	220a      	movs	r2, #10
 800aac8:	4628      	mov	r0, r5
 800aaca:	f7fe fdfb 	bl	80096c4 <__multadd>
 800aace:	f1bb 0f00 	cmp.w	fp, #0
 800aad2:	4606      	mov	r6, r0
 800aad4:	f300 8093 	bgt.w	800abfe <_dtoa_r+0x9ae>
 800aad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aada:	2b02      	cmp	r3, #2
 800aadc:	dc57      	bgt.n	800ab8e <_dtoa_r+0x93e>
 800aade:	e08e      	b.n	800abfe <_dtoa_r+0x9ae>
 800aae0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aae2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aae6:	e756      	b.n	800a996 <_dtoa_r+0x746>
 800aae8:	9b02      	ldr	r3, [sp, #8]
 800aaea:	1e5c      	subs	r4, r3, #1
 800aaec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	bfb7      	itett	lt
 800aaf2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aaf4:	1b1c      	subge	r4, r3, r4
 800aaf6:	1ae2      	sublt	r2, r4, r3
 800aaf8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aafa:	bfbe      	ittt	lt
 800aafc:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aafe:	189b      	addlt	r3, r3, r2
 800ab00:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ab02:	9b02      	ldr	r3, [sp, #8]
 800ab04:	bfb8      	it	lt
 800ab06:	2400      	movlt	r4, #0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbb      	ittet	lt
 800ab0c:	9b06      	ldrlt	r3, [sp, #24]
 800ab0e:	9a02      	ldrlt	r2, [sp, #8]
 800ab10:	9f06      	ldrge	r7, [sp, #24]
 800ab12:	1a9f      	sublt	r7, r3, r2
 800ab14:	bfac      	ite	ge
 800ab16:	9b02      	ldrge	r3, [sp, #8]
 800ab18:	2300      	movlt	r3, #0
 800ab1a:	e73e      	b.n	800a99a <_dtoa_r+0x74a>
 800ab1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab1e:	9f06      	ldr	r7, [sp, #24]
 800ab20:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ab22:	e745      	b.n	800a9b0 <_dtoa_r+0x760>
 800ab24:	3fe00000 	.word	0x3fe00000
 800ab28:	40240000 	.word	0x40240000
 800ab2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab2e:	e76a      	b.n	800aa06 <_dtoa_r+0x7b6>
 800ab30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	dc19      	bgt.n	800ab6a <_dtoa_r+0x91a>
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	b9bb      	cbnz	r3, 800ab6a <_dtoa_r+0x91a>
 800ab3a:	9b05      	ldr	r3, [sp, #20]
 800ab3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab40:	b99b      	cbnz	r3, 800ab6a <_dtoa_r+0x91a>
 800ab42:	9b05      	ldr	r3, [sp, #20]
 800ab44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab48:	0d1b      	lsrs	r3, r3, #20
 800ab4a:	051b      	lsls	r3, r3, #20
 800ab4c:	b183      	cbz	r3, 800ab70 <_dtoa_r+0x920>
 800ab4e:	f04f 0801 	mov.w	r8, #1
 800ab52:	9b06      	ldr	r3, [sp, #24]
 800ab54:	3301      	adds	r3, #1
 800ab56:	9306      	str	r3, [sp, #24]
 800ab58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f47f af6a 	bne.w	800aa3a <_dtoa_r+0x7ea>
 800ab66:	2001      	movs	r0, #1
 800ab68:	e76f      	b.n	800aa4a <_dtoa_r+0x7fa>
 800ab6a:	f04f 0800 	mov.w	r8, #0
 800ab6e:	e7f6      	b.n	800ab5e <_dtoa_r+0x90e>
 800ab70:	4698      	mov	r8, r3
 800ab72:	e7f4      	b.n	800ab5e <_dtoa_r+0x90e>
 800ab74:	f43f af7d 	beq.w	800aa72 <_dtoa_r+0x822>
 800ab78:	4618      	mov	r0, r3
 800ab7a:	301c      	adds	r0, #28
 800ab7c:	e772      	b.n	800aa64 <_dtoa_r+0x814>
 800ab7e:	9b02      	ldr	r3, [sp, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	dc36      	bgt.n	800abf2 <_dtoa_r+0x9a2>
 800ab84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	dd33      	ble.n	800abf2 <_dtoa_r+0x9a2>
 800ab8a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ab8e:	f1bb 0f00 	cmp.w	fp, #0
 800ab92:	d10d      	bne.n	800abb0 <_dtoa_r+0x960>
 800ab94:	4621      	mov	r1, r4
 800ab96:	465b      	mov	r3, fp
 800ab98:	2205      	movs	r2, #5
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f7fe fd92 	bl	80096c4 <__multadd>
 800aba0:	4601      	mov	r1, r0
 800aba2:	4604      	mov	r4, r0
 800aba4:	4650      	mov	r0, sl
 800aba6:	f7fe ffef 	bl	8009b88 <__mcmp>
 800abaa:	2800      	cmp	r0, #0
 800abac:	f73f adb6 	bgt.w	800a71c <_dtoa_r+0x4cc>
 800abb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800abb2:	9f08      	ldr	r7, [sp, #32]
 800abb4:	ea6f 0903 	mvn.w	r9, r3
 800abb8:	f04f 0800 	mov.w	r8, #0
 800abbc:	4621      	mov	r1, r4
 800abbe:	4628      	mov	r0, r5
 800abc0:	f7fe fd5e 	bl	8009680 <_Bfree>
 800abc4:	2e00      	cmp	r6, #0
 800abc6:	f43f aea4 	beq.w	800a912 <_dtoa_r+0x6c2>
 800abca:	f1b8 0f00 	cmp.w	r8, #0
 800abce:	d005      	beq.n	800abdc <_dtoa_r+0x98c>
 800abd0:	45b0      	cmp	r8, r6
 800abd2:	d003      	beq.n	800abdc <_dtoa_r+0x98c>
 800abd4:	4641      	mov	r1, r8
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7fe fd52 	bl	8009680 <_Bfree>
 800abdc:	4631      	mov	r1, r6
 800abde:	4628      	mov	r0, r5
 800abe0:	f7fe fd4e 	bl	8009680 <_Bfree>
 800abe4:	e695      	b.n	800a912 <_dtoa_r+0x6c2>
 800abe6:	2400      	movs	r4, #0
 800abe8:	4626      	mov	r6, r4
 800abea:	e7e1      	b.n	800abb0 <_dtoa_r+0x960>
 800abec:	46c1      	mov	r9, r8
 800abee:	4626      	mov	r6, r4
 800abf0:	e594      	b.n	800a71c <_dtoa_r+0x4cc>
 800abf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abf4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 80fc 	beq.w	800adf6 <_dtoa_r+0xba6>
 800abfe:	2f00      	cmp	r7, #0
 800ac00:	dd05      	ble.n	800ac0e <_dtoa_r+0x9be>
 800ac02:	4631      	mov	r1, r6
 800ac04:	463a      	mov	r2, r7
 800ac06:	4628      	mov	r0, r5
 800ac08:	f7fe ff52 	bl	8009ab0 <__lshift>
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	f1b8 0f00 	cmp.w	r8, #0
 800ac12:	d05c      	beq.n	800acce <_dtoa_r+0xa7e>
 800ac14:	4628      	mov	r0, r5
 800ac16:	6871      	ldr	r1, [r6, #4]
 800ac18:	f7fe fcf2 	bl	8009600 <_Balloc>
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	b928      	cbnz	r0, 800ac2c <_dtoa_r+0x9dc>
 800ac20:	4602      	mov	r2, r0
 800ac22:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac26:	4b7e      	ldr	r3, [pc, #504]	; (800ae20 <_dtoa_r+0xbd0>)
 800ac28:	f7ff bb26 	b.w	800a278 <_dtoa_r+0x28>
 800ac2c:	6932      	ldr	r2, [r6, #16]
 800ac2e:	f106 010c 	add.w	r1, r6, #12
 800ac32:	3202      	adds	r2, #2
 800ac34:	0092      	lsls	r2, r2, #2
 800ac36:	300c      	adds	r0, #12
 800ac38:	f7fd f9f8 	bl	800802c <memcpy>
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	4639      	mov	r1, r7
 800ac40:	4628      	mov	r0, r5
 800ac42:	f7fe ff35 	bl	8009ab0 <__lshift>
 800ac46:	46b0      	mov	r8, r6
 800ac48:	4606      	mov	r6, r0
 800ac4a:	9b08      	ldr	r3, [sp, #32]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	9302      	str	r3, [sp, #8]
 800ac50:	9b08      	ldr	r3, [sp, #32]
 800ac52:	445b      	add	r3, fp
 800ac54:	930a      	str	r3, [sp, #40]	; 0x28
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5e:	9b02      	ldr	r3, [sp, #8]
 800ac60:	4621      	mov	r1, r4
 800ac62:	4650      	mov	r0, sl
 800ac64:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac68:	f7ff fa62 	bl	800a130 <quorem>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	4641      	mov	r1, r8
 800ac70:	3330      	adds	r3, #48	; 0x30
 800ac72:	9004      	str	r0, [sp, #16]
 800ac74:	4650      	mov	r0, sl
 800ac76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac78:	f7fe ff86 	bl	8009b88 <__mcmp>
 800ac7c:	4632      	mov	r2, r6
 800ac7e:	9006      	str	r0, [sp, #24]
 800ac80:	4621      	mov	r1, r4
 800ac82:	4628      	mov	r0, r5
 800ac84:	f7fe ff9c 	bl	8009bc0 <__mdiff>
 800ac88:	68c2      	ldr	r2, [r0, #12]
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac8e:	bb02      	cbnz	r2, 800acd2 <_dtoa_r+0xa82>
 800ac90:	4601      	mov	r1, r0
 800ac92:	4650      	mov	r0, sl
 800ac94:	f7fe ff78 	bl	8009b88 <__mcmp>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	4628      	mov	r0, r5
 800aca0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800aca4:	f7fe fcec 	bl	8009680 <_Bfree>
 800aca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acac:	9f02      	ldr	r7, [sp, #8]
 800acae:	ea43 0102 	orr.w	r1, r3, r2
 800acb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb4:	430b      	orrs	r3, r1
 800acb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acb8:	d10d      	bne.n	800acd6 <_dtoa_r+0xa86>
 800acba:	2b39      	cmp	r3, #57	; 0x39
 800acbc:	d027      	beq.n	800ad0e <_dtoa_r+0xabe>
 800acbe:	9a06      	ldr	r2, [sp, #24]
 800acc0:	2a00      	cmp	r2, #0
 800acc2:	dd01      	ble.n	800acc8 <_dtoa_r+0xa78>
 800acc4:	9b04      	ldr	r3, [sp, #16]
 800acc6:	3331      	adds	r3, #49	; 0x31
 800acc8:	f88b 3000 	strb.w	r3, [fp]
 800accc:	e776      	b.n	800abbc <_dtoa_r+0x96c>
 800acce:	4630      	mov	r0, r6
 800acd0:	e7b9      	b.n	800ac46 <_dtoa_r+0x9f6>
 800acd2:	2201      	movs	r2, #1
 800acd4:	e7e2      	b.n	800ac9c <_dtoa_r+0xa4c>
 800acd6:	9906      	ldr	r1, [sp, #24]
 800acd8:	2900      	cmp	r1, #0
 800acda:	db04      	blt.n	800ace6 <_dtoa_r+0xa96>
 800acdc:	9822      	ldr	r0, [sp, #136]	; 0x88
 800acde:	4301      	orrs	r1, r0
 800ace0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace2:	4301      	orrs	r1, r0
 800ace4:	d120      	bne.n	800ad28 <_dtoa_r+0xad8>
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	ddee      	ble.n	800acc8 <_dtoa_r+0xa78>
 800acea:	4651      	mov	r1, sl
 800acec:	2201      	movs	r2, #1
 800acee:	4628      	mov	r0, r5
 800acf0:	9302      	str	r3, [sp, #8]
 800acf2:	f7fe fedd 	bl	8009ab0 <__lshift>
 800acf6:	4621      	mov	r1, r4
 800acf8:	4682      	mov	sl, r0
 800acfa:	f7fe ff45 	bl	8009b88 <__mcmp>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	9b02      	ldr	r3, [sp, #8]
 800ad02:	dc02      	bgt.n	800ad0a <_dtoa_r+0xaba>
 800ad04:	d1e0      	bne.n	800acc8 <_dtoa_r+0xa78>
 800ad06:	07da      	lsls	r2, r3, #31
 800ad08:	d5de      	bpl.n	800acc8 <_dtoa_r+0xa78>
 800ad0a:	2b39      	cmp	r3, #57	; 0x39
 800ad0c:	d1da      	bne.n	800acc4 <_dtoa_r+0xa74>
 800ad0e:	2339      	movs	r3, #57	; 0x39
 800ad10:	f88b 3000 	strb.w	r3, [fp]
 800ad14:	463b      	mov	r3, r7
 800ad16:	461f      	mov	r7, r3
 800ad18:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	2a39      	cmp	r2, #57	; 0x39
 800ad20:	d050      	beq.n	800adc4 <_dtoa_r+0xb74>
 800ad22:	3201      	adds	r2, #1
 800ad24:	701a      	strb	r2, [r3, #0]
 800ad26:	e749      	b.n	800abbc <_dtoa_r+0x96c>
 800ad28:	2a00      	cmp	r2, #0
 800ad2a:	dd03      	ble.n	800ad34 <_dtoa_r+0xae4>
 800ad2c:	2b39      	cmp	r3, #57	; 0x39
 800ad2e:	d0ee      	beq.n	800ad0e <_dtoa_r+0xabe>
 800ad30:	3301      	adds	r3, #1
 800ad32:	e7c9      	b.n	800acc8 <_dtoa_r+0xa78>
 800ad34:	9a02      	ldr	r2, [sp, #8]
 800ad36:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad38:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad3c:	428a      	cmp	r2, r1
 800ad3e:	d02a      	beq.n	800ad96 <_dtoa_r+0xb46>
 800ad40:	4651      	mov	r1, sl
 800ad42:	2300      	movs	r3, #0
 800ad44:	220a      	movs	r2, #10
 800ad46:	4628      	mov	r0, r5
 800ad48:	f7fe fcbc 	bl	80096c4 <__multadd>
 800ad4c:	45b0      	cmp	r8, r6
 800ad4e:	4682      	mov	sl, r0
 800ad50:	f04f 0300 	mov.w	r3, #0
 800ad54:	f04f 020a 	mov.w	r2, #10
 800ad58:	4641      	mov	r1, r8
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	d107      	bne.n	800ad6e <_dtoa_r+0xb1e>
 800ad5e:	f7fe fcb1 	bl	80096c4 <__multadd>
 800ad62:	4680      	mov	r8, r0
 800ad64:	4606      	mov	r6, r0
 800ad66:	9b02      	ldr	r3, [sp, #8]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	e777      	b.n	800ac5e <_dtoa_r+0xa0e>
 800ad6e:	f7fe fca9 	bl	80096c4 <__multadd>
 800ad72:	4631      	mov	r1, r6
 800ad74:	4680      	mov	r8, r0
 800ad76:	2300      	movs	r3, #0
 800ad78:	220a      	movs	r2, #10
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f7fe fca2 	bl	80096c4 <__multadd>
 800ad80:	4606      	mov	r6, r0
 800ad82:	e7f0      	b.n	800ad66 <_dtoa_r+0xb16>
 800ad84:	f1bb 0f00 	cmp.w	fp, #0
 800ad88:	bfcc      	ite	gt
 800ad8a:	465f      	movgt	r7, fp
 800ad8c:	2701      	movle	r7, #1
 800ad8e:	f04f 0800 	mov.w	r8, #0
 800ad92:	9a08      	ldr	r2, [sp, #32]
 800ad94:	4417      	add	r7, r2
 800ad96:	4651      	mov	r1, sl
 800ad98:	2201      	movs	r2, #1
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	9302      	str	r3, [sp, #8]
 800ad9e:	f7fe fe87 	bl	8009ab0 <__lshift>
 800ada2:	4621      	mov	r1, r4
 800ada4:	4682      	mov	sl, r0
 800ada6:	f7fe feef 	bl	8009b88 <__mcmp>
 800adaa:	2800      	cmp	r0, #0
 800adac:	dcb2      	bgt.n	800ad14 <_dtoa_r+0xac4>
 800adae:	d102      	bne.n	800adb6 <_dtoa_r+0xb66>
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	07db      	lsls	r3, r3, #31
 800adb4:	d4ae      	bmi.n	800ad14 <_dtoa_r+0xac4>
 800adb6:	463b      	mov	r3, r7
 800adb8:	461f      	mov	r7, r3
 800adba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adbe:	2a30      	cmp	r2, #48	; 0x30
 800adc0:	d0fa      	beq.n	800adb8 <_dtoa_r+0xb68>
 800adc2:	e6fb      	b.n	800abbc <_dtoa_r+0x96c>
 800adc4:	9a08      	ldr	r2, [sp, #32]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d1a5      	bne.n	800ad16 <_dtoa_r+0xac6>
 800adca:	2331      	movs	r3, #49	; 0x31
 800adcc:	f109 0901 	add.w	r9, r9, #1
 800add0:	7013      	strb	r3, [r2, #0]
 800add2:	e6f3      	b.n	800abbc <_dtoa_r+0x96c>
 800add4:	4b13      	ldr	r3, [pc, #76]	; (800ae24 <_dtoa_r+0xbd4>)
 800add6:	f7ff baa7 	b.w	800a328 <_dtoa_r+0xd8>
 800adda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800addc:	2b00      	cmp	r3, #0
 800adde:	f47f aa80 	bne.w	800a2e2 <_dtoa_r+0x92>
 800ade2:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <_dtoa_r+0xbd8>)
 800ade4:	f7ff baa0 	b.w	800a328 <_dtoa_r+0xd8>
 800ade8:	f1bb 0f00 	cmp.w	fp, #0
 800adec:	dc03      	bgt.n	800adf6 <_dtoa_r+0xba6>
 800adee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	f73f aecc 	bgt.w	800ab8e <_dtoa_r+0x93e>
 800adf6:	9f08      	ldr	r7, [sp, #32]
 800adf8:	4621      	mov	r1, r4
 800adfa:	4650      	mov	r0, sl
 800adfc:	f7ff f998 	bl	800a130 <quorem>
 800ae00:	9a08      	ldr	r2, [sp, #32]
 800ae02:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae06:	f807 3b01 	strb.w	r3, [r7], #1
 800ae0a:	1aba      	subs	r2, r7, r2
 800ae0c:	4593      	cmp	fp, r2
 800ae0e:	ddb9      	ble.n	800ad84 <_dtoa_r+0xb34>
 800ae10:	4651      	mov	r1, sl
 800ae12:	2300      	movs	r3, #0
 800ae14:	220a      	movs	r2, #10
 800ae16:	4628      	mov	r0, r5
 800ae18:	f7fe fc54 	bl	80096c4 <__multadd>
 800ae1c:	4682      	mov	sl, r0
 800ae1e:	e7eb      	b.n	800adf8 <_dtoa_r+0xba8>
 800ae20:	0800cde8 	.word	0x0800cde8
 800ae24:	0800d136 	.word	0x0800d136
 800ae28:	0800d129 	.word	0x0800d129

0800ae2c <fiprintf>:
 800ae2c:	b40e      	push	{r1, r2, r3}
 800ae2e:	b503      	push	{r0, r1, lr}
 800ae30:	4601      	mov	r1, r0
 800ae32:	ab03      	add	r3, sp, #12
 800ae34:	4805      	ldr	r0, [pc, #20]	; (800ae4c <fiprintf+0x20>)
 800ae36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae3a:	6800      	ldr	r0, [r0, #0]
 800ae3c:	9301      	str	r3, [sp, #4]
 800ae3e:	f000 f88f 	bl	800af60 <_vfiprintf_r>
 800ae42:	b002      	add	sp, #8
 800ae44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae48:	b003      	add	sp, #12
 800ae4a:	4770      	bx	lr
 800ae4c:	20000024 	.word	0x20000024

0800ae50 <malloc>:
 800ae50:	4b02      	ldr	r3, [pc, #8]	; (800ae5c <malloc+0xc>)
 800ae52:	4601      	mov	r1, r0
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	f7ff b8b5 	b.w	8009fc4 <_malloc_r>
 800ae5a:	bf00      	nop
 800ae5c:	20000024 	.word	0x20000024

0800ae60 <__malloc_lock>:
 800ae60:	4801      	ldr	r0, [pc, #4]	; (800ae68 <__malloc_lock+0x8>)
 800ae62:	f000 bdc3 	b.w	800b9ec <__retarget_lock_acquire_recursive>
 800ae66:	bf00      	nop
 800ae68:	20000a54 	.word	0x20000a54

0800ae6c <__malloc_unlock>:
 800ae6c:	4801      	ldr	r0, [pc, #4]	; (800ae74 <__malloc_unlock+0x8>)
 800ae6e:	f000 bdbe 	b.w	800b9ee <__retarget_lock_release_recursive>
 800ae72:	bf00      	nop
 800ae74:	20000a54 	.word	0x20000a54

0800ae78 <_free_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	2900      	cmp	r1, #0
 800ae7e:	d043      	beq.n	800af08 <_free_r+0x90>
 800ae80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae84:	1f0c      	subs	r4, r1, #4
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfb8      	it	lt
 800ae8a:	18e4      	addlt	r4, r4, r3
 800ae8c:	f7ff ffe8 	bl	800ae60 <__malloc_lock>
 800ae90:	4a1e      	ldr	r2, [pc, #120]	; (800af0c <_free_r+0x94>)
 800ae92:	6813      	ldr	r3, [r2, #0]
 800ae94:	4610      	mov	r0, r2
 800ae96:	b933      	cbnz	r3, 800aea6 <_free_r+0x2e>
 800ae98:	6063      	str	r3, [r4, #4]
 800ae9a:	6014      	str	r4, [r2, #0]
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aea2:	f7ff bfe3 	b.w	800ae6c <__malloc_unlock>
 800aea6:	42a3      	cmp	r3, r4
 800aea8:	d90a      	bls.n	800aec0 <_free_r+0x48>
 800aeaa:	6821      	ldr	r1, [r4, #0]
 800aeac:	1862      	adds	r2, r4, r1
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	bf01      	itttt	eq
 800aeb2:	681a      	ldreq	r2, [r3, #0]
 800aeb4:	685b      	ldreq	r3, [r3, #4]
 800aeb6:	1852      	addeq	r2, r2, r1
 800aeb8:	6022      	streq	r2, [r4, #0]
 800aeba:	6063      	str	r3, [r4, #4]
 800aebc:	6004      	str	r4, [r0, #0]
 800aebe:	e7ed      	b.n	800ae9c <_free_r+0x24>
 800aec0:	461a      	mov	r2, r3
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	b10b      	cbz	r3, 800aeca <_free_r+0x52>
 800aec6:	42a3      	cmp	r3, r4
 800aec8:	d9fa      	bls.n	800aec0 <_free_r+0x48>
 800aeca:	6811      	ldr	r1, [r2, #0]
 800aecc:	1850      	adds	r0, r2, r1
 800aece:	42a0      	cmp	r0, r4
 800aed0:	d10b      	bne.n	800aeea <_free_r+0x72>
 800aed2:	6820      	ldr	r0, [r4, #0]
 800aed4:	4401      	add	r1, r0
 800aed6:	1850      	adds	r0, r2, r1
 800aed8:	4283      	cmp	r3, r0
 800aeda:	6011      	str	r1, [r2, #0]
 800aedc:	d1de      	bne.n	800ae9c <_free_r+0x24>
 800aede:	6818      	ldr	r0, [r3, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	4401      	add	r1, r0
 800aee4:	6011      	str	r1, [r2, #0]
 800aee6:	6053      	str	r3, [r2, #4]
 800aee8:	e7d8      	b.n	800ae9c <_free_r+0x24>
 800aeea:	d902      	bls.n	800aef2 <_free_r+0x7a>
 800aeec:	230c      	movs	r3, #12
 800aeee:	602b      	str	r3, [r5, #0]
 800aef0:	e7d4      	b.n	800ae9c <_free_r+0x24>
 800aef2:	6820      	ldr	r0, [r4, #0]
 800aef4:	1821      	adds	r1, r4, r0
 800aef6:	428b      	cmp	r3, r1
 800aef8:	bf01      	itttt	eq
 800aefa:	6819      	ldreq	r1, [r3, #0]
 800aefc:	685b      	ldreq	r3, [r3, #4]
 800aefe:	1809      	addeq	r1, r1, r0
 800af00:	6021      	streq	r1, [r4, #0]
 800af02:	6063      	str	r3, [r4, #4]
 800af04:	6054      	str	r4, [r2, #4]
 800af06:	e7c9      	b.n	800ae9c <_free_r+0x24>
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	bf00      	nop
 800af0c:	20000644 	.word	0x20000644

0800af10 <__sfputc_r>:
 800af10:	6893      	ldr	r3, [r2, #8]
 800af12:	b410      	push	{r4}
 800af14:	3b01      	subs	r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	6093      	str	r3, [r2, #8]
 800af1a:	da07      	bge.n	800af2c <__sfputc_r+0x1c>
 800af1c:	6994      	ldr	r4, [r2, #24]
 800af1e:	42a3      	cmp	r3, r4
 800af20:	db01      	blt.n	800af26 <__sfputc_r+0x16>
 800af22:	290a      	cmp	r1, #10
 800af24:	d102      	bne.n	800af2c <__sfputc_r+0x1c>
 800af26:	bc10      	pop	{r4}
 800af28:	f000 bae0 	b.w	800b4ec <__swbuf_r>
 800af2c:	6813      	ldr	r3, [r2, #0]
 800af2e:	1c58      	adds	r0, r3, #1
 800af30:	6010      	str	r0, [r2, #0]
 800af32:	7019      	strb	r1, [r3, #0]
 800af34:	4608      	mov	r0, r1
 800af36:	bc10      	pop	{r4}
 800af38:	4770      	bx	lr

0800af3a <__sfputs_r>:
 800af3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	4614      	mov	r4, r2
 800af42:	18d5      	adds	r5, r2, r3
 800af44:	42ac      	cmp	r4, r5
 800af46:	d101      	bne.n	800af4c <__sfputs_r+0x12>
 800af48:	2000      	movs	r0, #0
 800af4a:	e007      	b.n	800af5c <__sfputs_r+0x22>
 800af4c:	463a      	mov	r2, r7
 800af4e:	4630      	mov	r0, r6
 800af50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af54:	f7ff ffdc 	bl	800af10 <__sfputc_r>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d1f3      	bne.n	800af44 <__sfputs_r+0xa>
 800af5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af60 <_vfiprintf_r>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	460d      	mov	r5, r1
 800af66:	4614      	mov	r4, r2
 800af68:	4698      	mov	r8, r3
 800af6a:	4606      	mov	r6, r0
 800af6c:	b09d      	sub	sp, #116	; 0x74
 800af6e:	b118      	cbz	r0, 800af78 <_vfiprintf_r+0x18>
 800af70:	6983      	ldr	r3, [r0, #24]
 800af72:	b90b      	cbnz	r3, 800af78 <_vfiprintf_r+0x18>
 800af74:	f000 fc9c 	bl	800b8b0 <__sinit>
 800af78:	4b89      	ldr	r3, [pc, #548]	; (800b1a0 <_vfiprintf_r+0x240>)
 800af7a:	429d      	cmp	r5, r3
 800af7c:	d11b      	bne.n	800afb6 <_vfiprintf_r+0x56>
 800af7e:	6875      	ldr	r5, [r6, #4]
 800af80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af82:	07d9      	lsls	r1, r3, #31
 800af84:	d405      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af86:	89ab      	ldrh	r3, [r5, #12]
 800af88:	059a      	lsls	r2, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af8e:	f000 fd2d 	bl	800b9ec <__retarget_lock_acquire_recursive>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	071b      	lsls	r3, r3, #28
 800af96:	d501      	bpl.n	800af9c <_vfiprintf_r+0x3c>
 800af98:	692b      	ldr	r3, [r5, #16]
 800af9a:	b9eb      	cbnz	r3, 800afd8 <_vfiprintf_r+0x78>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4630      	mov	r0, r6
 800afa0:	f000 faf6 	bl	800b590 <__swsetup_r>
 800afa4:	b1c0      	cbz	r0, 800afd8 <_vfiprintf_r+0x78>
 800afa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa8:	07dc      	lsls	r4, r3, #31
 800afaa:	d50e      	bpl.n	800afca <_vfiprintf_r+0x6a>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295
 800afb0:	b01d      	add	sp, #116	; 0x74
 800afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb6:	4b7b      	ldr	r3, [pc, #492]	; (800b1a4 <_vfiprintf_r+0x244>)
 800afb8:	429d      	cmp	r5, r3
 800afba:	d101      	bne.n	800afc0 <_vfiprintf_r+0x60>
 800afbc:	68b5      	ldr	r5, [r6, #8]
 800afbe:	e7df      	b.n	800af80 <_vfiprintf_r+0x20>
 800afc0:	4b79      	ldr	r3, [pc, #484]	; (800b1a8 <_vfiprintf_r+0x248>)
 800afc2:	429d      	cmp	r5, r3
 800afc4:	bf08      	it	eq
 800afc6:	68f5      	ldreq	r5, [r6, #12]
 800afc8:	e7da      	b.n	800af80 <_vfiprintf_r+0x20>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	0598      	lsls	r0, r3, #22
 800afce:	d4ed      	bmi.n	800afac <_vfiprintf_r+0x4c>
 800afd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd2:	f000 fd0c 	bl	800b9ee <__retarget_lock_release_recursive>
 800afd6:	e7e9      	b.n	800afac <_vfiprintf_r+0x4c>
 800afd8:	2300      	movs	r3, #0
 800afda:	9309      	str	r3, [sp, #36]	; 0x24
 800afdc:	2320      	movs	r3, #32
 800afde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afe2:	2330      	movs	r3, #48	; 0x30
 800afe4:	f04f 0901 	mov.w	r9, #1
 800afe8:	f8cd 800c 	str.w	r8, [sp, #12]
 800afec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b1ac <_vfiprintf_r+0x24c>
 800aff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aff4:	4623      	mov	r3, r4
 800aff6:	469a      	mov	sl, r3
 800aff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800affc:	b10a      	cbz	r2, 800b002 <_vfiprintf_r+0xa2>
 800affe:	2a25      	cmp	r2, #37	; 0x25
 800b000:	d1f9      	bne.n	800aff6 <_vfiprintf_r+0x96>
 800b002:	ebba 0b04 	subs.w	fp, sl, r4
 800b006:	d00b      	beq.n	800b020 <_vfiprintf_r+0xc0>
 800b008:	465b      	mov	r3, fp
 800b00a:	4622      	mov	r2, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff93 	bl	800af3a <__sfputs_r>
 800b014:	3001      	adds	r0, #1
 800b016:	f000 80aa 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b01c:	445a      	add	r2, fp
 800b01e:	9209      	str	r2, [sp, #36]	; 0x24
 800b020:	f89a 3000 	ldrb.w	r3, [sl]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80a2 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295
 800b030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b034:	f10a 0a01 	add.w	sl, sl, #1
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	9307      	str	r3, [sp, #28]
 800b03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b040:	931a      	str	r3, [sp, #104]	; 0x68
 800b042:	4654      	mov	r4, sl
 800b044:	2205      	movs	r2, #5
 800b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04a:	4858      	ldr	r0, [pc, #352]	; (800b1ac <_vfiprintf_r+0x24c>)
 800b04c:	f000 fd34 	bl	800bab8 <memchr>
 800b050:	9a04      	ldr	r2, [sp, #16]
 800b052:	b9d8      	cbnz	r0, 800b08c <_vfiprintf_r+0x12c>
 800b054:	06d1      	lsls	r1, r2, #27
 800b056:	bf44      	itt	mi
 800b058:	2320      	movmi	r3, #32
 800b05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b05e:	0713      	lsls	r3, r2, #28
 800b060:	bf44      	itt	mi
 800b062:	232b      	movmi	r3, #43	; 0x2b
 800b064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b068:	f89a 3000 	ldrb.w	r3, [sl]
 800b06c:	2b2a      	cmp	r3, #42	; 0x2a
 800b06e:	d015      	beq.n	800b09c <_vfiprintf_r+0x13c>
 800b070:	4654      	mov	r4, sl
 800b072:	2000      	movs	r0, #0
 800b074:	f04f 0c0a 	mov.w	ip, #10
 800b078:	9a07      	ldr	r2, [sp, #28]
 800b07a:	4621      	mov	r1, r4
 800b07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b080:	3b30      	subs	r3, #48	; 0x30
 800b082:	2b09      	cmp	r3, #9
 800b084:	d94e      	bls.n	800b124 <_vfiprintf_r+0x1c4>
 800b086:	b1b0      	cbz	r0, 800b0b6 <_vfiprintf_r+0x156>
 800b088:	9207      	str	r2, [sp, #28]
 800b08a:	e014      	b.n	800b0b6 <_vfiprintf_r+0x156>
 800b08c:	eba0 0308 	sub.w	r3, r0, r8
 800b090:	fa09 f303 	lsl.w	r3, r9, r3
 800b094:	4313      	orrs	r3, r2
 800b096:	46a2      	mov	sl, r4
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	e7d2      	b.n	800b042 <_vfiprintf_r+0xe2>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	1d19      	adds	r1, r3, #4
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	9103      	str	r1, [sp, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bfbb      	ittet	lt
 800b0a8:	425b      	neglt	r3, r3
 800b0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ae:	9307      	strge	r3, [sp, #28]
 800b0b0:	9307      	strlt	r3, [sp, #28]
 800b0b2:	bfb8      	it	lt
 800b0b4:	9204      	strlt	r2, [sp, #16]
 800b0b6:	7823      	ldrb	r3, [r4, #0]
 800b0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ba:	d10c      	bne.n	800b0d6 <_vfiprintf_r+0x176>
 800b0bc:	7863      	ldrb	r3, [r4, #1]
 800b0be:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c0:	d135      	bne.n	800b12e <_vfiprintf_r+0x1ce>
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	3402      	adds	r4, #2
 800b0c6:	1d1a      	adds	r2, r3, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	9203      	str	r2, [sp, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bfb8      	it	lt
 800b0d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1bc <_vfiprintf_r+0x25c>
 800b0da:	2203      	movs	r2, #3
 800b0dc:	4650      	mov	r0, sl
 800b0de:	7821      	ldrb	r1, [r4, #0]
 800b0e0:	f000 fcea 	bl	800bab8 <memchr>
 800b0e4:	b140      	cbz	r0, 800b0f8 <_vfiprintf_r+0x198>
 800b0e6:	2340      	movs	r3, #64	; 0x40
 800b0e8:	eba0 000a 	sub.w	r0, r0, sl
 800b0ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	3401      	adds	r4, #1
 800b0f4:	4303      	orrs	r3, r0
 800b0f6:	9304      	str	r3, [sp, #16]
 800b0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fc:	2206      	movs	r2, #6
 800b0fe:	482c      	ldr	r0, [pc, #176]	; (800b1b0 <_vfiprintf_r+0x250>)
 800b100:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b104:	f000 fcd8 	bl	800bab8 <memchr>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d03f      	beq.n	800b18c <_vfiprintf_r+0x22c>
 800b10c:	4b29      	ldr	r3, [pc, #164]	; (800b1b4 <_vfiprintf_r+0x254>)
 800b10e:	bb1b      	cbnz	r3, 800b158 <_vfiprintf_r+0x1f8>
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	3307      	adds	r3, #7
 800b114:	f023 0307 	bic.w	r3, r3, #7
 800b118:	3308      	adds	r3, #8
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11e:	443b      	add	r3, r7
 800b120:	9309      	str	r3, [sp, #36]	; 0x24
 800b122:	e767      	b.n	800aff4 <_vfiprintf_r+0x94>
 800b124:	460c      	mov	r4, r1
 800b126:	2001      	movs	r0, #1
 800b128:	fb0c 3202 	mla	r2, ip, r2, r3
 800b12c:	e7a5      	b.n	800b07a <_vfiprintf_r+0x11a>
 800b12e:	2300      	movs	r3, #0
 800b130:	f04f 0c0a 	mov.w	ip, #10
 800b134:	4619      	mov	r1, r3
 800b136:	3401      	adds	r4, #1
 800b138:	9305      	str	r3, [sp, #20]
 800b13a:	4620      	mov	r0, r4
 800b13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b140:	3a30      	subs	r2, #48	; 0x30
 800b142:	2a09      	cmp	r2, #9
 800b144:	d903      	bls.n	800b14e <_vfiprintf_r+0x1ee>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0c5      	beq.n	800b0d6 <_vfiprintf_r+0x176>
 800b14a:	9105      	str	r1, [sp, #20]
 800b14c:	e7c3      	b.n	800b0d6 <_vfiprintf_r+0x176>
 800b14e:	4604      	mov	r4, r0
 800b150:	2301      	movs	r3, #1
 800b152:	fb0c 2101 	mla	r1, ip, r1, r2
 800b156:	e7f0      	b.n	800b13a <_vfiprintf_r+0x1da>
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4630      	mov	r0, r6
 800b160:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b162:	a904      	add	r1, sp, #16
 800b164:	f3af 8000 	nop.w
 800b168:	4607      	mov	r7, r0
 800b16a:	1c78      	adds	r0, r7, #1
 800b16c:	d1d6      	bne.n	800b11c <_vfiprintf_r+0x1bc>
 800b16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b170:	07d9      	lsls	r1, r3, #31
 800b172:	d405      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b174:	89ab      	ldrh	r3, [r5, #12]
 800b176:	059a      	lsls	r2, r3, #22
 800b178:	d402      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b17a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b17c:	f000 fc37 	bl	800b9ee <__retarget_lock_release_recursive>
 800b180:	89ab      	ldrh	r3, [r5, #12]
 800b182:	065b      	lsls	r3, r3, #25
 800b184:	f53f af12 	bmi.w	800afac <_vfiprintf_r+0x4c>
 800b188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b18a:	e711      	b.n	800afb0 <_vfiprintf_r+0x50>
 800b18c:	ab03      	add	r3, sp, #12
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	462a      	mov	r2, r5
 800b192:	4630      	mov	r0, r6
 800b194:	4b08      	ldr	r3, [pc, #32]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b196:	a904      	add	r1, sp, #16
 800b198:	f000 f882 	bl	800b2a0 <_printf_i>
 800b19c:	e7e4      	b.n	800b168 <_vfiprintf_r+0x208>
 800b19e:	bf00      	nop
 800b1a0:	0800d1ec 	.word	0x0800d1ec
 800b1a4:	0800d20c 	.word	0x0800d20c
 800b1a8:	0800d1cc 	.word	0x0800d1cc
 800b1ac:	0800d197 	.word	0x0800d197
 800b1b0:	0800d1a1 	.word	0x0800d1a1
 800b1b4:	00000000 	.word	0x00000000
 800b1b8:	0800af3b 	.word	0x0800af3b
 800b1bc:	0800d19d 	.word	0x0800d19d

0800b1c0 <_printf_common>:
 800b1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c4:	4616      	mov	r6, r2
 800b1c6:	4699      	mov	r9, r3
 800b1c8:	688a      	ldr	r2, [r1, #8]
 800b1ca:	690b      	ldr	r3, [r1, #16]
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	bfb8      	it	lt
 800b1d2:	4613      	movlt	r3, r2
 800b1d4:	6033      	str	r3, [r6, #0]
 800b1d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1e0:	b10a      	cbz	r2, 800b1e6 <_printf_common+0x26>
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	6033      	str	r3, [r6, #0]
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	0699      	lsls	r1, r3, #26
 800b1ea:	bf42      	ittt	mi
 800b1ec:	6833      	ldrmi	r3, [r6, #0]
 800b1ee:	3302      	addmi	r3, #2
 800b1f0:	6033      	strmi	r3, [r6, #0]
 800b1f2:	6825      	ldr	r5, [r4, #0]
 800b1f4:	f015 0506 	ands.w	r5, r5, #6
 800b1f8:	d106      	bne.n	800b208 <_printf_common+0x48>
 800b1fa:	f104 0a19 	add.w	sl, r4, #25
 800b1fe:	68e3      	ldr	r3, [r4, #12]
 800b200:	6832      	ldr	r2, [r6, #0]
 800b202:	1a9b      	subs	r3, r3, r2
 800b204:	42ab      	cmp	r3, r5
 800b206:	dc28      	bgt.n	800b25a <_printf_common+0x9a>
 800b208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b20c:	1e13      	subs	r3, r2, #0
 800b20e:	6822      	ldr	r2, [r4, #0]
 800b210:	bf18      	it	ne
 800b212:	2301      	movne	r3, #1
 800b214:	0692      	lsls	r2, r2, #26
 800b216:	d42d      	bmi.n	800b274 <_printf_common+0xb4>
 800b218:	4649      	mov	r1, r9
 800b21a:	4638      	mov	r0, r7
 800b21c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b220:	47c0      	blx	r8
 800b222:	3001      	adds	r0, #1
 800b224:	d020      	beq.n	800b268 <_printf_common+0xa8>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	68e5      	ldr	r5, [r4, #12]
 800b22a:	f003 0306 	and.w	r3, r3, #6
 800b22e:	2b04      	cmp	r3, #4
 800b230:	bf18      	it	ne
 800b232:	2500      	movne	r5, #0
 800b234:	6832      	ldr	r2, [r6, #0]
 800b236:	f04f 0600 	mov.w	r6, #0
 800b23a:	68a3      	ldr	r3, [r4, #8]
 800b23c:	bf08      	it	eq
 800b23e:	1aad      	subeq	r5, r5, r2
 800b240:	6922      	ldr	r2, [r4, #16]
 800b242:	bf08      	it	eq
 800b244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b248:	4293      	cmp	r3, r2
 800b24a:	bfc4      	itt	gt
 800b24c:	1a9b      	subgt	r3, r3, r2
 800b24e:	18ed      	addgt	r5, r5, r3
 800b250:	341a      	adds	r4, #26
 800b252:	42b5      	cmp	r5, r6
 800b254:	d11a      	bne.n	800b28c <_printf_common+0xcc>
 800b256:	2000      	movs	r0, #0
 800b258:	e008      	b.n	800b26c <_printf_common+0xac>
 800b25a:	2301      	movs	r3, #1
 800b25c:	4652      	mov	r2, sl
 800b25e:	4649      	mov	r1, r9
 800b260:	4638      	mov	r0, r7
 800b262:	47c0      	blx	r8
 800b264:	3001      	adds	r0, #1
 800b266:	d103      	bne.n	800b270 <_printf_common+0xb0>
 800b268:	f04f 30ff 	mov.w	r0, #4294967295
 800b26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b270:	3501      	adds	r5, #1
 800b272:	e7c4      	b.n	800b1fe <_printf_common+0x3e>
 800b274:	2030      	movs	r0, #48	; 0x30
 800b276:	18e1      	adds	r1, r4, r3
 800b278:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b282:	4422      	add	r2, r4
 800b284:	3302      	adds	r3, #2
 800b286:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b28a:	e7c5      	b.n	800b218 <_printf_common+0x58>
 800b28c:	2301      	movs	r3, #1
 800b28e:	4622      	mov	r2, r4
 800b290:	4649      	mov	r1, r9
 800b292:	4638      	mov	r0, r7
 800b294:	47c0      	blx	r8
 800b296:	3001      	adds	r0, #1
 800b298:	d0e6      	beq.n	800b268 <_printf_common+0xa8>
 800b29a:	3601      	adds	r6, #1
 800b29c:	e7d9      	b.n	800b252 <_printf_common+0x92>
	...

0800b2a0 <_printf_i>:
 800b2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a4:	460c      	mov	r4, r1
 800b2a6:	7e27      	ldrb	r7, [r4, #24]
 800b2a8:	4691      	mov	r9, r2
 800b2aa:	2f78      	cmp	r7, #120	; 0x78
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	469a      	mov	sl, r3
 800b2b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2b6:	d807      	bhi.n	800b2c8 <_printf_i+0x28>
 800b2b8:	2f62      	cmp	r7, #98	; 0x62
 800b2ba:	d80a      	bhi.n	800b2d2 <_printf_i+0x32>
 800b2bc:	2f00      	cmp	r7, #0
 800b2be:	f000 80d9 	beq.w	800b474 <_printf_i+0x1d4>
 800b2c2:	2f58      	cmp	r7, #88	; 0x58
 800b2c4:	f000 80a4 	beq.w	800b410 <_printf_i+0x170>
 800b2c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b2cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2d0:	e03a      	b.n	800b348 <_printf_i+0xa8>
 800b2d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2d6:	2b15      	cmp	r3, #21
 800b2d8:	d8f6      	bhi.n	800b2c8 <_printf_i+0x28>
 800b2da:	a001      	add	r0, pc, #4	; (adr r0, 800b2e0 <_printf_i+0x40>)
 800b2dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b2e0:	0800b339 	.word	0x0800b339
 800b2e4:	0800b34d 	.word	0x0800b34d
 800b2e8:	0800b2c9 	.word	0x0800b2c9
 800b2ec:	0800b2c9 	.word	0x0800b2c9
 800b2f0:	0800b2c9 	.word	0x0800b2c9
 800b2f4:	0800b2c9 	.word	0x0800b2c9
 800b2f8:	0800b34d 	.word	0x0800b34d
 800b2fc:	0800b2c9 	.word	0x0800b2c9
 800b300:	0800b2c9 	.word	0x0800b2c9
 800b304:	0800b2c9 	.word	0x0800b2c9
 800b308:	0800b2c9 	.word	0x0800b2c9
 800b30c:	0800b45b 	.word	0x0800b45b
 800b310:	0800b37d 	.word	0x0800b37d
 800b314:	0800b43d 	.word	0x0800b43d
 800b318:	0800b2c9 	.word	0x0800b2c9
 800b31c:	0800b2c9 	.word	0x0800b2c9
 800b320:	0800b47d 	.word	0x0800b47d
 800b324:	0800b2c9 	.word	0x0800b2c9
 800b328:	0800b37d 	.word	0x0800b37d
 800b32c:	0800b2c9 	.word	0x0800b2c9
 800b330:	0800b2c9 	.word	0x0800b2c9
 800b334:	0800b445 	.word	0x0800b445
 800b338:	680b      	ldr	r3, [r1, #0]
 800b33a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b33e:	1d1a      	adds	r2, r3, #4
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	600a      	str	r2, [r1, #0]
 800b344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b348:	2301      	movs	r3, #1
 800b34a:	e0a4      	b.n	800b496 <_printf_i+0x1f6>
 800b34c:	6825      	ldr	r5, [r4, #0]
 800b34e:	6808      	ldr	r0, [r1, #0]
 800b350:	062e      	lsls	r6, r5, #24
 800b352:	f100 0304 	add.w	r3, r0, #4
 800b356:	d50a      	bpl.n	800b36e <_printf_i+0xce>
 800b358:	6805      	ldr	r5, [r0, #0]
 800b35a:	600b      	str	r3, [r1, #0]
 800b35c:	2d00      	cmp	r5, #0
 800b35e:	da03      	bge.n	800b368 <_printf_i+0xc8>
 800b360:	232d      	movs	r3, #45	; 0x2d
 800b362:	426d      	negs	r5, r5
 800b364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b368:	230a      	movs	r3, #10
 800b36a:	485e      	ldr	r0, [pc, #376]	; (800b4e4 <_printf_i+0x244>)
 800b36c:	e019      	b.n	800b3a2 <_printf_i+0x102>
 800b36e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b372:	6805      	ldr	r5, [r0, #0]
 800b374:	600b      	str	r3, [r1, #0]
 800b376:	bf18      	it	ne
 800b378:	b22d      	sxthne	r5, r5
 800b37a:	e7ef      	b.n	800b35c <_printf_i+0xbc>
 800b37c:	680b      	ldr	r3, [r1, #0]
 800b37e:	6825      	ldr	r5, [r4, #0]
 800b380:	1d18      	adds	r0, r3, #4
 800b382:	6008      	str	r0, [r1, #0]
 800b384:	0628      	lsls	r0, r5, #24
 800b386:	d501      	bpl.n	800b38c <_printf_i+0xec>
 800b388:	681d      	ldr	r5, [r3, #0]
 800b38a:	e002      	b.n	800b392 <_printf_i+0xf2>
 800b38c:	0669      	lsls	r1, r5, #25
 800b38e:	d5fb      	bpl.n	800b388 <_printf_i+0xe8>
 800b390:	881d      	ldrh	r5, [r3, #0]
 800b392:	2f6f      	cmp	r7, #111	; 0x6f
 800b394:	bf0c      	ite	eq
 800b396:	2308      	moveq	r3, #8
 800b398:	230a      	movne	r3, #10
 800b39a:	4852      	ldr	r0, [pc, #328]	; (800b4e4 <_printf_i+0x244>)
 800b39c:	2100      	movs	r1, #0
 800b39e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3a2:	6866      	ldr	r6, [r4, #4]
 800b3a4:	2e00      	cmp	r6, #0
 800b3a6:	bfa8      	it	ge
 800b3a8:	6821      	ldrge	r1, [r4, #0]
 800b3aa:	60a6      	str	r6, [r4, #8]
 800b3ac:	bfa4      	itt	ge
 800b3ae:	f021 0104 	bicge.w	r1, r1, #4
 800b3b2:	6021      	strge	r1, [r4, #0]
 800b3b4:	b90d      	cbnz	r5, 800b3ba <_printf_i+0x11a>
 800b3b6:	2e00      	cmp	r6, #0
 800b3b8:	d04d      	beq.n	800b456 <_printf_i+0x1b6>
 800b3ba:	4616      	mov	r6, r2
 800b3bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3c0:	fb03 5711 	mls	r7, r3, r1, r5
 800b3c4:	5dc7      	ldrb	r7, [r0, r7]
 800b3c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3ca:	462f      	mov	r7, r5
 800b3cc:	42bb      	cmp	r3, r7
 800b3ce:	460d      	mov	r5, r1
 800b3d0:	d9f4      	bls.n	800b3bc <_printf_i+0x11c>
 800b3d2:	2b08      	cmp	r3, #8
 800b3d4:	d10b      	bne.n	800b3ee <_printf_i+0x14e>
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	07df      	lsls	r7, r3, #31
 800b3da:	d508      	bpl.n	800b3ee <_printf_i+0x14e>
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	6861      	ldr	r1, [r4, #4]
 800b3e0:	4299      	cmp	r1, r3
 800b3e2:	bfde      	ittt	le
 800b3e4:	2330      	movle	r3, #48	; 0x30
 800b3e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3ee:	1b92      	subs	r2, r2, r6
 800b3f0:	6122      	str	r2, [r4, #16]
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	f8cd a000 	str.w	sl, [sp]
 800b3fc:	aa03      	add	r2, sp, #12
 800b3fe:	f7ff fedf 	bl	800b1c0 <_printf_common>
 800b402:	3001      	adds	r0, #1
 800b404:	d14c      	bne.n	800b4a0 <_printf_i+0x200>
 800b406:	f04f 30ff 	mov.w	r0, #4294967295
 800b40a:	b004      	add	sp, #16
 800b40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b410:	4834      	ldr	r0, [pc, #208]	; (800b4e4 <_printf_i+0x244>)
 800b412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b416:	680e      	ldr	r6, [r1, #0]
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b41e:	061f      	lsls	r7, r3, #24
 800b420:	600e      	str	r6, [r1, #0]
 800b422:	d514      	bpl.n	800b44e <_printf_i+0x1ae>
 800b424:	07d9      	lsls	r1, r3, #31
 800b426:	bf44      	itt	mi
 800b428:	f043 0320 	orrmi.w	r3, r3, #32
 800b42c:	6023      	strmi	r3, [r4, #0]
 800b42e:	b91d      	cbnz	r5, 800b438 <_printf_i+0x198>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	f023 0320 	bic.w	r3, r3, #32
 800b436:	6023      	str	r3, [r4, #0]
 800b438:	2310      	movs	r3, #16
 800b43a:	e7af      	b.n	800b39c <_printf_i+0xfc>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	f043 0320 	orr.w	r3, r3, #32
 800b442:	6023      	str	r3, [r4, #0]
 800b444:	2378      	movs	r3, #120	; 0x78
 800b446:	4828      	ldr	r0, [pc, #160]	; (800b4e8 <_printf_i+0x248>)
 800b448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b44c:	e7e3      	b.n	800b416 <_printf_i+0x176>
 800b44e:	065e      	lsls	r6, r3, #25
 800b450:	bf48      	it	mi
 800b452:	b2ad      	uxthmi	r5, r5
 800b454:	e7e6      	b.n	800b424 <_printf_i+0x184>
 800b456:	4616      	mov	r6, r2
 800b458:	e7bb      	b.n	800b3d2 <_printf_i+0x132>
 800b45a:	680b      	ldr	r3, [r1, #0]
 800b45c:	6826      	ldr	r6, [r4, #0]
 800b45e:	1d1d      	adds	r5, r3, #4
 800b460:	6960      	ldr	r0, [r4, #20]
 800b462:	600d      	str	r5, [r1, #0]
 800b464:	0635      	lsls	r5, r6, #24
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	d501      	bpl.n	800b46e <_printf_i+0x1ce>
 800b46a:	6018      	str	r0, [r3, #0]
 800b46c:	e002      	b.n	800b474 <_printf_i+0x1d4>
 800b46e:	0671      	lsls	r1, r6, #25
 800b470:	d5fb      	bpl.n	800b46a <_printf_i+0x1ca>
 800b472:	8018      	strh	r0, [r3, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	4616      	mov	r6, r2
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	e7ba      	b.n	800b3f2 <_printf_i+0x152>
 800b47c:	680b      	ldr	r3, [r1, #0]
 800b47e:	1d1a      	adds	r2, r3, #4
 800b480:	600a      	str	r2, [r1, #0]
 800b482:	681e      	ldr	r6, [r3, #0]
 800b484:	2100      	movs	r1, #0
 800b486:	4630      	mov	r0, r6
 800b488:	6862      	ldr	r2, [r4, #4]
 800b48a:	f000 fb15 	bl	800bab8 <memchr>
 800b48e:	b108      	cbz	r0, 800b494 <_printf_i+0x1f4>
 800b490:	1b80      	subs	r0, r0, r6
 800b492:	6060      	str	r0, [r4, #4]
 800b494:	6863      	ldr	r3, [r4, #4]
 800b496:	6123      	str	r3, [r4, #16]
 800b498:	2300      	movs	r3, #0
 800b49a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b49e:	e7a8      	b.n	800b3f2 <_printf_i+0x152>
 800b4a0:	4632      	mov	r2, r6
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	4640      	mov	r0, r8
 800b4a6:	6923      	ldr	r3, [r4, #16]
 800b4a8:	47d0      	blx	sl
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	d0ab      	beq.n	800b406 <_printf_i+0x166>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	079b      	lsls	r3, r3, #30
 800b4b2:	d413      	bmi.n	800b4dc <_printf_i+0x23c>
 800b4b4:	68e0      	ldr	r0, [r4, #12]
 800b4b6:	9b03      	ldr	r3, [sp, #12]
 800b4b8:	4298      	cmp	r0, r3
 800b4ba:	bfb8      	it	lt
 800b4bc:	4618      	movlt	r0, r3
 800b4be:	e7a4      	b.n	800b40a <_printf_i+0x16a>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4632      	mov	r2, r6
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	47d0      	blx	sl
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d09b      	beq.n	800b406 <_printf_i+0x166>
 800b4ce:	3501      	adds	r5, #1
 800b4d0:	68e3      	ldr	r3, [r4, #12]
 800b4d2:	9903      	ldr	r1, [sp, #12]
 800b4d4:	1a5b      	subs	r3, r3, r1
 800b4d6:	42ab      	cmp	r3, r5
 800b4d8:	dcf2      	bgt.n	800b4c0 <_printf_i+0x220>
 800b4da:	e7eb      	b.n	800b4b4 <_printf_i+0x214>
 800b4dc:	2500      	movs	r5, #0
 800b4de:	f104 0619 	add.w	r6, r4, #25
 800b4e2:	e7f5      	b.n	800b4d0 <_printf_i+0x230>
 800b4e4:	0800d1a8 	.word	0x0800d1a8
 800b4e8:	0800d1b9 	.word	0x0800d1b9

0800b4ec <__swbuf_r>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	460e      	mov	r6, r1
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	b118      	cbz	r0, 800b4fe <__swbuf_r+0x12>
 800b4f6:	6983      	ldr	r3, [r0, #24]
 800b4f8:	b90b      	cbnz	r3, 800b4fe <__swbuf_r+0x12>
 800b4fa:	f000 f9d9 	bl	800b8b0 <__sinit>
 800b4fe:	4b21      	ldr	r3, [pc, #132]	; (800b584 <__swbuf_r+0x98>)
 800b500:	429c      	cmp	r4, r3
 800b502:	d12b      	bne.n	800b55c <__swbuf_r+0x70>
 800b504:	686c      	ldr	r4, [r5, #4]
 800b506:	69a3      	ldr	r3, [r4, #24]
 800b508:	60a3      	str	r3, [r4, #8]
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	071a      	lsls	r2, r3, #28
 800b50e:	d52f      	bpl.n	800b570 <__swbuf_r+0x84>
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	b36b      	cbz	r3, 800b570 <__swbuf_r+0x84>
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	6820      	ldr	r0, [r4, #0]
 800b518:	b2f6      	uxtb	r6, r6
 800b51a:	1ac0      	subs	r0, r0, r3
 800b51c:	6963      	ldr	r3, [r4, #20]
 800b51e:	4637      	mov	r7, r6
 800b520:	4283      	cmp	r3, r0
 800b522:	dc04      	bgt.n	800b52e <__swbuf_r+0x42>
 800b524:	4621      	mov	r1, r4
 800b526:	4628      	mov	r0, r5
 800b528:	f000 f92e 	bl	800b788 <_fflush_r>
 800b52c:	bb30      	cbnz	r0, 800b57c <__swbuf_r+0x90>
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	3001      	adds	r0, #1
 800b532:	3b01      	subs	r3, #1
 800b534:	60a3      	str	r3, [r4, #8]
 800b536:	6823      	ldr	r3, [r4, #0]
 800b538:	1c5a      	adds	r2, r3, #1
 800b53a:	6022      	str	r2, [r4, #0]
 800b53c:	701e      	strb	r6, [r3, #0]
 800b53e:	6963      	ldr	r3, [r4, #20]
 800b540:	4283      	cmp	r3, r0
 800b542:	d004      	beq.n	800b54e <__swbuf_r+0x62>
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	07db      	lsls	r3, r3, #31
 800b548:	d506      	bpl.n	800b558 <__swbuf_r+0x6c>
 800b54a:	2e0a      	cmp	r6, #10
 800b54c:	d104      	bne.n	800b558 <__swbuf_r+0x6c>
 800b54e:	4621      	mov	r1, r4
 800b550:	4628      	mov	r0, r5
 800b552:	f000 f919 	bl	800b788 <_fflush_r>
 800b556:	b988      	cbnz	r0, 800b57c <__swbuf_r+0x90>
 800b558:	4638      	mov	r0, r7
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55c:	4b0a      	ldr	r3, [pc, #40]	; (800b588 <__swbuf_r+0x9c>)
 800b55e:	429c      	cmp	r4, r3
 800b560:	d101      	bne.n	800b566 <__swbuf_r+0x7a>
 800b562:	68ac      	ldr	r4, [r5, #8]
 800b564:	e7cf      	b.n	800b506 <__swbuf_r+0x1a>
 800b566:	4b09      	ldr	r3, [pc, #36]	; (800b58c <__swbuf_r+0xa0>)
 800b568:	429c      	cmp	r4, r3
 800b56a:	bf08      	it	eq
 800b56c:	68ec      	ldreq	r4, [r5, #12]
 800b56e:	e7ca      	b.n	800b506 <__swbuf_r+0x1a>
 800b570:	4621      	mov	r1, r4
 800b572:	4628      	mov	r0, r5
 800b574:	f000 f80c 	bl	800b590 <__swsetup_r>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d0cb      	beq.n	800b514 <__swbuf_r+0x28>
 800b57c:	f04f 37ff 	mov.w	r7, #4294967295
 800b580:	e7ea      	b.n	800b558 <__swbuf_r+0x6c>
 800b582:	bf00      	nop
 800b584:	0800d1ec 	.word	0x0800d1ec
 800b588:	0800d20c 	.word	0x0800d20c
 800b58c:	0800d1cc 	.word	0x0800d1cc

0800b590 <__swsetup_r>:
 800b590:	4b32      	ldr	r3, [pc, #200]	; (800b65c <__swsetup_r+0xcc>)
 800b592:	b570      	push	{r4, r5, r6, lr}
 800b594:	681d      	ldr	r5, [r3, #0]
 800b596:	4606      	mov	r6, r0
 800b598:	460c      	mov	r4, r1
 800b59a:	b125      	cbz	r5, 800b5a6 <__swsetup_r+0x16>
 800b59c:	69ab      	ldr	r3, [r5, #24]
 800b59e:	b913      	cbnz	r3, 800b5a6 <__swsetup_r+0x16>
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	f000 f985 	bl	800b8b0 <__sinit>
 800b5a6:	4b2e      	ldr	r3, [pc, #184]	; (800b660 <__swsetup_r+0xd0>)
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	d10f      	bne.n	800b5cc <__swsetup_r+0x3c>
 800b5ac:	686c      	ldr	r4, [r5, #4]
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5b4:	0719      	lsls	r1, r3, #28
 800b5b6:	d42c      	bmi.n	800b612 <__swsetup_r+0x82>
 800b5b8:	06dd      	lsls	r5, r3, #27
 800b5ba:	d411      	bmi.n	800b5e0 <__swsetup_r+0x50>
 800b5bc:	2309      	movs	r3, #9
 800b5be:	6033      	str	r3, [r6, #0]
 800b5c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	e03e      	b.n	800b64a <__swsetup_r+0xba>
 800b5cc:	4b25      	ldr	r3, [pc, #148]	; (800b664 <__swsetup_r+0xd4>)
 800b5ce:	429c      	cmp	r4, r3
 800b5d0:	d101      	bne.n	800b5d6 <__swsetup_r+0x46>
 800b5d2:	68ac      	ldr	r4, [r5, #8]
 800b5d4:	e7eb      	b.n	800b5ae <__swsetup_r+0x1e>
 800b5d6:	4b24      	ldr	r3, [pc, #144]	; (800b668 <__swsetup_r+0xd8>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	bf08      	it	eq
 800b5dc:	68ec      	ldreq	r4, [r5, #12]
 800b5de:	e7e6      	b.n	800b5ae <__swsetup_r+0x1e>
 800b5e0:	0758      	lsls	r0, r3, #29
 800b5e2:	d512      	bpl.n	800b60a <__swsetup_r+0x7a>
 800b5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5e6:	b141      	cbz	r1, 800b5fa <__swsetup_r+0x6a>
 800b5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ec:	4299      	cmp	r1, r3
 800b5ee:	d002      	beq.n	800b5f6 <__swsetup_r+0x66>
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7ff fc41 	bl	800ae78 <_free_r>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	6363      	str	r3, [r4, #52]	; 0x34
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b600:	81a3      	strh	r3, [r4, #12]
 800b602:	2300      	movs	r3, #0
 800b604:	6063      	str	r3, [r4, #4]
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f043 0308 	orr.w	r3, r3, #8
 800b610:	81a3      	strh	r3, [r4, #12]
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	b94b      	cbnz	r3, 800b62a <__swsetup_r+0x9a>
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b61c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b620:	d003      	beq.n	800b62a <__swsetup_r+0x9a>
 800b622:	4621      	mov	r1, r4
 800b624:	4630      	mov	r0, r6
 800b626:	f000 fa07 	bl	800ba38 <__smakebuf_r>
 800b62a:	89a0      	ldrh	r0, [r4, #12]
 800b62c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b630:	f010 0301 	ands.w	r3, r0, #1
 800b634:	d00a      	beq.n	800b64c <__swsetup_r+0xbc>
 800b636:	2300      	movs	r3, #0
 800b638:	60a3      	str	r3, [r4, #8]
 800b63a:	6963      	ldr	r3, [r4, #20]
 800b63c:	425b      	negs	r3, r3
 800b63e:	61a3      	str	r3, [r4, #24]
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	b943      	cbnz	r3, 800b656 <__swsetup_r+0xc6>
 800b644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b648:	d1ba      	bne.n	800b5c0 <__swsetup_r+0x30>
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	0781      	lsls	r1, r0, #30
 800b64e:	bf58      	it	pl
 800b650:	6963      	ldrpl	r3, [r4, #20]
 800b652:	60a3      	str	r3, [r4, #8]
 800b654:	e7f4      	b.n	800b640 <__swsetup_r+0xb0>
 800b656:	2000      	movs	r0, #0
 800b658:	e7f7      	b.n	800b64a <__swsetup_r+0xba>
 800b65a:	bf00      	nop
 800b65c:	20000024 	.word	0x20000024
 800b660:	0800d1ec 	.word	0x0800d1ec
 800b664:	0800d20c 	.word	0x0800d20c
 800b668:	0800d1cc 	.word	0x0800d1cc

0800b66c <abort>:
 800b66c:	2006      	movs	r0, #6
 800b66e:	b508      	push	{r3, lr}
 800b670:	f000 fa58 	bl	800bb24 <raise>
 800b674:	2001      	movs	r0, #1
 800b676:	f7f6 ff6e 	bl	8002556 <_exit>
	...

0800b67c <__sflush_r>:
 800b67c:	898a      	ldrh	r2, [r1, #12]
 800b67e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b682:	4605      	mov	r5, r0
 800b684:	0710      	lsls	r0, r2, #28
 800b686:	460c      	mov	r4, r1
 800b688:	d458      	bmi.n	800b73c <__sflush_r+0xc0>
 800b68a:	684b      	ldr	r3, [r1, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	dc05      	bgt.n	800b69c <__sflush_r+0x20>
 800b690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	dc02      	bgt.n	800b69c <__sflush_r+0x20>
 800b696:	2000      	movs	r0, #0
 800b698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b69e:	2e00      	cmp	r6, #0
 800b6a0:	d0f9      	beq.n	800b696 <__sflush_r+0x1a>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6a8:	682f      	ldr	r7, [r5, #0]
 800b6aa:	602b      	str	r3, [r5, #0]
 800b6ac:	d032      	beq.n	800b714 <__sflush_r+0x98>
 800b6ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	075a      	lsls	r2, r3, #29
 800b6b4:	d505      	bpl.n	800b6c2 <__sflush_r+0x46>
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	1ac0      	subs	r0, r0, r3
 800b6ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6bc:	b10b      	cbz	r3, 800b6c2 <__sflush_r+0x46>
 800b6be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6c0:	1ac0      	subs	r0, r0, r3
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	6a21      	ldr	r1, [r4, #32]
 800b6cc:	47b0      	blx	r6
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	d106      	bne.n	800b6e2 <__sflush_r+0x66>
 800b6d4:	6829      	ldr	r1, [r5, #0]
 800b6d6:	291d      	cmp	r1, #29
 800b6d8:	d82c      	bhi.n	800b734 <__sflush_r+0xb8>
 800b6da:	4a2a      	ldr	r2, [pc, #168]	; (800b784 <__sflush_r+0x108>)
 800b6dc:	40ca      	lsrs	r2, r1
 800b6de:	07d6      	lsls	r6, r2, #31
 800b6e0:	d528      	bpl.n	800b734 <__sflush_r+0xb8>
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	6062      	str	r2, [r4, #4]
 800b6e6:	6922      	ldr	r2, [r4, #16]
 800b6e8:	04d9      	lsls	r1, r3, #19
 800b6ea:	6022      	str	r2, [r4, #0]
 800b6ec:	d504      	bpl.n	800b6f8 <__sflush_r+0x7c>
 800b6ee:	1c42      	adds	r2, r0, #1
 800b6f0:	d101      	bne.n	800b6f6 <__sflush_r+0x7a>
 800b6f2:	682b      	ldr	r3, [r5, #0]
 800b6f4:	b903      	cbnz	r3, 800b6f8 <__sflush_r+0x7c>
 800b6f6:	6560      	str	r0, [r4, #84]	; 0x54
 800b6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6fa:	602f      	str	r7, [r5, #0]
 800b6fc:	2900      	cmp	r1, #0
 800b6fe:	d0ca      	beq.n	800b696 <__sflush_r+0x1a>
 800b700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b704:	4299      	cmp	r1, r3
 800b706:	d002      	beq.n	800b70e <__sflush_r+0x92>
 800b708:	4628      	mov	r0, r5
 800b70a:	f7ff fbb5 	bl	800ae78 <_free_r>
 800b70e:	2000      	movs	r0, #0
 800b710:	6360      	str	r0, [r4, #52]	; 0x34
 800b712:	e7c1      	b.n	800b698 <__sflush_r+0x1c>
 800b714:	6a21      	ldr	r1, [r4, #32]
 800b716:	2301      	movs	r3, #1
 800b718:	4628      	mov	r0, r5
 800b71a:	47b0      	blx	r6
 800b71c:	1c41      	adds	r1, r0, #1
 800b71e:	d1c7      	bne.n	800b6b0 <__sflush_r+0x34>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d0c4      	beq.n	800b6b0 <__sflush_r+0x34>
 800b726:	2b1d      	cmp	r3, #29
 800b728:	d001      	beq.n	800b72e <__sflush_r+0xb2>
 800b72a:	2b16      	cmp	r3, #22
 800b72c:	d101      	bne.n	800b732 <__sflush_r+0xb6>
 800b72e:	602f      	str	r7, [r5, #0]
 800b730:	e7b1      	b.n	800b696 <__sflush_r+0x1a>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b738:	81a3      	strh	r3, [r4, #12]
 800b73a:	e7ad      	b.n	800b698 <__sflush_r+0x1c>
 800b73c:	690f      	ldr	r7, [r1, #16]
 800b73e:	2f00      	cmp	r7, #0
 800b740:	d0a9      	beq.n	800b696 <__sflush_r+0x1a>
 800b742:	0793      	lsls	r3, r2, #30
 800b744:	bf18      	it	ne
 800b746:	2300      	movne	r3, #0
 800b748:	680e      	ldr	r6, [r1, #0]
 800b74a:	bf08      	it	eq
 800b74c:	694b      	ldreq	r3, [r1, #20]
 800b74e:	eba6 0807 	sub.w	r8, r6, r7
 800b752:	600f      	str	r7, [r1, #0]
 800b754:	608b      	str	r3, [r1, #8]
 800b756:	f1b8 0f00 	cmp.w	r8, #0
 800b75a:	dd9c      	ble.n	800b696 <__sflush_r+0x1a>
 800b75c:	4643      	mov	r3, r8
 800b75e:	463a      	mov	r2, r7
 800b760:	4628      	mov	r0, r5
 800b762:	6a21      	ldr	r1, [r4, #32]
 800b764:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b766:	47b0      	blx	r6
 800b768:	2800      	cmp	r0, #0
 800b76a:	dc06      	bgt.n	800b77a <__sflush_r+0xfe>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	f04f 30ff 	mov.w	r0, #4294967295
 800b772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	e78e      	b.n	800b698 <__sflush_r+0x1c>
 800b77a:	4407      	add	r7, r0
 800b77c:	eba8 0800 	sub.w	r8, r8, r0
 800b780:	e7e9      	b.n	800b756 <__sflush_r+0xda>
 800b782:	bf00      	nop
 800b784:	20400001 	.word	0x20400001

0800b788 <_fflush_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	690b      	ldr	r3, [r1, #16]
 800b78c:	4605      	mov	r5, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	b913      	cbnz	r3, 800b798 <_fflush_r+0x10>
 800b792:	2500      	movs	r5, #0
 800b794:	4628      	mov	r0, r5
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	b118      	cbz	r0, 800b7a2 <_fflush_r+0x1a>
 800b79a:	6983      	ldr	r3, [r0, #24]
 800b79c:	b90b      	cbnz	r3, 800b7a2 <_fflush_r+0x1a>
 800b79e:	f000 f887 	bl	800b8b0 <__sinit>
 800b7a2:	4b14      	ldr	r3, [pc, #80]	; (800b7f4 <_fflush_r+0x6c>)
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	d11b      	bne.n	800b7e0 <_fflush_r+0x58>
 800b7a8:	686c      	ldr	r4, [r5, #4]
 800b7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d0ef      	beq.n	800b792 <_fflush_r+0xa>
 800b7b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7b4:	07d0      	lsls	r0, r2, #31
 800b7b6:	d404      	bmi.n	800b7c2 <_fflush_r+0x3a>
 800b7b8:	0599      	lsls	r1, r3, #22
 800b7ba:	d402      	bmi.n	800b7c2 <_fflush_r+0x3a>
 800b7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7be:	f000 f915 	bl	800b9ec <__retarget_lock_acquire_recursive>
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	f7ff ff59 	bl	800b67c <__sflush_r>
 800b7ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	07da      	lsls	r2, r3, #31
 800b7d0:	d4e0      	bmi.n	800b794 <_fflush_r+0xc>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	059b      	lsls	r3, r3, #22
 800b7d6:	d4dd      	bmi.n	800b794 <_fflush_r+0xc>
 800b7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7da:	f000 f908 	bl	800b9ee <__retarget_lock_release_recursive>
 800b7de:	e7d9      	b.n	800b794 <_fflush_r+0xc>
 800b7e0:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <_fflush_r+0x70>)
 800b7e2:	429c      	cmp	r4, r3
 800b7e4:	d101      	bne.n	800b7ea <_fflush_r+0x62>
 800b7e6:	68ac      	ldr	r4, [r5, #8]
 800b7e8:	e7df      	b.n	800b7aa <_fflush_r+0x22>
 800b7ea:	4b04      	ldr	r3, [pc, #16]	; (800b7fc <_fflush_r+0x74>)
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	bf08      	it	eq
 800b7f0:	68ec      	ldreq	r4, [r5, #12]
 800b7f2:	e7da      	b.n	800b7aa <_fflush_r+0x22>
 800b7f4:	0800d1ec 	.word	0x0800d1ec
 800b7f8:	0800d20c 	.word	0x0800d20c
 800b7fc:	0800d1cc 	.word	0x0800d1cc

0800b800 <std>:
 800b800:	2300      	movs	r3, #0
 800b802:	b510      	push	{r4, lr}
 800b804:	4604      	mov	r4, r0
 800b806:	e9c0 3300 	strd	r3, r3, [r0]
 800b80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b80e:	6083      	str	r3, [r0, #8]
 800b810:	8181      	strh	r1, [r0, #12]
 800b812:	6643      	str	r3, [r0, #100]	; 0x64
 800b814:	81c2      	strh	r2, [r0, #14]
 800b816:	6183      	str	r3, [r0, #24]
 800b818:	4619      	mov	r1, r3
 800b81a:	2208      	movs	r2, #8
 800b81c:	305c      	adds	r0, #92	; 0x5c
 800b81e:	f7fc fc13 	bl	8008048 <memset>
 800b822:	4b05      	ldr	r3, [pc, #20]	; (800b838 <std+0x38>)
 800b824:	6224      	str	r4, [r4, #32]
 800b826:	6263      	str	r3, [r4, #36]	; 0x24
 800b828:	4b04      	ldr	r3, [pc, #16]	; (800b83c <std+0x3c>)
 800b82a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b82c:	4b04      	ldr	r3, [pc, #16]	; (800b840 <std+0x40>)
 800b82e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b830:	4b04      	ldr	r3, [pc, #16]	; (800b844 <std+0x44>)
 800b832:	6323      	str	r3, [r4, #48]	; 0x30
 800b834:	bd10      	pop	{r4, pc}
 800b836:	bf00      	nop
 800b838:	0800bb5d 	.word	0x0800bb5d
 800b83c:	0800bb7f 	.word	0x0800bb7f
 800b840:	0800bbb7 	.word	0x0800bbb7
 800b844:	0800bbdb 	.word	0x0800bbdb

0800b848 <_cleanup_r>:
 800b848:	4901      	ldr	r1, [pc, #4]	; (800b850 <_cleanup_r+0x8>)
 800b84a:	f000 b8af 	b.w	800b9ac <_fwalk_reent>
 800b84e:	bf00      	nop
 800b850:	0800b789 	.word	0x0800b789

0800b854 <__sfmoreglue>:
 800b854:	b570      	push	{r4, r5, r6, lr}
 800b856:	2568      	movs	r5, #104	; 0x68
 800b858:	1e4a      	subs	r2, r1, #1
 800b85a:	4355      	muls	r5, r2
 800b85c:	460e      	mov	r6, r1
 800b85e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b862:	f7fe fbaf 	bl	8009fc4 <_malloc_r>
 800b866:	4604      	mov	r4, r0
 800b868:	b140      	cbz	r0, 800b87c <__sfmoreglue+0x28>
 800b86a:	2100      	movs	r1, #0
 800b86c:	e9c0 1600 	strd	r1, r6, [r0]
 800b870:	300c      	adds	r0, #12
 800b872:	60a0      	str	r0, [r4, #8]
 800b874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b878:	f7fc fbe6 	bl	8008048 <memset>
 800b87c:	4620      	mov	r0, r4
 800b87e:	bd70      	pop	{r4, r5, r6, pc}

0800b880 <__sfp_lock_acquire>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__sfp_lock_acquire+0x8>)
 800b882:	f000 b8b3 	b.w	800b9ec <__retarget_lock_acquire_recursive>
 800b886:	bf00      	nop
 800b888:	20000a58 	.word	0x20000a58

0800b88c <__sfp_lock_release>:
 800b88c:	4801      	ldr	r0, [pc, #4]	; (800b894 <__sfp_lock_release+0x8>)
 800b88e:	f000 b8ae 	b.w	800b9ee <__retarget_lock_release_recursive>
 800b892:	bf00      	nop
 800b894:	20000a58 	.word	0x20000a58

0800b898 <__sinit_lock_acquire>:
 800b898:	4801      	ldr	r0, [pc, #4]	; (800b8a0 <__sinit_lock_acquire+0x8>)
 800b89a:	f000 b8a7 	b.w	800b9ec <__retarget_lock_acquire_recursive>
 800b89e:	bf00      	nop
 800b8a0:	20000a53 	.word	0x20000a53

0800b8a4 <__sinit_lock_release>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__sinit_lock_release+0x8>)
 800b8a6:	f000 b8a2 	b.w	800b9ee <__retarget_lock_release_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	20000a53 	.word	0x20000a53

0800b8b0 <__sinit>:
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	f7ff fff0 	bl	800b898 <__sinit_lock_acquire>
 800b8b8:	69a3      	ldr	r3, [r4, #24]
 800b8ba:	b11b      	cbz	r3, 800b8c4 <__sinit+0x14>
 800b8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c0:	f7ff bff0 	b.w	800b8a4 <__sinit_lock_release>
 800b8c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8c8:	6523      	str	r3, [r4, #80]	; 0x50
 800b8ca:	4b13      	ldr	r3, [pc, #76]	; (800b918 <__sinit+0x68>)
 800b8cc:	4a13      	ldr	r2, [pc, #76]	; (800b91c <__sinit+0x6c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8d2:	42a3      	cmp	r3, r4
 800b8d4:	bf08      	it	eq
 800b8d6:	2301      	moveq	r3, #1
 800b8d8:	4620      	mov	r0, r4
 800b8da:	bf08      	it	eq
 800b8dc:	61a3      	streq	r3, [r4, #24]
 800b8de:	f000 f81f 	bl	800b920 <__sfp>
 800b8e2:	6060      	str	r0, [r4, #4]
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f000 f81b 	bl	800b920 <__sfp>
 800b8ea:	60a0      	str	r0, [r4, #8]
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 f817 	bl	800b920 <__sfp>
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	2104      	movs	r1, #4
 800b8f6:	60e0      	str	r0, [r4, #12]
 800b8f8:	6860      	ldr	r0, [r4, #4]
 800b8fa:	f7ff ff81 	bl	800b800 <std>
 800b8fe:	2201      	movs	r2, #1
 800b900:	2109      	movs	r1, #9
 800b902:	68a0      	ldr	r0, [r4, #8]
 800b904:	f7ff ff7c 	bl	800b800 <std>
 800b908:	2202      	movs	r2, #2
 800b90a:	2112      	movs	r1, #18
 800b90c:	68e0      	ldr	r0, [r4, #12]
 800b90e:	f7ff ff77 	bl	800b800 <std>
 800b912:	2301      	movs	r3, #1
 800b914:	61a3      	str	r3, [r4, #24]
 800b916:	e7d1      	b.n	800b8bc <__sinit+0xc>
 800b918:	0800cd88 	.word	0x0800cd88
 800b91c:	0800b849 	.word	0x0800b849

0800b920 <__sfp>:
 800b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b922:	4607      	mov	r7, r0
 800b924:	f7ff ffac 	bl	800b880 <__sfp_lock_acquire>
 800b928:	4b1e      	ldr	r3, [pc, #120]	; (800b9a4 <__sfp+0x84>)
 800b92a:	681e      	ldr	r6, [r3, #0]
 800b92c:	69b3      	ldr	r3, [r6, #24]
 800b92e:	b913      	cbnz	r3, 800b936 <__sfp+0x16>
 800b930:	4630      	mov	r0, r6
 800b932:	f7ff ffbd 	bl	800b8b0 <__sinit>
 800b936:	3648      	adds	r6, #72	; 0x48
 800b938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	d503      	bpl.n	800b948 <__sfp+0x28>
 800b940:	6833      	ldr	r3, [r6, #0]
 800b942:	b30b      	cbz	r3, 800b988 <__sfp+0x68>
 800b944:	6836      	ldr	r6, [r6, #0]
 800b946:	e7f7      	b.n	800b938 <__sfp+0x18>
 800b948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b94c:	b9d5      	cbnz	r5, 800b984 <__sfp+0x64>
 800b94e:	4b16      	ldr	r3, [pc, #88]	; (800b9a8 <__sfp+0x88>)
 800b950:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b954:	60e3      	str	r3, [r4, #12]
 800b956:	6665      	str	r5, [r4, #100]	; 0x64
 800b958:	f000 f847 	bl	800b9ea <__retarget_lock_init_recursive>
 800b95c:	f7ff ff96 	bl	800b88c <__sfp_lock_release>
 800b960:	2208      	movs	r2, #8
 800b962:	4629      	mov	r1, r5
 800b964:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b968:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b96c:	6025      	str	r5, [r4, #0]
 800b96e:	61a5      	str	r5, [r4, #24]
 800b970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b974:	f7fc fb68 	bl	8008048 <memset>
 800b978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b97c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b980:	4620      	mov	r0, r4
 800b982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b984:	3468      	adds	r4, #104	; 0x68
 800b986:	e7d9      	b.n	800b93c <__sfp+0x1c>
 800b988:	2104      	movs	r1, #4
 800b98a:	4638      	mov	r0, r7
 800b98c:	f7ff ff62 	bl	800b854 <__sfmoreglue>
 800b990:	4604      	mov	r4, r0
 800b992:	6030      	str	r0, [r6, #0]
 800b994:	2800      	cmp	r0, #0
 800b996:	d1d5      	bne.n	800b944 <__sfp+0x24>
 800b998:	f7ff ff78 	bl	800b88c <__sfp_lock_release>
 800b99c:	230c      	movs	r3, #12
 800b99e:	603b      	str	r3, [r7, #0]
 800b9a0:	e7ee      	b.n	800b980 <__sfp+0x60>
 800b9a2:	bf00      	nop
 800b9a4:	0800cd88 	.word	0x0800cd88
 800b9a8:	ffff0001 	.word	0xffff0001

0800b9ac <_fwalk_reent>:
 800b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	4688      	mov	r8, r1
 800b9b4:	2700      	movs	r7, #0
 800b9b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9be:	f1b9 0901 	subs.w	r9, r9, #1
 800b9c2:	d505      	bpl.n	800b9d0 <_fwalk_reent+0x24>
 800b9c4:	6824      	ldr	r4, [r4, #0]
 800b9c6:	2c00      	cmp	r4, #0
 800b9c8:	d1f7      	bne.n	800b9ba <_fwalk_reent+0xe>
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d0:	89ab      	ldrh	r3, [r5, #12]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d907      	bls.n	800b9e6 <_fwalk_reent+0x3a>
 800b9d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	d003      	beq.n	800b9e6 <_fwalk_reent+0x3a>
 800b9de:	4629      	mov	r1, r5
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	47c0      	blx	r8
 800b9e4:	4307      	orrs	r7, r0
 800b9e6:	3568      	adds	r5, #104	; 0x68
 800b9e8:	e7e9      	b.n	800b9be <_fwalk_reent+0x12>

0800b9ea <__retarget_lock_init_recursive>:
 800b9ea:	4770      	bx	lr

0800b9ec <__retarget_lock_acquire_recursive>:
 800b9ec:	4770      	bx	lr

0800b9ee <__retarget_lock_release_recursive>:
 800b9ee:	4770      	bx	lr

0800b9f0 <__swhatbuf_r>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	460e      	mov	r6, r1
 800b9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	2900      	cmp	r1, #0
 800b9fc:	461d      	mov	r5, r3
 800b9fe:	b096      	sub	sp, #88	; 0x58
 800ba00:	da07      	bge.n	800ba12 <__swhatbuf_r+0x22>
 800ba02:	2300      	movs	r3, #0
 800ba04:	602b      	str	r3, [r5, #0]
 800ba06:	89b3      	ldrh	r3, [r6, #12]
 800ba08:	061a      	lsls	r2, r3, #24
 800ba0a:	d410      	bmi.n	800ba2e <__swhatbuf_r+0x3e>
 800ba0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba10:	e00e      	b.n	800ba30 <__swhatbuf_r+0x40>
 800ba12:	466a      	mov	r2, sp
 800ba14:	f000 f908 	bl	800bc28 <_fstat_r>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	dbf2      	blt.n	800ba02 <__swhatbuf_r+0x12>
 800ba1c:	9a01      	ldr	r2, [sp, #4]
 800ba1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba26:	425a      	negs	r2, r3
 800ba28:	415a      	adcs	r2, r3
 800ba2a:	602a      	str	r2, [r5, #0]
 800ba2c:	e7ee      	b.n	800ba0c <__swhatbuf_r+0x1c>
 800ba2e:	2340      	movs	r3, #64	; 0x40
 800ba30:	2000      	movs	r0, #0
 800ba32:	6023      	str	r3, [r4, #0]
 800ba34:	b016      	add	sp, #88	; 0x58
 800ba36:	bd70      	pop	{r4, r5, r6, pc}

0800ba38 <__smakebuf_r>:
 800ba38:	898b      	ldrh	r3, [r1, #12]
 800ba3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba3c:	079d      	lsls	r5, r3, #30
 800ba3e:	4606      	mov	r6, r0
 800ba40:	460c      	mov	r4, r1
 800ba42:	d507      	bpl.n	800ba54 <__smakebuf_r+0x1c>
 800ba44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	6123      	str	r3, [r4, #16]
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	6163      	str	r3, [r4, #20]
 800ba50:	b002      	add	sp, #8
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	466a      	mov	r2, sp
 800ba56:	ab01      	add	r3, sp, #4
 800ba58:	f7ff ffca 	bl	800b9f0 <__swhatbuf_r>
 800ba5c:	9900      	ldr	r1, [sp, #0]
 800ba5e:	4605      	mov	r5, r0
 800ba60:	4630      	mov	r0, r6
 800ba62:	f7fe faaf 	bl	8009fc4 <_malloc_r>
 800ba66:	b948      	cbnz	r0, 800ba7c <__smakebuf_r+0x44>
 800ba68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba6c:	059a      	lsls	r2, r3, #22
 800ba6e:	d4ef      	bmi.n	800ba50 <__smakebuf_r+0x18>
 800ba70:	f023 0303 	bic.w	r3, r3, #3
 800ba74:	f043 0302 	orr.w	r3, r3, #2
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	e7e3      	b.n	800ba44 <__smakebuf_r+0xc>
 800ba7c:	4b0d      	ldr	r3, [pc, #52]	; (800bab4 <__smakebuf_r+0x7c>)
 800ba7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	6020      	str	r0, [r4, #0]
 800ba84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	9b00      	ldr	r3, [sp, #0]
 800ba8c:	6120      	str	r0, [r4, #16]
 800ba8e:	6163      	str	r3, [r4, #20]
 800ba90:	9b01      	ldr	r3, [sp, #4]
 800ba92:	b15b      	cbz	r3, 800baac <__smakebuf_r+0x74>
 800ba94:	4630      	mov	r0, r6
 800ba96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba9a:	f000 f8d7 	bl	800bc4c <_isatty_r>
 800ba9e:	b128      	cbz	r0, 800baac <__smakebuf_r+0x74>
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	f023 0303 	bic.w	r3, r3, #3
 800baa6:	f043 0301 	orr.w	r3, r3, #1
 800baaa:	81a3      	strh	r3, [r4, #12]
 800baac:	89a0      	ldrh	r0, [r4, #12]
 800baae:	4305      	orrs	r5, r0
 800bab0:	81a5      	strh	r5, [r4, #12]
 800bab2:	e7cd      	b.n	800ba50 <__smakebuf_r+0x18>
 800bab4:	0800b849 	.word	0x0800b849

0800bab8 <memchr>:
 800bab8:	4603      	mov	r3, r0
 800baba:	b510      	push	{r4, lr}
 800babc:	b2c9      	uxtb	r1, r1
 800babe:	4402      	add	r2, r0
 800bac0:	4293      	cmp	r3, r2
 800bac2:	4618      	mov	r0, r3
 800bac4:	d101      	bne.n	800baca <memchr+0x12>
 800bac6:	2000      	movs	r0, #0
 800bac8:	e003      	b.n	800bad2 <memchr+0x1a>
 800baca:	7804      	ldrb	r4, [r0, #0]
 800bacc:	3301      	adds	r3, #1
 800bace:	428c      	cmp	r4, r1
 800bad0:	d1f6      	bne.n	800bac0 <memchr+0x8>
 800bad2:	bd10      	pop	{r4, pc}

0800bad4 <_raise_r>:
 800bad4:	291f      	cmp	r1, #31
 800bad6:	b538      	push	{r3, r4, r5, lr}
 800bad8:	4604      	mov	r4, r0
 800bada:	460d      	mov	r5, r1
 800badc:	d904      	bls.n	800bae8 <_raise_r+0x14>
 800bade:	2316      	movs	r3, #22
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	f04f 30ff 	mov.w	r0, #4294967295
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800baea:	b112      	cbz	r2, 800baf2 <_raise_r+0x1e>
 800baec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baf0:	b94b      	cbnz	r3, 800bb06 <_raise_r+0x32>
 800baf2:	4620      	mov	r0, r4
 800baf4:	f000 f830 	bl	800bb58 <_getpid_r>
 800baf8:	462a      	mov	r2, r5
 800bafa:	4601      	mov	r1, r0
 800bafc:	4620      	mov	r0, r4
 800bafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb02:	f000 b817 	b.w	800bb34 <_kill_r>
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d00a      	beq.n	800bb20 <_raise_r+0x4c>
 800bb0a:	1c59      	adds	r1, r3, #1
 800bb0c:	d103      	bne.n	800bb16 <_raise_r+0x42>
 800bb0e:	2316      	movs	r3, #22
 800bb10:	6003      	str	r3, [r0, #0]
 800bb12:	2001      	movs	r0, #1
 800bb14:	e7e7      	b.n	800bae6 <_raise_r+0x12>
 800bb16:	2400      	movs	r4, #0
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb1e:	4798      	blx	r3
 800bb20:	2000      	movs	r0, #0
 800bb22:	e7e0      	b.n	800bae6 <_raise_r+0x12>

0800bb24 <raise>:
 800bb24:	4b02      	ldr	r3, [pc, #8]	; (800bb30 <raise+0xc>)
 800bb26:	4601      	mov	r1, r0
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f7ff bfd3 	b.w	800bad4 <_raise_r>
 800bb2e:	bf00      	nop
 800bb30:	20000024 	.word	0x20000024

0800bb34 <_kill_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	2300      	movs	r3, #0
 800bb38:	4d06      	ldr	r5, [pc, #24]	; (800bb54 <_kill_r+0x20>)
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	4611      	mov	r1, r2
 800bb40:	602b      	str	r3, [r5, #0]
 800bb42:	f7f6 fcf8 	bl	8002536 <_kill>
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	d102      	bne.n	800bb50 <_kill_r+0x1c>
 800bb4a:	682b      	ldr	r3, [r5, #0]
 800bb4c:	b103      	cbz	r3, 800bb50 <_kill_r+0x1c>
 800bb4e:	6023      	str	r3, [r4, #0]
 800bb50:	bd38      	pop	{r3, r4, r5, pc}
 800bb52:	bf00      	nop
 800bb54:	20000a4c 	.word	0x20000a4c

0800bb58 <_getpid_r>:
 800bb58:	f7f6 bce6 	b.w	8002528 <_getpid>

0800bb5c <__sread>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	460c      	mov	r4, r1
 800bb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb64:	f000 f894 	bl	800bc90 <_read_r>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	bfab      	itete	ge
 800bb6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb6e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb70:	181b      	addge	r3, r3, r0
 800bb72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb76:	bfac      	ite	ge
 800bb78:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb7a:	81a3      	strhlt	r3, [r4, #12]
 800bb7c:	bd10      	pop	{r4, pc}

0800bb7e <__swrite>:
 800bb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb82:	461f      	mov	r7, r3
 800bb84:	898b      	ldrh	r3, [r1, #12]
 800bb86:	4605      	mov	r5, r0
 800bb88:	05db      	lsls	r3, r3, #23
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	4616      	mov	r6, r2
 800bb8e:	d505      	bpl.n	800bb9c <__swrite+0x1e>
 800bb90:	2302      	movs	r3, #2
 800bb92:	2200      	movs	r2, #0
 800bb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb98:	f000 f868 	bl	800bc6c <_lseek_r>
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	4632      	mov	r2, r6
 800bba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bba4:	81a3      	strh	r3, [r4, #12]
 800bba6:	4628      	mov	r0, r5
 800bba8:	463b      	mov	r3, r7
 800bbaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb2:	f000 b817 	b.w	800bbe4 <_write_r>

0800bbb6 <__sseek>:
 800bbb6:	b510      	push	{r4, lr}
 800bbb8:	460c      	mov	r4, r1
 800bbba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbbe:	f000 f855 	bl	800bc6c <_lseek_r>
 800bbc2:	1c43      	adds	r3, r0, #1
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	bf15      	itete	ne
 800bbc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbd2:	81a3      	strheq	r3, [r4, #12]
 800bbd4:	bf18      	it	ne
 800bbd6:	81a3      	strhne	r3, [r4, #12]
 800bbd8:	bd10      	pop	{r4, pc}

0800bbda <__sclose>:
 800bbda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbde:	f000 b813 	b.w	800bc08 <_close_r>
	...

0800bbe4 <_write_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	4608      	mov	r0, r1
 800bbea:	4611      	mov	r1, r2
 800bbec:	2200      	movs	r2, #0
 800bbee:	4d05      	ldr	r5, [pc, #20]	; (800bc04 <_write_r+0x20>)
 800bbf0:	602a      	str	r2, [r5, #0]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	f7f6 fcd6 	bl	80025a4 <_write>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_write_r+0x1e>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_write_r+0x1e>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20000a4c 	.word	0x20000a4c

0800bc08 <_close_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4d05      	ldr	r5, [pc, #20]	; (800bc24 <_close_r+0x1c>)
 800bc0e:	4604      	mov	r4, r0
 800bc10:	4608      	mov	r0, r1
 800bc12:	602b      	str	r3, [r5, #0]
 800bc14:	f7f6 fce2 	bl	80025dc <_close>
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	d102      	bne.n	800bc22 <_close_r+0x1a>
 800bc1c:	682b      	ldr	r3, [r5, #0]
 800bc1e:	b103      	cbz	r3, 800bc22 <_close_r+0x1a>
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	bd38      	pop	{r3, r4, r5, pc}
 800bc24:	20000a4c 	.word	0x20000a4c

0800bc28 <_fstat_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	4d06      	ldr	r5, [pc, #24]	; (800bc48 <_fstat_r+0x20>)
 800bc2e:	4604      	mov	r4, r0
 800bc30:	4608      	mov	r0, r1
 800bc32:	4611      	mov	r1, r2
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	f7f6 fcdc 	bl	80025f2 <_fstat>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	d102      	bne.n	800bc44 <_fstat_r+0x1c>
 800bc3e:	682b      	ldr	r3, [r5, #0]
 800bc40:	b103      	cbz	r3, 800bc44 <_fstat_r+0x1c>
 800bc42:	6023      	str	r3, [r4, #0]
 800bc44:	bd38      	pop	{r3, r4, r5, pc}
 800bc46:	bf00      	nop
 800bc48:	20000a4c 	.word	0x20000a4c

0800bc4c <_isatty_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	2300      	movs	r3, #0
 800bc50:	4d05      	ldr	r5, [pc, #20]	; (800bc68 <_isatty_r+0x1c>)
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	602b      	str	r3, [r5, #0]
 800bc58:	f7f6 fcda 	bl	8002610 <_isatty>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d102      	bne.n	800bc66 <_isatty_r+0x1a>
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	b103      	cbz	r3, 800bc66 <_isatty_r+0x1a>
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
 800bc68:	20000a4c 	.word	0x20000a4c

0800bc6c <_lseek_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4604      	mov	r4, r0
 800bc70:	4608      	mov	r0, r1
 800bc72:	4611      	mov	r1, r2
 800bc74:	2200      	movs	r2, #0
 800bc76:	4d05      	ldr	r5, [pc, #20]	; (800bc8c <_lseek_r+0x20>)
 800bc78:	602a      	str	r2, [r5, #0]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	f7f6 fcd2 	bl	8002624 <_lseek>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_lseek_r+0x1e>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_lseek_r+0x1e>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	20000a4c 	.word	0x20000a4c

0800bc90 <_read_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	4611      	mov	r1, r2
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4d05      	ldr	r5, [pc, #20]	; (800bcb0 <_read_r+0x20>)
 800bc9c:	602a      	str	r2, [r5, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f7f6 fc63 	bl	800256a <_read>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d102      	bne.n	800bcae <_read_r+0x1e>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	b103      	cbz	r3, 800bcae <_read_r+0x1e>
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	20000a4c 	.word	0x20000a4c

0800bcb4 <cos>:
 800bcb4:	b530      	push	{r4, r5, lr}
 800bcb6:	4a1e      	ldr	r2, [pc, #120]	; (800bd30 <cos+0x7c>)
 800bcb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	dc04      	bgt.n	800bccc <cos+0x18>
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f000 fa6f 	bl	800c1a8 <__kernel_cos>
 800bcca:	e006      	b.n	800bcda <cos+0x26>
 800bccc:	4a19      	ldr	r2, [pc, #100]	; (800bd34 <cos+0x80>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	dd05      	ble.n	800bcde <cos+0x2a>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	f7f4 fafb 	bl	80002d0 <__aeabi_dsub>
 800bcda:	b007      	add	sp, #28
 800bcdc:	bd30      	pop	{r4, r5, pc}
 800bcde:	aa02      	add	r2, sp, #8
 800bce0:	f000 f872 	bl	800bdc8 <__ieee754_rem_pio2>
 800bce4:	f000 0003 	and.w	r0, r0, #3
 800bce8:	2801      	cmp	r0, #1
 800bcea:	d007      	beq.n	800bcfc <cos+0x48>
 800bcec:	2802      	cmp	r0, #2
 800bcee:	d00f      	beq.n	800bd10 <cos+0x5c>
 800bcf0:	b9a8      	cbnz	r0, 800bd1e <cos+0x6a>
 800bcf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcfa:	e7e4      	b.n	800bcc6 <cos+0x12>
 800bcfc:	9000      	str	r0, [sp, #0]
 800bcfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd06:	f000 fe57 	bl	800c9b8 <__kernel_sin>
 800bd0a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bd0e:	e7e4      	b.n	800bcda <cos+0x26>
 800bd10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd18:	f000 fa46 	bl	800c1a8 <__kernel_cos>
 800bd1c:	e7f5      	b.n	800bd0a <cos+0x56>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd2a:	f000 fe45 	bl	800c9b8 <__kernel_sin>
 800bd2e:	e7d4      	b.n	800bcda <cos+0x26>
 800bd30:	3fe921fb 	.word	0x3fe921fb
 800bd34:	7fefffff 	.word	0x7fefffff

0800bd38 <sin>:
 800bd38:	b530      	push	{r4, r5, lr}
 800bd3a:	4a20      	ldr	r2, [pc, #128]	; (800bdbc <sin+0x84>)
 800bd3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd40:	4293      	cmp	r3, r2
 800bd42:	b087      	sub	sp, #28
 800bd44:	dc06      	bgt.n	800bd54 <sin+0x1c>
 800bd46:	2300      	movs	r3, #0
 800bd48:	2200      	movs	r2, #0
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	f000 fe33 	bl	800c9b8 <__kernel_sin>
 800bd52:	e006      	b.n	800bd62 <sin+0x2a>
 800bd54:	4a1a      	ldr	r2, [pc, #104]	; (800bdc0 <sin+0x88>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	dd05      	ble.n	800bd66 <sin+0x2e>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	f7f4 fab7 	bl	80002d0 <__aeabi_dsub>
 800bd62:	b007      	add	sp, #28
 800bd64:	bd30      	pop	{r4, r5, pc}
 800bd66:	aa02      	add	r2, sp, #8
 800bd68:	f000 f82e 	bl	800bdc8 <__ieee754_rem_pio2>
 800bd6c:	f000 0003 	and.w	r0, r0, #3
 800bd70:	2801      	cmp	r0, #1
 800bd72:	d009      	beq.n	800bd88 <sin+0x50>
 800bd74:	2802      	cmp	r0, #2
 800bd76:	d00e      	beq.n	800bd96 <sin+0x5e>
 800bd78:	b9c0      	cbnz	r0, 800bdac <sin+0x74>
 800bd7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd7e:	2301      	movs	r3, #1
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd86:	e7e2      	b.n	800bd4e <sin+0x16>
 800bd88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd90:	f000 fa0a 	bl	800c1a8 <__kernel_cos>
 800bd94:	e7e5      	b.n	800bd62 <sin+0x2a>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda2:	f000 fe09 	bl	800c9b8 <__kernel_sin>
 800bda6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bdaa:	e7da      	b.n	800bd62 <sin+0x2a>
 800bdac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb4:	f000 f9f8 	bl	800c1a8 <__kernel_cos>
 800bdb8:	e7f5      	b.n	800bda6 <sin+0x6e>
 800bdba:	bf00      	nop
 800bdbc:	3fe921fb 	.word	0x3fe921fb
 800bdc0:	7fefffff 	.word	0x7fefffff
 800bdc4:	00000000 	.word	0x00000000

0800bdc8 <__ieee754_rem_pio2>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	4614      	mov	r4, r2
 800bdce:	4ac4      	ldr	r2, [pc, #784]	; (800c0e0 <__ieee754_rem_pio2+0x318>)
 800bdd0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bdd4:	b08d      	sub	sp, #52	; 0x34
 800bdd6:	4592      	cmp	sl, r2
 800bdd8:	9104      	str	r1, [sp, #16]
 800bdda:	dc07      	bgt.n	800bdec <__ieee754_rem_pio2+0x24>
 800bddc:	2200      	movs	r2, #0
 800bdde:	2300      	movs	r3, #0
 800bde0:	e9c4 0100 	strd	r0, r1, [r4]
 800bde4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bde8:	2500      	movs	r5, #0
 800bdea:	e024      	b.n	800be36 <__ieee754_rem_pio2+0x6e>
 800bdec:	4abd      	ldr	r2, [pc, #756]	; (800c0e4 <__ieee754_rem_pio2+0x31c>)
 800bdee:	4592      	cmp	sl, r2
 800bdf0:	dc72      	bgt.n	800bed8 <__ieee754_rem_pio2+0x110>
 800bdf2:	9b04      	ldr	r3, [sp, #16]
 800bdf4:	4dbc      	ldr	r5, [pc, #752]	; (800c0e8 <__ieee754_rem_pio2+0x320>)
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	a3ab      	add	r3, pc, #684	; (adr r3, 800c0a8 <__ieee754_rem_pio2+0x2e0>)
 800bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfe:	dd36      	ble.n	800be6e <__ieee754_rem_pio2+0xa6>
 800be00:	f7f4 fa66 	bl	80002d0 <__aeabi_dsub>
 800be04:	45aa      	cmp	sl, r5
 800be06:	4606      	mov	r6, r0
 800be08:	460f      	mov	r7, r1
 800be0a:	d018      	beq.n	800be3e <__ieee754_rem_pio2+0x76>
 800be0c:	a3a8      	add	r3, pc, #672	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x2e8>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f7f4 fa5d 	bl	80002d0 <__aeabi_dsub>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	4630      	mov	r0, r6
 800be1c:	e9c4 2300 	strd	r2, r3, [r4]
 800be20:	4639      	mov	r1, r7
 800be22:	f7f4 fa55 	bl	80002d0 <__aeabi_dsub>
 800be26:	a3a2      	add	r3, pc, #648	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x2e8>)
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	f7f4 fa50 	bl	80002d0 <__aeabi_dsub>
 800be30:	2501      	movs	r5, #1
 800be32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800be36:	4628      	mov	r0, r5
 800be38:	b00d      	add	sp, #52	; 0x34
 800be3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3e:	a39e      	add	r3, pc, #632	; (adr r3, 800c0b8 <__ieee754_rem_pio2+0x2f0>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 fa44 	bl	80002d0 <__aeabi_dsub>
 800be48:	a39d      	add	r3, pc, #628	; (adr r3, 800c0c0 <__ieee754_rem_pio2+0x2f8>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	f7f4 fa3d 	bl	80002d0 <__aeabi_dsub>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	4630      	mov	r0, r6
 800be5c:	e9c4 2300 	strd	r2, r3, [r4]
 800be60:	4639      	mov	r1, r7
 800be62:	f7f4 fa35 	bl	80002d0 <__aeabi_dsub>
 800be66:	a396      	add	r3, pc, #600	; (adr r3, 800c0c0 <__ieee754_rem_pio2+0x2f8>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	e7de      	b.n	800be2c <__ieee754_rem_pio2+0x64>
 800be6e:	f7f4 fa31 	bl	80002d4 <__adddf3>
 800be72:	45aa      	cmp	sl, r5
 800be74:	4606      	mov	r6, r0
 800be76:	460f      	mov	r7, r1
 800be78:	d016      	beq.n	800bea8 <__ieee754_rem_pio2+0xe0>
 800be7a:	a38d      	add	r3, pc, #564	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x2e8>)
 800be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be80:	f7f4 fa28 	bl	80002d4 <__adddf3>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4630      	mov	r0, r6
 800be8a:	e9c4 2300 	strd	r2, r3, [r4]
 800be8e:	4639      	mov	r1, r7
 800be90:	f7f4 fa1e 	bl	80002d0 <__aeabi_dsub>
 800be94:	a386      	add	r3, pc, #536	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x2e8>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 fa1b 	bl	80002d4 <__adddf3>
 800be9e:	f04f 35ff 	mov.w	r5, #4294967295
 800bea2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bea6:	e7c6      	b.n	800be36 <__ieee754_rem_pio2+0x6e>
 800bea8:	a383      	add	r3, pc, #524	; (adr r3, 800c0b8 <__ieee754_rem_pio2+0x2f0>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	f7f4 fa11 	bl	80002d4 <__adddf3>
 800beb2:	a383      	add	r3, pc, #524	; (adr r3, 800c0c0 <__ieee754_rem_pio2+0x2f8>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	4606      	mov	r6, r0
 800beba:	460f      	mov	r7, r1
 800bebc:	f7f4 fa0a 	bl	80002d4 <__adddf3>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4630      	mov	r0, r6
 800bec6:	e9c4 2300 	strd	r2, r3, [r4]
 800beca:	4639      	mov	r1, r7
 800becc:	f7f4 fa00 	bl	80002d0 <__aeabi_dsub>
 800bed0:	a37b      	add	r3, pc, #492	; (adr r3, 800c0c0 <__ieee754_rem_pio2+0x2f8>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	e7e0      	b.n	800be9a <__ieee754_rem_pio2+0xd2>
 800bed8:	4a84      	ldr	r2, [pc, #528]	; (800c0ec <__ieee754_rem_pio2+0x324>)
 800beda:	4592      	cmp	sl, r2
 800bedc:	f300 80d5 	bgt.w	800c08a <__ieee754_rem_pio2+0x2c2>
 800bee0:	f000 fe20 	bl	800cb24 <fabs>
 800bee4:	a378      	add	r3, pc, #480	; (adr r3, 800c0c8 <__ieee754_rem_pio2+0x300>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	4606      	mov	r6, r0
 800beec:	460f      	mov	r7, r1
 800beee:	f7f4 fba7 	bl	8000640 <__aeabi_dmul>
 800bef2:	2200      	movs	r2, #0
 800bef4:	4b7e      	ldr	r3, [pc, #504]	; (800c0f0 <__ieee754_rem_pio2+0x328>)
 800bef6:	f7f4 f9ed 	bl	80002d4 <__adddf3>
 800befa:	f7f4 fe3b 	bl	8000b74 <__aeabi_d2iz>
 800befe:	4605      	mov	r5, r0
 800bf00:	f7f4 fb34 	bl	800056c <__aeabi_i2d>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf0c:	a366      	add	r3, pc, #408	; (adr r3, 800c0a8 <__ieee754_rem_pio2+0x2e0>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 fb95 	bl	8000640 <__aeabi_dmul>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	f7f4 f9d7 	bl	80002d0 <__aeabi_dsub>
 800bf22:	a363      	add	r3, pc, #396	; (adr r3, 800c0b0 <__ieee754_rem_pio2+0x2e8>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	4680      	mov	r8, r0
 800bf2a:	4689      	mov	r9, r1
 800bf2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf30:	f7f4 fb86 	bl	8000640 <__aeabi_dmul>
 800bf34:	2d1f      	cmp	r5, #31
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	dc0e      	bgt.n	800bf5a <__ieee754_rem_pio2+0x192>
 800bf3c:	4b6d      	ldr	r3, [pc, #436]	; (800c0f4 <__ieee754_rem_pio2+0x32c>)
 800bf3e:	1e6a      	subs	r2, r5, #1
 800bf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf44:	4553      	cmp	r3, sl
 800bf46:	d008      	beq.n	800bf5a <__ieee754_rem_pio2+0x192>
 800bf48:	4632      	mov	r2, r6
 800bf4a:	463b      	mov	r3, r7
 800bf4c:	4640      	mov	r0, r8
 800bf4e:	4649      	mov	r1, r9
 800bf50:	f7f4 f9be 	bl	80002d0 <__aeabi_dsub>
 800bf54:	e9c4 0100 	strd	r0, r1, [r4]
 800bf58:	e013      	b.n	800bf82 <__ieee754_rem_pio2+0x1ba>
 800bf5a:	463b      	mov	r3, r7
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	4640      	mov	r0, r8
 800bf60:	4649      	mov	r1, r9
 800bf62:	f7f4 f9b5 	bl	80002d0 <__aeabi_dsub>
 800bf66:	ea4f 532a 	mov.w	r3, sl, asr #20
 800bf6a:	9305      	str	r3, [sp, #20]
 800bf6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf70:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800bf74:	f1ba 0f10 	cmp.w	sl, #16
 800bf78:	dc1f      	bgt.n	800bfba <__ieee754_rem_pio2+0x1f2>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	e9c4 2300 	strd	r2, r3, [r4]
 800bf82:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bf86:	4640      	mov	r0, r8
 800bf88:	4653      	mov	r3, sl
 800bf8a:	4649      	mov	r1, r9
 800bf8c:	f7f4 f9a0 	bl	80002d0 <__aeabi_dsub>
 800bf90:	4632      	mov	r2, r6
 800bf92:	463b      	mov	r3, r7
 800bf94:	f7f4 f99c 	bl	80002d0 <__aeabi_dsub>
 800bf98:	460b      	mov	r3, r1
 800bf9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf9e:	9904      	ldr	r1, [sp, #16]
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	f6bf af47 	bge.w	800be36 <__ieee754_rem_pio2+0x6e>
 800bfa8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800bfac:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bfb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bfb4:	60e3      	str	r3, [r4, #12]
 800bfb6:	426d      	negs	r5, r5
 800bfb8:	e73d      	b.n	800be36 <__ieee754_rem_pio2+0x6e>
 800bfba:	a33f      	add	r3, pc, #252	; (adr r3, 800c0b8 <__ieee754_rem_pio2+0x2f0>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfc4:	f7f4 fb3c 	bl	8000640 <__aeabi_dmul>
 800bfc8:	4606      	mov	r6, r0
 800bfca:	460f      	mov	r7, r1
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	4640      	mov	r0, r8
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	f7f4 f97c 	bl	80002d0 <__aeabi_dsub>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4682      	mov	sl, r0
 800bfde:	468b      	mov	fp, r1
 800bfe0:	4640      	mov	r0, r8
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	f7f4 f974 	bl	80002d0 <__aeabi_dsub>
 800bfe8:	4632      	mov	r2, r6
 800bfea:	463b      	mov	r3, r7
 800bfec:	f7f4 f970 	bl	80002d0 <__aeabi_dsub>
 800bff0:	a333      	add	r3, pc, #204	; (adr r3, 800c0c0 <__ieee754_rem_pio2+0x2f8>)
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffe:	f7f4 fb1f 	bl	8000640 <__aeabi_dmul>
 800c002:	4632      	mov	r2, r6
 800c004:	463b      	mov	r3, r7
 800c006:	f7f4 f963 	bl	80002d0 <__aeabi_dsub>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4606      	mov	r6, r0
 800c010:	460f      	mov	r7, r1
 800c012:	4650      	mov	r0, sl
 800c014:	4659      	mov	r1, fp
 800c016:	f7f4 f95b 	bl	80002d0 <__aeabi_dsub>
 800c01a:	9a05      	ldr	r2, [sp, #20]
 800c01c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	2b31      	cmp	r3, #49	; 0x31
 800c024:	dc06      	bgt.n	800c034 <__ieee754_rem_pio2+0x26c>
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	46d0      	mov	r8, sl
 800c02c:	46d9      	mov	r9, fp
 800c02e:	e9c4 2300 	strd	r2, r3, [r4]
 800c032:	e7a6      	b.n	800bf82 <__ieee754_rem_pio2+0x1ba>
 800c034:	a326      	add	r3, pc, #152	; (adr r3, 800c0d0 <__ieee754_rem_pio2+0x308>)
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c03e:	f7f4 faff 	bl	8000640 <__aeabi_dmul>
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4650      	mov	r0, sl
 800c04c:	4659      	mov	r1, fp
 800c04e:	f7f4 f93f 	bl	80002d0 <__aeabi_dsub>
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	4680      	mov	r8, r0
 800c058:	4689      	mov	r9, r1
 800c05a:	4650      	mov	r0, sl
 800c05c:	4659      	mov	r1, fp
 800c05e:	f7f4 f937 	bl	80002d0 <__aeabi_dsub>
 800c062:	4632      	mov	r2, r6
 800c064:	463b      	mov	r3, r7
 800c066:	f7f4 f933 	bl	80002d0 <__aeabi_dsub>
 800c06a:	a31b      	add	r3, pc, #108	; (adr r3, 800c0d8 <__ieee754_rem_pio2+0x310>)
 800c06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c070:	4606      	mov	r6, r0
 800c072:	460f      	mov	r7, r1
 800c074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c078:	f7f4 fae2 	bl	8000640 <__aeabi_dmul>
 800c07c:	4632      	mov	r2, r6
 800c07e:	463b      	mov	r3, r7
 800c080:	f7f4 f926 	bl	80002d0 <__aeabi_dsub>
 800c084:	4606      	mov	r6, r0
 800c086:	460f      	mov	r7, r1
 800c088:	e75e      	b.n	800bf48 <__ieee754_rem_pio2+0x180>
 800c08a:	4a1b      	ldr	r2, [pc, #108]	; (800c0f8 <__ieee754_rem_pio2+0x330>)
 800c08c:	4592      	cmp	sl, r2
 800c08e:	dd35      	ble.n	800c0fc <__ieee754_rem_pio2+0x334>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	f7f4 f91c 	bl	80002d0 <__aeabi_dsub>
 800c098:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c09c:	e9c4 0100 	strd	r0, r1, [r4]
 800c0a0:	e6a2      	b.n	800bde8 <__ieee754_rem_pio2+0x20>
 800c0a2:	bf00      	nop
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	54400000 	.word	0x54400000
 800c0ac:	3ff921fb 	.word	0x3ff921fb
 800c0b0:	1a626331 	.word	0x1a626331
 800c0b4:	3dd0b461 	.word	0x3dd0b461
 800c0b8:	1a600000 	.word	0x1a600000
 800c0bc:	3dd0b461 	.word	0x3dd0b461
 800c0c0:	2e037073 	.word	0x2e037073
 800c0c4:	3ba3198a 	.word	0x3ba3198a
 800c0c8:	6dc9c883 	.word	0x6dc9c883
 800c0cc:	3fe45f30 	.word	0x3fe45f30
 800c0d0:	2e000000 	.word	0x2e000000
 800c0d4:	3ba3198a 	.word	0x3ba3198a
 800c0d8:	252049c1 	.word	0x252049c1
 800c0dc:	397b839a 	.word	0x397b839a
 800c0e0:	3fe921fb 	.word	0x3fe921fb
 800c0e4:	4002d97b 	.word	0x4002d97b
 800c0e8:	3ff921fb 	.word	0x3ff921fb
 800c0ec:	413921fb 	.word	0x413921fb
 800c0f0:	3fe00000 	.word	0x3fe00000
 800c0f4:	0800d22c 	.word	0x0800d22c
 800c0f8:	7fefffff 	.word	0x7fefffff
 800c0fc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c100:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c104:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c108:	460f      	mov	r7, r1
 800c10a:	4606      	mov	r6, r0
 800c10c:	f7f4 fd32 	bl	8000b74 <__aeabi_d2iz>
 800c110:	f7f4 fa2c 	bl	800056c <__aeabi_i2d>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	4630      	mov	r0, r6
 800c11a:	4639      	mov	r1, r7
 800c11c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c120:	f7f4 f8d6 	bl	80002d0 <__aeabi_dsub>
 800c124:	2200      	movs	r2, #0
 800c126:	4b1e      	ldr	r3, [pc, #120]	; (800c1a0 <__ieee754_rem_pio2+0x3d8>)
 800c128:	f7f4 fa8a 	bl	8000640 <__aeabi_dmul>
 800c12c:	460f      	mov	r7, r1
 800c12e:	4606      	mov	r6, r0
 800c130:	f7f4 fd20 	bl	8000b74 <__aeabi_d2iz>
 800c134:	f7f4 fa1a 	bl	800056c <__aeabi_i2d>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4630      	mov	r0, r6
 800c13e:	4639      	mov	r1, r7
 800c140:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c144:	f7f4 f8c4 	bl	80002d0 <__aeabi_dsub>
 800c148:	2200      	movs	r2, #0
 800c14a:	4b15      	ldr	r3, [pc, #84]	; (800c1a0 <__ieee754_rem_pio2+0x3d8>)
 800c14c:	f7f4 fa78 	bl	8000640 <__aeabi_dmul>
 800c150:	f04f 0803 	mov.w	r8, #3
 800c154:	2600      	movs	r6, #0
 800c156:	2700      	movs	r7, #0
 800c158:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c15c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c160:	4632      	mov	r2, r6
 800c162:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c166:	463b      	mov	r3, r7
 800c168:	46c2      	mov	sl, r8
 800c16a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c16e:	f7f4 fccf 	bl	8000b10 <__aeabi_dcmpeq>
 800c172:	2800      	cmp	r0, #0
 800c174:	d1f4      	bne.n	800c160 <__ieee754_rem_pio2+0x398>
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <__ieee754_rem_pio2+0x3dc>)
 800c178:	462a      	mov	r2, r5
 800c17a:	9301      	str	r3, [sp, #4]
 800c17c:	2302      	movs	r3, #2
 800c17e:	4621      	mov	r1, r4
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	a806      	add	r0, sp, #24
 800c184:	4653      	mov	r3, sl
 800c186:	f000 f8cd 	bl	800c324 <__kernel_rem_pio2>
 800c18a:	9b04      	ldr	r3, [sp, #16]
 800c18c:	4605      	mov	r5, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f6bf ae51 	bge.w	800be36 <__ieee754_rem_pio2+0x6e>
 800c194:	6863      	ldr	r3, [r4, #4]
 800c196:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c19a:	6063      	str	r3, [r4, #4]
 800c19c:	68e3      	ldr	r3, [r4, #12]
 800c19e:	e707      	b.n	800bfb0 <__ieee754_rem_pio2+0x1e8>
 800c1a0:	41700000 	.word	0x41700000
 800c1a4:	0800d2ac 	.word	0x0800d2ac

0800c1a8 <__kernel_cos>:
 800c1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c1b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	460f      	mov	r7, r1
 800c1b8:	e9cd 2300 	strd	r2, r3, [sp]
 800c1bc:	da04      	bge.n	800c1c8 <__kernel_cos+0x20>
 800c1be:	f7f4 fcd9 	bl	8000b74 <__aeabi_d2iz>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	f000 8086 	beq.w	800c2d4 <__kernel_cos+0x12c>
 800c1c8:	4642      	mov	r2, r8
 800c1ca:	463b      	mov	r3, r7
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	f7f4 fa36 	bl	8000640 <__aeabi_dmul>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	4b4e      	ldr	r3, [pc, #312]	; (800c310 <__kernel_cos+0x168>)
 800c1d8:	4604      	mov	r4, r0
 800c1da:	460d      	mov	r5, r1
 800c1dc:	f7f4 fa30 	bl	8000640 <__aeabi_dmul>
 800c1e0:	a33f      	add	r3, pc, #252	; (adr r3, 800c2e0 <__kernel_cos+0x138>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	4682      	mov	sl, r0
 800c1e8:	468b      	mov	fp, r1
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	f7f4 fa27 	bl	8000640 <__aeabi_dmul>
 800c1f2:	a33d      	add	r3, pc, #244	; (adr r3, 800c2e8 <__kernel_cos+0x140>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f7f4 f86c 	bl	80002d4 <__adddf3>
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	462b      	mov	r3, r5
 800c200:	f7f4 fa1e 	bl	8000640 <__aeabi_dmul>
 800c204:	a33a      	add	r3, pc, #232	; (adr r3, 800c2f0 <__kernel_cos+0x148>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f4 f861 	bl	80002d0 <__aeabi_dsub>
 800c20e:	4622      	mov	r2, r4
 800c210:	462b      	mov	r3, r5
 800c212:	f7f4 fa15 	bl	8000640 <__aeabi_dmul>
 800c216:	a338      	add	r3, pc, #224	; (adr r3, 800c2f8 <__kernel_cos+0x150>)
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f7f4 f85a 	bl	80002d4 <__adddf3>
 800c220:	4622      	mov	r2, r4
 800c222:	462b      	mov	r3, r5
 800c224:	f7f4 fa0c 	bl	8000640 <__aeabi_dmul>
 800c228:	a335      	add	r3, pc, #212	; (adr r3, 800c300 <__kernel_cos+0x158>)
 800c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22e:	f7f4 f84f 	bl	80002d0 <__aeabi_dsub>
 800c232:	4622      	mov	r2, r4
 800c234:	462b      	mov	r3, r5
 800c236:	f7f4 fa03 	bl	8000640 <__aeabi_dmul>
 800c23a:	a333      	add	r3, pc, #204	; (adr r3, 800c308 <__kernel_cos+0x160>)
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f7f4 f848 	bl	80002d4 <__adddf3>
 800c244:	4622      	mov	r2, r4
 800c246:	462b      	mov	r3, r5
 800c248:	f7f4 f9fa 	bl	8000640 <__aeabi_dmul>
 800c24c:	4622      	mov	r2, r4
 800c24e:	462b      	mov	r3, r5
 800c250:	f7f4 f9f6 	bl	8000640 <__aeabi_dmul>
 800c254:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c258:	4604      	mov	r4, r0
 800c25a:	460d      	mov	r5, r1
 800c25c:	4640      	mov	r0, r8
 800c25e:	4639      	mov	r1, r7
 800c260:	f7f4 f9ee 	bl	8000640 <__aeabi_dmul>
 800c264:	460b      	mov	r3, r1
 800c266:	4602      	mov	r2, r0
 800c268:	4629      	mov	r1, r5
 800c26a:	4620      	mov	r0, r4
 800c26c:	f7f4 f830 	bl	80002d0 <__aeabi_dsub>
 800c270:	4b28      	ldr	r3, [pc, #160]	; (800c314 <__kernel_cos+0x16c>)
 800c272:	4680      	mov	r8, r0
 800c274:	429e      	cmp	r6, r3
 800c276:	4689      	mov	r9, r1
 800c278:	dc0e      	bgt.n	800c298 <__kernel_cos+0xf0>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	4650      	mov	r0, sl
 800c280:	4659      	mov	r1, fp
 800c282:	f7f4 f825 	bl	80002d0 <__aeabi_dsub>
 800c286:	4602      	mov	r2, r0
 800c288:	2000      	movs	r0, #0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4922      	ldr	r1, [pc, #136]	; (800c318 <__kernel_cos+0x170>)
 800c28e:	f7f4 f81f 	bl	80002d0 <__aeabi_dsub>
 800c292:	b003      	add	sp, #12
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	2400      	movs	r4, #0
 800c29a:	4b20      	ldr	r3, [pc, #128]	; (800c31c <__kernel_cos+0x174>)
 800c29c:	4622      	mov	r2, r4
 800c29e:	429e      	cmp	r6, r3
 800c2a0:	bfcc      	ite	gt
 800c2a2:	4d1f      	ldrgt	r5, [pc, #124]	; (800c320 <__kernel_cos+0x178>)
 800c2a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	491a      	ldr	r1, [pc, #104]	; (800c318 <__kernel_cos+0x170>)
 800c2ae:	f7f4 f80f 	bl	80002d0 <__aeabi_dsub>
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	460f      	mov	r7, r1
 800c2b8:	462b      	mov	r3, r5
 800c2ba:	4650      	mov	r0, sl
 800c2bc:	4659      	mov	r1, fp
 800c2be:	f7f4 f807 	bl	80002d0 <__aeabi_dsub>
 800c2c2:	4642      	mov	r2, r8
 800c2c4:	464b      	mov	r3, r9
 800c2c6:	f7f4 f803 	bl	80002d0 <__aeabi_dsub>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	e7dc      	b.n	800c28e <__kernel_cos+0xe6>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	4910      	ldr	r1, [pc, #64]	; (800c318 <__kernel_cos+0x170>)
 800c2d8:	e7db      	b.n	800c292 <__kernel_cos+0xea>
 800c2da:	bf00      	nop
 800c2dc:	f3af 8000 	nop.w
 800c2e0:	be8838d4 	.word	0xbe8838d4
 800c2e4:	bda8fae9 	.word	0xbda8fae9
 800c2e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c2ec:	3e21ee9e 	.word	0x3e21ee9e
 800c2f0:	809c52ad 	.word	0x809c52ad
 800c2f4:	3e927e4f 	.word	0x3e927e4f
 800c2f8:	19cb1590 	.word	0x19cb1590
 800c2fc:	3efa01a0 	.word	0x3efa01a0
 800c300:	16c15177 	.word	0x16c15177
 800c304:	3f56c16c 	.word	0x3f56c16c
 800c308:	5555554c 	.word	0x5555554c
 800c30c:	3fa55555 	.word	0x3fa55555
 800c310:	3fe00000 	.word	0x3fe00000
 800c314:	3fd33332 	.word	0x3fd33332
 800c318:	3ff00000 	.word	0x3ff00000
 800c31c:	3fe90000 	.word	0x3fe90000
 800c320:	3fd20000 	.word	0x3fd20000

0800c324 <__kernel_rem_pio2>:
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c32c:	9308      	str	r3, [sp, #32]
 800c32e:	9101      	str	r1, [sp, #4]
 800c330:	4bc0      	ldr	r3, [pc, #768]	; (800c634 <__kernel_rem_pio2+0x310>)
 800c332:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c334:	f112 0f14 	cmn.w	r2, #20
 800c338:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c33c:	bfa8      	it	ge
 800c33e:	1ed4      	subge	r4, r2, #3
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	9b08      	ldr	r3, [sp, #32]
 800c344:	bfb8      	it	lt
 800c346:	2400      	movlt	r4, #0
 800c348:	f103 33ff 	add.w	r3, r3, #4294967295
 800c34c:	9306      	str	r3, [sp, #24]
 800c34e:	bfa4      	itt	ge
 800c350:	2318      	movge	r3, #24
 800c352:	fb94 f4f3 	sdivge	r4, r4, r3
 800c356:	f06f 0317 	mvn.w	r3, #23
 800c35a:	fb04 3303 	mla	r3, r4, r3, r3
 800c35e:	eb03 0a02 	add.w	sl, r3, r2
 800c362:	9a06      	ldr	r2, [sp, #24]
 800c364:	9b04      	ldr	r3, [sp, #16]
 800c366:	1aa7      	subs	r7, r4, r2
 800c368:	eb03 0802 	add.w	r8, r3, r2
 800c36c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c36e:	2500      	movs	r5, #0
 800c370:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c374:	2200      	movs	r2, #0
 800c376:	2300      	movs	r3, #0
 800c378:	9009      	str	r0, [sp, #36]	; 0x24
 800c37a:	ae20      	add	r6, sp, #128	; 0x80
 800c37c:	4545      	cmp	r5, r8
 800c37e:	dd19      	ble.n	800c3b4 <__kernel_rem_pio2+0x90>
 800c380:	9b08      	ldr	r3, [sp, #32]
 800c382:	aa20      	add	r2, sp, #128	; 0x80
 800c384:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c388:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c38c:	f1c3 0301 	rsb	r3, r3, #1
 800c390:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c394:	9307      	str	r3, [sp, #28]
 800c396:	9b07      	ldr	r3, [sp, #28]
 800c398:	9a04      	ldr	r2, [sp, #16]
 800c39a:	4443      	add	r3, r8
 800c39c:	429a      	cmp	r2, r3
 800c39e:	db35      	blt.n	800c40c <__kernel_rem_pio2+0xe8>
 800c3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f1a3 0908 	sub.w	r9, r3, #8
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	462f      	mov	r7, r5
 800c3ac:	2600      	movs	r6, #0
 800c3ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3b2:	e01f      	b.n	800c3f4 <__kernel_rem_pio2+0xd0>
 800c3b4:	42ef      	cmn	r7, r5
 800c3b6:	d40b      	bmi.n	800c3d0 <__kernel_rem_pio2+0xac>
 800c3b8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c3bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3c0:	f7f4 f8d4 	bl	800056c <__aeabi_i2d>
 800c3c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3c8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3cc:	3501      	adds	r5, #1
 800c3ce:	e7d5      	b.n	800c37c <__kernel_rem_pio2+0x58>
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	e7f8      	b.n	800c3c8 <__kernel_rem_pio2+0xa4>
 800c3d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3da:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c3de:	f7f4 f92f 	bl	8000640 <__aeabi_dmul>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ea:	f7f3 ff73 	bl	80002d4 <__adddf3>
 800c3ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3f2:	3601      	adds	r6, #1
 800c3f4:	9b06      	ldr	r3, [sp, #24]
 800c3f6:	3f08      	subs	r7, #8
 800c3f8:	429e      	cmp	r6, r3
 800c3fa:	ddec      	ble.n	800c3d6 <__kernel_rem_pio2+0xb2>
 800c3fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c400:	3508      	adds	r5, #8
 800c402:	e8eb 2302 	strd	r2, r3, [fp], #8
 800c406:	f108 0801 	add.w	r8, r8, #1
 800c40a:	e7c4      	b.n	800c396 <__kernel_rem_pio2+0x72>
 800c40c:	9b04      	ldr	r3, [sp, #16]
 800c40e:	aa0c      	add	r2, sp, #48	; 0x30
 800c410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c414:	930b      	str	r3, [sp, #44]	; 0x2c
 800c416:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c418:	9f04      	ldr	r7, [sp, #16]
 800c41a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c41e:	930a      	str	r3, [sp, #40]	; 0x28
 800c420:	463e      	mov	r6, r7
 800c422:	ab98      	add	r3, sp, #608	; 0x260
 800c424:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c428:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c42c:	f8cd b008 	str.w	fp, [sp, #8]
 800c430:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c434:	2e00      	cmp	r6, #0
 800c436:	dc71      	bgt.n	800c51c <__kernel_rem_pio2+0x1f8>
 800c438:	4652      	mov	r2, sl
 800c43a:	4620      	mov	r0, r4
 800c43c:	4629      	mov	r1, r5
 800c43e:	f000 fbf7 	bl	800cc30 <scalbn>
 800c442:	2200      	movs	r2, #0
 800c444:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c448:	4604      	mov	r4, r0
 800c44a:	460d      	mov	r5, r1
 800c44c:	f7f4 f8f8 	bl	8000640 <__aeabi_dmul>
 800c450:	f000 fb6e 	bl	800cb30 <floor>
 800c454:	2200      	movs	r2, #0
 800c456:	4b78      	ldr	r3, [pc, #480]	; (800c638 <__kernel_rem_pio2+0x314>)
 800c458:	f7f4 f8f2 	bl	8000640 <__aeabi_dmul>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	4620      	mov	r0, r4
 800c462:	4629      	mov	r1, r5
 800c464:	f7f3 ff34 	bl	80002d0 <__aeabi_dsub>
 800c468:	460d      	mov	r5, r1
 800c46a:	4604      	mov	r4, r0
 800c46c:	f7f4 fb82 	bl	8000b74 <__aeabi_d2iz>
 800c470:	9007      	str	r0, [sp, #28]
 800c472:	f7f4 f87b 	bl	800056c <__aeabi_i2d>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4620      	mov	r0, r4
 800c47c:	4629      	mov	r1, r5
 800c47e:	f7f3 ff27 	bl	80002d0 <__aeabi_dsub>
 800c482:	f1ba 0f00 	cmp.w	sl, #0
 800c486:	4680      	mov	r8, r0
 800c488:	4689      	mov	r9, r1
 800c48a:	dd70      	ble.n	800c56e <__kernel_rem_pio2+0x24a>
 800c48c:	1e7a      	subs	r2, r7, #1
 800c48e:	ab0c      	add	r3, sp, #48	; 0x30
 800c490:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c494:	9c07      	ldr	r4, [sp, #28]
 800c496:	f1ca 0118 	rsb	r1, sl, #24
 800c49a:	fa40 f301 	asr.w	r3, r0, r1
 800c49e:	441c      	add	r4, r3
 800c4a0:	408b      	lsls	r3, r1
 800c4a2:	1ac0      	subs	r0, r0, r3
 800c4a4:	ab0c      	add	r3, sp, #48	; 0x30
 800c4a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c4aa:	f1ca 0317 	rsb	r3, sl, #23
 800c4ae:	9407      	str	r4, [sp, #28]
 800c4b0:	fa40 f303 	asr.w	r3, r0, r3
 800c4b4:	9302      	str	r3, [sp, #8]
 800c4b6:	9b02      	ldr	r3, [sp, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	dd66      	ble.n	800c58a <__kernel_rem_pio2+0x266>
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c4c2:	4614      	mov	r4, r2
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	9307      	str	r3, [sp, #28]
 800c4ca:	4297      	cmp	r7, r2
 800c4cc:	f300 809f 	bgt.w	800c60e <__kernel_rem_pio2+0x2ea>
 800c4d0:	f1ba 0f00 	cmp.w	sl, #0
 800c4d4:	dd07      	ble.n	800c4e6 <__kernel_rem_pio2+0x1c2>
 800c4d6:	f1ba 0f01 	cmp.w	sl, #1
 800c4da:	f000 80b9 	beq.w	800c650 <__kernel_rem_pio2+0x32c>
 800c4de:	f1ba 0f02 	cmp.w	sl, #2
 800c4e2:	f000 80bf 	beq.w	800c664 <__kernel_rem_pio2+0x340>
 800c4e6:	9b02      	ldr	r3, [sp, #8]
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d14e      	bne.n	800c58a <__kernel_rem_pio2+0x266>
 800c4ec:	4642      	mov	r2, r8
 800c4ee:	464b      	mov	r3, r9
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	4952      	ldr	r1, [pc, #328]	; (800c63c <__kernel_rem_pio2+0x318>)
 800c4f4:	f7f3 feec 	bl	80002d0 <__aeabi_dsub>
 800c4f8:	4680      	mov	r8, r0
 800c4fa:	4689      	mov	r9, r1
 800c4fc:	2c00      	cmp	r4, #0
 800c4fe:	d044      	beq.n	800c58a <__kernel_rem_pio2+0x266>
 800c500:	4652      	mov	r2, sl
 800c502:	2000      	movs	r0, #0
 800c504:	494d      	ldr	r1, [pc, #308]	; (800c63c <__kernel_rem_pio2+0x318>)
 800c506:	f000 fb93 	bl	800cc30 <scalbn>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	4640      	mov	r0, r8
 800c510:	4649      	mov	r1, r9
 800c512:	f7f3 fedd 	bl	80002d0 <__aeabi_dsub>
 800c516:	4680      	mov	r8, r0
 800c518:	4689      	mov	r9, r1
 800c51a:	e036      	b.n	800c58a <__kernel_rem_pio2+0x266>
 800c51c:	2200      	movs	r2, #0
 800c51e:	4b48      	ldr	r3, [pc, #288]	; (800c640 <__kernel_rem_pio2+0x31c>)
 800c520:	4620      	mov	r0, r4
 800c522:	4629      	mov	r1, r5
 800c524:	f7f4 f88c 	bl	8000640 <__aeabi_dmul>
 800c528:	f7f4 fb24 	bl	8000b74 <__aeabi_d2iz>
 800c52c:	f7f4 f81e 	bl	800056c <__aeabi_i2d>
 800c530:	2200      	movs	r2, #0
 800c532:	4b44      	ldr	r3, [pc, #272]	; (800c644 <__kernel_rem_pio2+0x320>)
 800c534:	4680      	mov	r8, r0
 800c536:	4689      	mov	r9, r1
 800c538:	f7f4 f882 	bl	8000640 <__aeabi_dmul>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	4620      	mov	r0, r4
 800c542:	4629      	mov	r1, r5
 800c544:	f7f3 fec4 	bl	80002d0 <__aeabi_dsub>
 800c548:	f7f4 fb14 	bl	8000b74 <__aeabi_d2iz>
 800c54c:	9b02      	ldr	r3, [sp, #8]
 800c54e:	3e01      	subs	r6, #1
 800c550:	f843 0b04 	str.w	r0, [r3], #4
 800c554:	9302      	str	r3, [sp, #8]
 800c556:	ab70      	add	r3, sp, #448	; 0x1c0
 800c558:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c55c:	4640      	mov	r0, r8
 800c55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c562:	4649      	mov	r1, r9
 800c564:	f7f3 feb6 	bl	80002d4 <__adddf3>
 800c568:	4604      	mov	r4, r0
 800c56a:	460d      	mov	r5, r1
 800c56c:	e762      	b.n	800c434 <__kernel_rem_pio2+0x110>
 800c56e:	d105      	bne.n	800c57c <__kernel_rem_pio2+0x258>
 800c570:	1e7b      	subs	r3, r7, #1
 800c572:	aa0c      	add	r2, sp, #48	; 0x30
 800c574:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c578:	15c3      	asrs	r3, r0, #23
 800c57a:	e79b      	b.n	800c4b4 <__kernel_rem_pio2+0x190>
 800c57c:	2200      	movs	r2, #0
 800c57e:	4b32      	ldr	r3, [pc, #200]	; (800c648 <__kernel_rem_pio2+0x324>)
 800c580:	f7f4 fae4 	bl	8000b4c <__aeabi_dcmpge>
 800c584:	2800      	cmp	r0, #0
 800c586:	d13f      	bne.n	800c608 <__kernel_rem_pio2+0x2e4>
 800c588:	9002      	str	r0, [sp, #8]
 800c58a:	2200      	movs	r2, #0
 800c58c:	2300      	movs	r3, #0
 800c58e:	4640      	mov	r0, r8
 800c590:	4649      	mov	r1, r9
 800c592:	f7f4 fabd 	bl	8000b10 <__aeabi_dcmpeq>
 800c596:	2800      	cmp	r0, #0
 800c598:	f000 80b5 	beq.w	800c706 <__kernel_rem_pio2+0x3e2>
 800c59c:	1e7c      	subs	r4, r7, #1
 800c59e:	4623      	mov	r3, r4
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	9904      	ldr	r1, [sp, #16]
 800c5a4:	428b      	cmp	r3, r1
 800c5a6:	da64      	bge.n	800c672 <__kernel_rem_pio2+0x34e>
 800c5a8:	2a00      	cmp	r2, #0
 800c5aa:	d078      	beq.n	800c69e <__kernel_rem_pio2+0x37a>
 800c5ac:	ab0c      	add	r3, sp, #48	; 0x30
 800c5ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c5b2:	f1aa 0a18 	sub.w	sl, sl, #24
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 80a3 	beq.w	800c702 <__kernel_rem_pio2+0x3de>
 800c5bc:	4652      	mov	r2, sl
 800c5be:	2000      	movs	r0, #0
 800c5c0:	491e      	ldr	r1, [pc, #120]	; (800c63c <__kernel_rem_pio2+0x318>)
 800c5c2:	f000 fb35 	bl	800cc30 <scalbn>
 800c5c6:	46a2      	mov	sl, r4
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	f04f 0800 	mov.w	r8, #0
 800c5d0:	00e3      	lsls	r3, r4, #3
 800c5d2:	9306      	str	r3, [sp, #24]
 800c5d4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800c640 <__kernel_rem_pio2+0x31c>
 800c5d8:	ab70      	add	r3, sp, #448	; 0x1c0
 800c5da:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c5de:	f1ba 0f00 	cmp.w	sl, #0
 800c5e2:	f280 80c6 	bge.w	800c772 <__kernel_rem_pio2+0x44e>
 800c5e6:	4627      	mov	r7, r4
 800c5e8:	f04f 0800 	mov.w	r8, #0
 800c5ec:	2f00      	cmp	r7, #0
 800c5ee:	f2c0 80f3 	blt.w	800c7d8 <__kernel_rem_pio2+0x4b4>
 800c5f2:	4b16      	ldr	r3, [pc, #88]	; (800c64c <__kernel_rem_pio2+0x328>)
 800c5f4:	f04f 0a00 	mov.w	sl, #0
 800c5f8:	461d      	mov	r5, r3
 800c5fa:	ab70      	add	r3, sp, #448	; 0x1c0
 800c5fc:	f04f 0b00 	mov.w	fp, #0
 800c600:	2600      	movs	r6, #0
 800c602:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c606:	e0d9      	b.n	800c7bc <__kernel_rem_pio2+0x498>
 800c608:	2302      	movs	r3, #2
 800c60a:	9302      	str	r3, [sp, #8]
 800c60c:	e756      	b.n	800c4bc <__kernel_rem_pio2+0x198>
 800c60e:	f8db 3000 	ldr.w	r3, [fp]
 800c612:	b954      	cbnz	r4, 800c62a <__kernel_rem_pio2+0x306>
 800c614:	b123      	cbz	r3, 800c620 <__kernel_rem_pio2+0x2fc>
 800c616:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c61a:	f8cb 3000 	str.w	r3, [fp]
 800c61e:	2301      	movs	r3, #1
 800c620:	461c      	mov	r4, r3
 800c622:	3201      	adds	r2, #1
 800c624:	f10b 0b04 	add.w	fp, fp, #4
 800c628:	e74f      	b.n	800c4ca <__kernel_rem_pio2+0x1a6>
 800c62a:	1acb      	subs	r3, r1, r3
 800c62c:	f8cb 3000 	str.w	r3, [fp]
 800c630:	4623      	mov	r3, r4
 800c632:	e7f5      	b.n	800c620 <__kernel_rem_pio2+0x2fc>
 800c634:	0800d3f8 	.word	0x0800d3f8
 800c638:	40200000 	.word	0x40200000
 800c63c:	3ff00000 	.word	0x3ff00000
 800c640:	3e700000 	.word	0x3e700000
 800c644:	41700000 	.word	0x41700000
 800c648:	3fe00000 	.word	0x3fe00000
 800c64c:	0800d3b8 	.word	0x0800d3b8
 800c650:	1e7a      	subs	r2, r7, #1
 800c652:	ab0c      	add	r3, sp, #48	; 0x30
 800c654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c658:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c65c:	a90c      	add	r1, sp, #48	; 0x30
 800c65e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c662:	e740      	b.n	800c4e6 <__kernel_rem_pio2+0x1c2>
 800c664:	1e7a      	subs	r2, r7, #1
 800c666:	ab0c      	add	r3, sp, #48	; 0x30
 800c668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c670:	e7f4      	b.n	800c65c <__kernel_rem_pio2+0x338>
 800c672:	a90c      	add	r1, sp, #48	; 0x30
 800c674:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c678:	3b01      	subs	r3, #1
 800c67a:	430a      	orrs	r2, r1
 800c67c:	e791      	b.n	800c5a2 <__kernel_rem_pio2+0x27e>
 800c67e:	3401      	adds	r4, #1
 800c680:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c684:	2a00      	cmp	r2, #0
 800c686:	d0fa      	beq.n	800c67e <__kernel_rem_pio2+0x35a>
 800c688:	9b08      	ldr	r3, [sp, #32]
 800c68a:	1c7e      	adds	r6, r7, #1
 800c68c:	18fd      	adds	r5, r7, r3
 800c68e:	ab20      	add	r3, sp, #128	; 0x80
 800c690:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c694:	443c      	add	r4, r7
 800c696:	42b4      	cmp	r4, r6
 800c698:	da04      	bge.n	800c6a4 <__kernel_rem_pio2+0x380>
 800c69a:	4627      	mov	r7, r4
 800c69c:	e6c0      	b.n	800c420 <__kernel_rem_pio2+0xfc>
 800c69e:	2401      	movs	r4, #1
 800c6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6a2:	e7ed      	b.n	800c680 <__kernel_rem_pio2+0x35c>
 800c6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a6:	462f      	mov	r7, r5
 800c6a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c6ac:	f7f3 ff5e 	bl	800056c <__aeabi_i2d>
 800c6b0:	f04f 0b00 	mov.w	fp, #0
 800c6b4:	f04f 0800 	mov.w	r8, #0
 800c6b8:	f04f 0900 	mov.w	r9, #0
 800c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6be:	e8e7 0102 	strd	r0, r1, [r7], #8
 800c6c2:	3b08      	subs	r3, #8
 800c6c4:	9302      	str	r3, [sp, #8]
 800c6c6:	9b06      	ldr	r3, [sp, #24]
 800c6c8:	459b      	cmp	fp, r3
 800c6ca:	dd07      	ble.n	800c6dc <__kernel_rem_pio2+0x3b8>
 800c6cc:	ab70      	add	r3, sp, #448	; 0x1c0
 800c6ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c6d2:	463d      	mov	r5, r7
 800c6d4:	e9c3 8900 	strd	r8, r9, [r3]
 800c6d8:	3601      	adds	r6, #1
 800c6da:	e7dc      	b.n	800c696 <__kernel_rem_pio2+0x372>
 800c6dc:	9902      	ldr	r1, [sp, #8]
 800c6de:	f10b 0b01 	add.w	fp, fp, #1
 800c6e2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c6e6:	9102      	str	r1, [sp, #8]
 800c6e8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800c6ec:	f7f3 ffa8 	bl	8000640 <__aeabi_dmul>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4640      	mov	r0, r8
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	f7f3 fdec 	bl	80002d4 <__adddf3>
 800c6fc:	4680      	mov	r8, r0
 800c6fe:	4689      	mov	r9, r1
 800c700:	e7e1      	b.n	800c6c6 <__kernel_rem_pio2+0x3a2>
 800c702:	3c01      	subs	r4, #1
 800c704:	e752      	b.n	800c5ac <__kernel_rem_pio2+0x288>
 800c706:	f1ca 0200 	rsb	r2, sl, #0
 800c70a:	4640      	mov	r0, r8
 800c70c:	4649      	mov	r1, r9
 800c70e:	f000 fa8f 	bl	800cc30 <scalbn>
 800c712:	2200      	movs	r2, #0
 800c714:	4ba5      	ldr	r3, [pc, #660]	; (800c9ac <__kernel_rem_pio2+0x688>)
 800c716:	4604      	mov	r4, r0
 800c718:	460d      	mov	r5, r1
 800c71a:	f7f4 fa17 	bl	8000b4c <__aeabi_dcmpge>
 800c71e:	b1f8      	cbz	r0, 800c760 <__kernel_rem_pio2+0x43c>
 800c720:	2200      	movs	r2, #0
 800c722:	4ba3      	ldr	r3, [pc, #652]	; (800c9b0 <__kernel_rem_pio2+0x68c>)
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	f7f3 ff8a 	bl	8000640 <__aeabi_dmul>
 800c72c:	f7f4 fa22 	bl	8000b74 <__aeabi_d2iz>
 800c730:	4606      	mov	r6, r0
 800c732:	f7f3 ff1b 	bl	800056c <__aeabi_i2d>
 800c736:	2200      	movs	r2, #0
 800c738:	4b9c      	ldr	r3, [pc, #624]	; (800c9ac <__kernel_rem_pio2+0x688>)
 800c73a:	f7f3 ff81 	bl	8000640 <__aeabi_dmul>
 800c73e:	460b      	mov	r3, r1
 800c740:	4602      	mov	r2, r0
 800c742:	4629      	mov	r1, r5
 800c744:	4620      	mov	r0, r4
 800c746:	f7f3 fdc3 	bl	80002d0 <__aeabi_dsub>
 800c74a:	f7f4 fa13 	bl	8000b74 <__aeabi_d2iz>
 800c74e:	1c7c      	adds	r4, r7, #1
 800c750:	ab0c      	add	r3, sp, #48	; 0x30
 800c752:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c756:	f10a 0a18 	add.w	sl, sl, #24
 800c75a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800c75e:	e72d      	b.n	800c5bc <__kernel_rem_pio2+0x298>
 800c760:	4620      	mov	r0, r4
 800c762:	4629      	mov	r1, r5
 800c764:	f7f4 fa06 	bl	8000b74 <__aeabi_d2iz>
 800c768:	ab0c      	add	r3, sp, #48	; 0x30
 800c76a:	463c      	mov	r4, r7
 800c76c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c770:	e724      	b.n	800c5bc <__kernel_rem_pio2+0x298>
 800c772:	ab0c      	add	r3, sp, #48	; 0x30
 800c774:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c778:	f7f3 fef8 	bl	800056c <__aeabi_i2d>
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	f7f3 ff5e 	bl	8000640 <__aeabi_dmul>
 800c784:	4642      	mov	r2, r8
 800c786:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c78a:	464b      	mov	r3, r9
 800c78c:	4630      	mov	r0, r6
 800c78e:	4639      	mov	r1, r7
 800c790:	f7f3 ff56 	bl	8000640 <__aeabi_dmul>
 800c794:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c798:	4606      	mov	r6, r0
 800c79a:	460f      	mov	r7, r1
 800c79c:	e71f      	b.n	800c5de <__kernel_rem_pio2+0x2ba>
 800c79e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c7a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c7a6:	f7f3 ff4b 	bl	8000640 <__aeabi_dmul>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4650      	mov	r0, sl
 800c7b0:	4659      	mov	r1, fp
 800c7b2:	f7f3 fd8f 	bl	80002d4 <__adddf3>
 800c7b6:	4682      	mov	sl, r0
 800c7b8:	468b      	mov	fp, r1
 800c7ba:	3601      	adds	r6, #1
 800c7bc:	9b04      	ldr	r3, [sp, #16]
 800c7be:	429e      	cmp	r6, r3
 800c7c0:	dc01      	bgt.n	800c7c6 <__kernel_rem_pio2+0x4a2>
 800c7c2:	45b0      	cmp	r8, r6
 800c7c4:	daeb      	bge.n	800c79e <__kernel_rem_pio2+0x47a>
 800c7c6:	ab48      	add	r3, sp, #288	; 0x120
 800c7c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c7cc:	e9c3 ab00 	strd	sl, fp, [r3]
 800c7d0:	3f01      	subs	r7, #1
 800c7d2:	f108 0801 	add.w	r8, r8, #1
 800c7d6:	e709      	b.n	800c5ec <__kernel_rem_pio2+0x2c8>
 800c7d8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	dc09      	bgt.n	800c7f2 <__kernel_rem_pio2+0x4ce>
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	dc34      	bgt.n	800c84c <__kernel_rem_pio2+0x528>
 800c7e2:	d05e      	beq.n	800c8a2 <__kernel_rem_pio2+0x57e>
 800c7e4:	9b07      	ldr	r3, [sp, #28]
 800c7e6:	f003 0007 	and.w	r0, r3, #7
 800c7ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d1f5      	bne.n	800c7e4 <__kernel_rem_pio2+0x4c0>
 800c7f8:	9a06      	ldr	r2, [sp, #24]
 800c7fa:	ab48      	add	r3, sp, #288	; 0x120
 800c7fc:	441a      	add	r2, r3
 800c7fe:	4615      	mov	r5, r2
 800c800:	4692      	mov	sl, r2
 800c802:	46a3      	mov	fp, r4
 800c804:	f1bb 0f00 	cmp.w	fp, #0
 800c808:	dc7a      	bgt.n	800c900 <__kernel_rem_pio2+0x5dc>
 800c80a:	46aa      	mov	sl, r5
 800c80c:	46a3      	mov	fp, r4
 800c80e:	f1bb 0f01 	cmp.w	fp, #1
 800c812:	f300 8094 	bgt.w	800c93e <__kernel_rem_pio2+0x61a>
 800c816:	2700      	movs	r7, #0
 800c818:	463e      	mov	r6, r7
 800c81a:	2c01      	cmp	r4, #1
 800c81c:	f300 80ae 	bgt.w	800c97c <__kernel_rem_pio2+0x658>
 800c820:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c824:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c828:	9b02      	ldr	r3, [sp, #8]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f040 80b0 	bne.w	800c990 <__kernel_rem_pio2+0x66c>
 800c830:	4603      	mov	r3, r0
 800c832:	462a      	mov	r2, r5
 800c834:	9801      	ldr	r0, [sp, #4]
 800c836:	e9c0 2300 	strd	r2, r3, [r0]
 800c83a:	4622      	mov	r2, r4
 800c83c:	460b      	mov	r3, r1
 800c83e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c842:	463a      	mov	r2, r7
 800c844:	4633      	mov	r3, r6
 800c846:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c84a:	e7cb      	b.n	800c7e4 <__kernel_rem_pio2+0x4c0>
 800c84c:	2000      	movs	r0, #0
 800c84e:	9a06      	ldr	r2, [sp, #24]
 800c850:	ab48      	add	r3, sp, #288	; 0x120
 800c852:	441a      	add	r2, r3
 800c854:	4615      	mov	r5, r2
 800c856:	46a0      	mov	r8, r4
 800c858:	4601      	mov	r1, r0
 800c85a:	f1b8 0f00 	cmp.w	r8, #0
 800c85e:	da3c      	bge.n	800c8da <__kernel_rem_pio2+0x5b6>
 800c860:	9b02      	ldr	r3, [sp, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d040      	beq.n	800c8e8 <__kernel_rem_pio2+0x5c4>
 800c866:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c86a:	4602      	mov	r2, r0
 800c86c:	462b      	mov	r3, r5
 800c86e:	9d01      	ldr	r5, [sp, #4]
 800c870:	2601      	movs	r6, #1
 800c872:	e9c5 2300 	strd	r2, r3, [r5]
 800c876:	460b      	mov	r3, r1
 800c878:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c87c:	f7f3 fd28 	bl	80002d0 <__aeabi_dsub>
 800c880:	4684      	mov	ip, r0
 800c882:	460f      	mov	r7, r1
 800c884:	ad48      	add	r5, sp, #288	; 0x120
 800c886:	42b4      	cmp	r4, r6
 800c888:	f105 0508 	add.w	r5, r5, #8
 800c88c:	da2e      	bge.n	800c8ec <__kernel_rem_pio2+0x5c8>
 800c88e:	9b02      	ldr	r3, [sp, #8]
 800c890:	b10b      	cbz	r3, 800c896 <__kernel_rem_pio2+0x572>
 800c892:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c896:	4662      	mov	r2, ip
 800c898:	463b      	mov	r3, r7
 800c89a:	9901      	ldr	r1, [sp, #4]
 800c89c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c8a0:	e7a0      	b.n	800c7e4 <__kernel_rem_pio2+0x4c0>
 800c8a2:	9a06      	ldr	r2, [sp, #24]
 800c8a4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c8a6:	ab48      	add	r3, sp, #288	; 0x120
 800c8a8:	441a      	add	r2, r3
 800c8aa:	4615      	mov	r5, r2
 800c8ac:	4637      	mov	r7, r6
 800c8ae:	2c00      	cmp	r4, #0
 800c8b0:	da09      	bge.n	800c8c6 <__kernel_rem_pio2+0x5a2>
 800c8b2:	9b02      	ldr	r3, [sp, #8]
 800c8b4:	b10b      	cbz	r3, 800c8ba <__kernel_rem_pio2+0x596>
 800c8b6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c8ba:	4632      	mov	r2, r6
 800c8bc:	463b      	mov	r3, r7
 800c8be:	9901      	ldr	r1, [sp, #4]
 800c8c0:	e9c1 2300 	strd	r2, r3, [r1]
 800c8c4:	e78e      	b.n	800c7e4 <__kernel_rem_pio2+0x4c0>
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	f7f3 fd01 	bl	80002d4 <__adddf3>
 800c8d2:	3c01      	subs	r4, #1
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	460f      	mov	r7, r1
 800c8d8:	e7e9      	b.n	800c8ae <__kernel_rem_pio2+0x58a>
 800c8da:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c8de:	f7f3 fcf9 	bl	80002d4 <__adddf3>
 800c8e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8e6:	e7b8      	b.n	800c85a <__kernel_rem_pio2+0x536>
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	e7be      	b.n	800c86a <__kernel_rem_pio2+0x546>
 800c8ec:	4660      	mov	r0, ip
 800c8ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8f2:	4639      	mov	r1, r7
 800c8f4:	f7f3 fcee 	bl	80002d4 <__adddf3>
 800c8f8:	3601      	adds	r6, #1
 800c8fa:	4684      	mov	ip, r0
 800c8fc:	460f      	mov	r7, r1
 800c8fe:	e7c2      	b.n	800c886 <__kernel_rem_pio2+0x562>
 800c900:	e9da 6700 	ldrd	r6, r7, [sl]
 800c904:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c908:	4632      	mov	r2, r6
 800c90a:	463b      	mov	r3, r7
 800c90c:	4640      	mov	r0, r8
 800c90e:	4649      	mov	r1, r9
 800c910:	f7f3 fce0 	bl	80002d4 <__adddf3>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c91c:	4640      	mov	r0, r8
 800c91e:	4649      	mov	r1, r9
 800c920:	f7f3 fcd6 	bl	80002d0 <__aeabi_dsub>
 800c924:	4632      	mov	r2, r6
 800c926:	463b      	mov	r3, r7
 800c928:	f7f3 fcd4 	bl	80002d4 <__adddf3>
 800c92c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c930:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c934:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c938:	e9ca 2300 	strd	r2, r3, [sl]
 800c93c:	e762      	b.n	800c804 <__kernel_rem_pio2+0x4e0>
 800c93e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c942:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c946:	4642      	mov	r2, r8
 800c948:	464b      	mov	r3, r9
 800c94a:	4630      	mov	r0, r6
 800c94c:	4639      	mov	r1, r7
 800c94e:	f7f3 fcc1 	bl	80002d4 <__adddf3>
 800c952:	4602      	mov	r2, r0
 800c954:	460b      	mov	r3, r1
 800c956:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c95a:	4630      	mov	r0, r6
 800c95c:	4639      	mov	r1, r7
 800c95e:	f7f3 fcb7 	bl	80002d0 <__aeabi_dsub>
 800c962:	4642      	mov	r2, r8
 800c964:	464b      	mov	r3, r9
 800c966:	f7f3 fcb5 	bl	80002d4 <__adddf3>
 800c96a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c96e:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c972:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c976:	e9ca 2300 	strd	r2, r3, [sl]
 800c97a:	e748      	b.n	800c80e <__kernel_rem_pio2+0x4ea>
 800c97c:	4638      	mov	r0, r7
 800c97e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c982:	4631      	mov	r1, r6
 800c984:	f7f3 fca6 	bl	80002d4 <__adddf3>
 800c988:	3c01      	subs	r4, #1
 800c98a:	4607      	mov	r7, r0
 800c98c:	460e      	mov	r6, r1
 800c98e:	e744      	b.n	800c81a <__kernel_rem_pio2+0x4f6>
 800c990:	9b01      	ldr	r3, [sp, #4]
 800c992:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c996:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c99a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c99e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c9a2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c9a6:	601d      	str	r5, [r3, #0]
 800c9a8:	615e      	str	r6, [r3, #20]
 800c9aa:	e71b      	b.n	800c7e4 <__kernel_rem_pio2+0x4c0>
 800c9ac:	41700000 	.word	0x41700000
 800c9b0:	3e700000 	.word	0x3e700000
 800c9b4:	00000000 	.word	0x00000000

0800c9b8 <__kernel_sin>:
 800c9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9bc:	b086      	sub	sp, #24
 800c9be:	e9cd 2300 	strd	r2, r3, [sp]
 800c9c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c9ca:	4682      	mov	sl, r0
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c9d0:	da03      	bge.n	800c9da <__kernel_sin+0x22>
 800c9d2:	f7f4 f8cf 	bl	8000b74 <__aeabi_d2iz>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d050      	beq.n	800ca7c <__kernel_sin+0xc4>
 800c9da:	4652      	mov	r2, sl
 800c9dc:	4623      	mov	r3, r4
 800c9de:	4650      	mov	r0, sl
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	f7f3 fe2d 	bl	8000640 <__aeabi_dmul>
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	460f      	mov	r7, r1
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4650      	mov	r0, sl
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	f7f3 fe25 	bl	8000640 <__aeabi_dmul>
 800c9f6:	a33e      	add	r3, pc, #248	; (adr r3, 800caf0 <__kernel_sin+0x138>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	4680      	mov	r8, r0
 800c9fe:	4689      	mov	r9, r1
 800ca00:	4630      	mov	r0, r6
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f3 fe1c 	bl	8000640 <__aeabi_dmul>
 800ca08:	a33b      	add	r3, pc, #236	; (adr r3, 800caf8 <__kernel_sin+0x140>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fc5f 	bl	80002d0 <__aeabi_dsub>
 800ca12:	4632      	mov	r2, r6
 800ca14:	463b      	mov	r3, r7
 800ca16:	f7f3 fe13 	bl	8000640 <__aeabi_dmul>
 800ca1a:	a339      	add	r3, pc, #228	; (adr r3, 800cb00 <__kernel_sin+0x148>)
 800ca1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca20:	f7f3 fc58 	bl	80002d4 <__adddf3>
 800ca24:	4632      	mov	r2, r6
 800ca26:	463b      	mov	r3, r7
 800ca28:	f7f3 fe0a 	bl	8000640 <__aeabi_dmul>
 800ca2c:	a336      	add	r3, pc, #216	; (adr r3, 800cb08 <__kernel_sin+0x150>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	f7f3 fc4d 	bl	80002d0 <__aeabi_dsub>
 800ca36:	4632      	mov	r2, r6
 800ca38:	463b      	mov	r3, r7
 800ca3a:	f7f3 fe01 	bl	8000640 <__aeabi_dmul>
 800ca3e:	a334      	add	r3, pc, #208	; (adr r3, 800cb10 <__kernel_sin+0x158>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f7f3 fc46 	bl	80002d4 <__adddf3>
 800ca48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca4c:	b9dd      	cbnz	r5, 800ca86 <__kernel_sin+0xce>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4630      	mov	r0, r6
 800ca54:	4639      	mov	r1, r7
 800ca56:	f7f3 fdf3 	bl	8000640 <__aeabi_dmul>
 800ca5a:	a32f      	add	r3, pc, #188	; (adr r3, 800cb18 <__kernel_sin+0x160>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	f7f3 fc36 	bl	80002d0 <__aeabi_dsub>
 800ca64:	4642      	mov	r2, r8
 800ca66:	464b      	mov	r3, r9
 800ca68:	f7f3 fdea 	bl	8000640 <__aeabi_dmul>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4650      	mov	r0, sl
 800ca72:	4621      	mov	r1, r4
 800ca74:	f7f3 fc2e 	bl	80002d4 <__adddf3>
 800ca78:	4682      	mov	sl, r0
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	4650      	mov	r0, sl
 800ca7e:	4621      	mov	r1, r4
 800ca80:	b006      	add	sp, #24
 800ca82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca86:	2200      	movs	r2, #0
 800ca88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca8c:	4b24      	ldr	r3, [pc, #144]	; (800cb20 <__kernel_sin+0x168>)
 800ca8e:	f7f3 fdd7 	bl	8000640 <__aeabi_dmul>
 800ca92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca9a:	4640      	mov	r0, r8
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	f7f3 fdcf 	bl	8000640 <__aeabi_dmul>
 800caa2:	4602      	mov	r2, r0
 800caa4:	460b      	mov	r3, r1
 800caa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caaa:	f7f3 fc11 	bl	80002d0 <__aeabi_dsub>
 800caae:	4632      	mov	r2, r6
 800cab0:	463b      	mov	r3, r7
 800cab2:	f7f3 fdc5 	bl	8000640 <__aeabi_dmul>
 800cab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caba:	f7f3 fc09 	bl	80002d0 <__aeabi_dsub>
 800cabe:	a316      	add	r3, pc, #88	; (adr r3, 800cb18 <__kernel_sin+0x160>)
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	4606      	mov	r6, r0
 800cac6:	460f      	mov	r7, r1
 800cac8:	4640      	mov	r0, r8
 800caca:	4649      	mov	r1, r9
 800cacc:	f7f3 fdb8 	bl	8000640 <__aeabi_dmul>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4630      	mov	r0, r6
 800cad6:	4639      	mov	r1, r7
 800cad8:	f7f3 fbfc 	bl	80002d4 <__adddf3>
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	4650      	mov	r0, sl
 800cae2:	4621      	mov	r1, r4
 800cae4:	f7f3 fbf4 	bl	80002d0 <__aeabi_dsub>
 800cae8:	e7c6      	b.n	800ca78 <__kernel_sin+0xc0>
 800caea:	bf00      	nop
 800caec:	f3af 8000 	nop.w
 800caf0:	5acfd57c 	.word	0x5acfd57c
 800caf4:	3de5d93a 	.word	0x3de5d93a
 800caf8:	8a2b9ceb 	.word	0x8a2b9ceb
 800cafc:	3e5ae5e6 	.word	0x3e5ae5e6
 800cb00:	57b1fe7d 	.word	0x57b1fe7d
 800cb04:	3ec71de3 	.word	0x3ec71de3
 800cb08:	19c161d5 	.word	0x19c161d5
 800cb0c:	3f2a01a0 	.word	0x3f2a01a0
 800cb10:	1110f8a6 	.word	0x1110f8a6
 800cb14:	3f811111 	.word	0x3f811111
 800cb18:	55555549 	.word	0x55555549
 800cb1c:	3fc55555 	.word	0x3fc55555
 800cb20:	3fe00000 	.word	0x3fe00000

0800cb24 <fabs>:
 800cb24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cb28:	4770      	bx	lr
 800cb2a:	0000      	movs	r0, r0
 800cb2c:	0000      	movs	r0, r0
	...

0800cb30 <floor>:
 800cb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb34:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800cb38:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800cb3c:	2e13      	cmp	r6, #19
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4607      	mov	r7, r0
 800cb44:	460c      	mov	r4, r1
 800cb46:	4605      	mov	r5, r0
 800cb48:	dc34      	bgt.n	800cbb4 <floor+0x84>
 800cb4a:	2e00      	cmp	r6, #0
 800cb4c:	da15      	bge.n	800cb7a <floor+0x4a>
 800cb4e:	a334      	add	r3, pc, #208	; (adr r3, 800cc20 <floor+0xf0>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	f7f3 fbbe 	bl	80002d4 <__adddf3>
 800cb58:	2200      	movs	r2, #0
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f7f4 f800 	bl	8000b60 <__aeabi_dcmpgt>
 800cb60:	b140      	cbz	r0, 800cb74 <floor+0x44>
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	da59      	bge.n	800cc1a <floor+0xea>
 800cb66:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cb6a:	ea57 0503 	orrs.w	r5, r7, r3
 800cb6e:	d001      	beq.n	800cb74 <floor+0x44>
 800cb70:	2500      	movs	r5, #0
 800cb72:	4c2d      	ldr	r4, [pc, #180]	; (800cc28 <floor+0xf8>)
 800cb74:	4623      	mov	r3, r4
 800cb76:	462f      	mov	r7, r5
 800cb78:	e025      	b.n	800cbc6 <floor+0x96>
 800cb7a:	4a2c      	ldr	r2, [pc, #176]	; (800cc2c <floor+0xfc>)
 800cb7c:	fa42 f806 	asr.w	r8, r2, r6
 800cb80:	ea01 0208 	and.w	r2, r1, r8
 800cb84:	4302      	orrs	r2, r0
 800cb86:	d01e      	beq.n	800cbc6 <floor+0x96>
 800cb88:	a325      	add	r3, pc, #148	; (adr r3, 800cc20 <floor+0xf0>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f3 fba1 	bl	80002d4 <__adddf3>
 800cb92:	2200      	movs	r2, #0
 800cb94:	2300      	movs	r3, #0
 800cb96:	f7f3 ffe3 	bl	8000b60 <__aeabi_dcmpgt>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d0ea      	beq.n	800cb74 <floor+0x44>
 800cb9e:	2c00      	cmp	r4, #0
 800cba0:	bfbe      	ittt	lt
 800cba2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cba6:	fa43 f606 	asrlt.w	r6, r3, r6
 800cbaa:	19a4      	addlt	r4, r4, r6
 800cbac:	2500      	movs	r5, #0
 800cbae:	ea24 0408 	bic.w	r4, r4, r8
 800cbb2:	e7df      	b.n	800cb74 <floor+0x44>
 800cbb4:	2e33      	cmp	r6, #51	; 0x33
 800cbb6:	dd0a      	ble.n	800cbce <floor+0x9e>
 800cbb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cbbc:	d103      	bne.n	800cbc6 <floor+0x96>
 800cbbe:	f7f3 fb89 	bl	80002d4 <__adddf3>
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	4619      	mov	r1, r3
 800cbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbce:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cbd6:	fa22 f808 	lsr.w	r8, r2, r8
 800cbda:	ea18 0f00 	tst.w	r8, r0
 800cbde:	d0f2      	beq.n	800cbc6 <floor+0x96>
 800cbe0:	a30f      	add	r3, pc, #60	; (adr r3, 800cc20 <floor+0xf0>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fb75 	bl	80002d4 <__adddf3>
 800cbea:	2200      	movs	r2, #0
 800cbec:	2300      	movs	r3, #0
 800cbee:	f7f3 ffb7 	bl	8000b60 <__aeabi_dcmpgt>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d0be      	beq.n	800cb74 <floor+0x44>
 800cbf6:	2c00      	cmp	r4, #0
 800cbf8:	da02      	bge.n	800cc00 <floor+0xd0>
 800cbfa:	2e14      	cmp	r6, #20
 800cbfc:	d103      	bne.n	800cc06 <floor+0xd6>
 800cbfe:	3401      	adds	r4, #1
 800cc00:	ea25 0508 	bic.w	r5, r5, r8
 800cc04:	e7b6      	b.n	800cb74 <floor+0x44>
 800cc06:	2301      	movs	r3, #1
 800cc08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cc0c:	fa03 f606 	lsl.w	r6, r3, r6
 800cc10:	4435      	add	r5, r6
 800cc12:	42bd      	cmp	r5, r7
 800cc14:	bf38      	it	cc
 800cc16:	18e4      	addcc	r4, r4, r3
 800cc18:	e7f2      	b.n	800cc00 <floor+0xd0>
 800cc1a:	2500      	movs	r5, #0
 800cc1c:	462c      	mov	r4, r5
 800cc1e:	e7a9      	b.n	800cb74 <floor+0x44>
 800cc20:	8800759c 	.word	0x8800759c
 800cc24:	7e37e43c 	.word	0x7e37e43c
 800cc28:	bff00000 	.word	0xbff00000
 800cc2c:	000fffff 	.word	0x000fffff

0800cc30 <scalbn>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800cc36:	4604      	mov	r4, r0
 800cc38:	460d      	mov	r5, r1
 800cc3a:	4617      	mov	r7, r2
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	b996      	cbnz	r6, 800cc66 <scalbn+0x36>
 800cc40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc44:	4303      	orrs	r3, r0
 800cc46:	d039      	beq.n	800ccbc <scalbn+0x8c>
 800cc48:	4b35      	ldr	r3, [pc, #212]	; (800cd20 <scalbn+0xf0>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f7f3 fcf8 	bl	8000640 <__aeabi_dmul>
 800cc50:	4b34      	ldr	r3, [pc, #208]	; (800cd24 <scalbn+0xf4>)
 800cc52:	4604      	mov	r4, r0
 800cc54:	429f      	cmp	r7, r3
 800cc56:	460d      	mov	r5, r1
 800cc58:	da0f      	bge.n	800cc7a <scalbn+0x4a>
 800cc5a:	a32d      	add	r3, pc, #180	; (adr r3, 800cd10 <scalbn+0xe0>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fcee 	bl	8000640 <__aeabi_dmul>
 800cc64:	e006      	b.n	800cc74 <scalbn+0x44>
 800cc66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cc6a:	4296      	cmp	r6, r2
 800cc6c:	d10a      	bne.n	800cc84 <scalbn+0x54>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	f7f3 fb30 	bl	80002d4 <__adddf3>
 800cc74:	4604      	mov	r4, r0
 800cc76:	460d      	mov	r5, r1
 800cc78:	e020      	b.n	800ccbc <scalbn+0x8c>
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cc80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cc84:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cc88:	19b9      	adds	r1, r7, r6
 800cc8a:	4291      	cmp	r1, r2
 800cc8c:	dd0e      	ble.n	800ccac <scalbn+0x7c>
 800cc8e:	a322      	add	r3, pc, #136	; (adr r3, 800cd18 <scalbn+0xe8>)
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cc98:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cc9c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cca0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cca4:	4820      	ldr	r0, [pc, #128]	; (800cd28 <scalbn+0xf8>)
 800cca6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ccaa:	e7d9      	b.n	800cc60 <scalbn+0x30>
 800ccac:	2900      	cmp	r1, #0
 800ccae:	dd08      	ble.n	800ccc2 <scalbn+0x92>
 800ccb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ccb8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ccc6:	da16      	bge.n	800ccf6 <scalbn+0xc6>
 800ccc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cccc:	429f      	cmp	r7, r3
 800ccce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ccd2:	dd08      	ble.n	800cce6 <scalbn+0xb6>
 800ccd4:	4c15      	ldr	r4, [pc, #84]	; (800cd2c <scalbn+0xfc>)
 800ccd6:	4814      	ldr	r0, [pc, #80]	; (800cd28 <scalbn+0xf8>)
 800ccd8:	f363 74df 	bfi	r4, r3, #31, #1
 800ccdc:	a30e      	add	r3, pc, #56	; (adr r3, 800cd18 <scalbn+0xe8>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	4621      	mov	r1, r4
 800cce4:	e7bc      	b.n	800cc60 <scalbn+0x30>
 800cce6:	4c12      	ldr	r4, [pc, #72]	; (800cd30 <scalbn+0x100>)
 800cce8:	4812      	ldr	r0, [pc, #72]	; (800cd34 <scalbn+0x104>)
 800ccea:	f363 74df 	bfi	r4, r3, #31, #1
 800ccee:	a308      	add	r3, pc, #32	; (adr r3, 800cd10 <scalbn+0xe0>)
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	e7f5      	b.n	800cce2 <scalbn+0xb2>
 800ccf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccfa:	3136      	adds	r1, #54	; 0x36
 800ccfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd00:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cd04:	4620      	mov	r0, r4
 800cd06:	4629      	mov	r1, r5
 800cd08:	2200      	movs	r2, #0
 800cd0a:	4b0b      	ldr	r3, [pc, #44]	; (800cd38 <scalbn+0x108>)
 800cd0c:	e7a8      	b.n	800cc60 <scalbn+0x30>
 800cd0e:	bf00      	nop
 800cd10:	c2f8f359 	.word	0xc2f8f359
 800cd14:	01a56e1f 	.word	0x01a56e1f
 800cd18:	8800759c 	.word	0x8800759c
 800cd1c:	7e37e43c 	.word	0x7e37e43c
 800cd20:	43500000 	.word	0x43500000
 800cd24:	ffff3cb0 	.word	0xffff3cb0
 800cd28:	8800759c 	.word	0x8800759c
 800cd2c:	7e37e43c 	.word	0x7e37e43c
 800cd30:	01a56e1f 	.word	0x01a56e1f
 800cd34:	c2f8f359 	.word	0xc2f8f359
 800cd38:	3c900000 	.word	0x3c900000

0800cd3c <_init>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	bf00      	nop
 800cd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd42:	bc08      	pop	{r3}
 800cd44:	469e      	mov	lr, r3
 800cd46:	4770      	bx	lr

0800cd48 <_fini>:
 800cd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4a:	bf00      	nop
 800cd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4e:	bc08      	pop	{r3}
 800cd50:	469e      	mov	lr, r3
 800cd52:	4770      	bx	lr
