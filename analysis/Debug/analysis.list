
analysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000834c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08008460  08008460  00018460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b08  08008b08  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  08008b08  08008b08  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b08  08008b08  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08008b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000025c  08008d6c  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08008d6c  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009639  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e35  00000000  00000000  000298be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d9  00000000  00000000  0002c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009534  00000000  00000000  00044cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843ad  00000000  00000000  0004e1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d259a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  000d25f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000025c 	.word	0x2000025c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008444 	.word	0x08008444

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000260 	.word	0x20000260
 800014c:	08008444 	.word	0x08008444

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_frsub>:
 8000ca4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	e002      	b.n	8000cb0 <__addsf3>
 8000caa:	bf00      	nop

08000cac <__aeabi_fsub>:
 8000cac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb0 <__addsf3>:
 8000cb0:	0042      	lsls	r2, r0, #1
 8000cb2:	bf1f      	itttt	ne
 8000cb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cb8:	ea92 0f03 	teqne	r2, r3
 8000cbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc4:	d06a      	beq.n	8000d9c <__addsf3+0xec>
 8000cc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cce:	bfc1      	itttt	gt
 8000cd0:	18d2      	addgt	r2, r2, r3
 8000cd2:	4041      	eorgt	r1, r0
 8000cd4:	4048      	eorgt	r0, r1
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	bfb8      	it	lt
 8000cda:	425b      	neglt	r3, r3
 8000cdc:	2b19      	cmp	r3, #25
 8000cde:	bf88      	it	hi
 8000ce0:	4770      	bxhi	lr
 8000ce2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4240      	negne	r0, r0
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cf6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cfe:	bf18      	it	ne
 8000d00:	4249      	negne	r1, r1
 8000d02:	ea92 0f03 	teq	r2, r3
 8000d06:	d03f      	beq.n	8000d88 <__addsf3+0xd8>
 8000d08:	f1a2 0201 	sub.w	r2, r2, #1
 8000d0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d10:	eb10 000c 	adds.w	r0, r0, ip
 8000d14:	f1c3 0320 	rsb	r3, r3, #32
 8000d18:	fa01 f103 	lsl.w	r1, r1, r3
 8000d1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__addsf3+0x78>
 8000d22:	4249      	negs	r1, r1
 8000d24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d2c:	d313      	bcc.n	8000d56 <__addsf3+0xa6>
 8000d2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d32:	d306      	bcc.n	8000d42 <__addsf3+0x92>
 8000d34:	0840      	lsrs	r0, r0, #1
 8000d36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3a:	f102 0201 	add.w	r2, r2, #1
 8000d3e:	2afe      	cmp	r2, #254	; 0xfe
 8000d40:	d251      	bcs.n	8000de6 <__addsf3+0x136>
 8000d42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4a:	bf08      	it	eq
 8000d4c:	f020 0001 	biceq.w	r0, r0, #1
 8000d50:	ea40 0003 	orr.w	r0, r0, r3
 8000d54:	4770      	bx	lr
 8000d56:	0049      	lsls	r1, r1, #1
 8000d58:	eb40 0000 	adc.w	r0, r0, r0
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	bf28      	it	cs
 8000d60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d64:	d2ed      	bcs.n	8000d42 <__addsf3+0x92>
 8000d66:	fab0 fc80 	clz	ip, r0
 8000d6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d76:	bfaa      	itet	ge
 8000d78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d7c:	4252      	neglt	r2, r2
 8000d7e:	4318      	orrge	r0, r3
 8000d80:	bfbc      	itt	lt
 8000d82:	40d0      	lsrlt	r0, r2
 8000d84:	4318      	orrlt	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	f092 0f00 	teq	r2, #0
 8000d8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d90:	bf06      	itte	eq
 8000d92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d96:	3201      	addeq	r2, #1
 8000d98:	3b01      	subne	r3, #1
 8000d9a:	e7b5      	b.n	8000d08 <__addsf3+0x58>
 8000d9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da4:	bf18      	it	ne
 8000da6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000daa:	d021      	beq.n	8000df0 <__addsf3+0x140>
 8000dac:	ea92 0f03 	teq	r2, r3
 8000db0:	d004      	beq.n	8000dbc <__addsf3+0x10c>
 8000db2:	f092 0f00 	teq	r2, #0
 8000db6:	bf08      	it	eq
 8000db8:	4608      	moveq	r0, r1
 8000dba:	4770      	bx	lr
 8000dbc:	ea90 0f01 	teq	r0, r1
 8000dc0:	bf1c      	itt	ne
 8000dc2:	2000      	movne	r0, #0
 8000dc4:	4770      	bxne	lr
 8000dc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dca:	d104      	bne.n	8000dd6 <__addsf3+0x126>
 8000dcc:	0040      	lsls	r0, r0, #1
 8000dce:	bf28      	it	cs
 8000dd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dda:	bf3c      	itt	cc
 8000ddc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de0:	4770      	bxcc	lr
 8000de2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000de6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dee:	4770      	bx	lr
 8000df0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df4:	bf16      	itet	ne
 8000df6:	4608      	movne	r0, r1
 8000df8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dfc:	4601      	movne	r1, r0
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	bf06      	itte	eq
 8000e02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e06:	ea90 0f01 	teqeq	r0, r1
 8000e0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_ui2f>:
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e004      	b.n	8000e20 <__aeabi_i2f+0x8>
 8000e16:	bf00      	nop

08000e18 <__aeabi_i2f>:
 8000e18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e1c:	bf48      	it	mi
 8000e1e:	4240      	negmi	r0, r0
 8000e20:	ea5f 0c00 	movs.w	ip, r0
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	e01c      	b.n	8000e6e <__aeabi_l2f+0x2a>

08000e34 <__aeabi_ul2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e00a      	b.n	8000e58 <__aeabi_l2f+0x14>
 8000e42:	bf00      	nop

08000e44 <__aeabi_l2f>:
 8000e44:	ea50 0201 	orrs.w	r2, r0, r1
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	d502      	bpl.n	8000e58 <__aeabi_l2f+0x14>
 8000e52:	4240      	negs	r0, r0
 8000e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e58:	ea5f 0c01 	movs.w	ip, r1
 8000e5c:	bf02      	ittt	eq
 8000e5e:	4684      	moveq	ip, r0
 8000e60:	4601      	moveq	r1, r0
 8000e62:	2000      	moveq	r0, #0
 8000e64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e68:	bf08      	it	eq
 8000e6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e72:	fabc f28c 	clz	r2, ip
 8000e76:	3a08      	subs	r2, #8
 8000e78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e7c:	db10      	blt.n	8000ea0 <__aeabi_l2f+0x5c>
 8000e7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e82:	4463      	add	r3, ip
 8000e84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e88:	f1c2 0220 	rsb	r2, r2, #32
 8000e8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e90:	fa20 f202 	lsr.w	r2, r0, r2
 8000e94:	eb43 0002 	adc.w	r0, r3, r2
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f102 0220 	add.w	r2, r2, #32
 8000ea4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea8:	f1c2 0220 	rsb	r2, r2, #32
 8000eac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb4:	eb43 0002 	adc.w	r0, r3, r2
 8000eb8:	bf08      	it	eq
 8000eba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ebe:	4770      	bx	lr

08000ec0 <__gesf2>:
 8000ec0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ec4:	e006      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__lesf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	e002      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ece:	bf00      	nop

08000ed0 <__cmpsf2>:
 8000ed0:	f04f 0c01 	mov.w	ip, #1
 8000ed4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee4:	bf18      	it	ne
 8000ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eea:	d011      	beq.n	8000f10 <__cmpsf2+0x40>
 8000eec:	b001      	add	sp, #4
 8000eee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ef2:	bf18      	it	ne
 8000ef4:	ea90 0f01 	teqne	r0, r1
 8000ef8:	bf58      	it	pl
 8000efa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000efe:	bf88      	it	hi
 8000f00:	17c8      	asrhi	r0, r1, #31
 8000f02:	bf38      	it	cc
 8000f04:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f08:	bf18      	it	ne
 8000f0a:	f040 0001 	orrne.w	r0, r0, #1
 8000f0e:	4770      	bx	lr
 8000f10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f14:	d102      	bne.n	8000f1c <__cmpsf2+0x4c>
 8000f16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f1a:	d105      	bne.n	8000f28 <__cmpsf2+0x58>
 8000f1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f20:	d1e4      	bne.n	8000eec <__cmpsf2+0x1c>
 8000f22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f26:	d0e1      	beq.n	8000eec <__cmpsf2+0x1c>
 8000f28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__aeabi_cfrcmple>:
 8000f30:	4684      	mov	ip, r0
 8000f32:	4608      	mov	r0, r1
 8000f34:	4661      	mov	r1, ip
 8000f36:	e7ff      	b.n	8000f38 <__aeabi_cfcmpeq>

08000f38 <__aeabi_cfcmpeq>:
 8000f38:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f3a:	f7ff ffc9 	bl	8000ed0 <__cmpsf2>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	bf48      	it	mi
 8000f42:	f110 0f00 	cmnmi.w	r0, #0
 8000f46:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f48 <__aeabi_fcmpeq>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff fff4 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f50:	bf0c      	ite	eq
 8000f52:	2001      	moveq	r0, #1
 8000f54:	2000      	movne	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmplt>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffea 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f64:	bf34      	ite	cc
 8000f66:	2001      	movcc	r0, #1
 8000f68:	2000      	movcs	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmple>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffe0 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpge>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffd2 	bl	8000f30 <__aeabi_cfrcmple>
 8000f8c:	bf94      	ite	ls
 8000f8e:	2001      	movls	r0, #1
 8000f90:	2000      	movhi	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_fcmpgt>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff ffc8 	bl	8000f30 <__aeabi_cfrcmple>
 8000fa0:	bf34      	ite	cc
 8000fa2:	2001      	movcc	r0, #1
 8000fa4:	2000      	movcs	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <__aeabi_d2lz>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	460c      	mov	r4, r1
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f7ff fdb3 	bl	8000b24 <__aeabi_dcmplt>
 8000fbe:	b928      	cbnz	r0, 8000fcc <__aeabi_d2lz+0x20>
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fc8:	f000 b80a 	b.w	8000fe0 <__aeabi_d2ulz>
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fd2:	f000 f805 	bl	8000fe0 <__aeabi_d2ulz>
 8000fd6:	4240      	negs	r0, r0
 8000fd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
 8000fde:	bf00      	nop

08000fe0 <__aeabi_d2ulz>:
 8000fe0:	b5d0      	push	{r4, r6, r7, lr}
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <__aeabi_d2ulz+0x34>)
 8000fe6:	4606      	mov	r6, r0
 8000fe8:	460f      	mov	r7, r1
 8000fea:	f7ff fb29 	bl	8000640 <__aeabi_dmul>
 8000fee:	f7ff fde9 	bl	8000bc4 <__aeabi_d2uiz>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	f7ff faaa 	bl	800054c <__aeabi_ui2d>
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <__aeabi_d2ulz+0x38>)
 8000ffc:	f7ff fb20 	bl	8000640 <__aeabi_dmul>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4630      	mov	r0, r6
 8001006:	4639      	mov	r1, r7
 8001008:	f7ff f962 	bl	80002d0 <__aeabi_dsub>
 800100c:	f7ff fdda 	bl	8000bc4 <__aeabi_d2uiz>
 8001010:	4621      	mov	r1, r4
 8001012:	bdd0      	pop	{r4, r6, r7, pc}
 8001014:	3df00000 	.word	0x3df00000
 8001018:	41f00000 	.word	0x41f00000

0800101c <resetBuffersIndexes>:
float yDiff = 0;



void resetBuffersIndexes(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	indexBufferTX = 0;
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <resetBuffersIndexes+0x18>)
 8001022:	2200      	movs	r2, #0
 8001024:	801a      	strh	r2, [r3, #0]
	indexBufferRX = 0;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <resetBuffersIndexes+0x1c>)
 8001028:	2200      	movs	r2, #0
 800102a:	801a      	strh	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	2000027a 	.word	0x2000027a
 8001038:	20000278 	.word	0x20000278

0800103c <splitData>:

float splitData(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	indexTempArray = 0;
 8001040:	4b30      	ldr	r3, [pc, #192]	; (8001104 <splitData+0xc8>)
 8001042:	2200      	movs	r2, #0
 8001044:	801a      	strh	r2, [r3, #0]
	while(bufferRX[indexBufferRX] != ',' && bufferRX[indexBufferRX] != '!')
 8001046:	e01f      	b.n	8001088 <splitData+0x4c>
	{
		tempArray[indexTempArray] = bufferRX[indexBufferRX];
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <splitData+0xcc>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <splitData+0xc8>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <splitData+0xd0>)
 8001056:	5c59      	ldrb	r1, [r3, r1]
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <splitData+0xd4>)
 800105a:	5499      	strb	r1, [r3, r2]
		if(bufferRX[indexBufferRX] == '.') checkInt = 0;
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <splitData+0xcc>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <splitData+0xd0>)
 8001064:	5c9b      	ldrb	r3, [r3, r2]
 8001066:	2b2e      	cmp	r3, #46	; 0x2e
 8001068:	d102      	bne.n	8001070 <splitData+0x34>
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <splitData+0xd8>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
		indexTempArray++;
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <splitData+0xc8>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <splitData+0xc8>)
 800107a:	801a      	strh	r2, [r3, #0]
		indexBufferRX++;
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <splitData+0xcc>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <splitData+0xcc>)
 8001086:	801a      	strh	r2, [r3, #0]
	while(bufferRX[indexBufferRX] != ',' && bufferRX[indexBufferRX] != '!')
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <splitData+0xcc>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <splitData+0xd0>)
 8001090:	5c9b      	ldrb	r3, [r3, r2]
 8001092:	2b2c      	cmp	r3, #44	; 0x2c
 8001094:	d006      	beq.n	80010a4 <splitData+0x68>
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <splitData+0xcc>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <splitData+0xd0>)
 800109e:	5c9b      	ldrb	r3, [r3, r2]
 80010a0:	2b21      	cmp	r3, #33	; 0x21
 80010a2:	d1d1      	bne.n	8001048 <splitData+0xc>
	}
	if(checkInt == 1) tempArray[indexTempArray] = '.';
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <splitData+0xd8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d105      	bne.n	80010b8 <splitData+0x7c>
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <splitData+0xc8>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <splitData+0xd4>)
 80010b4:	212e      	movs	r1, #46	; 0x2e
 80010b6:	5499      	strb	r1, [r3, r2]
	checkInt = 1;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <splitData+0xd8>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
	splitValue = atof(tempArray);
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <splitData+0xd4>)
 80010c0:	f002 fae8 	bl	8003694 <atof>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd9a 	bl	8000c04 <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <splitData+0xdc>)
 80010d4:	6013      	str	r3, [r2, #0]
	for(globalIndex = 0; globalIndex < 20; globalIndex++)
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <splitData+0xe0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e009      	b.n	80010f2 <splitData+0xb6>
		tempArray[globalIndex] = '0';
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <splitData+0xe0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <splitData+0xd4>)
 80010e4:	2130      	movs	r1, #48	; 0x30
 80010e6:	54d1      	strb	r1, [r2, r3]
	for(globalIndex = 0; globalIndex < 20; globalIndex++)
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <splitData+0xe0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <splitData+0xe0>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <splitData+0xe0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b13      	cmp	r3, #19
 80010f8:	ddf1      	ble.n	80010de <splitData+0xa2>
	return splitValue;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <splitData+0xdc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000027c 	.word	0x2000027c
 8001108:	20000278 	.word	0x20000278
 800110c:	20000000 	.word	0x20000000
 8001110:	20000064 	.word	0x20000064
 8001114:	20000078 	.word	0x20000078
 8001118:	200002c4 	.word	0x200002c4
 800111c:	200002f8 	.word	0x200002f8

08001120 <getNeighborData>:

void getNeighborData(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	// Get longitude
	neighbor.longitude = splitData();
 8001124:	f7ff ff8a 	bl	800103c <splitData>
 8001128:	4603      	mov	r3, r0
 800112a:	4a28      	ldr	r2, [pc, #160]	; (80011cc <getNeighborData+0xac>)
 800112c:	6013      	str	r3, [r2, #0]

	// Get latitude
	indexBufferRX++;
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <getNeighborData+0xb0>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <getNeighborData+0xb0>)
 8001138:	801a      	strh	r2, [r3, #0]
	neighbor.latitude = splitData();
 800113a:	f7ff ff7f 	bl	800103c <splitData>
 800113e:	4603      	mov	r3, r0
 8001140:	4a22      	ldr	r2, [pc, #136]	; (80011cc <getNeighborData+0xac>)
 8001142:	6053      	str	r3, [r2, #4]

	// Get speed
	indexBufferRX++;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <getNeighborData+0xb0>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <getNeighborData+0xb0>)
 800114e:	801a      	strh	r2, [r3, #0]
	neighbor.speed = splitData();
 8001150:	f7ff ff74 	bl	800103c <splitData>
 8001154:	4603      	mov	r3, r0
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <getNeighborData+0xac>)
 8001158:	6093      	str	r3, [r2, #8]

	// Get Ax
	indexBufferRX++;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <getNeighborData+0xb0>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <getNeighborData+0xb0>)
 8001164:	801a      	strh	r2, [r3, #0]
	neighbor.Ax = splitData();
 8001166:	f7ff ff69 	bl	800103c <splitData>
 800116a:	4603      	mov	r3, r0
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <getNeighborData+0xac>)
 800116e:	60d3      	str	r3, [r2, #12]

	// Get Ay
	indexBufferRX++;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <getNeighborData+0xb0>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <getNeighborData+0xb0>)
 800117a:	801a      	strh	r2, [r3, #0]
	neighbor.Ay = splitData();
 800117c:	f7ff ff5e 	bl	800103c <splitData>
 8001180:	4603      	mov	r3, r0
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <getNeighborData+0xac>)
 8001184:	6113      	str	r3, [r2, #16]

	// Get Angle
	indexBufferRX++;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <getNeighborData+0xb0>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <getNeighborData+0xb0>)
 8001190:	801a      	strh	r2, [r3, #0]
	neighbor.angle = splitData();
 8001192:	f7ff ff53 	bl	800103c <splitData>
 8001196:	4603      	mov	r3, r0
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <getNeighborData+0xac>)
 800119a:	6153      	str	r3, [r2, #20]

	// Get Vx
	indexBufferRX++;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <getNeighborData+0xb0>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <getNeighborData+0xb0>)
 80011a6:	801a      	strh	r2, [r3, #0]
	neighbor.Vx = splitData();
 80011a8:	f7ff ff48 	bl	800103c <splitData>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a07      	ldr	r2, [pc, #28]	; (80011cc <getNeighborData+0xac>)
 80011b0:	6193      	str	r3, [r2, #24]

	// Get Vy
	indexBufferRX++;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <getNeighborData+0xb0>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <getNeighborData+0xb0>)
 80011bc:	801a      	strh	r2, [r3, #0]
	neighbor.Vy = splitData();
 80011be:	f7ff ff3d 	bl	800103c <splitData>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a01      	ldr	r2, [pc, #4]	; (80011cc <getNeighborData+0xac>)
 80011c6:	61d3      	str	r3, [r2, #28]
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200002c8 	.word	0x200002c8
 80011d0:	20000278 	.word	0x20000278
 80011d4:	00000000 	.word	0x00000000

080011d8 <getCarData>:

// ToDo: Linking these variables with sensors
void getCarData(void)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	af00      	add	r7, sp, #0
	car.longitude = 29.543256;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <getCarData+0xf0>)
 80011de:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <getCarData+0xf4>)
 80011e0:	601a      	str	r2, [r3, #0]
	car.latitude  = 30.002323;
 80011e2:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <getCarData+0xf0>)
 80011e4:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <getCarData+0xf8>)
 80011e6:	605a      	str	r2, [r3, #4]
	car.speed     = 40.120034;
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <getCarData+0xf0>)
 80011ea:	4a3a      	ldr	r2, [pc, #232]	; (80012d4 <getCarData+0xfc>)
 80011ec:	609a      	str	r2, [r3, #8]
	car.Ax        = -5.003241;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <getCarData+0xf0>)
 80011f0:	4a39      	ldr	r2, [pc, #228]	; (80012d8 <getCarData+0x100>)
 80011f2:	60da      	str	r2, [r3, #12]
	car.Ay        = 3.521000;
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <getCarData+0xf0>)
 80011f6:	4a39      	ldr	r2, [pc, #228]	; (80012dc <getCarData+0x104>)
 80011f8:	611a      	str	r2, [r3, #16]
	car.angle     = 30.001001;
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <getCarData+0xf0>)
 80011fc:	4a38      	ldr	r2, [pc, #224]	; (80012e0 <getCarData+0x108>)
 80011fe:	615a      	str	r2, [r3, #20]
	car.Vx        = car.speed * (sin((car.angle *PI)/180));
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <getCarData+0xf0>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f9c3 	bl	8000590 <__aeabi_f2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <getCarData+0xf0>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9bc 	bl	8000590 <__aeabi_f2d>
 8001218:	a329      	add	r3, pc, #164	; (adr r3, 80012c0 <getCarData+0xe8>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff fa0f 	bl	8000640 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <getCarData+0x10c>)
 8001230:	f7ff fb30 	bl	8000894 <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f006 f900 	bl	8007440 <sin>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff f9fa 	bl	8000640 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fcd6 	bl	8000c04 <__aeabi_d2f>
 8001258:	4603      	mov	r3, r0
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <getCarData+0xf0>)
 800125c:	6193      	str	r3, [r2, #24]
	car.Vy        = car.speed * (cos((car.angle *PI)/180));
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <getCarData+0xf0>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f994 	bl	8000590 <__aeabi_f2d>
 8001268:	4604      	mov	r4, r0
 800126a:	460d      	mov	r5, r1
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <getCarData+0xf0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f98d 	bl	8000590 <__aeabi_f2d>
 8001276:	a312      	add	r3, pc, #72	; (adr r3, 80012c0 <getCarData+0xe8>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff f9e0 	bl	8000640 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <getCarData+0x10c>)
 800128e:	f7ff fb01 	bl	8000894 <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f006 f88f 	bl	80073bc <cos>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff f9cb 	bl	8000640 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fca7 	bl	8000c04 <__aeabi_d2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <getCarData+0xf0>)
 80012ba:	61d3      	str	r3, [r2, #28]
}
 80012bc:	bf00      	nop
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	53c8d4f1 	.word	0x53c8d4f1
 80012c4:	400921fb 	.word	0x400921fb
 80012c8:	20000294 	.word	0x20000294
 80012cc:	41ec5897 	.word	0x41ec5897
 80012d0:	41f004c2 	.word	0x41f004c2
 80012d4:	42207aea 	.word	0x42207aea
 80012d8:	c0a01a8d 	.word	0xc0a01a8d
 80012dc:	40615810 	.word	0x40615810
 80012e0:	41f0020d 	.word	0x41f0020d
 80012e4:	40668000 	.word	0x40668000

080012e8 <getAbsolute>:

float getAbsolute(float val)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	if(val < 0) val *= -1;
 80012f0:	f04f 0100 	mov.w	r1, #0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fe31 	bl	8000f5c <__aeabi_fcmplt>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <getAbsolute+0x20>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001306:	607b      	str	r3, [r7, #4]
	return val;
 8001308:	687b      	ldr	r3, [r7, #4]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <sendWarning>:

void sendWarning(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	bufferTX[indexBufferTX++] = 'M';
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <sendWarning+0xd4>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	b291      	uxth	r1, r2
 8001320:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <sendWarning+0xd4>)
 8001322:	8011      	strh	r1, [r2, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <sendWarning+0xd8>)
 8001328:	214d      	movs	r1, #77	; 0x4d
 800132a:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = ':';
 800132c:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <sendWarning+0xd4>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	b291      	uxth	r1, r2
 8001334:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <sendWarning+0xd4>)
 8001336:	8011      	strh	r1, [r2, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <sendWarning+0xd8>)
 800133c:	213a      	movs	r1, #58	; 0x3a
 800133e:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'W';
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <sendWarning+0xd4>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	b291      	uxth	r1, r2
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <sendWarning+0xd4>)
 800134a:	8011      	strh	r1, [r2, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <sendWarning+0xd8>)
 8001350:	2157      	movs	r1, #87	; 0x57
 8001352:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'a';
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <sendWarning+0xd4>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	b291      	uxth	r1, r2
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <sendWarning+0xd4>)
 800135e:	8011      	strh	r1, [r2, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <sendWarning+0xd8>)
 8001364:	2161      	movs	r1, #97	; 0x61
 8001366:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'r';
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <sendWarning+0xd4>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	b291      	uxth	r1, r2
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <sendWarning+0xd4>)
 8001372:	8011      	strh	r1, [r2, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <sendWarning+0xd8>)
 8001378:	2172      	movs	r1, #114	; 0x72
 800137a:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'n';
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <sendWarning+0xd4>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	b291      	uxth	r1, r2
 8001384:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <sendWarning+0xd4>)
 8001386:	8011      	strh	r1, [r2, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <sendWarning+0xd8>)
 800138c:	216e      	movs	r1, #110	; 0x6e
 800138e:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'i';
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <sendWarning+0xd4>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	b291      	uxth	r1, r2
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <sendWarning+0xd4>)
 800139a:	8011      	strh	r1, [r2, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <sendWarning+0xd8>)
 80013a0:	2169      	movs	r1, #105	; 0x69
 80013a2:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'n';
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <sendWarning+0xd4>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	b291      	uxth	r1, r2
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <sendWarning+0xd4>)
 80013ae:	8011      	strh	r1, [r2, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <sendWarning+0xd8>)
 80013b4:	216e      	movs	r1, #110	; 0x6e
 80013b6:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = 'g';
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <sendWarning+0xd4>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	b291      	uxth	r1, r2
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <sendWarning+0xd4>)
 80013c2:	8011      	strh	r1, [r2, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <sendWarning+0xd8>)
 80013c8:	2167      	movs	r1, #103	; 0x67
 80013ca:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = '?';
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <sendWarning+0xd4>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	b291      	uxth	r1, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <sendWarning+0xd4>)
 80013d6:	8011      	strh	r1, [r2, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <sendWarning+0xd8>)
 80013dc:	213f      	movs	r1, #63	; 0x3f
 80013de:	5499      	strb	r1, [r3, r2]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	2000027a 	.word	0x2000027a
 80013ec:	200002fc 	.word	0x200002fc

080013f0 <analysis>:

void analysis(void)
{
 80013f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013f4:	af00      	add	r7, sp, #0
	for(t = 0; t < 10; t++)
 80013f6:	4b02      	ldr	r3, [pc, #8]	; (8001400 <analysis+0x10>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	e19f      	b.n	800173e <analysis+0x34e>
 80013fe:	bf00      	nop
 8001400:	2000027e 	.word	0x2000027e
	{
		// Car analysis
		car.dx = car.Vx * t + .5 * car.Ax * t * t;
 8001404:	4bb7      	ldr	r3, [pc, #732]	; (80016e4 <analysis+0x2f4>)
 8001406:	699c      	ldr	r4, [r3, #24]
 8001408:	4bb7      	ldr	r3, [pc, #732]	; (80016e8 <analysis+0x2f8>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fd03 	bl	8000e18 <__aeabi_i2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4619      	mov	r1, r3
 8001416:	4620      	mov	r0, r4
 8001418:	f7fe fea2 	bl	8000160 <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8b6 	bl	8000590 <__aeabi_f2d>
 8001424:	4604      	mov	r4, r0
 8001426:	460d      	mov	r5, r1
 8001428:	4bae      	ldr	r3, [pc, #696]	; (80016e4 <analysis+0x2f4>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f8af 	bl	8000590 <__aeabi_f2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4bad      	ldr	r3, [pc, #692]	; (80016ec <analysis+0x2fc>)
 8001438:	f7ff f902 	bl	8000640 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4690      	mov	r8, r2
 8001442:	4699      	mov	r9, r3
 8001444:	4ba8      	ldr	r3, [pc, #672]	; (80016e8 <analysis+0x2f8>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f88f 	bl	800056c <__aeabi_i2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4640      	mov	r0, r8
 8001454:	4649      	mov	r1, r9
 8001456:	f7ff f8f3 	bl	8000640 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4690      	mov	r8, r2
 8001460:	4699      	mov	r9, r3
 8001462:	4ba1      	ldr	r3, [pc, #644]	; (80016e8 <analysis+0x2f8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f880 	bl	800056c <__aeabi_i2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4640      	mov	r0, r8
 8001472:	4649      	mov	r1, r9
 8001474:	f7ff f8e4 	bl	8000640 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4620      	mov	r0, r4
 800147e:	4629      	mov	r1, r5
 8001480:	f7fe ff28 	bl	80002d4 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fbba 	bl	8000c04 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	4a94      	ldr	r2, [pc, #592]	; (80016e4 <analysis+0x2f4>)
 8001494:	6213      	str	r3, [r2, #32]
		car.dy = car.Vy * t + .5 * car.Ay * t * t;
 8001496:	4b93      	ldr	r3, [pc, #588]	; (80016e4 <analysis+0x2f4>)
 8001498:	69dc      	ldr	r4, [r3, #28]
 800149a:	4b93      	ldr	r3, [pc, #588]	; (80016e8 <analysis+0x2f8>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fcba 	bl	8000e18 <__aeabi_i2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4619      	mov	r1, r3
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7fe fe59 	bl	8000160 <__aeabi_fmul>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f86d 	bl	8000590 <__aeabi_f2d>
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
 80014ba:	4b8a      	ldr	r3, [pc, #552]	; (80016e4 <analysis+0x2f4>)
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f866 	bl	8000590 <__aeabi_f2d>
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b88      	ldr	r3, [pc, #544]	; (80016ec <analysis+0x2fc>)
 80014ca:	f7ff f8b9 	bl	8000640 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4690      	mov	r8, r2
 80014d4:	4699      	mov	r9, r3
 80014d6:	4b84      	ldr	r3, [pc, #528]	; (80016e8 <analysis+0x2f8>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f846 	bl	800056c <__aeabi_i2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff f8aa 	bl	8000640 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4690      	mov	r8, r2
 80014f2:	4699      	mov	r9, r3
 80014f4:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <analysis+0x2f8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f837 	bl	800056c <__aeabi_i2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4640      	mov	r0, r8
 8001504:	4649      	mov	r1, r9
 8001506:	f7ff f89b 	bl	8000640 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4620      	mov	r0, r4
 8001510:	4629      	mov	r1, r5
 8001512:	f7fe fedf 	bl	80002d4 <__adddf3>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fb71 	bl	8000c04 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4a6f      	ldr	r2, [pc, #444]	; (80016e4 <analysis+0x2f4>)
 8001526:	6253      	str	r3, [r2, #36]	; 0x24

		// Neighbor analysis
		neighbor.dx = neighbor.Vx * t + .5 * neighbor.Ax * t * t;
 8001528:	4b71      	ldr	r3, [pc, #452]	; (80016f0 <analysis+0x300>)
 800152a:	699c      	ldr	r4, [r3, #24]
 800152c:	4b6e      	ldr	r3, [pc, #440]	; (80016e8 <analysis+0x2f8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fc71 	bl	8000e18 <__aeabi_i2f>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	4620      	mov	r0, r4
 800153c:	f7fe fe10 	bl	8000160 <__aeabi_fmul>
 8001540:	4603      	mov	r3, r0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f824 	bl	8000590 <__aeabi_f2d>
 8001548:	4604      	mov	r4, r0
 800154a:	460d      	mov	r5, r1
 800154c:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <analysis+0x300>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f81d 	bl	8000590 <__aeabi_f2d>
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b64      	ldr	r3, [pc, #400]	; (80016ec <analysis+0x2fc>)
 800155c:	f7ff f870 	bl	8000640 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4690      	mov	r8, r2
 8001566:	4699      	mov	r9, r3
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <analysis+0x2f8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe fffd 	bl	800056c <__aeabi_i2d>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4640      	mov	r0, r8
 8001578:	4649      	mov	r1, r9
 800157a:	f7ff f861 	bl	8000640 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4690      	mov	r8, r2
 8001584:	4699      	mov	r9, r3
 8001586:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <analysis+0x2f8>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffee 	bl	800056c <__aeabi_i2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4640      	mov	r0, r8
 8001596:	4649      	mov	r1, r9
 8001598:	f7ff f852 	bl	8000640 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fe96 	bl	80002d4 <__adddf3>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fb28 	bl	8000c04 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <analysis+0x300>)
 80015b8:	6213      	str	r3, [r2, #32]
		neighbor.dy = neighbor.Vy * t + .5 * neighbor.Ay * t * t;
 80015ba:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <analysis+0x300>)
 80015bc:	69dc      	ldr	r4, [r3, #28]
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <analysis+0x2f8>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fc28 	bl	8000e18 <__aeabi_i2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7fe fdc7 	bl	8000160 <__aeabi_fmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffdb 	bl	8000590 <__aeabi_f2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
 80015de:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <analysis+0x300>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffd4 	bl	8000590 <__aeabi_f2d>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <analysis+0x2fc>)
 80015ee:	f7ff f827 	bl	8000640 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4690      	mov	r8, r2
 80015f8:	4699      	mov	r9, r3
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <analysis+0x2f8>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffb4 	bl	800056c <__aeabi_i2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4640      	mov	r0, r8
 800160a:	4649      	mov	r1, r9
 800160c:	f7ff f818 	bl	8000640 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4690      	mov	r8, r2
 8001616:	4699      	mov	r9, r3
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <analysis+0x2f8>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffa5 	bl	800056c <__aeabi_i2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4640      	mov	r0, r8
 8001628:	4649      	mov	r1, r9
 800162a:	f7ff f809 	bl	8000640 <__aeabi_dmul>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fe4d 	bl	80002d4 <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fadf 	bl	8000c04 <__aeabi_d2f>
 8001646:	4603      	mov	r3, r0
 8001648:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <analysis+0x300>)
 800164a:	6253      	str	r3, [r2, #36]	; 0x24

		// New Cartesian points for this car
		car.x2 = car.dx + car.longitude;
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <analysis+0x2f4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <analysis+0x2f4>)
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fb2a 	bl	8000cb0 <__addsf3>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <analysis+0x2f4>)
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
		car.y2 = car.dy + car.latitude;
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <analysis+0x2f4>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <analysis+0x2f4>)
 800166a:	6852      	ldr	r2, [r2, #4]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb1e 	bl	8000cb0 <__addsf3>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <analysis+0x2f4>)
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c

		// New Cartesian points for neighbor car
		neighbor.x2 = neighbor.dx + neighbor.longitude;
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <analysis+0x300>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <analysis+0x300>)
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb12 	bl	8000cb0 <__addsf3>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <analysis+0x300>)
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
		neighbor.y2 = neighbor.dy + neighbor.latitude;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <analysis+0x300>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <analysis+0x300>)
 800169a:	6852      	ldr	r2, [r2, #4]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb06 	bl	8000cb0 <__addsf3>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <analysis+0x300>)
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c

		xDiff = neighbor.x2 - car.x2;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <analysis+0x300>)
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <analysis+0x2f4>)
 80016b2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff faf8 	bl	8000cac <__aeabi_fsub>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <analysis+0x304>)
 80016c2:	601a      	str	r2, [r3, #0]
		yDiff = neighbor.y2 - car.y2;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <analysis+0x300>)
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <analysis+0x2f4>)
 80016ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff faec 	bl	8000cac <__aeabi_fsub>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <analysis+0x308>)
 80016da:	601a      	str	r2, [r3, #0]
		if((getAbsolute(xDiff) <= DX_MIN)  || (getAbsolute(yDiff) <= DY_MIN))
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <analysis+0x304>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	e00c      	b.n	80016fc <analysis+0x30c>
 80016e2:	bf00      	nop
 80016e4:	20000294 	.word	0x20000294
 80016e8:	2000027e 	.word	0x2000027e
 80016ec:	3fe00000 	.word	0x3fe00000
 80016f0:	200002c8 	.word	0x200002c8
 80016f4:	20000280 	.word	0x20000280
 80016f8:	20000284 	.word	0x20000284
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fdf3 	bl	80012e8 <getAbsolute>
 8001702:	4603      	mov	r3, r0
 8001704:	4912      	ldr	r1, [pc, #72]	; (8001750 <analysis+0x360>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fc32 	bl	8000f70 <__aeabi_fcmple>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <analysis+0x33c>
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <analysis+0x364>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fde6 	bl	80012e8 <getAbsolute>
 800171c:	4603      	mov	r3, r0
 800171e:	490c      	ldr	r1, [pc, #48]	; (8001750 <analysis+0x360>)
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fc25 	bl	8000f70 <__aeabi_fcmple>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <analysis+0x342>
		{
			sendWarning();
 800172c:	f7ff fdf2 	bl	8001314 <sendWarning>
			break;
 8001730:	e00b      	b.n	800174a <analysis+0x35a>
	for(t = 0; t < 10; t++)
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <analysis+0x368>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <analysis+0x368>)
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <analysis+0x368>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b09      	cmp	r3, #9
 8001744:	f67f ae5e 	bls.w	8001404 <analysis+0x14>
		}

	}
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001750:	40400000 	.word	0x40400000
 8001754:	20000284 	.word	0x20000284
 8001758:	2000027e 	.word	0x2000027e

0800175c <mergeData>:

void mergeData(float value)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

	gcvt(value, TEMP_ARR_SIZE, tempArray);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7fe ff13 	bl	8000590 <__aeabi_f2d>
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <mergeData+0x94>)
 800176c:	2214      	movs	r2, #20
 800176e:	f001 ff95 	bl	800369c <gcvt>

	for(indexTempArray = 0; indexTempArray < MAX_FLOAT_DIGITS; indexTempArray++)
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <mergeData+0x98>)
 8001774:	2200      	movs	r2, #0
 8001776:	801a      	strh	r2, [r3, #0]
 8001778:	e015      	b.n	80017a6 <mergeData+0x4a>
	{
		bufferTX[indexBufferTX] = tempArray[indexTempArray];
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <mergeData+0x98>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <mergeData+0x9c>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <mergeData+0x94>)
 8001788:	5c59      	ldrb	r1, [r3, r1]
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <mergeData+0xa0>)
 800178c:	5499      	strb	r1, [r3, r2]
		indexBufferTX++;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <mergeData+0x9c>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	3301      	adds	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <mergeData+0x9c>)
 8001798:	801a      	strh	r2, [r3, #0]
	for(indexTempArray = 0; indexTempArray < MAX_FLOAT_DIGITS; indexTempArray++)
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <mergeData+0x98>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <mergeData+0x98>)
 80017a4:	801a      	strh	r2, [r3, #0]
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <mergeData+0x98>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d9e5      	bls.n	800177a <mergeData+0x1e>
	}
	bufferTX[indexBufferTX++] = ',';
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <mergeData+0x9c>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	b291      	uxth	r1, r2
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <mergeData+0x9c>)
 80017b8:	8011      	strh	r1, [r2, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <mergeData+0xa0>)
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	5499      	strb	r1, [r3, r2]


	for(globalIndex = 0; globalIndex < TEMP_ARR_SIZE; globalIndex++)
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <mergeData+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e009      	b.n	80017de <mergeData+0x82>
		tempArray[globalIndex] = '0';
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <mergeData+0xa4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <mergeData+0x94>)
 80017d0:	2130      	movs	r1, #48	; 0x30
 80017d2:	54d1      	strb	r1, [r2, r3]
	for(globalIndex = 0; globalIndex < TEMP_ARR_SIZE; globalIndex++)
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <mergeData+0xa4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <mergeData+0xa4>)
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <mergeData+0xa4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b13      	cmp	r3, #19
 80017e4:	ddf1      	ble.n	80017ca <mergeData+0x6e>
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000064 	.word	0x20000064
 80017f4:	2000027c 	.word	0x2000027c
 80017f8:	2000027a 	.word	0x2000027a
 80017fc:	200002fc 	.word	0x200002fc
 8001800:	200002f8 	.word	0x200002f8

08001804 <generateTransmitBuffer>:

void generateTransmitBuffer(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	bufferTX[indexBufferTX++] = 'D';
 8001808:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <generateTransmitBuffer+0xb8>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	b291      	uxth	r1, r2
 8001810:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <generateTransmitBuffer+0xb8>)
 8001812:	8011      	strh	r1, [r2, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <generateTransmitBuffer+0xbc>)
 8001818:	2144      	movs	r1, #68	; 0x44
 800181a:	5499      	strb	r1, [r3, r2]
	bufferTX[indexBufferTX++] = ':';
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <generateTransmitBuffer+0xb8>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	b291      	uxth	r1, r2
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <generateTransmitBuffer+0xb8>)
 8001826:	8011      	strh	r1, [r2, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <generateTransmitBuffer+0xbc>)
 800182c:	213a      	movs	r1, #58	; 0x3a
 800182e:	5499      	strb	r1, [r3, r2]

	mergeData(car.longitude);
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <generateTransmitBuffer+0xc0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff91 	bl	800175c <mergeData>
	mergeData(car.latitude);
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <generateTransmitBuffer+0xc0>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff8c 	bl	800175c <mergeData>
	mergeData(car.speed);
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <generateTransmitBuffer+0xc0>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff87 	bl	800175c <mergeData>
	mergeData(car.Ax);
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <generateTransmitBuffer+0xc0>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff82 	bl	800175c <mergeData>
	mergeData(car.Ay);
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <generateTransmitBuffer+0xc0>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff7d 	bl	800175c <mergeData>
	mergeData(car.angle);
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <generateTransmitBuffer+0xc0>)
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff78 	bl	800175c <mergeData>
	mergeData(car.Vx);
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <generateTransmitBuffer+0xc0>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff73 	bl	800175c <mergeData>
	mergeData(car.Vy);
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <generateTransmitBuffer+0xc0>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff6e 	bl	800175c <mergeData>
	bufferTX[indexBufferTX++] = '?';
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <generateTransmitBuffer+0xb8>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	b291      	uxth	r1, r2
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <generateTransmitBuffer+0xb8>)
 800188a:	8011      	strh	r1, [r2, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <generateTransmitBuffer+0xbc>)
 8001890:	213f      	movs	r1, #63	; 0x3f
 8001892:	5499      	strb	r1, [r3, r2]

	for(; indexBufferTX < TX_SIZE; indexBufferTX++)
 8001894:	e00b      	b.n	80018ae <generateTransmitBuffer+0xaa>
	{
		bufferTX[indexBufferTX] = '!';
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <generateTransmitBuffer+0xb8>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <generateTransmitBuffer+0xbc>)
 800189e:	2121      	movs	r1, #33	; 0x21
 80018a0:	5499      	strb	r1, [r3, r2]
	for(; indexBufferTX < TX_SIZE; indexBufferTX++)
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <generateTransmitBuffer+0xb8>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <generateTransmitBuffer+0xb8>)
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <generateTransmitBuffer+0xb8>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	2b63      	cmp	r3, #99	; 0x63
 80018b4:	d9ef      	bls.n	8001896 <generateTransmitBuffer+0x92>
	}
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000027a 	.word	0x2000027a
 80018c0:	200002fc 	.word	0x200002fc
 80018c4:	20000294 	.word	0x20000294

080018c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]


}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]

 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_GPIO_Init+0x40>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	4a0d      	ldr	r2, [pc, #52]	; (800192c <MX_GPIO_Init+0x40>)
 80018f8:	f043 0320 	orr.w	r3, r3, #32
 80018fc:	6193      	str	r3, [r2, #24]
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_GPIO_Init+0x40>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_GPIO_Init+0x40>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <MX_GPIO_Init+0x40>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <MX_GPIO_Init+0x40>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40021000 	.word	0x40021000

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f000 fa2a 	bl	8001d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f81a 	bl	8001970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f7ff ffd6 	bl	80018ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001940:	f000 f980 	bl	8001c44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // ToDo: will be moved into CallRX'
  resetBuffersIndexes();
 8001944:	f7ff fb6a 	bl	800101c <resetBuffersIndexes>
  getNeighborData();
 8001948:	f7ff fbea 	bl	8001120 <getNeighborData>
  getCarData();
 800194c:	f7ff fc44 	bl	80011d8 <getCarData>
  analysis();
 8001950:	f7ff fd4e 	bl	80013f0 <analysis>
  generateTransmitBuffer();
 8001954:	f7ff ff56 	bl	8001804 <generateTransmitBuffer>
  HAL_UART_Transmit(&huart1, bufferTX, sizeof(bufferTX), 0xFF);
 8001958:	23ff      	movs	r3, #255	; 0xff
 800195a:	2264      	movs	r2, #100	; 0x64
 800195c:	4902      	ldr	r1, [pc, #8]	; (8001968 <main+0x38>)
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <main+0x3c>)
 8001960:	f001 fa1f 	bl	8002da2 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001964:	e7fe      	b.n	8001964 <main+0x34>
 8001966:	bf00      	nop
 8001968:	200002fc 	.word	0x200002fc
 800196c:	20000360 	.word	0x20000360

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b090      	sub	sp, #64	; 0x40
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	2228      	movs	r2, #40	; 0x28
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f001 feda 	bl	8003738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001996:	2301      	movs	r3, #1
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800199a:	2310      	movs	r3, #16
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a2:	f107 0318 	add.w	r3, r7, #24
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fd94 	bl	80024d4 <HAL_RCC_OscConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019b2:	f000 f818 	bl	80019e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b6:	230f      	movs	r3, #15
 80019b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 f800 	bl	80029d4 <HAL_RCC_ClockConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019da:	f000 f804 	bl	80019e6 <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3740      	adds	r7, #64	; 0x40
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ea:	b672      	cpsid	i
}
 80019ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ee:	e7fe      	b.n	80019ee <Error_Handler+0x8>

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_MspInit+0x5c>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <HAL_MspInit+0x5c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_MspInit+0x5c>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_MspInit+0x5c>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_MspInit+0x5c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_MspInit+0x5c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_MspInit+0x60>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_MspInit+0x60>)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 f9bd 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <USART1_IRQHandler+0x10>)
 8001aaa:	f001 fa0d 	bl	8002ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000360 	.word	0x20000360

08001ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <_kill>:

int _kill(int pid, int sig)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ad0:	f001 fe08 	bl	80036e4 <__errno>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2216      	movs	r2, #22
 8001ad8:	601a      	str	r2, [r3, #0]
	return -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_exit>:

void _exit (int status)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aee:	f04f 31ff 	mov.w	r1, #4294967295
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffe7 	bl	8001ac6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001af8:	e7fe      	b.n	8001af8 <_exit+0x12>

08001afa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e00a      	b.n	8001b22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b0c:	f3af 8000 	nop.w
 8001b10:	4601      	mov	r1, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	60ba      	str	r2, [r7, #8]
 8001b18:	b2ca      	uxtb	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbf0      	blt.n	8001b0c <_read+0x12>
	}

return len;
 8001b2a:	687b      	ldr	r3, [r7, #4]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e009      	b.n	8001b5a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	60ba      	str	r2, [r7, #8]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	dbf1      	blt.n	8001b46 <_write+0x12>
	}
	return len;
 8001b62:	687b      	ldr	r3, [r7, #4]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_close>:

int _close(int file)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	return -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b92:	605a      	str	r2, [r3, #4]
	return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <_isatty>:

int _isatty(int file)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <_sbrk+0x5c>)
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <_sbrk+0x60>)
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <_sbrk+0x64>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <_sbrk+0x68>)
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d207      	bcs.n	8001c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bfc:	f001 fd72 	bl	80036e4 <__errno>
 8001c00:	4603      	mov	r3, r0
 8001c02:	220c      	movs	r2, #12
 8001c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	e009      	b.n	8001c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <_sbrk+0x64>)
 8001c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20005000 	.word	0x20005000
 8001c2c:	00000400 	.word	0x00000400
 8001c30:	20000288 	.word	0x20000288
 8001c34:	200003b8 	.word	0x200003b8

08001c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_USART1_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c7c:	f001 f844 	bl	8002d08 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c86:	f7ff feae 	bl	80019e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000360 	.word	0x20000360
 8001c94:	40013800 	.word	0x40013800

08001c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <HAL_UART_MspInit+0x9c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d139      	bne.n	8001d2c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_UART_MspInit+0xa0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_UART_MspInit+0xa0>)
 8001cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_UART_MspInit+0xa0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_UART_MspInit+0xa0>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_UART_MspInit+0xa0>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_UART_MspInit+0xa0>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480f      	ldr	r0, [pc, #60]	; (8001d3c <HAL_UART_MspInit+0xa4>)
 8001cfe:	f000 fa65 	bl	80021cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	4619      	mov	r1, r3
 8001d16:	4809      	ldr	r0, [pc, #36]	; (8001d3c <HAL_UART_MspInit+0xa4>)
 8001d18:	f000 fa58 	bl	80021cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2025      	movs	r0, #37	; 0x25
 8001d22:	f000 f96c 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d26:	2025      	movs	r0, #37	; 0x25
 8001d28:	f000 f985 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010800 	.word	0x40010800

08001d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d42:	490d      	ldr	r1, [pc, #52]	; (8001d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d58:	4c0a      	ldr	r4, [pc, #40]	; (8001d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d66:	f7ff ff67 	bl	8001c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f001 fcc1 	bl	80036f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6e:	f7ff fddf 	bl	8001930 <main>
  bx lr
 8001d72:	4770      	bx	lr
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8001d7c:	08008b10 	.word	0x08008b10
  ldr r2, =_sbss
 8001d80:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8001d84:	200003b8 	.word	0x200003b8

08001d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_2_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_Init+0x28>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_Init+0x28>)
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f923 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fe22 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f93b 	bl	8002052 <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 f903 	bl	8001ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000007c 	.word	0x2000007c
 8001e10:	20000084 	.word	0x20000084
 8001e14:	20000080 	.word	0x20000080

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_IncTick+0x1c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x20>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a03      	ldr	r2, [pc, #12]	; (8001e38 <HAL_IncTick+0x20>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20000084 	.word	0x20000084
 8001e38:	200003a4 	.word	0x200003a4

08001e3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <HAL_GetTick+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	200003a4 	.word	0x200003a4

08001e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4906      	ldr	r1, [pc, #24]	; (8001ee8 <__NVIC_EnableIRQ+0x34>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	; (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	; 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff90 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff2d 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff42 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff90 	bl	8001f40 <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5f 	bl	8001eec <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff35 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffa2 	bl	8001fa4 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800207c:	2b02      	cmp	r3, #2
 800207e:	d008      	beq.n	8002092 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2204      	movs	r2, #4
 8002084:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e020      	b.n	80020d4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 020e 	bic.w	r2, r2, #14
 80020a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d005      	beq.n	8002102 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2204      	movs	r2, #4
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e051      	b.n	80021a6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 020e 	bic.w	r2, r2, #14
 8002110:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a22      	ldr	r2, [pc, #136]	; (80021b0 <HAL_DMA_Abort_IT+0xd0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d029      	beq.n	8002180 <HAL_DMA_Abort_IT+0xa0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <HAL_DMA_Abort_IT+0xd4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d022      	beq.n	800217c <HAL_DMA_Abort_IT+0x9c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_DMA_Abort_IT+0xd8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d01a      	beq.n	8002176 <HAL_DMA_Abort_IT+0x96>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_DMA_Abort_IT+0xdc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d012      	beq.n	8002170 <HAL_DMA_Abort_IT+0x90>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_DMA_Abort_IT+0xe0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00a      	beq.n	800216a <HAL_DMA_Abort_IT+0x8a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <HAL_DMA_Abort_IT+0xe4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d102      	bne.n	8002164 <HAL_DMA_Abort_IT+0x84>
 800215e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002162:	e00e      	b.n	8002182 <HAL_DMA_Abort_IT+0xa2>
 8002164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002168:	e00b      	b.n	8002182 <HAL_DMA_Abort_IT+0xa2>
 800216a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800216e:	e008      	b.n	8002182 <HAL_DMA_Abort_IT+0xa2>
 8002170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002174:	e005      	b.n	8002182 <HAL_DMA_Abort_IT+0xa2>
 8002176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217a:	e002      	b.n	8002182 <HAL_DMA_Abort_IT+0xa2>
 800217c:	2310      	movs	r3, #16
 800217e:	e000      	b.n	8002182 <HAL_DMA_Abort_IT+0xa2>
 8002180:	2301      	movs	r3, #1
 8002182:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_DMA_Abort_IT+0xe8>)
 8002184:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
    } 
  }
  return status;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40020008 	.word	0x40020008
 80021b4:	4002001c 	.word	0x4002001c
 80021b8:	40020030 	.word	0x40020030
 80021bc:	40020044 	.word	0x40020044
 80021c0:	40020058 	.word	0x40020058
 80021c4:	4002006c 	.word	0x4002006c
 80021c8:	40020000 	.word	0x40020000

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b08b      	sub	sp, #44	; 0x2c
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021de:	e169      	b.n	80024b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021e0:	2201      	movs	r2, #1
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f040 8158 	bne.w	80024ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a9a      	ldr	r2, [pc, #616]	; (800246c <HAL_GPIO_Init+0x2a0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d05e      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 8002208:	4a98      	ldr	r2, [pc, #608]	; (800246c <HAL_GPIO_Init+0x2a0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d875      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 800220e:	4a98      	ldr	r2, [pc, #608]	; (8002470 <HAL_GPIO_Init+0x2a4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d058      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 8002214:	4a96      	ldr	r2, [pc, #600]	; (8002470 <HAL_GPIO_Init+0x2a4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d86f      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 800221a:	4a96      	ldr	r2, [pc, #600]	; (8002474 <HAL_GPIO_Init+0x2a8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d052      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 8002220:	4a94      	ldr	r2, [pc, #592]	; (8002474 <HAL_GPIO_Init+0x2a8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d869      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 8002226:	4a94      	ldr	r2, [pc, #592]	; (8002478 <HAL_GPIO_Init+0x2ac>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04c      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 800222c:	4a92      	ldr	r2, [pc, #584]	; (8002478 <HAL_GPIO_Init+0x2ac>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d863      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 8002232:	4a92      	ldr	r2, [pc, #584]	; (800247c <HAL_GPIO_Init+0x2b0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d046      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
 8002238:	4a90      	ldr	r2, [pc, #576]	; (800247c <HAL_GPIO_Init+0x2b0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d85d      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 800223e:	2b12      	cmp	r3, #18
 8002240:	d82a      	bhi.n	8002298 <HAL_GPIO_Init+0xcc>
 8002242:	2b12      	cmp	r3, #18
 8002244:	d859      	bhi.n	80022fa <HAL_GPIO_Init+0x12e>
 8002246:	a201      	add	r2, pc, #4	; (adr r2, 800224c <HAL_GPIO_Init+0x80>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	080022c7 	.word	0x080022c7
 8002250:	080022a1 	.word	0x080022a1
 8002254:	080022b3 	.word	0x080022b3
 8002258:	080022f5 	.word	0x080022f5
 800225c:	080022fb 	.word	0x080022fb
 8002260:	080022fb 	.word	0x080022fb
 8002264:	080022fb 	.word	0x080022fb
 8002268:	080022fb 	.word	0x080022fb
 800226c:	080022fb 	.word	0x080022fb
 8002270:	080022fb 	.word	0x080022fb
 8002274:	080022fb 	.word	0x080022fb
 8002278:	080022fb 	.word	0x080022fb
 800227c:	080022fb 	.word	0x080022fb
 8002280:	080022fb 	.word	0x080022fb
 8002284:	080022fb 	.word	0x080022fb
 8002288:	080022fb 	.word	0x080022fb
 800228c:	080022fb 	.word	0x080022fb
 8002290:	080022a9 	.word	0x080022a9
 8002294:	080022bd 	.word	0x080022bd
 8002298:	4a79      	ldr	r2, [pc, #484]	; (8002480 <HAL_GPIO_Init+0x2b4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800229e:	e02c      	b.n	80022fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	623b      	str	r3, [r7, #32]
          break;
 80022a6:	e029      	b.n	80022fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	3304      	adds	r3, #4
 80022ae:	623b      	str	r3, [r7, #32]
          break;
 80022b0:	e024      	b.n	80022fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	3308      	adds	r3, #8
 80022b8:	623b      	str	r3, [r7, #32]
          break;
 80022ba:	e01f      	b.n	80022fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	330c      	adds	r3, #12
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e01a      	b.n	80022fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ce:	2304      	movs	r3, #4
 80022d0:	623b      	str	r3, [r7, #32]
          break;
 80022d2:	e013      	b.n	80022fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022dc:	2308      	movs	r3, #8
 80022de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	611a      	str	r2, [r3, #16]
          break;
 80022e6:	e009      	b.n	80022fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e8:	2308      	movs	r3, #8
 80022ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	615a      	str	r2, [r3, #20]
          break;
 80022f2:	e003      	b.n	80022fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
          break;
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x130>
          break;
 80022fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2bff      	cmp	r3, #255	; 0xff
 8002300:	d801      	bhi.n	8002306 <HAL_GPIO_Init+0x13a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	e001      	b.n	800230a <HAL_GPIO_Init+0x13e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d802      	bhi.n	8002318 <HAL_GPIO_Init+0x14c>
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	e002      	b.n	800231e <HAL_GPIO_Init+0x152>
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	3b08      	subs	r3, #8
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	210f      	movs	r1, #15
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
 8002330:	6a39      	ldr	r1, [r7, #32]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	431a      	orrs	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80b1 	beq.w	80024ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800234c:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <HAL_GPIO_Init+0x2b8>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <HAL_GPIO_Init+0x2b8>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_GPIO_Init+0x2b8>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002364:	4a48      	ldr	r2, [pc, #288]	; (8002488 <HAL_GPIO_Init+0x2bc>)
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	3302      	adds	r3, #2
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a40      	ldr	r2, [pc, #256]	; (800248c <HAL_GPIO_Init+0x2c0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_GPIO_Init+0x1ec>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3f      	ldr	r2, [pc, #252]	; (8002490 <HAL_GPIO_Init+0x2c4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00d      	beq.n	80023b4 <HAL_GPIO_Init+0x1e8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a3e      	ldr	r2, [pc, #248]	; (8002494 <HAL_GPIO_Init+0x2c8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d007      	beq.n	80023b0 <HAL_GPIO_Init+0x1e4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a3d      	ldr	r2, [pc, #244]	; (8002498 <HAL_GPIO_Init+0x2cc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_GPIO_Init+0x1e0>
 80023a8:	2303      	movs	r3, #3
 80023aa:	e006      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e004      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e002      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b8:	2300      	movs	r3, #0
 80023ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023bc:	f002 0203 	and.w	r2, r2, #3
 80023c0:	0092      	lsls	r2, r2, #2
 80023c2:	4093      	lsls	r3, r2
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ca:	492f      	ldr	r1, [pc, #188]	; (8002488 <HAL_GPIO_Init+0x2bc>)
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023e4:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_GPIO_Init+0x2d0>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	492c      	ldr	r1, [pc, #176]	; (800249c <HAL_GPIO_Init+0x2d0>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_GPIO_Init+0x2d0>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4928      	ldr	r1, [pc, #160]	; (800249c <HAL_GPIO_Init+0x2d0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800240c:	4b23      	ldr	r3, [pc, #140]	; (800249c <HAL_GPIO_Init+0x2d0>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4922      	ldr	r1, [pc, #136]	; (800249c <HAL_GPIO_Init+0x2d0>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <HAL_GPIO_Init+0x2d0>)
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	43db      	mvns	r3, r3
 8002422:	491e      	ldr	r1, [pc, #120]	; (800249c <HAL_GPIO_Init+0x2d0>)
 8002424:	4013      	ands	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_GPIO_Init+0x2d0>)
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	4918      	ldr	r1, [pc, #96]	; (800249c <HAL_GPIO_Init+0x2d0>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_GPIO_Init+0x2d0>)
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	43db      	mvns	r3, r3
 800244a:	4914      	ldr	r1, [pc, #80]	; (800249c <HAL_GPIO_Init+0x2d0>)
 800244c:	4013      	ands	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d021      	beq.n	80024a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_GPIO_Init+0x2d0>)
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	490e      	ldr	r1, [pc, #56]	; (800249c <HAL_GPIO_Init+0x2d0>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	60cb      	str	r3, [r1, #12]
 8002468:	e021      	b.n	80024ae <HAL_GPIO_Init+0x2e2>
 800246a:	bf00      	nop
 800246c:	10320000 	.word	0x10320000
 8002470:	10310000 	.word	0x10310000
 8002474:	10220000 	.word	0x10220000
 8002478:	10210000 	.word	0x10210000
 800247c:	10120000 	.word	0x10120000
 8002480:	10110000 	.word	0x10110000
 8002484:	40021000 	.word	0x40021000
 8002488:	40010000 	.word	0x40010000
 800248c:	40010800 	.word	0x40010800
 8002490:	40010c00 	.word	0x40010c00
 8002494:	40011000 	.word	0x40011000
 8002498:	40011400 	.word	0x40011400
 800249c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_GPIO_Init+0x304>)
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	4909      	ldr	r1, [pc, #36]	; (80024d0 <HAL_GPIO_Init+0x304>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	3301      	adds	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f47f ae8e 	bne.w	80021e0 <HAL_GPIO_Init+0x14>
  }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	372c      	adds	r7, #44	; 0x2c
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e26c      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8087 	beq.w	8002602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f4:	4b92      	ldr	r3, [pc, #584]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d00c      	beq.n	800251a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002500:	4b8f      	ldr	r3, [pc, #572]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d112      	bne.n	8002532 <HAL_RCC_OscConfig+0x5e>
 800250c:	4b8c      	ldr	r3, [pc, #560]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d10b      	bne.n	8002532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251a:	4b89      	ldr	r3, [pc, #548]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d06c      	beq.n	8002600 <HAL_RCC_OscConfig+0x12c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d168      	bne.n	8002600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e246      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x76>
 800253c:	4b80      	ldr	r3, [pc, #512]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a7f      	ldr	r2, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e02e      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7a      	ldr	r2, [pc, #488]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b78      	ldr	r3, [pc, #480]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a77      	ldr	r2, [pc, #476]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e01d      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0xbc>
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a71      	ldr	r2, [pc, #452]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6e      	ldr	r2, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 8002590:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b68      	ldr	r3, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a67      	ldr	r2, [pc, #412]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fc44 	bl	8001e3c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fc40 	bl	8001e3c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1fa      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe4>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fc30 	bl	8001e3c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fc2c 	bl	8001e3c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1e6      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x10c>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d063      	beq.n	80026d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	d11c      	bne.n	8002660 <HAL_RCC_OscConfig+0x18c>
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d116      	bne.n	8002660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x176>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e1ba      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4939      	ldr	r1, [pc, #228]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	e03a      	b.n	80026d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x270>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff fbe5 	bl	8001e3c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002676:	f7ff fbe1 	bl	8001e3c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e19b      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4927      	ldr	r1, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026aa:	4b26      	ldr	r3, [pc, #152]	; (8002744 <HAL_RCC_OscConfig+0x270>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fbc4 	bl	8001e3c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b8:	f7ff fbc0 	bl	8001e3c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e17a      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d03a      	beq.n	8002758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d019      	beq.n	800271e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_RCC_OscConfig+0x274>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f0:	f7ff fba4 	bl	8001e3c <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7ff fba0 	bl	8001e3c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e15a      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002716:	2001      	movs	r0, #1
 8002718:	f000 fad8 	bl	8002ccc <RCC_Delay>
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_OscConfig+0x274>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7ff fb8a 	bl	8001e3c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272a:	e00f      	b.n	800274c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7ff fb86 	bl	8001e3c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d908      	bls.n	800274c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e140      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	42420000 	.word	0x42420000
 8002748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e9      	bne.n	800272c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a6 	beq.w	80028b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b97      	ldr	r3, [pc, #604]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b94      	ldr	r3, [pc, #592]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a93      	ldr	r2, [pc, #588]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	61d3      	str	r3, [r2, #28]
 8002782:	4b91      	ldr	r3, [pc, #580]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b8e      	ldr	r3, [pc, #568]	; (80029cc <HAL_RCC_OscConfig+0x4f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b8b      	ldr	r3, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a8a      	ldr	r2, [pc, #552]	; (80029cc <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7ff fb47 	bl	8001e3c <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7ff fb43 	bl	8001e3c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0fd      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b81      	ldr	r3, [pc, #516]	; (80029cc <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x312>
 80027d8:	4b7b      	ldr	r3, [pc, #492]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a7a      	ldr	r2, [pc, #488]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	e02d      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x334>
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a75      	ldr	r2, [pc, #468]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b73      	ldr	r3, [pc, #460]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a72      	ldr	r2, [pc, #456]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	e01c      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x356>
 8002810:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a6c      	ldr	r2, [pc, #432]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a69      	ldr	r2, [pc, #420]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a66      	ldr	r2, [pc, #408]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6213      	str	r3, [r2, #32]
 8002836:	4b64      	ldr	r3, [pc, #400]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a63      	ldr	r2, [pc, #396]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7ff faf7 	bl	8001e3c <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7ff faf3 	bl	8001e3c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0ab      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	4b57      	ldr	r3, [pc, #348]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ee      	beq.n	8002852 <HAL_RCC_OscConfig+0x37e>
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7ff fae1 	bl	8001e3c <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff fadd 	bl	8001e3c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e095      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b48      	ldr	r3, [pc, #288]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a47      	ldr	r2, [pc, #284]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8081 	beq.w	80029be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028bc:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d061      	beq.n	800298c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d146      	bne.n	800295e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_OscConfig+0x4fc>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff fab1 	bl	8001e3c <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff faad 	bl	8001e3c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e067      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d108      	bne.n	8002918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	492d      	ldr	r1, [pc, #180]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a19      	ldr	r1, [r3, #32]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	430b      	orrs	r3, r1
 800292a:	4927      	ldr	r1, [pc, #156]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x4fc>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7ff fa81 	bl	8001e3c <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7ff fa7d 	bl	8001e3c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e037      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x46a>
 800295c:	e02f      	b.n	80029be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_RCC_OscConfig+0x4fc>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7ff fa6a 	bl	8001e3c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7ff fa66 	bl	8001e3c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e020      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x498>
 800298a:	e018      	b.n	80029be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e013      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d001      	beq.n	80029be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
 80029d0:	42420060 	.word	0x42420060

080029d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d0      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4965      	ldr	r1, [pc, #404]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d040      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e073      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4936      	ldr	r1, [pc, #216]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac4:	f7ff f9ba 	bl	8001e3c <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7ff f9b6 	bl	8001e3c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4922      	ldr	r1, [pc, #136]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f918 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40022000 	.word	0x40022000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08008470 	.word	0x08008470
 8002ba0:	2000007c 	.word	0x2000007c
 8002ba4:	20000080 	.word	0x20000080

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b490      	push	{r4, r7}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bae:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bb0:	1d3c      	adds	r4, r7, #4
 8002bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bb8:	f240 2301 	movw	r3, #513	; 0x201
 8002bbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bd2:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x40>
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x46>
 8002be6:	e02d      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bea:	623b      	str	r3, [r7, #32]
      break;
 8002bec:	e02d      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	0c9b      	lsrs	r3, r3, #18
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c5b      	lsrs	r3, r3, #17
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c26:	fb02 f203 	mul.w	r2, r2, r3
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	e004      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	623b      	str	r3, [r7, #32]
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c46:	623b      	str	r3, [r7, #32]
      break;
 8002c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc90      	pop	{r4, r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	08008460 	.word	0x08008460
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	007a1200 	.word	0x007a1200
 8002c64:	003d0900 	.word	0x003d0900

08002c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c6c:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	2000007c 	.word	0x2000007c

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff2 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08008480 	.word	0x08008480

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffde 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	0adb      	lsrs	r3, r3, #11
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08008480 	.word	0x08008480

08002ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <RCC_Delay+0x34>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <RCC_Delay+0x38>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0a5b      	lsrs	r3, r3, #9
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce8:	bf00      	nop
  }
  while (Delay --);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	60fa      	str	r2, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <RCC_Delay+0x1c>
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	2000007c 	.word	0x2000007c
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e03f      	b.n	8002d9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe ffb2 	bl	8001c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	; 0x24
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fc13 	bl	8003578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	; 0x28
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d17c      	bne.n	8002ebc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_UART_Transmit+0x2c>
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e075      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Transmit+0x3e>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e06e      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2221      	movs	r2, #33	; 0x21
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002df6:	f7ff f821 	bl	8001e3c <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	88fa      	ldrh	r2, [r7, #6]
 8002e06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e10:	d108      	bne.n	8002e24 <HAL_UART_Transmit+0x82>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d104      	bne.n	8002e24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	e003      	b.n	8002e2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e34:	e02a      	b.n	8002e8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f9ff 	bl	8003244 <UART_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e036      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10b      	bne.n	8002e6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	3302      	adds	r3, #2
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	e007      	b.n	8002e7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1cf      	bne.n	8002e36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2140      	movs	r1, #64	; 0x40
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f9cf 	bl	8003244 <UART_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e006      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10d      	bne.n	8002f1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_UART_IRQHandler+0x52>
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fa87 	bl	8003426 <UART_Receive_IT>
      return;
 8002f18:	e17b      	b.n	8003212 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80b1 	beq.w	8003084 <HAL_UART_IRQHandler+0x1bc>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_UART_IRQHandler+0x70>
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80a6 	beq.w	8003084 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_UART_IRQHandler+0x90>
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_UART_IRQHandler+0xb0>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f043 0202 	orr.w	r2, r3, #2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_UART_IRQHandler+0xd0>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00f      	beq.n	8002fc2 <HAL_UART_IRQHandler+0xfa>
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <HAL_UART_IRQHandler+0xee>
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f043 0208 	orr.w	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 811e 	beq.w	8003208 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x11e>
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa20 	bl	8003426 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_UART_IRQHandler+0x146>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d031      	beq.n	8003072 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f962 	bl	80032d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d023      	beq.n	800306a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003030:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	2b00      	cmp	r3, #0
 8003038:	d013      	beq.n	8003062 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	4a76      	ldr	r2, [pc, #472]	; (8003218 <HAL_UART_IRQHandler+0x350>)
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f84a 	bl	80020e0 <HAL_DMA_Abort_IT>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800305c:	4610      	mov	r0, r2
 800305e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003060:	e00e      	b.n	8003080 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8da 	bl	800321c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	e00a      	b.n	8003080 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8d6 	bl	800321c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003070:	e006      	b.n	8003080 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8d2 	bl	800321c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800307e:	e0c3      	b.n	8003208 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	bf00      	nop
    return;
 8003082:	e0c1      	b.n	8003208 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	2b01      	cmp	r3, #1
 800308a:	f040 80a1 	bne.w	80031d0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 809b 	beq.w	80031d0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8095 	beq.w	80031d0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04e      	beq.n	8003168 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80030d4:	8a3b      	ldrh	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8098 	beq.w	800320c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030e0:	8a3a      	ldrh	r2, [r7, #16]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	f080 8092 	bcs.w	800320c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8a3a      	ldrh	r2, [r7, #16]
 80030ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d02b      	beq.n	8003150 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003106:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003126:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0210 	bic.w	r2, r2, #16
 8003144:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe ff8d 	bl	800206a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003158:	b29b      	uxth	r3, r3
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	b29b      	uxth	r3, r3
 800315e:	4619      	mov	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f864 	bl	800322e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003166:	e051      	b.n	800320c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003170:	b29b      	uxth	r3, r3
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d047      	beq.n	8003210 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003180:	8a7b      	ldrh	r3, [r7, #18]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d044      	beq.n	8003210 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003194:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0210 	bic.w	r2, r2, #16
 80031c2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031c4:	8a7b      	ldrh	r3, [r7, #18]
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f830 	bl	800322e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031ce:	e01f      	b.n	8003210 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_UART_IRQHandler+0x324>
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f8b7 	bl	8003358 <UART_Transmit_IT>
    return;
 80031ea:	e012      	b.n	8003212 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <HAL_UART_IRQHandler+0x34a>
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f8f8 	bl	80033f6 <UART_EndTransmit_IT>
    return;
 8003206:	e004      	b.n	8003212 <HAL_UART_IRQHandler+0x34a>
    return;
 8003208:	bf00      	nop
 800320a:	e002      	b.n	8003212 <HAL_UART_IRQHandler+0x34a>
      return;
 800320c:	bf00      	nop
 800320e:	e000      	b.n	8003212 <HAL_UART_IRQHandler+0x34a>
      return;
 8003210:	bf00      	nop
  }
}
 8003212:	3728      	adds	r7, #40	; 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	08003331 	.word	0x08003331

0800321c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003254:	e02c      	b.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d028      	beq.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <UART_WaitOnFlagUntilTimeout+0x30>
 8003264:	f7fe fdea 	bl	8001e3c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	429a      	cmp	r2, r3
 8003272:	d21d      	bcs.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003282:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e00f      	b.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4013      	ands	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d0c3      	beq.n	8003256 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0210 	bic.w	r2, r2, #16
 8003316:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff ff66 	bl	800321c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b21      	cmp	r3, #33	; 0x21
 800336a:	d13e      	bne.n	80033ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d114      	bne.n	80033a0 <UART_Transmit_IT+0x48>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d110      	bne.n	80033a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003392:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]
 800339e:	e008      	b.n	80033b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	1c59      	adds	r1, r3, #1
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6211      	str	r1, [r2, #32]
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4619      	mov	r1, r3
 80033c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fa56 	bl	80018c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b22      	cmp	r3, #34	; 0x22
 8003438:	f040 8099 	bne.w	800356e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003444:	d117      	bne.n	8003476 <UART_Receive_IT+0x50>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003464:	b29a      	uxth	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	1c9a      	adds	r2, r3, #2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
 8003474:	e026      	b.n	80034c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d007      	beq.n	800349a <UART_Receive_IT+0x74>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <UART_Receive_IT+0x82>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e008      	b.n	80034ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4619      	mov	r1, r3
 80034d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d148      	bne.n	800356a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0220 	bic.w	r2, r2, #32
 80034e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	2b01      	cmp	r3, #1
 8003516:	d123      	bne.n	8003560 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0210 	bic.w	r2, r2, #16
 800352c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d10a      	bne.n	8003552 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fe68 	bl	800322e <HAL_UARTEx_RxEventCallback>
 800355e:	e002      	b.n	8003566 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fe f9ba 	bl	80018da <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e002      	b.n	8003570 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e000      	b.n	8003570 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800356e:	2302      	movs	r3, #2
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035b2:	f023 030c 	bic.w	r3, r3, #12
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	430b      	orrs	r3, r1
 80035be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2c      	ldr	r2, [pc, #176]	; (800368c <UART_SetConfig+0x114>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d103      	bne.n	80035e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7ff fb60 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	e002      	b.n	80035ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035e8:	f7ff fb48 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80035ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009a      	lsls	r2, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	4a22      	ldr	r2, [pc, #136]	; (8003690 <UART_SetConfig+0x118>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	0119      	lsls	r1, r3, #4
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009a      	lsls	r2, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	fbb2 f2f3 	udiv	r2, r2, r3
 8003624:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <UART_SetConfig+0x118>)
 8003626:	fba3 0302 	umull	r0, r3, r3, r2
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2064      	movs	r0, #100	; 0x64
 800362e:	fb00 f303 	mul.w	r3, r0, r3
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	3332      	adds	r3, #50	; 0x32
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <UART_SetConfig+0x118>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003644:	4419      	add	r1, r3
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009a      	lsls	r2, r3, #2
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fbb2 f2f3 	udiv	r2, r2, r3
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <UART_SetConfig+0x118>)
 800365e:	fba3 0302 	umull	r0, r3, r3, r2
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2064      	movs	r0, #100	; 0x64
 8003666:	fb00 f303 	mul.w	r3, r0, r3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	3332      	adds	r3, #50	; 0x32
 8003670:	4a07      	ldr	r2, [pc, #28]	; (8003690 <UART_SetConfig+0x118>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	f003 020f 	and.w	r2, r3, #15
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	440a      	add	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40013800 	.word	0x40013800
 8003690:	51eb851f 	.word	0x51eb851f

08003694 <atof>:
 8003694:	2100      	movs	r1, #0
 8003696:	f000 be6f 	b.w	8004378 <strtod>
	...

0800369c <gcvt>:
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369e:	461c      	mov	r4, r3
 80036a0:	4615      	mov	r5, r2
 80036a2:	2300      	movs	r3, #0
 80036a4:	2200      	movs	r2, #0
 80036a6:	b085      	sub	sp, #20
 80036a8:	4606      	mov	r6, r0
 80036aa:	460f      	mov	r7, r1
 80036ac:	f7fd fa3a 	bl	8000b24 <__aeabi_dcmplt>
 80036b0:	4623      	mov	r3, r4
 80036b2:	b118      	cbz	r0, 80036bc <gcvt+0x20>
 80036b4:	222d      	movs	r2, #45	; 0x2d
 80036b6:	3d01      	subs	r5, #1
 80036b8:	f803 2b01 	strb.w	r2, [r3], #1
 80036bc:	2267      	movs	r2, #103	; 0x67
 80036be:	2100      	movs	r1, #0
 80036c0:	e9cd 5300 	strd	r5, r3, [sp]
 80036c4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80036c8:	4905      	ldr	r1, [pc, #20]	; (80036e0 <gcvt+0x44>)
 80036ca:	4632      	mov	r2, r6
 80036cc:	463b      	mov	r3, r7
 80036ce:	6808      	ldr	r0, [r1, #0]
 80036d0:	f000 fed6 	bl	8004480 <_gcvt>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	bf14      	ite	ne
 80036d8:	4620      	movne	r0, r4
 80036da:	2000      	moveq	r0, #0
 80036dc:	b005      	add	sp, #20
 80036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e0:	20000088 	.word	0x20000088

080036e4 <__errno>:
 80036e4:	4b01      	ldr	r3, [pc, #4]	; (80036ec <__errno+0x8>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000088 	.word	0x20000088

080036f0 <__libc_init_array>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	2600      	movs	r6, #0
 80036f4:	4d0c      	ldr	r5, [pc, #48]	; (8003728 <__libc_init_array+0x38>)
 80036f6:	4c0d      	ldr	r4, [pc, #52]	; (800372c <__libc_init_array+0x3c>)
 80036f8:	1b64      	subs	r4, r4, r5
 80036fa:	10a4      	asrs	r4, r4, #2
 80036fc:	42a6      	cmp	r6, r4
 80036fe:	d109      	bne.n	8003714 <__libc_init_array+0x24>
 8003700:	f004 fea0 	bl	8008444 <_init>
 8003704:	2600      	movs	r6, #0
 8003706:	4d0a      	ldr	r5, [pc, #40]	; (8003730 <__libc_init_array+0x40>)
 8003708:	4c0a      	ldr	r4, [pc, #40]	; (8003734 <__libc_init_array+0x44>)
 800370a:	1b64      	subs	r4, r4, r5
 800370c:	10a4      	asrs	r4, r4, #2
 800370e:	42a6      	cmp	r6, r4
 8003710:	d105      	bne.n	800371e <__libc_init_array+0x2e>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	f855 3b04 	ldr.w	r3, [r5], #4
 8003718:	4798      	blx	r3
 800371a:	3601      	adds	r6, #1
 800371c:	e7ee      	b.n	80036fc <__libc_init_array+0xc>
 800371e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003722:	4798      	blx	r3
 8003724:	3601      	adds	r6, #1
 8003726:	e7f2      	b.n	800370e <__libc_init_array+0x1e>
 8003728:	08008b08 	.word	0x08008b08
 800372c:	08008b08 	.word	0x08008b08
 8003730:	08008b08 	.word	0x08008b08
 8003734:	08008b0c 	.word	0x08008b0c

08003738 <memset>:
 8003738:	4603      	mov	r3, r0
 800373a:	4402      	add	r2, r0
 800373c:	4293      	cmp	r3, r2
 800373e:	d100      	bne.n	8003742 <memset+0xa>
 8003740:	4770      	bx	lr
 8003742:	f803 1b01 	strb.w	r1, [r3], #1
 8003746:	e7f9      	b.n	800373c <memset+0x4>

08003748 <sulp>:
 8003748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800374c:	460f      	mov	r7, r1
 800374e:	4690      	mov	r8, r2
 8003750:	f001 fe4c 	bl	80053ec <__ulp>
 8003754:	4604      	mov	r4, r0
 8003756:	460d      	mov	r5, r1
 8003758:	f1b8 0f00 	cmp.w	r8, #0
 800375c:	d011      	beq.n	8003782 <sulp+0x3a>
 800375e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003766:	2b00      	cmp	r3, #0
 8003768:	dd0b      	ble.n	8003782 <sulp+0x3a>
 800376a:	2400      	movs	r4, #0
 800376c:	051b      	lsls	r3, r3, #20
 800376e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003772:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	f7fc ff61 	bl	8000640 <__aeabi_dmul>
 800377e:	4604      	mov	r4, r0
 8003780:	460d      	mov	r5, r1
 8003782:	4620      	mov	r0, r4
 8003784:	4629      	mov	r1, r5
 8003786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800378a:	0000      	movs	r0, r0
 800378c:	0000      	movs	r0, r0
	...

08003790 <_strtod_l>:
 8003790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003794:	469b      	mov	fp, r3
 8003796:	2300      	movs	r3, #0
 8003798:	b0a1      	sub	sp, #132	; 0x84
 800379a:	931c      	str	r3, [sp, #112]	; 0x70
 800379c:	4ba1      	ldr	r3, [pc, #644]	; (8003a24 <_strtod_l+0x294>)
 800379e:	4682      	mov	sl, r0
 80037a0:	681f      	ldr	r7, [r3, #0]
 80037a2:	460e      	mov	r6, r1
 80037a4:	4638      	mov	r0, r7
 80037a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80037a8:	f7fc fcd2 	bl	8000150 <strlen>
 80037ac:	f04f 0800 	mov.w	r8, #0
 80037b0:	4604      	mov	r4, r0
 80037b2:	f04f 0900 	mov.w	r9, #0
 80037b6:	961b      	str	r6, [sp, #108]	; 0x6c
 80037b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	2a2b      	cmp	r2, #43	; 0x2b
 80037be:	d04c      	beq.n	800385a <_strtod_l+0xca>
 80037c0:	d83a      	bhi.n	8003838 <_strtod_l+0xa8>
 80037c2:	2a0d      	cmp	r2, #13
 80037c4:	d833      	bhi.n	800382e <_strtod_l+0x9e>
 80037c6:	2a08      	cmp	r2, #8
 80037c8:	d833      	bhi.n	8003832 <_strtod_l+0xa2>
 80037ca:	2a00      	cmp	r2, #0
 80037cc:	d03d      	beq.n	800384a <_strtod_l+0xba>
 80037ce:	2300      	movs	r3, #0
 80037d0:	930c      	str	r3, [sp, #48]	; 0x30
 80037d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80037d4:	782b      	ldrb	r3, [r5, #0]
 80037d6:	2b30      	cmp	r3, #48	; 0x30
 80037d8:	f040 80af 	bne.w	800393a <_strtod_l+0x1aa>
 80037dc:	786b      	ldrb	r3, [r5, #1]
 80037de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80037e2:	2b58      	cmp	r3, #88	; 0x58
 80037e4:	d16c      	bne.n	80038c0 <_strtod_l+0x130>
 80037e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037e8:	4650      	mov	r0, sl
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	ab1c      	add	r3, sp, #112	; 0x70
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4a8d      	ldr	r2, [pc, #564]	; (8003a28 <_strtod_l+0x298>)
 80037f2:	f8cd b008 	str.w	fp, [sp, #8]
 80037f6:	ab1d      	add	r3, sp, #116	; 0x74
 80037f8:	a91b      	add	r1, sp, #108	; 0x6c
 80037fa:	f000 ff69 	bl	80046d0 <__gethex>
 80037fe:	f010 0607 	ands.w	r6, r0, #7
 8003802:	4604      	mov	r4, r0
 8003804:	d005      	beq.n	8003812 <_strtod_l+0x82>
 8003806:	2e06      	cmp	r6, #6
 8003808:	d129      	bne.n	800385e <_strtod_l+0xce>
 800380a:	2300      	movs	r3, #0
 800380c:	3501      	adds	r5, #1
 800380e:	951b      	str	r5, [sp, #108]	; 0x6c
 8003810:	930c      	str	r3, [sp, #48]	; 0x30
 8003812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 8596 	bne.w	8004346 <_strtod_l+0xbb6>
 800381a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800381c:	b1d3      	cbz	r3, 8003854 <_strtod_l+0xc4>
 800381e:	4642      	mov	r2, r8
 8003820:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	b021      	add	sp, #132	; 0x84
 800382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382e:	2a20      	cmp	r2, #32
 8003830:	d1cd      	bne.n	80037ce <_strtod_l+0x3e>
 8003832:	3301      	adds	r3, #1
 8003834:	931b      	str	r3, [sp, #108]	; 0x6c
 8003836:	e7bf      	b.n	80037b8 <_strtod_l+0x28>
 8003838:	2a2d      	cmp	r2, #45	; 0x2d
 800383a:	d1c8      	bne.n	80037ce <_strtod_l+0x3e>
 800383c:	2201      	movs	r2, #1
 800383e:	920c      	str	r2, [sp, #48]	; 0x30
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	921b      	str	r2, [sp, #108]	; 0x6c
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1c3      	bne.n	80037d2 <_strtod_l+0x42>
 800384a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800384c:	961b      	str	r6, [sp, #108]	; 0x6c
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 8577 	bne.w	8004342 <_strtod_l+0xbb2>
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	e7e4      	b.n	8003824 <_strtod_l+0x94>
 800385a:	2200      	movs	r2, #0
 800385c:	e7ef      	b.n	800383e <_strtod_l+0xae>
 800385e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003860:	b13a      	cbz	r2, 8003872 <_strtod_l+0xe2>
 8003862:	2135      	movs	r1, #53	; 0x35
 8003864:	a81e      	add	r0, sp, #120	; 0x78
 8003866:	f001 fee1 	bl	800562c <__copybits>
 800386a:	4650      	mov	r0, sl
 800386c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800386e:	f001 fa8d 	bl	8004d8c <_Bfree>
 8003872:	3e01      	subs	r6, #1
 8003874:	2e05      	cmp	r6, #5
 8003876:	d807      	bhi.n	8003888 <_strtod_l+0xf8>
 8003878:	e8df f006 	tbb	[pc, r6]
 800387c:	1d180b0e 	.word	0x1d180b0e
 8003880:	030e      	.short	0x030e
 8003882:	f04f 0900 	mov.w	r9, #0
 8003886:	46c8      	mov	r8, r9
 8003888:	0721      	lsls	r1, r4, #28
 800388a:	d5c2      	bpl.n	8003812 <_strtod_l+0x82>
 800388c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003890:	e7bf      	b.n	8003812 <_strtod_l+0x82>
 8003892:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003896:	e7f7      	b.n	8003888 <_strtod_l+0xf8>
 8003898:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800389a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800389e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80038a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80038aa:	e7ed      	b.n	8003888 <_strtod_l+0xf8>
 80038ac:	f04f 0800 	mov.w	r8, #0
 80038b0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003a2c <_strtod_l+0x29c>
 80038b4:	e7e8      	b.n	8003888 <_strtod_l+0xf8>
 80038b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80038ba:	f04f 38ff 	mov.w	r8, #4294967295
 80038be:	e7e3      	b.n	8003888 <_strtod_l+0xf8>
 80038c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	2b30      	cmp	r3, #48	; 0x30
 80038ca:	d0f9      	beq.n	80038c0 <_strtod_l+0x130>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0a0      	beq.n	8003812 <_strtod_l+0x82>
 80038d0:	2301      	movs	r3, #1
 80038d2:	9307      	str	r3, [sp, #28]
 80038d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80038d6:	220a      	movs	r2, #10
 80038d8:	9308      	str	r3, [sp, #32]
 80038da:	2300      	movs	r3, #0
 80038dc:	469b      	mov	fp, r3
 80038de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80038e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80038e4:	7805      	ldrb	r5, [r0, #0]
 80038e6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80038ea:	b2d9      	uxtb	r1, r3
 80038ec:	2909      	cmp	r1, #9
 80038ee:	d926      	bls.n	800393e <_strtod_l+0x1ae>
 80038f0:	4622      	mov	r2, r4
 80038f2:	4639      	mov	r1, r7
 80038f4:	f001 ff64 	bl	80057c0 <strncmp>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d032      	beq.n	8003962 <_strtod_l+0x1d2>
 80038fc:	2000      	movs	r0, #0
 80038fe:	462b      	mov	r3, r5
 8003900:	465c      	mov	r4, fp
 8003902:	4602      	mov	r2, r0
 8003904:	9004      	str	r0, [sp, #16]
 8003906:	2b65      	cmp	r3, #101	; 0x65
 8003908:	d001      	beq.n	800390e <_strtod_l+0x17e>
 800390a:	2b45      	cmp	r3, #69	; 0x45
 800390c:	d113      	bne.n	8003936 <_strtod_l+0x1a6>
 800390e:	b91c      	cbnz	r4, 8003918 <_strtod_l+0x188>
 8003910:	9b07      	ldr	r3, [sp, #28]
 8003912:	4303      	orrs	r3, r0
 8003914:	d099      	beq.n	800384a <_strtod_l+0xba>
 8003916:	2400      	movs	r4, #0
 8003918:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800391a:	1c73      	adds	r3, r6, #1
 800391c:	931b      	str	r3, [sp, #108]	; 0x6c
 800391e:	7873      	ldrb	r3, [r6, #1]
 8003920:	2b2b      	cmp	r3, #43	; 0x2b
 8003922:	d078      	beq.n	8003a16 <_strtod_l+0x286>
 8003924:	2b2d      	cmp	r3, #45	; 0x2d
 8003926:	d07b      	beq.n	8003a20 <_strtod_l+0x290>
 8003928:	2700      	movs	r7, #0
 800392a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800392e:	2909      	cmp	r1, #9
 8003930:	f240 8082 	bls.w	8003a38 <_strtod_l+0x2a8>
 8003934:	961b      	str	r6, [sp, #108]	; 0x6c
 8003936:	2500      	movs	r5, #0
 8003938:	e09e      	b.n	8003a78 <_strtod_l+0x2e8>
 800393a:	2300      	movs	r3, #0
 800393c:	e7c9      	b.n	80038d2 <_strtod_l+0x142>
 800393e:	f1bb 0f08 	cmp.w	fp, #8
 8003942:	bfd5      	itete	le
 8003944:	9906      	ldrle	r1, [sp, #24]
 8003946:	9905      	ldrgt	r1, [sp, #20]
 8003948:	fb02 3301 	mlale	r3, r2, r1, r3
 800394c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003950:	f100 0001 	add.w	r0, r0, #1
 8003954:	bfd4      	ite	le
 8003956:	9306      	strle	r3, [sp, #24]
 8003958:	9305      	strgt	r3, [sp, #20]
 800395a:	f10b 0b01 	add.w	fp, fp, #1
 800395e:	901b      	str	r0, [sp, #108]	; 0x6c
 8003960:	e7bf      	b.n	80038e2 <_strtod_l+0x152>
 8003962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003964:	191a      	adds	r2, r3, r4
 8003966:	921b      	str	r2, [sp, #108]	; 0x6c
 8003968:	5d1b      	ldrb	r3, [r3, r4]
 800396a:	f1bb 0f00 	cmp.w	fp, #0
 800396e:	d036      	beq.n	80039de <_strtod_l+0x24e>
 8003970:	465c      	mov	r4, fp
 8003972:	9004      	str	r0, [sp, #16]
 8003974:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003978:	2a09      	cmp	r2, #9
 800397a:	d912      	bls.n	80039a2 <_strtod_l+0x212>
 800397c:	2201      	movs	r2, #1
 800397e:	e7c2      	b.n	8003906 <_strtod_l+0x176>
 8003980:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003982:	3001      	adds	r0, #1
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	921b      	str	r2, [sp, #108]	; 0x6c
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b30      	cmp	r3, #48	; 0x30
 800398c:	d0f8      	beq.n	8003980 <_strtod_l+0x1f0>
 800398e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003992:	2a08      	cmp	r2, #8
 8003994:	f200 84dc 	bhi.w	8004350 <_strtod_l+0xbc0>
 8003998:	9004      	str	r0, [sp, #16]
 800399a:	2000      	movs	r0, #0
 800399c:	4604      	mov	r4, r0
 800399e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80039a0:	9208      	str	r2, [sp, #32]
 80039a2:	3b30      	subs	r3, #48	; 0x30
 80039a4:	f100 0201 	add.w	r2, r0, #1
 80039a8:	d013      	beq.n	80039d2 <_strtod_l+0x242>
 80039aa:	9904      	ldr	r1, [sp, #16]
 80039ac:	1905      	adds	r5, r0, r4
 80039ae:	4411      	add	r1, r2
 80039b0:	9104      	str	r1, [sp, #16]
 80039b2:	4622      	mov	r2, r4
 80039b4:	210a      	movs	r1, #10
 80039b6:	42aa      	cmp	r2, r5
 80039b8:	d113      	bne.n	80039e2 <_strtod_l+0x252>
 80039ba:	1822      	adds	r2, r4, r0
 80039bc:	2a08      	cmp	r2, #8
 80039be:	f104 0401 	add.w	r4, r4, #1
 80039c2:	4404      	add	r4, r0
 80039c4:	dc1b      	bgt.n	80039fe <_strtod_l+0x26e>
 80039c6:	220a      	movs	r2, #10
 80039c8:	9906      	ldr	r1, [sp, #24]
 80039ca:	fb02 3301 	mla	r3, r2, r1, r3
 80039ce:	9306      	str	r3, [sp, #24]
 80039d0:	2200      	movs	r2, #0
 80039d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80039d4:	4610      	mov	r0, r2
 80039d6:	1c59      	adds	r1, r3, #1
 80039d8:	911b      	str	r1, [sp, #108]	; 0x6c
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	e7ca      	b.n	8003974 <_strtod_l+0x1e4>
 80039de:	4658      	mov	r0, fp
 80039e0:	e7d3      	b.n	800398a <_strtod_l+0x1fa>
 80039e2:	2a08      	cmp	r2, #8
 80039e4:	dc04      	bgt.n	80039f0 <_strtod_l+0x260>
 80039e6:	9f06      	ldr	r7, [sp, #24]
 80039e8:	434f      	muls	r7, r1
 80039ea:	9706      	str	r7, [sp, #24]
 80039ec:	3201      	adds	r2, #1
 80039ee:	e7e2      	b.n	80039b6 <_strtod_l+0x226>
 80039f0:	1c57      	adds	r7, r2, #1
 80039f2:	2f10      	cmp	r7, #16
 80039f4:	bfde      	ittt	le
 80039f6:	9f05      	ldrle	r7, [sp, #20]
 80039f8:	434f      	mulle	r7, r1
 80039fa:	9705      	strle	r7, [sp, #20]
 80039fc:	e7f6      	b.n	80039ec <_strtod_l+0x25c>
 80039fe:	2c10      	cmp	r4, #16
 8003a00:	bfdf      	itttt	le
 8003a02:	220a      	movle	r2, #10
 8003a04:	9905      	ldrle	r1, [sp, #20]
 8003a06:	fb02 3301 	mlale	r3, r2, r1, r3
 8003a0a:	9305      	strle	r3, [sp, #20]
 8003a0c:	e7e0      	b.n	80039d0 <_strtod_l+0x240>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2201      	movs	r2, #1
 8003a12:	9304      	str	r3, [sp, #16]
 8003a14:	e77c      	b.n	8003910 <_strtod_l+0x180>
 8003a16:	2700      	movs	r7, #0
 8003a18:	1cb3      	adds	r3, r6, #2
 8003a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003a1c:	78b3      	ldrb	r3, [r6, #2]
 8003a1e:	e784      	b.n	800392a <_strtod_l+0x19a>
 8003a20:	2701      	movs	r7, #1
 8003a22:	e7f9      	b.n	8003a18 <_strtod_l+0x288>
 8003a24:	08008564 	.word	0x08008564
 8003a28:	08008494 	.word	0x08008494
 8003a2c:	7ff00000 	.word	0x7ff00000
 8003a30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a32:	1c59      	adds	r1, r3, #1
 8003a34:	911b      	str	r1, [sp, #108]	; 0x6c
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b30      	cmp	r3, #48	; 0x30
 8003a3a:	d0f9      	beq.n	8003a30 <_strtod_l+0x2a0>
 8003a3c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003a40:	2908      	cmp	r1, #8
 8003a42:	f63f af78 	bhi.w	8003936 <_strtod_l+0x1a6>
 8003a46:	f04f 0e0a 	mov.w	lr, #10
 8003a4a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003a4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a50:	9309      	str	r3, [sp, #36]	; 0x24
 8003a52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a54:	1c59      	adds	r1, r3, #1
 8003a56:	911b      	str	r1, [sp, #108]	; 0x6c
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003a5e:	2d09      	cmp	r5, #9
 8003a60:	d935      	bls.n	8003ace <_strtod_l+0x33e>
 8003a62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003a64:	1b49      	subs	r1, r1, r5
 8003a66:	2908      	cmp	r1, #8
 8003a68:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003a6c:	dc02      	bgt.n	8003a74 <_strtod_l+0x2e4>
 8003a6e:	4565      	cmp	r5, ip
 8003a70:	bfa8      	it	ge
 8003a72:	4665      	movge	r5, ip
 8003a74:	b107      	cbz	r7, 8003a78 <_strtod_l+0x2e8>
 8003a76:	426d      	negs	r5, r5
 8003a78:	2c00      	cmp	r4, #0
 8003a7a:	d14c      	bne.n	8003b16 <_strtod_l+0x386>
 8003a7c:	9907      	ldr	r1, [sp, #28]
 8003a7e:	4301      	orrs	r1, r0
 8003a80:	f47f aec7 	bne.w	8003812 <_strtod_l+0x82>
 8003a84:	2a00      	cmp	r2, #0
 8003a86:	f47f aee0 	bne.w	800384a <_strtod_l+0xba>
 8003a8a:	2b69      	cmp	r3, #105	; 0x69
 8003a8c:	d026      	beq.n	8003adc <_strtod_l+0x34c>
 8003a8e:	dc23      	bgt.n	8003ad8 <_strtod_l+0x348>
 8003a90:	2b49      	cmp	r3, #73	; 0x49
 8003a92:	d023      	beq.n	8003adc <_strtod_l+0x34c>
 8003a94:	2b4e      	cmp	r3, #78	; 0x4e
 8003a96:	f47f aed8 	bne.w	800384a <_strtod_l+0xba>
 8003a9a:	499c      	ldr	r1, [pc, #624]	; (8003d0c <_strtod_l+0x57c>)
 8003a9c:	a81b      	add	r0, sp, #108	; 0x6c
 8003a9e:	f001 f865 	bl	8004b6c <__match>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	f43f aed1 	beq.w	800384a <_strtod_l+0xba>
 8003aa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b28      	cmp	r3, #40	; 0x28
 8003aae:	d12c      	bne.n	8003b0a <_strtod_l+0x37a>
 8003ab0:	4997      	ldr	r1, [pc, #604]	; (8003d10 <_strtod_l+0x580>)
 8003ab2:	aa1e      	add	r2, sp, #120	; 0x78
 8003ab4:	a81b      	add	r0, sp, #108	; 0x6c
 8003ab6:	f001 f86d 	bl	8004b94 <__hexnan>
 8003aba:	2805      	cmp	r0, #5
 8003abc:	d125      	bne.n	8003b0a <_strtod_l+0x37a>
 8003abe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ac0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003ac4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003ac8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003acc:	e6a1      	b.n	8003812 <_strtod_l+0x82>
 8003ace:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003ad2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003ad6:	e7bc      	b.n	8003a52 <_strtod_l+0x2c2>
 8003ad8:	2b6e      	cmp	r3, #110	; 0x6e
 8003ada:	e7dc      	b.n	8003a96 <_strtod_l+0x306>
 8003adc:	498d      	ldr	r1, [pc, #564]	; (8003d14 <_strtod_l+0x584>)
 8003ade:	a81b      	add	r0, sp, #108	; 0x6c
 8003ae0:	f001 f844 	bl	8004b6c <__match>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f43f aeb0 	beq.w	800384a <_strtod_l+0xba>
 8003aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003aec:	498a      	ldr	r1, [pc, #552]	; (8003d18 <_strtod_l+0x588>)
 8003aee:	3b01      	subs	r3, #1
 8003af0:	a81b      	add	r0, sp, #108	; 0x6c
 8003af2:	931b      	str	r3, [sp, #108]	; 0x6c
 8003af4:	f001 f83a 	bl	8004b6c <__match>
 8003af8:	b910      	cbnz	r0, 8003b00 <_strtod_l+0x370>
 8003afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003afc:	3301      	adds	r3, #1
 8003afe:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b00:	f04f 0800 	mov.w	r8, #0
 8003b04:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003d28 <_strtod_l+0x598>
 8003b08:	e683      	b.n	8003812 <_strtod_l+0x82>
 8003b0a:	4884      	ldr	r0, [pc, #528]	; (8003d1c <_strtod_l+0x58c>)
 8003b0c:	f001 fe3a 	bl	8005784 <nan>
 8003b10:	4680      	mov	r8, r0
 8003b12:	4689      	mov	r9, r1
 8003b14:	e67d      	b.n	8003812 <_strtod_l+0x82>
 8003b16:	9b04      	ldr	r3, [sp, #16]
 8003b18:	f1bb 0f00 	cmp.w	fp, #0
 8003b1c:	bf08      	it	eq
 8003b1e:	46a3      	moveq	fp, r4
 8003b20:	1aeb      	subs	r3, r5, r3
 8003b22:	2c10      	cmp	r4, #16
 8003b24:	9806      	ldr	r0, [sp, #24]
 8003b26:	4626      	mov	r6, r4
 8003b28:	9307      	str	r3, [sp, #28]
 8003b2a:	bfa8      	it	ge
 8003b2c:	2610      	movge	r6, #16
 8003b2e:	f7fc fd0d 	bl	800054c <__aeabi_ui2d>
 8003b32:	2c09      	cmp	r4, #9
 8003b34:	4680      	mov	r8, r0
 8003b36:	4689      	mov	r9, r1
 8003b38:	dd13      	ble.n	8003b62 <_strtod_l+0x3d2>
 8003b3a:	4b79      	ldr	r3, [pc, #484]	; (8003d20 <_strtod_l+0x590>)
 8003b3c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003b40:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003b44:	f7fc fd7c 	bl	8000640 <__aeabi_dmul>
 8003b48:	4680      	mov	r8, r0
 8003b4a:	9805      	ldr	r0, [sp, #20]
 8003b4c:	4689      	mov	r9, r1
 8003b4e:	f7fc fcfd 	bl	800054c <__aeabi_ui2d>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4640      	mov	r0, r8
 8003b58:	4649      	mov	r1, r9
 8003b5a:	f7fc fbbb 	bl	80002d4 <__adddf3>
 8003b5e:	4680      	mov	r8, r0
 8003b60:	4689      	mov	r9, r1
 8003b62:	2c0f      	cmp	r4, #15
 8003b64:	dc36      	bgt.n	8003bd4 <_strtod_l+0x444>
 8003b66:	9b07      	ldr	r3, [sp, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f43f ae52 	beq.w	8003812 <_strtod_l+0x82>
 8003b6e:	dd22      	ble.n	8003bb6 <_strtod_l+0x426>
 8003b70:	2b16      	cmp	r3, #22
 8003b72:	dc09      	bgt.n	8003b88 <_strtod_l+0x3f8>
 8003b74:	4c6a      	ldr	r4, [pc, #424]	; (8003d20 <_strtod_l+0x590>)
 8003b76:	4642      	mov	r2, r8
 8003b78:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003b82:	f7fc fd5d 	bl	8000640 <__aeabi_dmul>
 8003b86:	e7c3      	b.n	8003b10 <_strtod_l+0x380>
 8003b88:	9a07      	ldr	r2, [sp, #28]
 8003b8a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	db20      	blt.n	8003bd4 <_strtod_l+0x444>
 8003b92:	4d63      	ldr	r5, [pc, #396]	; (8003d20 <_strtod_l+0x590>)
 8003b94:	f1c4 040f 	rsb	r4, r4, #15
 8003b98:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	f7fc fd4c 	bl	8000640 <__aeabi_dmul>
 8003ba8:	9b07      	ldr	r3, [sp, #28]
 8003baa:	1b1c      	subs	r4, r3, r4
 8003bac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003bb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003bb4:	e7e5      	b.n	8003b82 <_strtod_l+0x3f2>
 8003bb6:	9b07      	ldr	r3, [sp, #28]
 8003bb8:	3316      	adds	r3, #22
 8003bba:	db0b      	blt.n	8003bd4 <_strtod_l+0x444>
 8003bbc:	9b04      	ldr	r3, [sp, #16]
 8003bbe:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <_strtod_l+0x590>)
 8003bc0:	1b5d      	subs	r5, r3, r5
 8003bc2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003bcc:	4649      	mov	r1, r9
 8003bce:	f7fc fe61 	bl	8000894 <__aeabi_ddiv>
 8003bd2:	e79d      	b.n	8003b10 <_strtod_l+0x380>
 8003bd4:	9b07      	ldr	r3, [sp, #28]
 8003bd6:	1ba6      	subs	r6, r4, r6
 8003bd8:	441e      	add	r6, r3
 8003bda:	2e00      	cmp	r6, #0
 8003bdc:	dd71      	ble.n	8003cc2 <_strtod_l+0x532>
 8003bde:	f016 030f 	ands.w	r3, r6, #15
 8003be2:	d00a      	beq.n	8003bfa <_strtod_l+0x46a>
 8003be4:	494e      	ldr	r1, [pc, #312]	; (8003d20 <_strtod_l+0x590>)
 8003be6:	4642      	mov	r2, r8
 8003be8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bf0:	464b      	mov	r3, r9
 8003bf2:	f7fc fd25 	bl	8000640 <__aeabi_dmul>
 8003bf6:	4680      	mov	r8, r0
 8003bf8:	4689      	mov	r9, r1
 8003bfa:	f036 060f 	bics.w	r6, r6, #15
 8003bfe:	d050      	beq.n	8003ca2 <_strtod_l+0x512>
 8003c00:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003c04:	dd27      	ble.n	8003c56 <_strtod_l+0x4c6>
 8003c06:	f04f 0b00 	mov.w	fp, #0
 8003c0a:	f8cd b010 	str.w	fp, [sp, #16]
 8003c0e:	f8cd b020 	str.w	fp, [sp, #32]
 8003c12:	f8cd b018 	str.w	fp, [sp, #24]
 8003c16:	2322      	movs	r3, #34	; 0x22
 8003c18:	f04f 0800 	mov.w	r8, #0
 8003c1c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003d28 <_strtod_l+0x598>
 8003c20:	f8ca 3000 	str.w	r3, [sl]
 8003c24:	9b08      	ldr	r3, [sp, #32]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f43f adf3 	beq.w	8003812 <_strtod_l+0x82>
 8003c2c:	4650      	mov	r0, sl
 8003c2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003c30:	f001 f8ac 	bl	8004d8c <_Bfree>
 8003c34:	4650      	mov	r0, sl
 8003c36:	9906      	ldr	r1, [sp, #24]
 8003c38:	f001 f8a8 	bl	8004d8c <_Bfree>
 8003c3c:	4650      	mov	r0, sl
 8003c3e:	9904      	ldr	r1, [sp, #16]
 8003c40:	f001 f8a4 	bl	8004d8c <_Bfree>
 8003c44:	4650      	mov	r0, sl
 8003c46:	9908      	ldr	r1, [sp, #32]
 8003c48:	f001 f8a0 	bl	8004d8c <_Bfree>
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	4650      	mov	r0, sl
 8003c50:	f001 f89c 	bl	8004d8c <_Bfree>
 8003c54:	e5dd      	b.n	8003812 <_strtod_l+0x82>
 8003c56:	2300      	movs	r3, #0
 8003c58:	4640      	mov	r0, r8
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	461f      	mov	r7, r3
 8003c5e:	1136      	asrs	r6, r6, #4
 8003c60:	2e01      	cmp	r6, #1
 8003c62:	dc21      	bgt.n	8003ca8 <_strtod_l+0x518>
 8003c64:	b10b      	cbz	r3, 8003c6a <_strtod_l+0x4da>
 8003c66:	4680      	mov	r8, r0
 8003c68:	4689      	mov	r9, r1
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <_strtod_l+0x594>)
 8003c6c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003c70:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003c74:	4642      	mov	r2, r8
 8003c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	f7fc fce0 	bl	8000640 <__aeabi_dmul>
 8003c80:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <_strtod_l+0x598>)
 8003c82:	460a      	mov	r2, r1
 8003c84:	400b      	ands	r3, r1
 8003c86:	4929      	ldr	r1, [pc, #164]	; (8003d2c <_strtod_l+0x59c>)
 8003c88:	4680      	mov	r8, r0
 8003c8a:	428b      	cmp	r3, r1
 8003c8c:	d8bb      	bhi.n	8003c06 <_strtod_l+0x476>
 8003c8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003c92:	428b      	cmp	r3, r1
 8003c94:	bf86      	itte	hi
 8003c96:	f04f 38ff 	movhi.w	r8, #4294967295
 8003c9a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003d30 <_strtod_l+0x5a0>
 8003c9e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9305      	str	r3, [sp, #20]
 8003ca6:	e07e      	b.n	8003da6 <_strtod_l+0x616>
 8003ca8:	07f2      	lsls	r2, r6, #31
 8003caa:	d507      	bpl.n	8003cbc <_strtod_l+0x52c>
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <_strtod_l+0x594>)
 8003cae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fcc3 	bl	8000640 <__aeabi_dmul>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	3701      	adds	r7, #1
 8003cbe:	1076      	asrs	r6, r6, #1
 8003cc0:	e7ce      	b.n	8003c60 <_strtod_l+0x4d0>
 8003cc2:	d0ee      	beq.n	8003ca2 <_strtod_l+0x512>
 8003cc4:	4276      	negs	r6, r6
 8003cc6:	f016 020f 	ands.w	r2, r6, #15
 8003cca:	d00a      	beq.n	8003ce2 <_strtod_l+0x552>
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <_strtod_l+0x590>)
 8003cce:	4640      	mov	r0, r8
 8003cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f7fc fddb 	bl	8000894 <__aeabi_ddiv>
 8003cde:	4680      	mov	r8, r0
 8003ce0:	4689      	mov	r9, r1
 8003ce2:	1136      	asrs	r6, r6, #4
 8003ce4:	d0dd      	beq.n	8003ca2 <_strtod_l+0x512>
 8003ce6:	2e1f      	cmp	r6, #31
 8003ce8:	dd24      	ble.n	8003d34 <_strtod_l+0x5a4>
 8003cea:	f04f 0b00 	mov.w	fp, #0
 8003cee:	f8cd b010 	str.w	fp, [sp, #16]
 8003cf2:	f8cd b020 	str.w	fp, [sp, #32]
 8003cf6:	f8cd b018 	str.w	fp, [sp, #24]
 8003cfa:	2322      	movs	r3, #34	; 0x22
 8003cfc:	f04f 0800 	mov.w	r8, #0
 8003d00:	f04f 0900 	mov.w	r9, #0
 8003d04:	f8ca 3000 	str.w	r3, [sl]
 8003d08:	e78c      	b.n	8003c24 <_strtod_l+0x494>
 8003d0a:	bf00      	nop
 8003d0c:	0800848f 	.word	0x0800848f
 8003d10:	080084a8 	.word	0x080084a8
 8003d14:	0800848c 	.word	0x0800848c
 8003d18:	0800882c 	.word	0x0800882c
 8003d1c:	08008727 	.word	0x08008727
 8003d20:	08008618 	.word	0x08008618
 8003d24:	080085f0 	.word	0x080085f0
 8003d28:	7ff00000 	.word	0x7ff00000
 8003d2c:	7ca00000 	.word	0x7ca00000
 8003d30:	7fefffff 	.word	0x7fefffff
 8003d34:	f016 0310 	ands.w	r3, r6, #16
 8003d38:	bf18      	it	ne
 8003d3a:	236a      	movne	r3, #106	; 0x6a
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	9305      	str	r3, [sp, #20]
 8003d40:	4649      	mov	r1, r9
 8003d42:	2300      	movs	r3, #0
 8003d44:	4fb2      	ldr	r7, [pc, #712]	; (8004010 <_strtod_l+0x880>)
 8003d46:	07f2      	lsls	r2, r6, #31
 8003d48:	d504      	bpl.n	8003d54 <_strtod_l+0x5c4>
 8003d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d4e:	f7fc fc77 	bl	8000640 <__aeabi_dmul>
 8003d52:	2301      	movs	r3, #1
 8003d54:	1076      	asrs	r6, r6, #1
 8003d56:	f107 0708 	add.w	r7, r7, #8
 8003d5a:	d1f4      	bne.n	8003d46 <_strtod_l+0x5b6>
 8003d5c:	b10b      	cbz	r3, 8003d62 <_strtod_l+0x5d2>
 8003d5e:	4680      	mov	r8, r0
 8003d60:	4689      	mov	r9, r1
 8003d62:	9b05      	ldr	r3, [sp, #20]
 8003d64:	b1bb      	cbz	r3, 8003d96 <_strtod_l+0x606>
 8003d66:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8003d6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	4649      	mov	r1, r9
 8003d72:	dd10      	ble.n	8003d96 <_strtod_l+0x606>
 8003d74:	2b1f      	cmp	r3, #31
 8003d76:	f340 812b 	ble.w	8003fd0 <_strtod_l+0x840>
 8003d7a:	2b34      	cmp	r3, #52	; 0x34
 8003d7c:	bfd8      	it	le
 8003d7e:	f04f 32ff 	movle.w	r2, #4294967295
 8003d82:	f04f 0800 	mov.w	r8, #0
 8003d86:	bfcf      	iteee	gt
 8003d88:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003d8c:	3b20      	suble	r3, #32
 8003d8e:	fa02 f303 	lslle.w	r3, r2, r3
 8003d92:	ea03 0901 	andle.w	r9, r3, r1
 8003d96:	2200      	movs	r2, #0
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	f7fc feb7 	bl	8000b10 <__aeabi_dcmpeq>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d1a1      	bne.n	8003cea <_strtod_l+0x55a>
 8003da6:	9b06      	ldr	r3, [sp, #24]
 8003da8:	465a      	mov	r2, fp
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4650      	mov	r0, sl
 8003dae:	4623      	mov	r3, r4
 8003db0:	9908      	ldr	r1, [sp, #32]
 8003db2:	f001 f857 	bl	8004e64 <__s2b>
 8003db6:	9008      	str	r0, [sp, #32]
 8003db8:	2800      	cmp	r0, #0
 8003dba:	f43f af24 	beq.w	8003c06 <_strtod_l+0x476>
 8003dbe:	9b04      	ldr	r3, [sp, #16]
 8003dc0:	f04f 0b00 	mov.w	fp, #0
 8003dc4:	1b5d      	subs	r5, r3, r5
 8003dc6:	9b07      	ldr	r3, [sp, #28]
 8003dc8:	f8cd b010 	str.w	fp, [sp, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bfb4      	ite	lt
 8003dd0:	462b      	movlt	r3, r5
 8003dd2:	2300      	movge	r3, #0
 8003dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8003dd6:	9b07      	ldr	r3, [sp, #28]
 8003dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003ddc:	9316      	str	r3, [sp, #88]	; 0x58
 8003dde:	9b08      	ldr	r3, [sp, #32]
 8003de0:	4650      	mov	r0, sl
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	f000 ff92 	bl	8004d0c <_Balloc>
 8003de8:	9006      	str	r0, [sp, #24]
 8003dea:	2800      	cmp	r0, #0
 8003dec:	f43f af13 	beq.w	8003c16 <_strtod_l+0x486>
 8003df0:	9b08      	ldr	r3, [sp, #32]
 8003df2:	300c      	adds	r0, #12
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	f103 010c 	add.w	r1, r3, #12
 8003dfa:	3202      	adds	r2, #2
 8003dfc:	0092      	lsls	r2, r2, #2
 8003dfe:	f000 ff77 	bl	8004cf0 <memcpy>
 8003e02:	ab1e      	add	r3, sp, #120	; 0x78
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	ab1d      	add	r3, sp, #116	; 0x74
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	4650      	mov	r0, sl
 8003e10:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003e14:	f001 fb64 	bl	80054e0 <__d2b>
 8003e18:	901c      	str	r0, [sp, #112]	; 0x70
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	f43f aefb 	beq.w	8003c16 <_strtod_l+0x486>
 8003e20:	2101      	movs	r1, #1
 8003e22:	4650      	mov	r0, sl
 8003e24:	f001 f8b6 	bl	8004f94 <__i2b>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	9004      	str	r0, [sp, #16]
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	f43f aef2 	beq.w	8003c16 <_strtod_l+0x486>
 8003e32:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003e34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003e36:	2d00      	cmp	r5, #0
 8003e38:	bfab      	itete	ge
 8003e3a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003e3c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003e3e:	18ee      	addge	r6, r5, r3
 8003e40:	1b5c      	sublt	r4, r3, r5
 8003e42:	9b05      	ldr	r3, [sp, #20]
 8003e44:	bfa8      	it	ge
 8003e46:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003e48:	eba5 0503 	sub.w	r5, r5, r3
 8003e4c:	4415      	add	r5, r2
 8003e4e:	4b71      	ldr	r3, [pc, #452]	; (8004014 <_strtod_l+0x884>)
 8003e50:	f105 35ff 	add.w	r5, r5, #4294967295
 8003e54:	bfb8      	it	lt
 8003e56:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003e58:	429d      	cmp	r5, r3
 8003e5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003e5e:	f280 80c9 	bge.w	8003ff4 <_strtod_l+0x864>
 8003e62:	1b5b      	subs	r3, r3, r5
 8003e64:	2b1f      	cmp	r3, #31
 8003e66:	f04f 0701 	mov.w	r7, #1
 8003e6a:	eba2 0203 	sub.w	r2, r2, r3
 8003e6e:	f300 80b6 	bgt.w	8003fde <_strtod_l+0x84e>
 8003e72:	2500      	movs	r5, #0
 8003e74:	fa07 f303 	lsl.w	r3, r7, r3
 8003e78:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e7a:	18b7      	adds	r7, r6, r2
 8003e7c:	9b05      	ldr	r3, [sp, #20]
 8003e7e:	42be      	cmp	r6, r7
 8003e80:	4414      	add	r4, r2
 8003e82:	441c      	add	r4, r3
 8003e84:	4633      	mov	r3, r6
 8003e86:	bfa8      	it	ge
 8003e88:	463b      	movge	r3, r7
 8003e8a:	42a3      	cmp	r3, r4
 8003e8c:	bfa8      	it	ge
 8003e8e:	4623      	movge	r3, r4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bfc2      	ittt	gt
 8003e94:	1aff      	subgt	r7, r7, r3
 8003e96:	1ae4      	subgt	r4, r4, r3
 8003e98:	1af6      	subgt	r6, r6, r3
 8003e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	dd17      	ble.n	8003ed0 <_strtod_l+0x740>
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4650      	mov	r0, sl
 8003ea4:	9904      	ldr	r1, [sp, #16]
 8003ea6:	f001 f92f 	bl	8005108 <__pow5mult>
 8003eaa:	9004      	str	r0, [sp, #16]
 8003eac:	2800      	cmp	r0, #0
 8003eae:	f43f aeb2 	beq.w	8003c16 <_strtod_l+0x486>
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	f001 f882 	bl	8004fc0 <__multiply>
 8003ebc:	9009      	str	r0, [sp, #36]	; 0x24
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	f43f aea9 	beq.w	8003c16 <_strtod_l+0x486>
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003ec8:	f000 ff60 	bl	8004d8c <_Bfree>
 8003ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ece:	931c      	str	r3, [sp, #112]	; 0x70
 8003ed0:	2f00      	cmp	r7, #0
 8003ed2:	f300 8093 	bgt.w	8003ffc <_strtod_l+0x86c>
 8003ed6:	9b07      	ldr	r3, [sp, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	dd08      	ble.n	8003eee <_strtod_l+0x75e>
 8003edc:	4650      	mov	r0, sl
 8003ede:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003ee0:	9906      	ldr	r1, [sp, #24]
 8003ee2:	f001 f911 	bl	8005108 <__pow5mult>
 8003ee6:	9006      	str	r0, [sp, #24]
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	f43f ae94 	beq.w	8003c16 <_strtod_l+0x486>
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	dd08      	ble.n	8003f04 <_strtod_l+0x774>
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	9906      	ldr	r1, [sp, #24]
 8003ef8:	f001 f960 	bl	80051bc <__lshift>
 8003efc:	9006      	str	r0, [sp, #24]
 8003efe:	2800      	cmp	r0, #0
 8003f00:	f43f ae89 	beq.w	8003c16 <_strtod_l+0x486>
 8003f04:	2e00      	cmp	r6, #0
 8003f06:	dd08      	ble.n	8003f1a <_strtod_l+0x78a>
 8003f08:	4632      	mov	r2, r6
 8003f0a:	4650      	mov	r0, sl
 8003f0c:	9904      	ldr	r1, [sp, #16]
 8003f0e:	f001 f955 	bl	80051bc <__lshift>
 8003f12:	9004      	str	r0, [sp, #16]
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f43f ae7e 	beq.w	8003c16 <_strtod_l+0x486>
 8003f1a:	4650      	mov	r0, sl
 8003f1c:	9a06      	ldr	r2, [sp, #24]
 8003f1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003f20:	f001 f9d4 	bl	80052cc <__mdiff>
 8003f24:	4683      	mov	fp, r0
 8003f26:	2800      	cmp	r0, #0
 8003f28:	f43f ae75 	beq.w	8003c16 <_strtod_l+0x486>
 8003f2c:	2400      	movs	r4, #0
 8003f2e:	68c3      	ldr	r3, [r0, #12]
 8003f30:	9904      	ldr	r1, [sp, #16]
 8003f32:	60c4      	str	r4, [r0, #12]
 8003f34:	930d      	str	r3, [sp, #52]	; 0x34
 8003f36:	f001 f9ad 	bl	8005294 <__mcmp>
 8003f3a:	42a0      	cmp	r0, r4
 8003f3c:	da70      	bge.n	8004020 <_strtod_l+0x890>
 8003f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f40:	ea53 0308 	orrs.w	r3, r3, r8
 8003f44:	f040 8096 	bne.w	8004074 <_strtod_l+0x8e4>
 8003f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 8091 	bne.w	8004074 <_strtod_l+0x8e4>
 8003f52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f56:	0d1b      	lsrs	r3, r3, #20
 8003f58:	051b      	lsls	r3, r3, #20
 8003f5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003f5e:	f240 8089 	bls.w	8004074 <_strtod_l+0x8e4>
 8003f62:	f8db 3014 	ldr.w	r3, [fp, #20]
 8003f66:	b923      	cbnz	r3, 8003f72 <_strtod_l+0x7e2>
 8003f68:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f340 8081 	ble.w	8004074 <_strtod_l+0x8e4>
 8003f72:	4659      	mov	r1, fp
 8003f74:	2201      	movs	r2, #1
 8003f76:	4650      	mov	r0, sl
 8003f78:	f001 f920 	bl	80051bc <__lshift>
 8003f7c:	9904      	ldr	r1, [sp, #16]
 8003f7e:	4683      	mov	fp, r0
 8003f80:	f001 f988 	bl	8005294 <__mcmp>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	dd75      	ble.n	8004074 <_strtod_l+0x8e4>
 8003f88:	9905      	ldr	r1, [sp, #20]
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	4a22      	ldr	r2, [pc, #136]	; (8004018 <_strtod_l+0x888>)
 8003f8e:	2900      	cmp	r1, #0
 8003f90:	f000 8091 	beq.w	80040b6 <_strtod_l+0x926>
 8003f94:	ea02 0109 	and.w	r1, r2, r9
 8003f98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003f9c:	f300 808b 	bgt.w	80040b6 <_strtod_l+0x926>
 8003fa0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003fa4:	f77f aea9 	ble.w	8003cfa <_strtod_l+0x56a>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4a1c      	ldr	r2, [pc, #112]	; (800401c <_strtod_l+0x88c>)
 8003fac:	4640      	mov	r0, r8
 8003fae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003fb8:	f7fc fb42 	bl	8000640 <__aeabi_dmul>
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4303      	orrs	r3, r0
 8003fc0:	bf08      	it	eq
 8003fc2:	2322      	moveq	r3, #34	; 0x22
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	4689      	mov	r9, r1
 8003fc8:	bf08      	it	eq
 8003fca:	f8ca 3000 	streq.w	r3, [sl]
 8003fce:	e62d      	b.n	8003c2c <_strtod_l+0x49c>
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	ea03 0808 	and.w	r8, r3, r8
 8003fdc:	e6db      	b.n	8003d96 <_strtod_l+0x606>
 8003fde:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8003fe2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8003fe6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8003fea:	35e2      	adds	r5, #226	; 0xe2
 8003fec:	fa07 f505 	lsl.w	r5, r7, r5
 8003ff0:	970f      	str	r7, [sp, #60]	; 0x3c
 8003ff2:	e742      	b.n	8003e7a <_strtod_l+0x6ea>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	2500      	movs	r5, #0
 8003ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ffa:	e73e      	b.n	8003e7a <_strtod_l+0x6ea>
 8003ffc:	463a      	mov	r2, r7
 8003ffe:	4650      	mov	r0, sl
 8004000:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004002:	f001 f8db 	bl	80051bc <__lshift>
 8004006:	901c      	str	r0, [sp, #112]	; 0x70
 8004008:	2800      	cmp	r0, #0
 800400a:	f47f af64 	bne.w	8003ed6 <_strtod_l+0x746>
 800400e:	e602      	b.n	8003c16 <_strtod_l+0x486>
 8004010:	080084c0 	.word	0x080084c0
 8004014:	fffffc02 	.word	0xfffffc02
 8004018:	7ff00000 	.word	0x7ff00000
 800401c:	39500000 	.word	0x39500000
 8004020:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004024:	d166      	bne.n	80040f4 <_strtod_l+0x964>
 8004026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800402c:	b35a      	cbz	r2, 8004086 <_strtod_l+0x8f6>
 800402e:	4a9c      	ldr	r2, [pc, #624]	; (80042a0 <_strtod_l+0xb10>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d12c      	bne.n	800408e <_strtod_l+0x8fe>
 8004034:	9b05      	ldr	r3, [sp, #20]
 8004036:	4640      	mov	r0, r8
 8004038:	b303      	cbz	r3, 800407c <_strtod_l+0x8ec>
 800403a:	464b      	mov	r3, r9
 800403c:	4a99      	ldr	r2, [pc, #612]	; (80042a4 <_strtod_l+0xb14>)
 800403e:	f04f 31ff 	mov.w	r1, #4294967295
 8004042:	401a      	ands	r2, r3
 8004044:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004048:	d81b      	bhi.n	8004082 <_strtod_l+0x8f2>
 800404a:	0d12      	lsrs	r2, r2, #20
 800404c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	4298      	cmp	r0, r3
 8004056:	d11a      	bne.n	800408e <_strtod_l+0x8fe>
 8004058:	4b93      	ldr	r3, [pc, #588]	; (80042a8 <_strtod_l+0xb18>)
 800405a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800405c:	429a      	cmp	r2, r3
 800405e:	d102      	bne.n	8004066 <_strtod_l+0x8d6>
 8004060:	3001      	adds	r0, #1
 8004062:	f43f add8 	beq.w	8003c16 <_strtod_l+0x486>
 8004066:	f04f 0800 	mov.w	r8, #0
 800406a:	4b8e      	ldr	r3, [pc, #568]	; (80042a4 <_strtod_l+0xb14>)
 800406c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800406e:	401a      	ands	r2, r3
 8004070:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004074:	9b05      	ldr	r3, [sp, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d196      	bne.n	8003fa8 <_strtod_l+0x818>
 800407a:	e5d7      	b.n	8003c2c <_strtod_l+0x49c>
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	e7e8      	b.n	8004054 <_strtod_l+0x8c4>
 8004082:	460b      	mov	r3, r1
 8004084:	e7e6      	b.n	8004054 <_strtod_l+0x8c4>
 8004086:	ea53 0308 	orrs.w	r3, r3, r8
 800408a:	f43f af7d 	beq.w	8003f88 <_strtod_l+0x7f8>
 800408e:	b1e5      	cbz	r5, 80040ca <_strtod_l+0x93a>
 8004090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004092:	421d      	tst	r5, r3
 8004094:	d0ee      	beq.n	8004074 <_strtod_l+0x8e4>
 8004096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004098:	4640      	mov	r0, r8
 800409a:	4649      	mov	r1, r9
 800409c:	9a05      	ldr	r2, [sp, #20]
 800409e:	b1c3      	cbz	r3, 80040d2 <_strtod_l+0x942>
 80040a0:	f7ff fb52 	bl	8003748 <sulp>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040ac:	f7fc f912 	bl	80002d4 <__adddf3>
 80040b0:	4680      	mov	r8, r0
 80040b2:	4689      	mov	r9, r1
 80040b4:	e7de      	b.n	8004074 <_strtod_l+0x8e4>
 80040b6:	4013      	ands	r3, r2
 80040b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80040bc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80040c0:	f04f 38ff 	mov.w	r8, #4294967295
 80040c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80040c8:	e7d4      	b.n	8004074 <_strtod_l+0x8e4>
 80040ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80040cc:	ea13 0f08 	tst.w	r3, r8
 80040d0:	e7e0      	b.n	8004094 <_strtod_l+0x904>
 80040d2:	f7ff fb39 	bl	8003748 <sulp>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040de:	f7fc f8f7 	bl	80002d0 <__aeabi_dsub>
 80040e2:	2200      	movs	r2, #0
 80040e4:	2300      	movs	r3, #0
 80040e6:	4680      	mov	r8, r0
 80040e8:	4689      	mov	r9, r1
 80040ea:	f7fc fd11 	bl	8000b10 <__aeabi_dcmpeq>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d0c0      	beq.n	8004074 <_strtod_l+0x8e4>
 80040f2:	e602      	b.n	8003cfa <_strtod_l+0x56a>
 80040f4:	4658      	mov	r0, fp
 80040f6:	9904      	ldr	r1, [sp, #16]
 80040f8:	f001 fa4e 	bl	8005598 <__ratio>
 80040fc:	2200      	movs	r2, #0
 80040fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004102:	4606      	mov	r6, r0
 8004104:	460f      	mov	r7, r1
 8004106:	f7fc fd17 	bl	8000b38 <__aeabi_dcmple>
 800410a:	2800      	cmp	r0, #0
 800410c:	d075      	beq.n	80041fa <_strtod_l+0xa6a>
 800410e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004110:	2b00      	cmp	r3, #0
 8004112:	d047      	beq.n	80041a4 <_strtod_l+0xa14>
 8004114:	2600      	movs	r6, #0
 8004116:	4f65      	ldr	r7, [pc, #404]	; (80042ac <_strtod_l+0xb1c>)
 8004118:	4d64      	ldr	r5, [pc, #400]	; (80042ac <_strtod_l+0xb1c>)
 800411a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004120:	0d1b      	lsrs	r3, r3, #20
 8004122:	051b      	lsls	r3, r3, #20
 8004124:	930f      	str	r3, [sp, #60]	; 0x3c
 8004126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004128:	4b61      	ldr	r3, [pc, #388]	; (80042b0 <_strtod_l+0xb20>)
 800412a:	429a      	cmp	r2, r3
 800412c:	f040 80c8 	bne.w	80042c0 <_strtod_l+0xb30>
 8004130:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004134:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800413a:	4640      	mov	r0, r8
 800413c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004140:	4649      	mov	r1, r9
 8004142:	f001 f953 	bl	80053ec <__ulp>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4630      	mov	r0, r6
 800414c:	4639      	mov	r1, r7
 800414e:	f7fc fa77 	bl	8000640 <__aeabi_dmul>
 8004152:	4642      	mov	r2, r8
 8004154:	464b      	mov	r3, r9
 8004156:	f7fc f8bd 	bl	80002d4 <__adddf3>
 800415a:	460b      	mov	r3, r1
 800415c:	4951      	ldr	r1, [pc, #324]	; (80042a4 <_strtod_l+0xb14>)
 800415e:	4a55      	ldr	r2, [pc, #340]	; (80042b4 <_strtod_l+0xb24>)
 8004160:	4019      	ands	r1, r3
 8004162:	4291      	cmp	r1, r2
 8004164:	4680      	mov	r8, r0
 8004166:	d95e      	bls.n	8004226 <_strtod_l+0xa96>
 8004168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800416a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800416e:	4293      	cmp	r3, r2
 8004170:	d103      	bne.n	800417a <_strtod_l+0x9ea>
 8004172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004174:	3301      	adds	r3, #1
 8004176:	f43f ad4e 	beq.w	8003c16 <_strtod_l+0x486>
 800417a:	f04f 38ff 	mov.w	r8, #4294967295
 800417e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80042a8 <_strtod_l+0xb18>
 8004182:	4650      	mov	r0, sl
 8004184:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004186:	f000 fe01 	bl	8004d8c <_Bfree>
 800418a:	4650      	mov	r0, sl
 800418c:	9906      	ldr	r1, [sp, #24]
 800418e:	f000 fdfd 	bl	8004d8c <_Bfree>
 8004192:	4650      	mov	r0, sl
 8004194:	9904      	ldr	r1, [sp, #16]
 8004196:	f000 fdf9 	bl	8004d8c <_Bfree>
 800419a:	4659      	mov	r1, fp
 800419c:	4650      	mov	r0, sl
 800419e:	f000 fdf5 	bl	8004d8c <_Bfree>
 80041a2:	e61c      	b.n	8003dde <_strtod_l+0x64e>
 80041a4:	f1b8 0f00 	cmp.w	r8, #0
 80041a8:	d119      	bne.n	80041de <_strtod_l+0xa4e>
 80041aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b0:	b9e3      	cbnz	r3, 80041ec <_strtod_l+0xa5c>
 80041b2:	2200      	movs	r2, #0
 80041b4:	4630      	mov	r0, r6
 80041b6:	4639      	mov	r1, r7
 80041b8:	4b3c      	ldr	r3, [pc, #240]	; (80042ac <_strtod_l+0xb1c>)
 80041ba:	f7fc fcb3 	bl	8000b24 <__aeabi_dcmplt>
 80041be:	b9c8      	cbnz	r0, 80041f4 <_strtod_l+0xa64>
 80041c0:	2200      	movs	r2, #0
 80041c2:	4630      	mov	r0, r6
 80041c4:	4639      	mov	r1, r7
 80041c6:	4b3c      	ldr	r3, [pc, #240]	; (80042b8 <_strtod_l+0xb28>)
 80041c8:	f7fc fa3a 	bl	8000640 <__aeabi_dmul>
 80041cc:	4604      	mov	r4, r0
 80041ce:	460d      	mov	r5, r1
 80041d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80041d4:	9418      	str	r4, [sp, #96]	; 0x60
 80041d6:	9319      	str	r3, [sp, #100]	; 0x64
 80041d8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80041dc:	e79d      	b.n	800411a <_strtod_l+0x98a>
 80041de:	f1b8 0f01 	cmp.w	r8, #1
 80041e2:	d103      	bne.n	80041ec <_strtod_l+0xa5c>
 80041e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f43f ad87 	beq.w	8003cfa <_strtod_l+0x56a>
 80041ec:	2600      	movs	r6, #0
 80041ee:	2400      	movs	r4, #0
 80041f0:	4f32      	ldr	r7, [pc, #200]	; (80042bc <_strtod_l+0xb2c>)
 80041f2:	e791      	b.n	8004118 <_strtod_l+0x988>
 80041f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80041f6:	4d30      	ldr	r5, [pc, #192]	; (80042b8 <_strtod_l+0xb28>)
 80041f8:	e7ea      	b.n	80041d0 <_strtod_l+0xa40>
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <_strtod_l+0xb28>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	4630      	mov	r0, r6
 8004200:	4639      	mov	r1, r7
 8004202:	f7fc fa1d 	bl	8000640 <__aeabi_dmul>
 8004206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004208:	4604      	mov	r4, r0
 800420a:	460d      	mov	r5, r1
 800420c:	b933      	cbnz	r3, 800421c <_strtod_l+0xa8c>
 800420e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004212:	9010      	str	r0, [sp, #64]	; 0x40
 8004214:	9311      	str	r3, [sp, #68]	; 0x44
 8004216:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800421a:	e77e      	b.n	800411a <_strtod_l+0x98a>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004224:	e7f7      	b.n	8004216 <_strtod_l+0xa86>
 8004226:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800422a:	9b05      	ldr	r3, [sp, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1a8      	bne.n	8004182 <_strtod_l+0x9f2>
 8004230:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004236:	0d1b      	lsrs	r3, r3, #20
 8004238:	051b      	lsls	r3, r3, #20
 800423a:	429a      	cmp	r2, r3
 800423c:	d1a1      	bne.n	8004182 <_strtod_l+0x9f2>
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	f7fc feb3 	bl	8000fac <__aeabi_d2lz>
 8004246:	f7fc f9cd 	bl	80005e4 <__aeabi_l2d>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4620      	mov	r0, r4
 8004250:	4629      	mov	r1, r5
 8004252:	f7fc f83d 	bl	80002d0 <__aeabi_dsub>
 8004256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800425c:	ea43 0308 	orr.w	r3, r3, r8
 8004260:	4313      	orrs	r3, r2
 8004262:	4604      	mov	r4, r0
 8004264:	460d      	mov	r5, r1
 8004266:	d066      	beq.n	8004336 <_strtod_l+0xba6>
 8004268:	a309      	add	r3, pc, #36	; (adr r3, 8004290 <_strtod_l+0xb00>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fc fc59 	bl	8000b24 <__aeabi_dcmplt>
 8004272:	2800      	cmp	r0, #0
 8004274:	f47f acda 	bne.w	8003c2c <_strtod_l+0x49c>
 8004278:	a307      	add	r3, pc, #28	; (adr r3, 8004298 <_strtod_l+0xb08>)
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	4620      	mov	r0, r4
 8004280:	4629      	mov	r1, r5
 8004282:	f7fc fc6d 	bl	8000b60 <__aeabi_dcmpgt>
 8004286:	2800      	cmp	r0, #0
 8004288:	f43f af7b 	beq.w	8004182 <_strtod_l+0x9f2>
 800428c:	e4ce      	b.n	8003c2c <_strtod_l+0x49c>
 800428e:	bf00      	nop
 8004290:	94a03595 	.word	0x94a03595
 8004294:	3fdfffff 	.word	0x3fdfffff
 8004298:	35afe535 	.word	0x35afe535
 800429c:	3fe00000 	.word	0x3fe00000
 80042a0:	000fffff 	.word	0x000fffff
 80042a4:	7ff00000 	.word	0x7ff00000
 80042a8:	7fefffff 	.word	0x7fefffff
 80042ac:	3ff00000 	.word	0x3ff00000
 80042b0:	7fe00000 	.word	0x7fe00000
 80042b4:	7c9fffff 	.word	0x7c9fffff
 80042b8:	3fe00000 	.word	0x3fe00000
 80042bc:	bff00000 	.word	0xbff00000
 80042c0:	9b05      	ldr	r3, [sp, #20]
 80042c2:	b313      	cbz	r3, 800430a <_strtod_l+0xb7a>
 80042c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80042ca:	d81e      	bhi.n	800430a <_strtod_l+0xb7a>
 80042cc:	a326      	add	r3, pc, #152	; (adr r3, 8004368 <_strtod_l+0xbd8>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	4620      	mov	r0, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	f7fc fc2f 	bl	8000b38 <__aeabi_dcmple>
 80042da:	b190      	cbz	r0, 8004302 <_strtod_l+0xb72>
 80042dc:	4629      	mov	r1, r5
 80042de:	4620      	mov	r0, r4
 80042e0:	f7fc fc70 	bl	8000bc4 <__aeabi_d2uiz>
 80042e4:	2801      	cmp	r0, #1
 80042e6:	bf38      	it	cc
 80042e8:	2001      	movcc	r0, #1
 80042ea:	f7fc f92f 	bl	800054c <__aeabi_ui2d>
 80042ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042f0:	4604      	mov	r4, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	b9d3      	cbnz	r3, 800432c <_strtod_l+0xb9c>
 80042f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042fa:	9012      	str	r0, [sp, #72]	; 0x48
 80042fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80042fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004304:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004308:	1a9f      	subs	r7, r3, r2
 800430a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800430e:	f001 f86d 	bl	80053ec <__ulp>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4630      	mov	r0, r6
 8004318:	4639      	mov	r1, r7
 800431a:	f7fc f991 	bl	8000640 <__aeabi_dmul>
 800431e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004322:	f7fb ffd7 	bl	80002d4 <__adddf3>
 8004326:	4680      	mov	r8, r0
 8004328:	4689      	mov	r9, r1
 800432a:	e77e      	b.n	800422a <_strtod_l+0xa9a>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004334:	e7e3      	b.n	80042fe <_strtod_l+0xb6e>
 8004336:	a30e      	add	r3, pc, #56	; (adr r3, 8004370 <_strtod_l+0xbe0>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fc fbf2 	bl	8000b24 <__aeabi_dcmplt>
 8004340:	e7a1      	b.n	8004286 <_strtod_l+0xaf6>
 8004342:	2300      	movs	r3, #0
 8004344:	930c      	str	r3, [sp, #48]	; 0x30
 8004346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004348:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	f7ff ba65 	b.w	800381a <_strtod_l+0x8a>
 8004350:	2b65      	cmp	r3, #101	; 0x65
 8004352:	f43f ab5c 	beq.w	8003a0e <_strtod_l+0x27e>
 8004356:	2b45      	cmp	r3, #69	; 0x45
 8004358:	f43f ab59 	beq.w	8003a0e <_strtod_l+0x27e>
 800435c:	2201      	movs	r2, #1
 800435e:	f7ff bb8d 	b.w	8003a7c <_strtod_l+0x2ec>
 8004362:	bf00      	nop
 8004364:	f3af 8000 	nop.w
 8004368:	ffc00000 	.word	0xffc00000
 800436c:	41dfffff 	.word	0x41dfffff
 8004370:	94a03595 	.word	0x94a03595
 8004374:	3fcfffff 	.word	0x3fcfffff

08004378 <strtod>:
 8004378:	460a      	mov	r2, r1
 800437a:	4601      	mov	r1, r0
 800437c:	4802      	ldr	r0, [pc, #8]	; (8004388 <strtod+0x10>)
 800437e:	4b03      	ldr	r3, [pc, #12]	; (800438c <strtod+0x14>)
 8004380:	6800      	ldr	r0, [r0, #0]
 8004382:	f7ff ba05 	b.w	8003790 <_strtod_l>
 8004386:	bf00      	nop
 8004388:	20000088 	.word	0x20000088
 800438c:	200000f0 	.word	0x200000f0

08004390 <print_e>:
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004392:	b08b      	sub	sp, #44	; 0x2c
 8004394:	460d      	mov	r5, r1
 8004396:	a908      	add	r1, sp, #32
 8004398:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800439a:	9104      	str	r1, [sp, #16]
 800439c:	a907      	add	r1, sp, #28
 800439e:	9103      	str	r1, [sp, #12]
 80043a0:	a909      	add	r1, sp, #36	; 0x24
 80043a2:	9102      	str	r1, [sp, #8]
 80043a4:	1c71      	adds	r1, r6, #1
 80043a6:	9101      	str	r1, [sp, #4]
 80043a8:	2102      	movs	r1, #2
 80043aa:	9100      	str	r1, [sp, #0]
 80043ac:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80043b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80043b2:	f001 fad1 	bl	8005958 <_dtoa_r>
 80043b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80043ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043bc:	4601      	mov	r1, r0
 80043be:	429a      	cmp	r2, r3
 80043c0:	d104      	bne.n	80043cc <print_e+0x3c>
 80043c2:	4628      	mov	r0, r5
 80043c4:	f001 f9f4 	bl	80057b0 <strcpy>
 80043c8:	b00b      	add	sp, #44	; 0x2c
 80043ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043cc:	462b      	mov	r3, r5
 80043ce:	7800      	ldrb	r0, [r0, #0]
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	f803 0b01 	strb.w	r0, [r3], #1
 80043d6:	bfc8      	it	gt
 80043d8:	2401      	movgt	r4, #1
 80043da:	4608      	mov	r0, r1
 80043dc:	212e      	movs	r1, #46	; 0x2e
 80043de:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80043e2:	b10d      	cbz	r5, 80043e8 <print_e+0x58>
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	dc36      	bgt.n	8004456 <print_e+0xc6>
 80043e8:	2f67      	cmp	r7, #103	; 0x67
 80043ea:	d045      	beq.n	8004478 <print_e+0xe8>
 80043ec:	2f47      	cmp	r7, #71	; 0x47
 80043ee:	d045      	beq.n	800447c <print_e+0xec>
 80043f0:	212e      	movs	r1, #46	; 0x2e
 80043f2:	2030      	movs	r0, #48	; 0x30
 80043f4:	2e00      	cmp	r6, #0
 80043f6:	dc37      	bgt.n	8004468 <print_e+0xd8>
 80043f8:	1e51      	subs	r1, r2, #1
 80043fa:	2900      	cmp	r1, #0
 80043fc:	9109      	str	r1, [sp, #36]	; 0x24
 80043fe:	4618      	mov	r0, r3
 8004400:	bfb7      	itett	lt
 8004402:	212d      	movlt	r1, #45	; 0x2d
 8004404:	222b      	movge	r2, #43	; 0x2b
 8004406:	f1c2 0201 	rsblt	r2, r2, #1
 800440a:	9209      	strlt	r2, [sp, #36]	; 0x24
 800440c:	f800 7b02 	strb.w	r7, [r0], #2
 8004410:	bfb8      	it	lt
 8004412:	7059      	strblt	r1, [r3, #1]
 8004414:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004416:	bfa8      	it	ge
 8004418:	705a      	strbge	r2, [r3, #1]
 800441a:	2963      	cmp	r1, #99	; 0x63
 800441c:	dd0b      	ble.n	8004436 <print_e+0xa6>
 800441e:	2264      	movs	r2, #100	; 0x64
 8004420:	fb91 f2f2 	sdiv	r2, r1, r2
 8004424:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8004428:	1cd8      	adds	r0, r3, #3
 800442a:	709c      	strb	r4, [r3, #2]
 800442c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004430:	fb03 1202 	mla	r2, r3, r2, r1
 8004434:	9209      	str	r2, [sp, #36]	; 0x24
 8004436:	230a      	movs	r3, #10
 8004438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800443a:	fb92 f3f3 	sdiv	r3, r2, r3
 800443e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004442:	7001      	strb	r1, [r0, #0]
 8004444:	f06f 0109 	mvn.w	r1, #9
 8004448:	fb01 2303 	mla	r3, r1, r3, r2
 800444c:	3330      	adds	r3, #48	; 0x30
 800444e:	7043      	strb	r3, [r0, #1]
 8004450:	2300      	movs	r3, #0
 8004452:	7083      	strb	r3, [r0, #2]
 8004454:	e7b8      	b.n	80043c8 <print_e+0x38>
 8004456:	b10c      	cbz	r4, 800445c <print_e+0xcc>
 8004458:	f803 1b01 	strb.w	r1, [r3], #1
 800445c:	7804      	ldrb	r4, [r0, #0]
 800445e:	3e01      	subs	r6, #1
 8004460:	f803 4b01 	strb.w	r4, [r3], #1
 8004464:	2400      	movs	r4, #0
 8004466:	e7ba      	b.n	80043de <print_e+0x4e>
 8004468:	b10c      	cbz	r4, 800446e <print_e+0xde>
 800446a:	f803 1b01 	strb.w	r1, [r3], #1
 800446e:	2400      	movs	r4, #0
 8004470:	f803 0b01 	strb.w	r0, [r3], #1
 8004474:	3e01      	subs	r6, #1
 8004476:	e7bd      	b.n	80043f4 <print_e+0x64>
 8004478:	2765      	movs	r7, #101	; 0x65
 800447a:	e7bd      	b.n	80043f8 <print_e+0x68>
 800447c:	2745      	movs	r7, #69	; 0x45
 800447e:	e7bb      	b.n	80043f8 <print_e+0x68>

08004480 <_gcvt>:
 8004480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004484:	4690      	mov	r8, r2
 8004486:	461c      	mov	r4, r3
 8004488:	b08b      	sub	sp, #44	; 0x2c
 800448a:	4681      	mov	r9, r0
 800448c:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8004490:	2200      	movs	r2, #0
 8004492:	2300      	movs	r3, #0
 8004494:	4640      	mov	r0, r8
 8004496:	4621      	mov	r1, r4
 8004498:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800449a:	f7fc fb43 	bl	8000b24 <__aeabi_dcmplt>
 800449e:	b108      	cbz	r0, 80044a4 <_gcvt+0x24>
 80044a0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80044a4:	2200      	movs	r2, #0
 80044a6:	2300      	movs	r3, #0
 80044a8:	4640      	mov	r0, r8
 80044aa:	4621      	mov	r1, r4
 80044ac:	f7fc fb30 	bl	8000b10 <__aeabi_dcmpeq>
 80044b0:	b138      	cbz	r0, 80044c2 <_gcvt+0x42>
 80044b2:	2330      	movs	r3, #48	; 0x30
 80044b4:	702b      	strb	r3, [r5, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	706b      	strb	r3, [r5, #1]
 80044ba:	4628      	mov	r0, r5
 80044bc:	b00b      	add	sp, #44	; 0x2c
 80044be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044c2:	4640      	mov	r0, r8
 80044c4:	a34c      	add	r3, pc, #304	; (adr r3, 80045f8 <_gcvt+0x178>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	4621      	mov	r1, r4
 80044cc:	f7fc fb34 	bl	8000b38 <__aeabi_dcmple>
 80044d0:	b160      	cbz	r0, 80044ec <_gcvt+0x6c>
 80044d2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80044d6:	3f01      	subs	r7, #1
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	4642      	mov	r2, r8
 80044dc:	4623      	mov	r3, r4
 80044de:	4629      	mov	r1, r5
 80044e0:	4648      	mov	r0, r9
 80044e2:	9602      	str	r6, [sp, #8]
 80044e4:	9700      	str	r7, [sp, #0]
 80044e6:	f7ff ff53 	bl	8004390 <print_e>
 80044ea:	e7e6      	b.n	80044ba <_gcvt+0x3a>
 80044ec:	4638      	mov	r0, r7
 80044ee:	f001 f881 	bl	80055f4 <_mprec_log10>
 80044f2:	4642      	mov	r2, r8
 80044f4:	4623      	mov	r3, r4
 80044f6:	f7fc fb1f 	bl	8000b38 <__aeabi_dcmple>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d1e9      	bne.n	80044d2 <_gcvt+0x52>
 80044fe:	ab09      	add	r3, sp, #36	; 0x24
 8004500:	9304      	str	r3, [sp, #16]
 8004502:	ab08      	add	r3, sp, #32
 8004504:	9303      	str	r3, [sp, #12]
 8004506:	ab07      	add	r3, sp, #28
 8004508:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800450c:	2302      	movs	r3, #2
 800450e:	4642      	mov	r2, r8
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	4648      	mov	r0, r9
 8004514:	4623      	mov	r3, r4
 8004516:	f001 fa1f 	bl	8005958 <_dtoa_r>
 800451a:	f242 730f 	movw	r3, #9999	; 0x270f
 800451e:	9a07      	ldr	r2, [sp, #28]
 8004520:	4601      	mov	r1, r0
 8004522:	429a      	cmp	r2, r3
 8004524:	d00f      	beq.n	8004546 <_gcvt+0xc6>
 8004526:	462b      	mov	r3, r5
 8004528:	442f      	add	r7, r5
 800452a:	4608      	mov	r0, r1
 800452c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8004530:	9a07      	ldr	r2, [sp, #28]
 8004532:	1afc      	subs	r4, r7, r3
 8004534:	f1bc 0f00 	cmp.w	ip, #0
 8004538:	d001      	beq.n	800453e <_gcvt+0xbe>
 800453a:	2a00      	cmp	r2, #0
 800453c:	dc07      	bgt.n	800454e <_gcvt+0xce>
 800453e:	2100      	movs	r1, #0
 8004540:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8004544:	e00c      	b.n	8004560 <_gcvt+0xe0>
 8004546:	4628      	mov	r0, r5
 8004548:	f001 f932 	bl	80057b0 <strcpy>
 800454c:	e7b5      	b.n	80044ba <_gcvt+0x3a>
 800454e:	3a01      	subs	r2, #1
 8004550:	f803 cb01 	strb.w	ip, [r3], #1
 8004554:	9207      	str	r2, [sp, #28]
 8004556:	e7e8      	b.n	800452a <_gcvt+0xaa>
 8004558:	2101      	movs	r1, #1
 800455a:	f803 cb01 	strb.w	ip, [r3], #1
 800455e:	3c01      	subs	r4, #1
 8004560:	2a00      	cmp	r2, #0
 8004562:	4617      	mov	r7, r2
 8004564:	dc2a      	bgt.n	80045bc <_gcvt+0x13c>
 8004566:	b101      	cbz	r1, 800456a <_gcvt+0xea>
 8004568:	9207      	str	r2, [sp, #28]
 800456a:	b90e      	cbnz	r6, 8004570 <_gcvt+0xf0>
 800456c:	7802      	ldrb	r2, [r0, #0]
 800456e:	b312      	cbz	r2, 80045b6 <_gcvt+0x136>
 8004570:	42ab      	cmp	r3, r5
 8004572:	bf04      	itt	eq
 8004574:	2230      	moveq	r2, #48	; 0x30
 8004576:	f803 2b01 	strbeq.w	r2, [r3], #1
 800457a:	222e      	movs	r2, #46	; 0x2e
 800457c:	4619      	mov	r1, r3
 800457e:	2700      	movs	r7, #0
 8004580:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	9a07      	ldr	r2, [sp, #28]
 8004588:	eba2 0c03 	sub.w	ip, r2, r3
 800458c:	eb1c 0f01 	cmn.w	ip, r1
 8004590:	d41c      	bmi.n	80045cc <_gcvt+0x14c>
 8004592:	2a00      	cmp	r2, #0
 8004594:	f1c2 0100 	rsb	r1, r2, #0
 8004598:	bfc8      	it	gt
 800459a:	2100      	movgt	r1, #0
 800459c:	f101 0c01 	add.w	ip, r1, #1
 80045a0:	4463      	add	r3, ip
 80045a2:	440a      	add	r2, r1
 80045a4:	b107      	cbz	r7, 80045a8 <_gcvt+0x128>
 80045a6:	9207      	str	r2, [sp, #28]
 80045a8:	1e42      	subs	r2, r0, #1
 80045aa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80045ae:	b109      	cbz	r1, 80045b4 <_gcvt+0x134>
 80045b0:	2c00      	cmp	r4, #0
 80045b2:	dc0f      	bgt.n	80045d4 <_gcvt+0x154>
 80045b4:	b9de      	cbnz	r6, 80045ee <_gcvt+0x16e>
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e77e      	b.n	80044ba <_gcvt+0x3a>
 80045bc:	2c00      	cmp	r4, #0
 80045be:	f102 32ff 	add.w	r2, r2, #4294967295
 80045c2:	dcc9      	bgt.n	8004558 <_gcvt+0xd8>
 80045c4:	2900      	cmp	r1, #0
 80045c6:	d0d0      	beq.n	800456a <_gcvt+0xea>
 80045c8:	9707      	str	r7, [sp, #28]
 80045ca:	e7ce      	b.n	800456a <_gcvt+0xea>
 80045cc:	2701      	movs	r7, #1
 80045ce:	f801 ef01 	strb.w	lr, [r1, #1]!
 80045d2:	e7db      	b.n	800458c <_gcvt+0x10c>
 80045d4:	f803 1b01 	strb.w	r1, [r3], #1
 80045d8:	3c01      	subs	r4, #1
 80045da:	e7e6      	b.n	80045aa <_gcvt+0x12a>
 80045dc:	f802 6b01 	strb.w	r6, [r2], #1
 80045e0:	1a81      	subs	r1, r0, r2
 80045e2:	2900      	cmp	r1, #0
 80045e4:	dcfa      	bgt.n	80045dc <_gcvt+0x15c>
 80045e6:	2c00      	cmp	r4, #0
 80045e8:	bfa8      	it	ge
 80045ea:	191b      	addge	r3, r3, r4
 80045ec:	e7e3      	b.n	80045b6 <_gcvt+0x136>
 80045ee:	461a      	mov	r2, r3
 80045f0:	2630      	movs	r6, #48	; 0x30
 80045f2:	1918      	adds	r0, r3, r4
 80045f4:	e7f4      	b.n	80045e0 <_gcvt+0x160>
 80045f6:	bf00      	nop
 80045f8:	eb1c432d 	.word	0xeb1c432d
 80045fc:	3f1a36e2 	.word	0x3f1a36e2

08004600 <rshift>:
 8004600:	6903      	ldr	r3, [r0, #16]
 8004602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004606:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800460a:	f100 0414 	add.w	r4, r0, #20
 800460e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004612:	dd46      	ble.n	80046a2 <rshift+0xa2>
 8004614:	f011 011f 	ands.w	r1, r1, #31
 8004618:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800461c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004620:	d10c      	bne.n	800463c <rshift+0x3c>
 8004622:	4629      	mov	r1, r5
 8004624:	f100 0710 	add.w	r7, r0, #16
 8004628:	42b1      	cmp	r1, r6
 800462a:	d335      	bcc.n	8004698 <rshift+0x98>
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	1eea      	subs	r2, r5, #3
 8004632:	4296      	cmp	r6, r2
 8004634:	bf38      	it	cc
 8004636:	2300      	movcc	r3, #0
 8004638:	4423      	add	r3, r4
 800463a:	e015      	b.n	8004668 <rshift+0x68>
 800463c:	46a1      	mov	r9, r4
 800463e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004642:	f1c1 0820 	rsb	r8, r1, #32
 8004646:	40cf      	lsrs	r7, r1
 8004648:	f105 0e04 	add.w	lr, r5, #4
 800464c:	4576      	cmp	r6, lr
 800464e:	46f4      	mov	ip, lr
 8004650:	d816      	bhi.n	8004680 <rshift+0x80>
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009a      	lsls	r2, r3, #2
 8004656:	3a04      	subs	r2, #4
 8004658:	3501      	adds	r5, #1
 800465a:	42ae      	cmp	r6, r5
 800465c:	bf38      	it	cc
 800465e:	2200      	movcc	r2, #0
 8004660:	18a3      	adds	r3, r4, r2
 8004662:	50a7      	str	r7, [r4, r2]
 8004664:	b107      	cbz	r7, 8004668 <rshift+0x68>
 8004666:	3304      	adds	r3, #4
 8004668:	42a3      	cmp	r3, r4
 800466a:	eba3 0204 	sub.w	r2, r3, r4
 800466e:	bf08      	it	eq
 8004670:	2300      	moveq	r3, #0
 8004672:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004676:	6102      	str	r2, [r0, #16]
 8004678:	bf08      	it	eq
 800467a:	6143      	streq	r3, [r0, #20]
 800467c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004680:	f8dc c000 	ldr.w	ip, [ip]
 8004684:	fa0c fc08 	lsl.w	ip, ip, r8
 8004688:	ea4c 0707 	orr.w	r7, ip, r7
 800468c:	f849 7b04 	str.w	r7, [r9], #4
 8004690:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004694:	40cf      	lsrs	r7, r1
 8004696:	e7d9      	b.n	800464c <rshift+0x4c>
 8004698:	f851 cb04 	ldr.w	ip, [r1], #4
 800469c:	f847 cf04 	str.w	ip, [r7, #4]!
 80046a0:	e7c2      	b.n	8004628 <rshift+0x28>
 80046a2:	4623      	mov	r3, r4
 80046a4:	e7e0      	b.n	8004668 <rshift+0x68>

080046a6 <__hexdig_fun>:
 80046a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	d802      	bhi.n	80046b4 <__hexdig_fun+0xe>
 80046ae:	3820      	subs	r0, #32
 80046b0:	b2c0      	uxtb	r0, r0
 80046b2:	4770      	bx	lr
 80046b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	d801      	bhi.n	80046c0 <__hexdig_fun+0x1a>
 80046bc:	3847      	subs	r0, #71	; 0x47
 80046be:	e7f7      	b.n	80046b0 <__hexdig_fun+0xa>
 80046c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80046c4:	2b05      	cmp	r3, #5
 80046c6:	d801      	bhi.n	80046cc <__hexdig_fun+0x26>
 80046c8:	3827      	subs	r0, #39	; 0x27
 80046ca:	e7f1      	b.n	80046b0 <__hexdig_fun+0xa>
 80046cc:	2000      	movs	r0, #0
 80046ce:	4770      	bx	lr

080046d0 <__gethex>:
 80046d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	b08b      	sub	sp, #44	; 0x2c
 80046d6:	9306      	str	r3, [sp, #24]
 80046d8:	4bb9      	ldr	r3, [pc, #740]	; (80049c0 <__gethex+0x2f0>)
 80046da:	9002      	str	r0, [sp, #8]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	468b      	mov	fp, r1
 80046e0:	4618      	mov	r0, r3
 80046e2:	4690      	mov	r8, r2
 80046e4:	9303      	str	r3, [sp, #12]
 80046e6:	f7fb fd33 	bl	8000150 <strlen>
 80046ea:	4682      	mov	sl, r0
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	f8db 2000 	ldr.w	r2, [fp]
 80046f2:	4403      	add	r3, r0
 80046f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80046f8:	9307      	str	r3, [sp, #28]
 80046fa:	1c93      	adds	r3, r2, #2
 80046fc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004700:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004704:	32fe      	adds	r2, #254	; 0xfe
 8004706:	18d1      	adds	r1, r2, r3
 8004708:	461f      	mov	r7, r3
 800470a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800470e:	9101      	str	r1, [sp, #4]
 8004710:	2830      	cmp	r0, #48	; 0x30
 8004712:	d0f8      	beq.n	8004706 <__gethex+0x36>
 8004714:	f7ff ffc7 	bl	80046a6 <__hexdig_fun>
 8004718:	4604      	mov	r4, r0
 800471a:	2800      	cmp	r0, #0
 800471c:	d13a      	bne.n	8004794 <__gethex+0xc4>
 800471e:	4652      	mov	r2, sl
 8004720:	4638      	mov	r0, r7
 8004722:	9903      	ldr	r1, [sp, #12]
 8004724:	f001 f84c 	bl	80057c0 <strncmp>
 8004728:	4605      	mov	r5, r0
 800472a:	2800      	cmp	r0, #0
 800472c:	d166      	bne.n	80047fc <__gethex+0x12c>
 800472e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004732:	eb07 060a 	add.w	r6, r7, sl
 8004736:	f7ff ffb6 	bl	80046a6 <__hexdig_fun>
 800473a:	2800      	cmp	r0, #0
 800473c:	d060      	beq.n	8004800 <__gethex+0x130>
 800473e:	4633      	mov	r3, r6
 8004740:	7818      	ldrb	r0, [r3, #0]
 8004742:	461f      	mov	r7, r3
 8004744:	2830      	cmp	r0, #48	; 0x30
 8004746:	f103 0301 	add.w	r3, r3, #1
 800474a:	d0f9      	beq.n	8004740 <__gethex+0x70>
 800474c:	f7ff ffab 	bl	80046a6 <__hexdig_fun>
 8004750:	2301      	movs	r3, #1
 8004752:	fab0 f480 	clz	r4, r0
 8004756:	4635      	mov	r5, r6
 8004758:	0964      	lsrs	r4, r4, #5
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	463a      	mov	r2, r7
 800475e:	4616      	mov	r6, r2
 8004760:	7830      	ldrb	r0, [r6, #0]
 8004762:	3201      	adds	r2, #1
 8004764:	f7ff ff9f 	bl	80046a6 <__hexdig_fun>
 8004768:	2800      	cmp	r0, #0
 800476a:	d1f8      	bne.n	800475e <__gethex+0x8e>
 800476c:	4652      	mov	r2, sl
 800476e:	4630      	mov	r0, r6
 8004770:	9903      	ldr	r1, [sp, #12]
 8004772:	f001 f825 	bl	80057c0 <strncmp>
 8004776:	b980      	cbnz	r0, 800479a <__gethex+0xca>
 8004778:	b94d      	cbnz	r5, 800478e <__gethex+0xbe>
 800477a:	eb06 050a 	add.w	r5, r6, sl
 800477e:	462a      	mov	r2, r5
 8004780:	4616      	mov	r6, r2
 8004782:	7830      	ldrb	r0, [r6, #0]
 8004784:	3201      	adds	r2, #1
 8004786:	f7ff ff8e 	bl	80046a6 <__hexdig_fun>
 800478a:	2800      	cmp	r0, #0
 800478c:	d1f8      	bne.n	8004780 <__gethex+0xb0>
 800478e:	1bad      	subs	r5, r5, r6
 8004790:	00ad      	lsls	r5, r5, #2
 8004792:	e004      	b.n	800479e <__gethex+0xce>
 8004794:	2400      	movs	r4, #0
 8004796:	4625      	mov	r5, r4
 8004798:	e7e0      	b.n	800475c <__gethex+0x8c>
 800479a:	2d00      	cmp	r5, #0
 800479c:	d1f7      	bne.n	800478e <__gethex+0xbe>
 800479e:	7833      	ldrb	r3, [r6, #0]
 80047a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80047a4:	2b50      	cmp	r3, #80	; 0x50
 80047a6:	d139      	bne.n	800481c <__gethex+0x14c>
 80047a8:	7873      	ldrb	r3, [r6, #1]
 80047aa:	2b2b      	cmp	r3, #43	; 0x2b
 80047ac:	d02a      	beq.n	8004804 <__gethex+0x134>
 80047ae:	2b2d      	cmp	r3, #45	; 0x2d
 80047b0:	d02c      	beq.n	800480c <__gethex+0x13c>
 80047b2:	f04f 0900 	mov.w	r9, #0
 80047b6:	1c71      	adds	r1, r6, #1
 80047b8:	7808      	ldrb	r0, [r1, #0]
 80047ba:	f7ff ff74 	bl	80046a6 <__hexdig_fun>
 80047be:	1e43      	subs	r3, r0, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b18      	cmp	r3, #24
 80047c4:	d82a      	bhi.n	800481c <__gethex+0x14c>
 80047c6:	f1a0 0210 	sub.w	r2, r0, #16
 80047ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80047ce:	f7ff ff6a 	bl	80046a6 <__hexdig_fun>
 80047d2:	1e43      	subs	r3, r0, #1
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b18      	cmp	r3, #24
 80047d8:	d91b      	bls.n	8004812 <__gethex+0x142>
 80047da:	f1b9 0f00 	cmp.w	r9, #0
 80047de:	d000      	beq.n	80047e2 <__gethex+0x112>
 80047e0:	4252      	negs	r2, r2
 80047e2:	4415      	add	r5, r2
 80047e4:	f8cb 1000 	str.w	r1, [fp]
 80047e8:	b1d4      	cbz	r4, 8004820 <__gethex+0x150>
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf14      	ite	ne
 80047f0:	2700      	movne	r7, #0
 80047f2:	2706      	moveq	r7, #6
 80047f4:	4638      	mov	r0, r7
 80047f6:	b00b      	add	sp, #44	; 0x2c
 80047f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fc:	463e      	mov	r6, r7
 80047fe:	4625      	mov	r5, r4
 8004800:	2401      	movs	r4, #1
 8004802:	e7cc      	b.n	800479e <__gethex+0xce>
 8004804:	f04f 0900 	mov.w	r9, #0
 8004808:	1cb1      	adds	r1, r6, #2
 800480a:	e7d5      	b.n	80047b8 <__gethex+0xe8>
 800480c:	f04f 0901 	mov.w	r9, #1
 8004810:	e7fa      	b.n	8004808 <__gethex+0x138>
 8004812:	230a      	movs	r3, #10
 8004814:	fb03 0202 	mla	r2, r3, r2, r0
 8004818:	3a10      	subs	r2, #16
 800481a:	e7d6      	b.n	80047ca <__gethex+0xfa>
 800481c:	4631      	mov	r1, r6
 800481e:	e7e1      	b.n	80047e4 <__gethex+0x114>
 8004820:	4621      	mov	r1, r4
 8004822:	1bf3      	subs	r3, r6, r7
 8004824:	3b01      	subs	r3, #1
 8004826:	2b07      	cmp	r3, #7
 8004828:	dc0a      	bgt.n	8004840 <__gethex+0x170>
 800482a:	9802      	ldr	r0, [sp, #8]
 800482c:	f000 fa6e 	bl	8004d0c <_Balloc>
 8004830:	4604      	mov	r4, r0
 8004832:	b940      	cbnz	r0, 8004846 <__gethex+0x176>
 8004834:	4602      	mov	r2, r0
 8004836:	21de      	movs	r1, #222	; 0xde
 8004838:	4b62      	ldr	r3, [pc, #392]	; (80049c4 <__gethex+0x2f4>)
 800483a:	4863      	ldr	r0, [pc, #396]	; (80049c8 <__gethex+0x2f8>)
 800483c:	f000 ffe0 	bl	8005800 <__assert_func>
 8004840:	3101      	adds	r1, #1
 8004842:	105b      	asrs	r3, r3, #1
 8004844:	e7ef      	b.n	8004826 <__gethex+0x156>
 8004846:	f04f 0b00 	mov.w	fp, #0
 800484a:	f100 0914 	add.w	r9, r0, #20
 800484e:	f1ca 0301 	rsb	r3, sl, #1
 8004852:	f8cd 9010 	str.w	r9, [sp, #16]
 8004856:	f8cd b004 	str.w	fp, [sp, #4]
 800485a:	9308      	str	r3, [sp, #32]
 800485c:	42b7      	cmp	r7, r6
 800485e:	d33f      	bcc.n	80048e0 <__gethex+0x210>
 8004860:	9f04      	ldr	r7, [sp, #16]
 8004862:	9b01      	ldr	r3, [sp, #4]
 8004864:	f847 3b04 	str.w	r3, [r7], #4
 8004868:	eba7 0709 	sub.w	r7, r7, r9
 800486c:	10bf      	asrs	r7, r7, #2
 800486e:	6127      	str	r7, [r4, #16]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fb41 	bl	8004ef8 <__hi0bits>
 8004876:	017f      	lsls	r7, r7, #5
 8004878:	f8d8 6000 	ldr.w	r6, [r8]
 800487c:	1a3f      	subs	r7, r7, r0
 800487e:	42b7      	cmp	r7, r6
 8004880:	dd62      	ble.n	8004948 <__gethex+0x278>
 8004882:	1bbf      	subs	r7, r7, r6
 8004884:	4639      	mov	r1, r7
 8004886:	4620      	mov	r0, r4
 8004888:	f000 fef3 	bl	8005672 <__any_on>
 800488c:	4682      	mov	sl, r0
 800488e:	b1a8      	cbz	r0, 80048bc <__gethex+0x1ec>
 8004890:	f04f 0a01 	mov.w	sl, #1
 8004894:	1e7b      	subs	r3, r7, #1
 8004896:	1159      	asrs	r1, r3, #5
 8004898:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	fa0a f202 	lsl.w	r2, sl, r2
 80048a4:	420a      	tst	r2, r1
 80048a6:	d009      	beq.n	80048bc <__gethex+0x1ec>
 80048a8:	4553      	cmp	r3, sl
 80048aa:	dd05      	ble.n	80048b8 <__gethex+0x1e8>
 80048ac:	4620      	mov	r0, r4
 80048ae:	1eb9      	subs	r1, r7, #2
 80048b0:	f000 fedf 	bl	8005672 <__any_on>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d144      	bne.n	8004942 <__gethex+0x272>
 80048b8:	f04f 0a02 	mov.w	sl, #2
 80048bc:	4639      	mov	r1, r7
 80048be:	4620      	mov	r0, r4
 80048c0:	f7ff fe9e 	bl	8004600 <rshift>
 80048c4:	443d      	add	r5, r7
 80048c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80048ca:	42ab      	cmp	r3, r5
 80048cc:	da4a      	bge.n	8004964 <__gethex+0x294>
 80048ce:	4621      	mov	r1, r4
 80048d0:	9802      	ldr	r0, [sp, #8]
 80048d2:	f000 fa5b 	bl	8004d8c <_Bfree>
 80048d6:	2300      	movs	r3, #0
 80048d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80048da:	27a3      	movs	r7, #163	; 0xa3
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e789      	b.n	80047f4 <__gethex+0x124>
 80048e0:	1e73      	subs	r3, r6, #1
 80048e2:	9a07      	ldr	r2, [sp, #28]
 80048e4:	9305      	str	r3, [sp, #20]
 80048e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d019      	beq.n	8004922 <__gethex+0x252>
 80048ee:	f1bb 0f20 	cmp.w	fp, #32
 80048f2:	d107      	bne.n	8004904 <__gethex+0x234>
 80048f4:	9b04      	ldr	r3, [sp, #16]
 80048f6:	9a01      	ldr	r2, [sp, #4]
 80048f8:	f843 2b04 	str.w	r2, [r3], #4
 80048fc:	9304      	str	r3, [sp, #16]
 80048fe:	2300      	movs	r3, #0
 8004900:	469b      	mov	fp, r3
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004908:	f7ff fecd 	bl	80046a6 <__hexdig_fun>
 800490c:	9b01      	ldr	r3, [sp, #4]
 800490e:	f000 000f 	and.w	r0, r0, #15
 8004912:	fa00 f00b 	lsl.w	r0, r0, fp
 8004916:	4303      	orrs	r3, r0
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	f10b 0b04 	add.w	fp, fp, #4
 800491e:	9b05      	ldr	r3, [sp, #20]
 8004920:	e00d      	b.n	800493e <__gethex+0x26e>
 8004922:	9b05      	ldr	r3, [sp, #20]
 8004924:	9a08      	ldr	r2, [sp, #32]
 8004926:	4413      	add	r3, r2
 8004928:	42bb      	cmp	r3, r7
 800492a:	d3e0      	bcc.n	80048ee <__gethex+0x21e>
 800492c:	4618      	mov	r0, r3
 800492e:	4652      	mov	r2, sl
 8004930:	9903      	ldr	r1, [sp, #12]
 8004932:	9309      	str	r3, [sp, #36]	; 0x24
 8004934:	f000 ff44 	bl	80057c0 <strncmp>
 8004938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493a:	2800      	cmp	r0, #0
 800493c:	d1d7      	bne.n	80048ee <__gethex+0x21e>
 800493e:	461e      	mov	r6, r3
 8004940:	e78c      	b.n	800485c <__gethex+0x18c>
 8004942:	f04f 0a03 	mov.w	sl, #3
 8004946:	e7b9      	b.n	80048bc <__gethex+0x1ec>
 8004948:	da09      	bge.n	800495e <__gethex+0x28e>
 800494a:	1bf7      	subs	r7, r6, r7
 800494c:	4621      	mov	r1, r4
 800494e:	463a      	mov	r2, r7
 8004950:	9802      	ldr	r0, [sp, #8]
 8004952:	f000 fc33 	bl	80051bc <__lshift>
 8004956:	4604      	mov	r4, r0
 8004958:	1bed      	subs	r5, r5, r7
 800495a:	f100 0914 	add.w	r9, r0, #20
 800495e:	f04f 0a00 	mov.w	sl, #0
 8004962:	e7b0      	b.n	80048c6 <__gethex+0x1f6>
 8004964:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004968:	42a8      	cmp	r0, r5
 800496a:	dd71      	ble.n	8004a50 <__gethex+0x380>
 800496c:	1b45      	subs	r5, r0, r5
 800496e:	42ae      	cmp	r6, r5
 8004970:	dc34      	bgt.n	80049dc <__gethex+0x30c>
 8004972:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d028      	beq.n	80049cc <__gethex+0x2fc>
 800497a:	2b03      	cmp	r3, #3
 800497c:	d02a      	beq.n	80049d4 <__gethex+0x304>
 800497e:	2b01      	cmp	r3, #1
 8004980:	d115      	bne.n	80049ae <__gethex+0x2de>
 8004982:	42ae      	cmp	r6, r5
 8004984:	d113      	bne.n	80049ae <__gethex+0x2de>
 8004986:	2e01      	cmp	r6, #1
 8004988:	d10b      	bne.n	80049a2 <__gethex+0x2d2>
 800498a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800498e:	9a06      	ldr	r2, [sp, #24]
 8004990:	2762      	movs	r7, #98	; 0x62
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	2301      	movs	r3, #1
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	f8c9 3000 	str.w	r3, [r9]
 800499c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800499e:	601c      	str	r4, [r3, #0]
 80049a0:	e728      	b.n	80047f4 <__gethex+0x124>
 80049a2:	4620      	mov	r0, r4
 80049a4:	1e71      	subs	r1, r6, #1
 80049a6:	f000 fe64 	bl	8005672 <__any_on>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d1ed      	bne.n	800498a <__gethex+0x2ba>
 80049ae:	4621      	mov	r1, r4
 80049b0:	9802      	ldr	r0, [sp, #8]
 80049b2:	f000 f9eb 	bl	8004d8c <_Bfree>
 80049b6:	2300      	movs	r3, #0
 80049b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80049ba:	2750      	movs	r7, #80	; 0x50
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e719      	b.n	80047f4 <__gethex+0x124>
 80049c0:	08008564 	.word	0x08008564
 80049c4:	080084e8 	.word	0x080084e8
 80049c8:	080084f9 	.word	0x080084f9
 80049cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1ed      	bne.n	80049ae <__gethex+0x2de>
 80049d2:	e7da      	b.n	800498a <__gethex+0x2ba>
 80049d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1d7      	bne.n	800498a <__gethex+0x2ba>
 80049da:	e7e8      	b.n	80049ae <__gethex+0x2de>
 80049dc:	1e6f      	subs	r7, r5, #1
 80049de:	f1ba 0f00 	cmp.w	sl, #0
 80049e2:	d132      	bne.n	8004a4a <__gethex+0x37a>
 80049e4:	b127      	cbz	r7, 80049f0 <__gethex+0x320>
 80049e6:	4639      	mov	r1, r7
 80049e8:	4620      	mov	r0, r4
 80049ea:	f000 fe42 	bl	8005672 <__any_on>
 80049ee:	4682      	mov	sl, r0
 80049f0:	2101      	movs	r1, #1
 80049f2:	117b      	asrs	r3, r7, #5
 80049f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80049f8:	f007 071f 	and.w	r7, r7, #31
 80049fc:	fa01 f707 	lsl.w	r7, r1, r7
 8004a00:	421f      	tst	r7, r3
 8004a02:	f04f 0702 	mov.w	r7, #2
 8004a06:	4629      	mov	r1, r5
 8004a08:	4620      	mov	r0, r4
 8004a0a:	bf18      	it	ne
 8004a0c:	f04a 0a02 	orrne.w	sl, sl, #2
 8004a10:	1b76      	subs	r6, r6, r5
 8004a12:	f7ff fdf5 	bl	8004600 <rshift>
 8004a16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004a1a:	f1ba 0f00 	cmp.w	sl, #0
 8004a1e:	d048      	beq.n	8004ab2 <__gethex+0x3e2>
 8004a20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d015      	beq.n	8004a54 <__gethex+0x384>
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d017      	beq.n	8004a5c <__gethex+0x38c>
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d109      	bne.n	8004a44 <__gethex+0x374>
 8004a30:	f01a 0f02 	tst.w	sl, #2
 8004a34:	d006      	beq.n	8004a44 <__gethex+0x374>
 8004a36:	f8d9 0000 	ldr.w	r0, [r9]
 8004a3a:	ea4a 0a00 	orr.w	sl, sl, r0
 8004a3e:	f01a 0f01 	tst.w	sl, #1
 8004a42:	d10e      	bne.n	8004a62 <__gethex+0x392>
 8004a44:	f047 0710 	orr.w	r7, r7, #16
 8004a48:	e033      	b.n	8004ab2 <__gethex+0x3e2>
 8004a4a:	f04f 0a01 	mov.w	sl, #1
 8004a4e:	e7cf      	b.n	80049f0 <__gethex+0x320>
 8004a50:	2701      	movs	r7, #1
 8004a52:	e7e2      	b.n	8004a1a <__gethex+0x34a>
 8004a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a56:	f1c3 0301 	rsb	r3, r3, #1
 8004a5a:	9315      	str	r3, [sp, #84]	; 0x54
 8004a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <__gethex+0x374>
 8004a62:	f04f 0c00 	mov.w	ip, #0
 8004a66:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004a6a:	f104 0314 	add.w	r3, r4, #20
 8004a6e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004a72:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004a80:	d01c      	beq.n	8004abc <__gethex+0x3ec>
 8004a82:	3201      	adds	r2, #1
 8004a84:	6002      	str	r2, [r0, #0]
 8004a86:	2f02      	cmp	r7, #2
 8004a88:	f104 0314 	add.w	r3, r4, #20
 8004a8c:	d13d      	bne.n	8004b0a <__gethex+0x43a>
 8004a8e:	f8d8 2000 	ldr.w	r2, [r8]
 8004a92:	3a01      	subs	r2, #1
 8004a94:	42b2      	cmp	r2, r6
 8004a96:	d10a      	bne.n	8004aae <__gethex+0x3de>
 8004a98:	2201      	movs	r2, #1
 8004a9a:	1171      	asrs	r1, r6, #5
 8004a9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004aa0:	f006 061f 	and.w	r6, r6, #31
 8004aa4:	fa02 f606 	lsl.w	r6, r2, r6
 8004aa8:	421e      	tst	r6, r3
 8004aaa:	bf18      	it	ne
 8004aac:	4617      	movne	r7, r2
 8004aae:	f047 0720 	orr.w	r7, r7, #32
 8004ab2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ab4:	601c      	str	r4, [r3, #0]
 8004ab6:	9b06      	ldr	r3, [sp, #24]
 8004ab8:	601d      	str	r5, [r3, #0]
 8004aba:	e69b      	b.n	80047f4 <__gethex+0x124>
 8004abc:	4299      	cmp	r1, r3
 8004abe:	f843 cc04 	str.w	ip, [r3, #-4]
 8004ac2:	d8d8      	bhi.n	8004a76 <__gethex+0x3a6>
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	459b      	cmp	fp, r3
 8004ac8:	db17      	blt.n	8004afa <__gethex+0x42a>
 8004aca:	6861      	ldr	r1, [r4, #4]
 8004acc:	9802      	ldr	r0, [sp, #8]
 8004ace:	3101      	adds	r1, #1
 8004ad0:	f000 f91c 	bl	8004d0c <_Balloc>
 8004ad4:	4681      	mov	r9, r0
 8004ad6:	b918      	cbnz	r0, 8004ae0 <__gethex+0x410>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	2184      	movs	r1, #132	; 0x84
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <__gethex+0x474>)
 8004ade:	e6ac      	b.n	800483a <__gethex+0x16a>
 8004ae0:	6922      	ldr	r2, [r4, #16]
 8004ae2:	f104 010c 	add.w	r1, r4, #12
 8004ae6:	3202      	adds	r2, #2
 8004ae8:	0092      	lsls	r2, r2, #2
 8004aea:	300c      	adds	r0, #12
 8004aec:	f000 f900 	bl	8004cf0 <memcpy>
 8004af0:	4621      	mov	r1, r4
 8004af2:	9802      	ldr	r0, [sp, #8]
 8004af4:	f000 f94a 	bl	8004d8c <_Bfree>
 8004af8:	464c      	mov	r4, r9
 8004afa:	6923      	ldr	r3, [r4, #16]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	6122      	str	r2, [r4, #16]
 8004b00:	2201      	movs	r2, #1
 8004b02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b06:	615a      	str	r2, [r3, #20]
 8004b08:	e7bd      	b.n	8004a86 <__gethex+0x3b6>
 8004b0a:	6922      	ldr	r2, [r4, #16]
 8004b0c:	455a      	cmp	r2, fp
 8004b0e:	dd0b      	ble.n	8004b28 <__gethex+0x458>
 8004b10:	2101      	movs	r1, #1
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7ff fd74 	bl	8004600 <rshift>
 8004b18:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004b1c:	3501      	adds	r5, #1
 8004b1e:	42ab      	cmp	r3, r5
 8004b20:	f6ff aed5 	blt.w	80048ce <__gethex+0x1fe>
 8004b24:	2701      	movs	r7, #1
 8004b26:	e7c2      	b.n	8004aae <__gethex+0x3de>
 8004b28:	f016 061f 	ands.w	r6, r6, #31
 8004b2c:	d0fa      	beq.n	8004b24 <__gethex+0x454>
 8004b2e:	449a      	add	sl, r3
 8004b30:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004b34:	f000 f9e0 	bl	8004ef8 <__hi0bits>
 8004b38:	f1c6 0620 	rsb	r6, r6, #32
 8004b3c:	42b0      	cmp	r0, r6
 8004b3e:	dbe7      	blt.n	8004b10 <__gethex+0x440>
 8004b40:	e7f0      	b.n	8004b24 <__gethex+0x454>
 8004b42:	bf00      	nop
 8004b44:	080084e8 	.word	0x080084e8

08004b48 <L_shift>:
 8004b48:	f1c2 0208 	rsb	r2, r2, #8
 8004b4c:	0092      	lsls	r2, r2, #2
 8004b4e:	b570      	push	{r4, r5, r6, lr}
 8004b50:	f1c2 0620 	rsb	r6, r2, #32
 8004b54:	6843      	ldr	r3, [r0, #4]
 8004b56:	6804      	ldr	r4, [r0, #0]
 8004b58:	fa03 f506 	lsl.w	r5, r3, r6
 8004b5c:	432c      	orrs	r4, r5
 8004b5e:	40d3      	lsrs	r3, r2
 8004b60:	6004      	str	r4, [r0, #0]
 8004b62:	f840 3f04 	str.w	r3, [r0, #4]!
 8004b66:	4288      	cmp	r0, r1
 8004b68:	d3f4      	bcc.n	8004b54 <L_shift+0xc>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}

08004b6c <__match>:
 8004b6c:	b530      	push	{r4, r5, lr}
 8004b6e:	6803      	ldr	r3, [r0, #0]
 8004b70:	3301      	adds	r3, #1
 8004b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b76:	b914      	cbnz	r4, 8004b7e <__match+0x12>
 8004b78:	6003      	str	r3, [r0, #0]
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	bd30      	pop	{r4, r5, pc}
 8004b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004b86:	2d19      	cmp	r5, #25
 8004b88:	bf98      	it	ls
 8004b8a:	3220      	addls	r2, #32
 8004b8c:	42a2      	cmp	r2, r4
 8004b8e:	d0f0      	beq.n	8004b72 <__match+0x6>
 8004b90:	2000      	movs	r0, #0
 8004b92:	e7f3      	b.n	8004b7c <__match+0x10>

08004b94 <__hexnan>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	2500      	movs	r5, #0
 8004b9a:	680b      	ldr	r3, [r1, #0]
 8004b9c:	4682      	mov	sl, r0
 8004b9e:	115e      	asrs	r6, r3, #5
 8004ba0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004ba4:	f013 031f 	ands.w	r3, r3, #31
 8004ba8:	bf18      	it	ne
 8004baa:	3604      	addne	r6, #4
 8004bac:	1f37      	subs	r7, r6, #4
 8004bae:	4690      	mov	r8, r2
 8004bb0:	46b9      	mov	r9, r7
 8004bb2:	463c      	mov	r4, r7
 8004bb4:	46ab      	mov	fp, r5
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	6801      	ldr	r1, [r0, #0]
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	f846 5c04 	str.w	r5, [r6, #-4]
 8004bc0:	9502      	str	r5, [sp, #8]
 8004bc2:	784a      	ldrb	r2, [r1, #1]
 8004bc4:	1c4b      	adds	r3, r1, #1
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	b342      	cbz	r2, 8004c1c <__hexnan+0x88>
 8004bca:	4610      	mov	r0, r2
 8004bcc:	9105      	str	r1, [sp, #20]
 8004bce:	9204      	str	r2, [sp, #16]
 8004bd0:	f7ff fd69 	bl	80046a6 <__hexdig_fun>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d14f      	bne.n	8004c78 <__hexnan+0xe4>
 8004bd8:	9a04      	ldr	r2, [sp, #16]
 8004bda:	9905      	ldr	r1, [sp, #20]
 8004bdc:	2a20      	cmp	r2, #32
 8004bde:	d818      	bhi.n	8004c12 <__hexnan+0x7e>
 8004be0:	9b02      	ldr	r3, [sp, #8]
 8004be2:	459b      	cmp	fp, r3
 8004be4:	dd13      	ble.n	8004c0e <__hexnan+0x7a>
 8004be6:	454c      	cmp	r4, r9
 8004be8:	d206      	bcs.n	8004bf8 <__hexnan+0x64>
 8004bea:	2d07      	cmp	r5, #7
 8004bec:	dc04      	bgt.n	8004bf8 <__hexnan+0x64>
 8004bee:	462a      	mov	r2, r5
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff ffa8 	bl	8004b48 <L_shift>
 8004bf8:	4544      	cmp	r4, r8
 8004bfa:	d950      	bls.n	8004c9e <__hexnan+0x10a>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f1a4 0904 	sub.w	r9, r4, #4
 8004c02:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c06:	461d      	mov	r5, r3
 8004c08:	464c      	mov	r4, r9
 8004c0a:	f8cd b008 	str.w	fp, [sp, #8]
 8004c0e:	9903      	ldr	r1, [sp, #12]
 8004c10:	e7d7      	b.n	8004bc2 <__hexnan+0x2e>
 8004c12:	2a29      	cmp	r2, #41	; 0x29
 8004c14:	d156      	bne.n	8004cc4 <__hexnan+0x130>
 8004c16:	3102      	adds	r1, #2
 8004c18:	f8ca 1000 	str.w	r1, [sl]
 8004c1c:	f1bb 0f00 	cmp.w	fp, #0
 8004c20:	d050      	beq.n	8004cc4 <__hexnan+0x130>
 8004c22:	454c      	cmp	r4, r9
 8004c24:	d206      	bcs.n	8004c34 <__hexnan+0xa0>
 8004c26:	2d07      	cmp	r5, #7
 8004c28:	dc04      	bgt.n	8004c34 <__hexnan+0xa0>
 8004c2a:	462a      	mov	r2, r5
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f7ff ff8a 	bl	8004b48 <L_shift>
 8004c34:	4544      	cmp	r4, r8
 8004c36:	d934      	bls.n	8004ca2 <__hexnan+0x10e>
 8004c38:	4623      	mov	r3, r4
 8004c3a:	f1a8 0204 	sub.w	r2, r8, #4
 8004c3e:	f853 1b04 	ldr.w	r1, [r3], #4
 8004c42:	429f      	cmp	r7, r3
 8004c44:	f842 1f04 	str.w	r1, [r2, #4]!
 8004c48:	d2f9      	bcs.n	8004c3e <__hexnan+0xaa>
 8004c4a:	1b3b      	subs	r3, r7, r4
 8004c4c:	f023 0303 	bic.w	r3, r3, #3
 8004c50:	3304      	adds	r3, #4
 8004c52:	3401      	adds	r4, #1
 8004c54:	3e03      	subs	r6, #3
 8004c56:	42b4      	cmp	r4, r6
 8004c58:	bf88      	it	hi
 8004c5a:	2304      	movhi	r3, #4
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4443      	add	r3, r8
 8004c60:	f843 2b04 	str.w	r2, [r3], #4
 8004c64:	429f      	cmp	r7, r3
 8004c66:	d2fb      	bcs.n	8004c60 <__hexnan+0xcc>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	b91b      	cbnz	r3, 8004c74 <__hexnan+0xe0>
 8004c6c:	4547      	cmp	r7, r8
 8004c6e:	d127      	bne.n	8004cc0 <__hexnan+0x12c>
 8004c70:	2301      	movs	r3, #1
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	2005      	movs	r0, #5
 8004c76:	e026      	b.n	8004cc6 <__hexnan+0x132>
 8004c78:	3501      	adds	r5, #1
 8004c7a:	2d08      	cmp	r5, #8
 8004c7c:	f10b 0b01 	add.w	fp, fp, #1
 8004c80:	dd06      	ble.n	8004c90 <__hexnan+0xfc>
 8004c82:	4544      	cmp	r4, r8
 8004c84:	d9c3      	bls.n	8004c0e <__hexnan+0x7a>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2501      	movs	r5, #1
 8004c8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c8e:	3c04      	subs	r4, #4
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	f000 000f 	and.w	r0, r0, #15
 8004c96:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004c9a:	6022      	str	r2, [r4, #0]
 8004c9c:	e7b7      	b.n	8004c0e <__hexnan+0x7a>
 8004c9e:	2508      	movs	r5, #8
 8004ca0:	e7b5      	b.n	8004c0e <__hexnan+0x7a>
 8004ca2:	9b01      	ldr	r3, [sp, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0df      	beq.n	8004c68 <__hexnan+0xd4>
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	f1c3 0320 	rsb	r3, r3, #32
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004cb8:	401a      	ands	r2, r3
 8004cba:	f846 2c04 	str.w	r2, [r6, #-4]
 8004cbe:	e7d3      	b.n	8004c68 <__hexnan+0xd4>
 8004cc0:	3f04      	subs	r7, #4
 8004cc2:	e7d1      	b.n	8004c68 <__hexnan+0xd4>
 8004cc4:	2004      	movs	r0, #4
 8004cc6:	b007      	add	sp, #28
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004ccc <__ascii_mbtowc>:
 8004ccc:	b082      	sub	sp, #8
 8004cce:	b901      	cbnz	r1, 8004cd2 <__ascii_mbtowc+0x6>
 8004cd0:	a901      	add	r1, sp, #4
 8004cd2:	b142      	cbz	r2, 8004ce6 <__ascii_mbtowc+0x1a>
 8004cd4:	b14b      	cbz	r3, 8004cea <__ascii_mbtowc+0x1e>
 8004cd6:	7813      	ldrb	r3, [r2, #0]
 8004cd8:	600b      	str	r3, [r1, #0]
 8004cda:	7812      	ldrb	r2, [r2, #0]
 8004cdc:	1e10      	subs	r0, r2, #0
 8004cde:	bf18      	it	ne
 8004ce0:	2001      	movne	r0, #1
 8004ce2:	b002      	add	sp, #8
 8004ce4:	4770      	bx	lr
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	e7fb      	b.n	8004ce2 <__ascii_mbtowc+0x16>
 8004cea:	f06f 0001 	mvn.w	r0, #1
 8004cee:	e7f8      	b.n	8004ce2 <__ascii_mbtowc+0x16>

08004cf0 <memcpy>:
 8004cf0:	440a      	add	r2, r1
 8004cf2:	4291      	cmp	r1, r2
 8004cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf8:	d100      	bne.n	8004cfc <memcpy+0xc>
 8004cfa:	4770      	bx	lr
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d02:	4291      	cmp	r1, r2
 8004d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d08:	d1f9      	bne.n	8004cfe <memcpy+0xe>
 8004d0a:	bd10      	pop	{r4, pc}

08004d0c <_Balloc>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d10:	4604      	mov	r4, r0
 8004d12:	460d      	mov	r5, r1
 8004d14:	b976      	cbnz	r6, 8004d34 <_Balloc+0x28>
 8004d16:	2010      	movs	r0, #16
 8004d18:	f001 fc1e 	bl	8006558 <malloc>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6260      	str	r0, [r4, #36]	; 0x24
 8004d20:	b920      	cbnz	r0, 8004d2c <_Balloc+0x20>
 8004d22:	2166      	movs	r1, #102	; 0x66
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <_Balloc+0x78>)
 8004d26:	4818      	ldr	r0, [pc, #96]	; (8004d88 <_Balloc+0x7c>)
 8004d28:	f000 fd6a 	bl	8005800 <__assert_func>
 8004d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d30:	6006      	str	r6, [r0, #0]
 8004d32:	60c6      	str	r6, [r0, #12]
 8004d34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d36:	68f3      	ldr	r3, [r6, #12]
 8004d38:	b183      	cbz	r3, 8004d5c <_Balloc+0x50>
 8004d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d42:	b9b8      	cbnz	r0, 8004d74 <_Balloc+0x68>
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f605 	lsl.w	r6, r1, r5
 8004d4a:	1d72      	adds	r2, r6, #5
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	f000 fcb0 	bl	80056b4 <_calloc_r>
 8004d54:	b160      	cbz	r0, 8004d70 <_Balloc+0x64>
 8004d56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d5a:	e00e      	b.n	8004d7a <_Balloc+0x6e>
 8004d5c:	2221      	movs	r2, #33	; 0x21
 8004d5e:	2104      	movs	r1, #4
 8004d60:	4620      	mov	r0, r4
 8004d62:	f000 fca7 	bl	80056b4 <_calloc_r>
 8004d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d68:	60f0      	str	r0, [r6, #12]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e4      	bne.n	8004d3a <_Balloc+0x2e>
 8004d70:	2000      	movs	r0, #0
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	6802      	ldr	r2, [r0, #0]
 8004d76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d80:	e7f7      	b.n	8004d72 <_Balloc+0x66>
 8004d82:	bf00      	nop
 8004d84:	08008578 	.word	0x08008578
 8004d88:	0800858f 	.word	0x0800858f

08004d8c <_Bfree>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d90:	4605      	mov	r5, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	b976      	cbnz	r6, 8004db4 <_Bfree+0x28>
 8004d96:	2010      	movs	r0, #16
 8004d98:	f001 fbde 	bl	8006558 <malloc>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	6268      	str	r0, [r5, #36]	; 0x24
 8004da0:	b920      	cbnz	r0, 8004dac <_Bfree+0x20>
 8004da2:	218a      	movs	r1, #138	; 0x8a
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <_Bfree+0x3c>)
 8004da6:	4809      	ldr	r0, [pc, #36]	; (8004dcc <_Bfree+0x40>)
 8004da8:	f000 fd2a 	bl	8005800 <__assert_func>
 8004dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004db0:	6006      	str	r6, [r0, #0]
 8004db2:	60c6      	str	r6, [r0, #12]
 8004db4:	b13c      	cbz	r4, 8004dc6 <_Bfree+0x3a>
 8004db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004db8:	6862      	ldr	r2, [r4, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dc0:	6021      	str	r1, [r4, #0]
 8004dc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	08008578 	.word	0x08008578
 8004dcc:	0800858f 	.word	0x0800858f

08004dd0 <__multadd>:
 8004dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd4:	4698      	mov	r8, r3
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	2300      	movs	r3, #0
 8004dda:	690e      	ldr	r6, [r1, #16]
 8004ddc:	4607      	mov	r7, r0
 8004dde:	f101 0014 	add.w	r0, r1, #20
 8004de2:	6805      	ldr	r5, [r0, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	b2a9      	uxth	r1, r5
 8004de8:	fb02 8101 	mla	r1, r2, r1, r8
 8004dec:	0c2d      	lsrs	r5, r5, #16
 8004dee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004df2:	fb02 c505 	mla	r5, r2, r5, ip
 8004df6:	b289      	uxth	r1, r1
 8004df8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004dfc:	429e      	cmp	r6, r3
 8004dfe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004e02:	f840 1b04 	str.w	r1, [r0], #4
 8004e06:	dcec      	bgt.n	8004de2 <__multadd+0x12>
 8004e08:	f1b8 0f00 	cmp.w	r8, #0
 8004e0c:	d022      	beq.n	8004e54 <__multadd+0x84>
 8004e0e:	68a3      	ldr	r3, [r4, #8]
 8004e10:	42b3      	cmp	r3, r6
 8004e12:	dc19      	bgt.n	8004e48 <__multadd+0x78>
 8004e14:	6861      	ldr	r1, [r4, #4]
 8004e16:	4638      	mov	r0, r7
 8004e18:	3101      	adds	r1, #1
 8004e1a:	f7ff ff77 	bl	8004d0c <_Balloc>
 8004e1e:	4605      	mov	r5, r0
 8004e20:	b928      	cbnz	r0, 8004e2e <__multadd+0x5e>
 8004e22:	4602      	mov	r2, r0
 8004e24:	21b5      	movs	r1, #181	; 0xb5
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <__multadd+0x8c>)
 8004e28:	480d      	ldr	r0, [pc, #52]	; (8004e60 <__multadd+0x90>)
 8004e2a:	f000 fce9 	bl	8005800 <__assert_func>
 8004e2e:	6922      	ldr	r2, [r4, #16]
 8004e30:	f104 010c 	add.w	r1, r4, #12
 8004e34:	3202      	adds	r2, #2
 8004e36:	0092      	lsls	r2, r2, #2
 8004e38:	300c      	adds	r0, #12
 8004e3a:	f7ff ff59 	bl	8004cf0 <memcpy>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4638      	mov	r0, r7
 8004e42:	f7ff ffa3 	bl	8004d8c <_Bfree>
 8004e46:	462c      	mov	r4, r5
 8004e48:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	f8c3 8014 	str.w	r8, [r3, #20]
 8004e52:	6126      	str	r6, [r4, #16]
 8004e54:	4620      	mov	r0, r4
 8004e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e5a:	bf00      	nop
 8004e5c:	080084e8 	.word	0x080084e8
 8004e60:	0800858f 	.word	0x0800858f

08004e64 <__s2b>:
 8004e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e68:	4615      	mov	r5, r2
 8004e6a:	2209      	movs	r2, #9
 8004e6c:	461f      	mov	r7, r3
 8004e6e:	3308      	adds	r3, #8
 8004e70:	460c      	mov	r4, r1
 8004e72:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e76:	4606      	mov	r6, r0
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	db09      	blt.n	8004e94 <__s2b+0x30>
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff ff43 	bl	8004d0c <_Balloc>
 8004e86:	b940      	cbnz	r0, 8004e9a <__s2b+0x36>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	21ce      	movs	r1, #206	; 0xce
 8004e8c:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <__s2b+0x8c>)
 8004e8e:	4819      	ldr	r0, [pc, #100]	; (8004ef4 <__s2b+0x90>)
 8004e90:	f000 fcb6 	bl	8005800 <__assert_func>
 8004e94:	0052      	lsls	r2, r2, #1
 8004e96:	3101      	adds	r1, #1
 8004e98:	e7f0      	b.n	8004e7c <__s2b+0x18>
 8004e9a:	9b08      	ldr	r3, [sp, #32]
 8004e9c:	2d09      	cmp	r5, #9
 8004e9e:	6143      	str	r3, [r0, #20]
 8004ea0:	f04f 0301 	mov.w	r3, #1
 8004ea4:	6103      	str	r3, [r0, #16]
 8004ea6:	dd16      	ble.n	8004ed6 <__s2b+0x72>
 8004ea8:	f104 0909 	add.w	r9, r4, #9
 8004eac:	46c8      	mov	r8, r9
 8004eae:	442c      	add	r4, r5
 8004eb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004eb4:	4601      	mov	r1, r0
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	4630      	mov	r0, r6
 8004eba:	3b30      	subs	r3, #48	; 0x30
 8004ebc:	f7ff ff88 	bl	8004dd0 <__multadd>
 8004ec0:	45a0      	cmp	r8, r4
 8004ec2:	d1f5      	bne.n	8004eb0 <__s2b+0x4c>
 8004ec4:	f1a5 0408 	sub.w	r4, r5, #8
 8004ec8:	444c      	add	r4, r9
 8004eca:	1b2d      	subs	r5, r5, r4
 8004ecc:	1963      	adds	r3, r4, r5
 8004ece:	42bb      	cmp	r3, r7
 8004ed0:	db04      	blt.n	8004edc <__s2b+0x78>
 8004ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed6:	2509      	movs	r5, #9
 8004ed8:	340a      	adds	r4, #10
 8004eda:	e7f6      	b.n	8004eca <__s2b+0x66>
 8004edc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ee0:	4601      	mov	r1, r0
 8004ee2:	220a      	movs	r2, #10
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	3b30      	subs	r3, #48	; 0x30
 8004ee8:	f7ff ff72 	bl	8004dd0 <__multadd>
 8004eec:	e7ee      	b.n	8004ecc <__s2b+0x68>
 8004eee:	bf00      	nop
 8004ef0:	080084e8 	.word	0x080084e8
 8004ef4:	0800858f 	.word	0x0800858f

08004ef8 <__hi0bits>:
 8004ef8:	0c02      	lsrs	r2, r0, #16
 8004efa:	0412      	lsls	r2, r2, #16
 8004efc:	4603      	mov	r3, r0
 8004efe:	b9ca      	cbnz	r2, 8004f34 <__hi0bits+0x3c>
 8004f00:	0403      	lsls	r3, r0, #16
 8004f02:	2010      	movs	r0, #16
 8004f04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f08:	bf04      	itt	eq
 8004f0a:	021b      	lsleq	r3, r3, #8
 8004f0c:	3008      	addeq	r0, #8
 8004f0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f12:	bf04      	itt	eq
 8004f14:	011b      	lsleq	r3, r3, #4
 8004f16:	3004      	addeq	r0, #4
 8004f18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f1c:	bf04      	itt	eq
 8004f1e:	009b      	lsleq	r3, r3, #2
 8004f20:	3002      	addeq	r0, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	db05      	blt.n	8004f32 <__hi0bits+0x3a>
 8004f26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004f2a:	f100 0001 	add.w	r0, r0, #1
 8004f2e:	bf08      	it	eq
 8004f30:	2020      	moveq	r0, #32
 8004f32:	4770      	bx	lr
 8004f34:	2000      	movs	r0, #0
 8004f36:	e7e5      	b.n	8004f04 <__hi0bits+0xc>

08004f38 <__lo0bits>:
 8004f38:	6803      	ldr	r3, [r0, #0]
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f013 0007 	ands.w	r0, r3, #7
 8004f40:	d00b      	beq.n	8004f5a <__lo0bits+0x22>
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	d422      	bmi.n	8004f8c <__lo0bits+0x54>
 8004f46:	0798      	lsls	r0, r3, #30
 8004f48:	bf49      	itett	mi
 8004f4a:	085b      	lsrmi	r3, r3, #1
 8004f4c:	089b      	lsrpl	r3, r3, #2
 8004f4e:	2001      	movmi	r0, #1
 8004f50:	6013      	strmi	r3, [r2, #0]
 8004f52:	bf5c      	itt	pl
 8004f54:	2002      	movpl	r0, #2
 8004f56:	6013      	strpl	r3, [r2, #0]
 8004f58:	4770      	bx	lr
 8004f5a:	b299      	uxth	r1, r3
 8004f5c:	b909      	cbnz	r1, 8004f62 <__lo0bits+0x2a>
 8004f5e:	2010      	movs	r0, #16
 8004f60:	0c1b      	lsrs	r3, r3, #16
 8004f62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f66:	bf04      	itt	eq
 8004f68:	0a1b      	lsreq	r3, r3, #8
 8004f6a:	3008      	addeq	r0, #8
 8004f6c:	0719      	lsls	r1, r3, #28
 8004f6e:	bf04      	itt	eq
 8004f70:	091b      	lsreq	r3, r3, #4
 8004f72:	3004      	addeq	r0, #4
 8004f74:	0799      	lsls	r1, r3, #30
 8004f76:	bf04      	itt	eq
 8004f78:	089b      	lsreq	r3, r3, #2
 8004f7a:	3002      	addeq	r0, #2
 8004f7c:	07d9      	lsls	r1, r3, #31
 8004f7e:	d403      	bmi.n	8004f88 <__lo0bits+0x50>
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	f100 0001 	add.w	r0, r0, #1
 8004f86:	d003      	beq.n	8004f90 <__lo0bits+0x58>
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	4770      	bx	lr
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	4770      	bx	lr
 8004f90:	2020      	movs	r0, #32
 8004f92:	4770      	bx	lr

08004f94 <__i2b>:
 8004f94:	b510      	push	{r4, lr}
 8004f96:	460c      	mov	r4, r1
 8004f98:	2101      	movs	r1, #1
 8004f9a:	f7ff feb7 	bl	8004d0c <_Balloc>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	b928      	cbnz	r0, 8004fae <__i2b+0x1a>
 8004fa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004fa6:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <__i2b+0x24>)
 8004fa8:	4804      	ldr	r0, [pc, #16]	; (8004fbc <__i2b+0x28>)
 8004faa:	f000 fc29 	bl	8005800 <__assert_func>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	6144      	str	r4, [r0, #20]
 8004fb2:	6103      	str	r3, [r0, #16]
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	bf00      	nop
 8004fb8:	080084e8 	.word	0x080084e8
 8004fbc:	0800858f 	.word	0x0800858f

08004fc0 <__multiply>:
 8004fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	690a      	ldr	r2, [r1, #16]
 8004fc8:	6923      	ldr	r3, [r4, #16]
 8004fca:	460d      	mov	r5, r1
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	bfbe      	ittt	lt
 8004fd0:	460b      	movlt	r3, r1
 8004fd2:	4625      	movlt	r5, r4
 8004fd4:	461c      	movlt	r4, r3
 8004fd6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004fda:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004fde:	68ab      	ldr	r3, [r5, #8]
 8004fe0:	6869      	ldr	r1, [r5, #4]
 8004fe2:	eb0a 0709 	add.w	r7, sl, r9
 8004fe6:	42bb      	cmp	r3, r7
 8004fe8:	b085      	sub	sp, #20
 8004fea:	bfb8      	it	lt
 8004fec:	3101      	addlt	r1, #1
 8004fee:	f7ff fe8d 	bl	8004d0c <_Balloc>
 8004ff2:	b930      	cbnz	r0, 8005002 <__multiply+0x42>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f240 115d 	movw	r1, #349	; 0x15d
 8004ffa:	4b41      	ldr	r3, [pc, #260]	; (8005100 <__multiply+0x140>)
 8004ffc:	4841      	ldr	r0, [pc, #260]	; (8005104 <__multiply+0x144>)
 8004ffe:	f000 fbff 	bl	8005800 <__assert_func>
 8005002:	f100 0614 	add.w	r6, r0, #20
 8005006:	4633      	mov	r3, r6
 8005008:	2200      	movs	r2, #0
 800500a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800500e:	4543      	cmp	r3, r8
 8005010:	d31e      	bcc.n	8005050 <__multiply+0x90>
 8005012:	f105 0c14 	add.w	ip, r5, #20
 8005016:	f104 0314 	add.w	r3, r4, #20
 800501a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800501e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005022:	9202      	str	r2, [sp, #8]
 8005024:	ebac 0205 	sub.w	r2, ip, r5
 8005028:	3a15      	subs	r2, #21
 800502a:	f022 0203 	bic.w	r2, r2, #3
 800502e:	3204      	adds	r2, #4
 8005030:	f105 0115 	add.w	r1, r5, #21
 8005034:	458c      	cmp	ip, r1
 8005036:	bf38      	it	cc
 8005038:	2204      	movcc	r2, #4
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	9a02      	ldr	r2, [sp, #8]
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	429a      	cmp	r2, r3
 8005042:	d808      	bhi.n	8005056 <__multiply+0x96>
 8005044:	2f00      	cmp	r7, #0
 8005046:	dc55      	bgt.n	80050f4 <__multiply+0x134>
 8005048:	6107      	str	r7, [r0, #16]
 800504a:	b005      	add	sp, #20
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	f843 2b04 	str.w	r2, [r3], #4
 8005054:	e7db      	b.n	800500e <__multiply+0x4e>
 8005056:	f8b3 a000 	ldrh.w	sl, [r3]
 800505a:	f1ba 0f00 	cmp.w	sl, #0
 800505e:	d020      	beq.n	80050a2 <__multiply+0xe2>
 8005060:	46b1      	mov	r9, r6
 8005062:	2200      	movs	r2, #0
 8005064:	f105 0e14 	add.w	lr, r5, #20
 8005068:	f85e 4b04 	ldr.w	r4, [lr], #4
 800506c:	f8d9 b000 	ldr.w	fp, [r9]
 8005070:	b2a1      	uxth	r1, r4
 8005072:	fa1f fb8b 	uxth.w	fp, fp
 8005076:	fb0a b101 	mla	r1, sl, r1, fp
 800507a:	4411      	add	r1, r2
 800507c:	f8d9 2000 	ldr.w	r2, [r9]
 8005080:	0c24      	lsrs	r4, r4, #16
 8005082:	0c12      	lsrs	r2, r2, #16
 8005084:	fb0a 2404 	mla	r4, sl, r4, r2
 8005088:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800508c:	b289      	uxth	r1, r1
 800508e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005092:	45f4      	cmp	ip, lr
 8005094:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005098:	f849 1b04 	str.w	r1, [r9], #4
 800509c:	d8e4      	bhi.n	8005068 <__multiply+0xa8>
 800509e:	9901      	ldr	r1, [sp, #4]
 80050a0:	5072      	str	r2, [r6, r1]
 80050a2:	9a03      	ldr	r2, [sp, #12]
 80050a4:	3304      	adds	r3, #4
 80050a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050aa:	f1b9 0f00 	cmp.w	r9, #0
 80050ae:	d01f      	beq.n	80050f0 <__multiply+0x130>
 80050b0:	46b6      	mov	lr, r6
 80050b2:	f04f 0a00 	mov.w	sl, #0
 80050b6:	6834      	ldr	r4, [r6, #0]
 80050b8:	f105 0114 	add.w	r1, r5, #20
 80050bc:	880a      	ldrh	r2, [r1, #0]
 80050be:	f8be b002 	ldrh.w	fp, [lr, #2]
 80050c2:	b2a4      	uxth	r4, r4
 80050c4:	fb09 b202 	mla	r2, r9, r2, fp
 80050c8:	4492      	add	sl, r2
 80050ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80050ce:	f84e 4b04 	str.w	r4, [lr], #4
 80050d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80050d6:	f8be 2000 	ldrh.w	r2, [lr]
 80050da:	0c24      	lsrs	r4, r4, #16
 80050dc:	fb09 2404 	mla	r4, r9, r4, r2
 80050e0:	458c      	cmp	ip, r1
 80050e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80050e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80050ea:	d8e7      	bhi.n	80050bc <__multiply+0xfc>
 80050ec:	9a01      	ldr	r2, [sp, #4]
 80050ee:	50b4      	str	r4, [r6, r2]
 80050f0:	3604      	adds	r6, #4
 80050f2:	e7a3      	b.n	800503c <__multiply+0x7c>
 80050f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1a5      	bne.n	8005048 <__multiply+0x88>
 80050fc:	3f01      	subs	r7, #1
 80050fe:	e7a1      	b.n	8005044 <__multiply+0x84>
 8005100:	080084e8 	.word	0x080084e8
 8005104:	0800858f 	.word	0x0800858f

08005108 <__pow5mult>:
 8005108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800510c:	4615      	mov	r5, r2
 800510e:	f012 0203 	ands.w	r2, r2, #3
 8005112:	4606      	mov	r6, r0
 8005114:	460f      	mov	r7, r1
 8005116:	d007      	beq.n	8005128 <__pow5mult+0x20>
 8005118:	4c25      	ldr	r4, [pc, #148]	; (80051b0 <__pow5mult+0xa8>)
 800511a:	3a01      	subs	r2, #1
 800511c:	2300      	movs	r3, #0
 800511e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005122:	f7ff fe55 	bl	8004dd0 <__multadd>
 8005126:	4607      	mov	r7, r0
 8005128:	10ad      	asrs	r5, r5, #2
 800512a:	d03d      	beq.n	80051a8 <__pow5mult+0xa0>
 800512c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800512e:	b97c      	cbnz	r4, 8005150 <__pow5mult+0x48>
 8005130:	2010      	movs	r0, #16
 8005132:	f001 fa11 	bl	8006558 <malloc>
 8005136:	4602      	mov	r2, r0
 8005138:	6270      	str	r0, [r6, #36]	; 0x24
 800513a:	b928      	cbnz	r0, 8005148 <__pow5mult+0x40>
 800513c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005140:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <__pow5mult+0xac>)
 8005142:	481d      	ldr	r0, [pc, #116]	; (80051b8 <__pow5mult+0xb0>)
 8005144:	f000 fb5c 	bl	8005800 <__assert_func>
 8005148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800514c:	6004      	str	r4, [r0, #0]
 800514e:	60c4      	str	r4, [r0, #12]
 8005150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005158:	b94c      	cbnz	r4, 800516e <__pow5mult+0x66>
 800515a:	f240 2171 	movw	r1, #625	; 0x271
 800515e:	4630      	mov	r0, r6
 8005160:	f7ff ff18 	bl	8004f94 <__i2b>
 8005164:	2300      	movs	r3, #0
 8005166:	4604      	mov	r4, r0
 8005168:	f8c8 0008 	str.w	r0, [r8, #8]
 800516c:	6003      	str	r3, [r0, #0]
 800516e:	f04f 0900 	mov.w	r9, #0
 8005172:	07eb      	lsls	r3, r5, #31
 8005174:	d50a      	bpl.n	800518c <__pow5mult+0x84>
 8005176:	4639      	mov	r1, r7
 8005178:	4622      	mov	r2, r4
 800517a:	4630      	mov	r0, r6
 800517c:	f7ff ff20 	bl	8004fc0 <__multiply>
 8005180:	4680      	mov	r8, r0
 8005182:	4639      	mov	r1, r7
 8005184:	4630      	mov	r0, r6
 8005186:	f7ff fe01 	bl	8004d8c <_Bfree>
 800518a:	4647      	mov	r7, r8
 800518c:	106d      	asrs	r5, r5, #1
 800518e:	d00b      	beq.n	80051a8 <__pow5mult+0xa0>
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	b938      	cbnz	r0, 80051a4 <__pow5mult+0x9c>
 8005194:	4622      	mov	r2, r4
 8005196:	4621      	mov	r1, r4
 8005198:	4630      	mov	r0, r6
 800519a:	f7ff ff11 	bl	8004fc0 <__multiply>
 800519e:	6020      	str	r0, [r4, #0]
 80051a0:	f8c0 9000 	str.w	r9, [r0]
 80051a4:	4604      	mov	r4, r0
 80051a6:	e7e4      	b.n	8005172 <__pow5mult+0x6a>
 80051a8:	4638      	mov	r0, r7
 80051aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ae:	bf00      	nop
 80051b0:	080086e0 	.word	0x080086e0
 80051b4:	08008578 	.word	0x08008578
 80051b8:	0800858f 	.word	0x0800858f

080051bc <__lshift>:
 80051bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	460c      	mov	r4, r1
 80051c2:	4607      	mov	r7, r0
 80051c4:	4691      	mov	r9, r2
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	6849      	ldr	r1, [r1, #4]
 80051ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051ce:	68a3      	ldr	r3, [r4, #8]
 80051d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051d4:	f108 0601 	add.w	r6, r8, #1
 80051d8:	42b3      	cmp	r3, r6
 80051da:	db0b      	blt.n	80051f4 <__lshift+0x38>
 80051dc:	4638      	mov	r0, r7
 80051de:	f7ff fd95 	bl	8004d0c <_Balloc>
 80051e2:	4605      	mov	r5, r0
 80051e4:	b948      	cbnz	r0, 80051fa <__lshift+0x3e>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80051ec:	4b27      	ldr	r3, [pc, #156]	; (800528c <__lshift+0xd0>)
 80051ee:	4828      	ldr	r0, [pc, #160]	; (8005290 <__lshift+0xd4>)
 80051f0:	f000 fb06 	bl	8005800 <__assert_func>
 80051f4:	3101      	adds	r1, #1
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	e7ee      	b.n	80051d8 <__lshift+0x1c>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f100 0114 	add.w	r1, r0, #20
 8005200:	f100 0210 	add.w	r2, r0, #16
 8005204:	4618      	mov	r0, r3
 8005206:	4553      	cmp	r3, sl
 8005208:	db33      	blt.n	8005272 <__lshift+0xb6>
 800520a:	6920      	ldr	r0, [r4, #16]
 800520c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005210:	f104 0314 	add.w	r3, r4, #20
 8005214:	f019 091f 	ands.w	r9, r9, #31
 8005218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800521c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005220:	d02b      	beq.n	800527a <__lshift+0xbe>
 8005222:	468a      	mov	sl, r1
 8005224:	2200      	movs	r2, #0
 8005226:	f1c9 0e20 	rsb	lr, r9, #32
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	fa00 f009 	lsl.w	r0, r0, r9
 8005230:	4302      	orrs	r2, r0
 8005232:	f84a 2b04 	str.w	r2, [sl], #4
 8005236:	f853 2b04 	ldr.w	r2, [r3], #4
 800523a:	459c      	cmp	ip, r3
 800523c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005240:	d8f3      	bhi.n	800522a <__lshift+0x6e>
 8005242:	ebac 0304 	sub.w	r3, ip, r4
 8005246:	3b15      	subs	r3, #21
 8005248:	f023 0303 	bic.w	r3, r3, #3
 800524c:	3304      	adds	r3, #4
 800524e:	f104 0015 	add.w	r0, r4, #21
 8005252:	4584      	cmp	ip, r0
 8005254:	bf38      	it	cc
 8005256:	2304      	movcc	r3, #4
 8005258:	50ca      	str	r2, [r1, r3]
 800525a:	b10a      	cbz	r2, 8005260 <__lshift+0xa4>
 800525c:	f108 0602 	add.w	r6, r8, #2
 8005260:	3e01      	subs	r6, #1
 8005262:	4638      	mov	r0, r7
 8005264:	4621      	mov	r1, r4
 8005266:	612e      	str	r6, [r5, #16]
 8005268:	f7ff fd90 	bl	8004d8c <_Bfree>
 800526c:	4628      	mov	r0, r5
 800526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005272:	f842 0f04 	str.w	r0, [r2, #4]!
 8005276:	3301      	adds	r3, #1
 8005278:	e7c5      	b.n	8005206 <__lshift+0x4a>
 800527a:	3904      	subs	r1, #4
 800527c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005280:	459c      	cmp	ip, r3
 8005282:	f841 2f04 	str.w	r2, [r1, #4]!
 8005286:	d8f9      	bhi.n	800527c <__lshift+0xc0>
 8005288:	e7ea      	b.n	8005260 <__lshift+0xa4>
 800528a:	bf00      	nop
 800528c:	080084e8 	.word	0x080084e8
 8005290:	0800858f 	.word	0x0800858f

08005294 <__mcmp>:
 8005294:	4603      	mov	r3, r0
 8005296:	690a      	ldr	r2, [r1, #16]
 8005298:	6900      	ldr	r0, [r0, #16]
 800529a:	b530      	push	{r4, r5, lr}
 800529c:	1a80      	subs	r0, r0, r2
 800529e:	d10d      	bne.n	80052bc <__mcmp+0x28>
 80052a0:	3314      	adds	r3, #20
 80052a2:	3114      	adds	r1, #20
 80052a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80052a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80052ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052b4:	4295      	cmp	r5, r2
 80052b6:	d002      	beq.n	80052be <__mcmp+0x2a>
 80052b8:	d304      	bcc.n	80052c4 <__mcmp+0x30>
 80052ba:	2001      	movs	r0, #1
 80052bc:	bd30      	pop	{r4, r5, pc}
 80052be:	42a3      	cmp	r3, r4
 80052c0:	d3f4      	bcc.n	80052ac <__mcmp+0x18>
 80052c2:	e7fb      	b.n	80052bc <__mcmp+0x28>
 80052c4:	f04f 30ff 	mov.w	r0, #4294967295
 80052c8:	e7f8      	b.n	80052bc <__mcmp+0x28>
	...

080052cc <__mdiff>:
 80052cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d0:	460c      	mov	r4, r1
 80052d2:	4606      	mov	r6, r0
 80052d4:	4611      	mov	r1, r2
 80052d6:	4620      	mov	r0, r4
 80052d8:	4692      	mov	sl, r2
 80052da:	f7ff ffdb 	bl	8005294 <__mcmp>
 80052de:	1e05      	subs	r5, r0, #0
 80052e0:	d111      	bne.n	8005306 <__mdiff+0x3a>
 80052e2:	4629      	mov	r1, r5
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff fd11 	bl	8004d0c <_Balloc>
 80052ea:	4602      	mov	r2, r0
 80052ec:	b928      	cbnz	r0, 80052fa <__mdiff+0x2e>
 80052ee:	f240 2132 	movw	r1, #562	; 0x232
 80052f2:	4b3c      	ldr	r3, [pc, #240]	; (80053e4 <__mdiff+0x118>)
 80052f4:	483c      	ldr	r0, [pc, #240]	; (80053e8 <__mdiff+0x11c>)
 80052f6:	f000 fa83 	bl	8005800 <__assert_func>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005300:	4610      	mov	r0, r2
 8005302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005306:	bfa4      	itt	ge
 8005308:	4653      	movge	r3, sl
 800530a:	46a2      	movge	sl, r4
 800530c:	4630      	mov	r0, r6
 800530e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005312:	bfa6      	itte	ge
 8005314:	461c      	movge	r4, r3
 8005316:	2500      	movge	r5, #0
 8005318:	2501      	movlt	r5, #1
 800531a:	f7ff fcf7 	bl	8004d0c <_Balloc>
 800531e:	4602      	mov	r2, r0
 8005320:	b918      	cbnz	r0, 800532a <__mdiff+0x5e>
 8005322:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005326:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <__mdiff+0x118>)
 8005328:	e7e4      	b.n	80052f4 <__mdiff+0x28>
 800532a:	f100 0814 	add.w	r8, r0, #20
 800532e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005332:	60c5      	str	r5, [r0, #12]
 8005334:	f04f 0c00 	mov.w	ip, #0
 8005338:	f10a 0514 	add.w	r5, sl, #20
 800533c:	f10a 0010 	add.w	r0, sl, #16
 8005340:	46c2      	mov	sl, r8
 8005342:	6926      	ldr	r6, [r4, #16]
 8005344:	f104 0914 	add.w	r9, r4, #20
 8005348:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800534c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005350:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005354:	f859 3b04 	ldr.w	r3, [r9], #4
 8005358:	fa1f f18b 	uxth.w	r1, fp
 800535c:	4461      	add	r1, ip
 800535e:	fa1f fc83 	uxth.w	ip, r3
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	eba1 010c 	sub.w	r1, r1, ip
 8005368:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800536c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005370:	b289      	uxth	r1, r1
 8005372:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005376:	454e      	cmp	r6, r9
 8005378:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800537c:	f84a 3b04 	str.w	r3, [sl], #4
 8005380:	d8e6      	bhi.n	8005350 <__mdiff+0x84>
 8005382:	1b33      	subs	r3, r6, r4
 8005384:	3b15      	subs	r3, #21
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	3415      	adds	r4, #21
 800538c:	3304      	adds	r3, #4
 800538e:	42a6      	cmp	r6, r4
 8005390:	bf38      	it	cc
 8005392:	2304      	movcc	r3, #4
 8005394:	441d      	add	r5, r3
 8005396:	4443      	add	r3, r8
 8005398:	461e      	mov	r6, r3
 800539a:	462c      	mov	r4, r5
 800539c:	4574      	cmp	r4, lr
 800539e:	d30e      	bcc.n	80053be <__mdiff+0xf2>
 80053a0:	f10e 0103 	add.w	r1, lr, #3
 80053a4:	1b49      	subs	r1, r1, r5
 80053a6:	f021 0103 	bic.w	r1, r1, #3
 80053aa:	3d03      	subs	r5, #3
 80053ac:	45ae      	cmp	lr, r5
 80053ae:	bf38      	it	cc
 80053b0:	2100      	movcc	r1, #0
 80053b2:	4419      	add	r1, r3
 80053b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80053b8:	b18b      	cbz	r3, 80053de <__mdiff+0x112>
 80053ba:	6117      	str	r7, [r2, #16]
 80053bc:	e7a0      	b.n	8005300 <__mdiff+0x34>
 80053be:	f854 8b04 	ldr.w	r8, [r4], #4
 80053c2:	fa1f f188 	uxth.w	r1, r8
 80053c6:	4461      	add	r1, ip
 80053c8:	1408      	asrs	r0, r1, #16
 80053ca:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80053ce:	b289      	uxth	r1, r1
 80053d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80053d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80053d8:	f846 1b04 	str.w	r1, [r6], #4
 80053dc:	e7de      	b.n	800539c <__mdiff+0xd0>
 80053de:	3f01      	subs	r7, #1
 80053e0:	e7e8      	b.n	80053b4 <__mdiff+0xe8>
 80053e2:	bf00      	nop
 80053e4:	080084e8 	.word	0x080084e8
 80053e8:	0800858f 	.word	0x0800858f

080053ec <__ulp>:
 80053ec:	4b11      	ldr	r3, [pc, #68]	; (8005434 <__ulp+0x48>)
 80053ee:	400b      	ands	r3, r1
 80053f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dd02      	ble.n	80053fe <__ulp+0x12>
 80053f8:	2000      	movs	r0, #0
 80053fa:	4619      	mov	r1, r3
 80053fc:	4770      	bx	lr
 80053fe:	425b      	negs	r3, r3
 8005400:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005404:	f04f 0000 	mov.w	r0, #0
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005410:	da04      	bge.n	800541c <__ulp+0x30>
 8005412:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005416:	fa43 f102 	asr.w	r1, r3, r2
 800541a:	4770      	bx	lr
 800541c:	f1a2 0314 	sub.w	r3, r2, #20
 8005420:	2b1e      	cmp	r3, #30
 8005422:	bfd6      	itet	le
 8005424:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005428:	2301      	movgt	r3, #1
 800542a:	fa22 f303 	lsrle.w	r3, r2, r3
 800542e:	4618      	mov	r0, r3
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	7ff00000 	.word	0x7ff00000

08005438 <__b2d>:
 8005438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800543c:	6907      	ldr	r7, [r0, #16]
 800543e:	f100 0914 	add.w	r9, r0, #20
 8005442:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005446:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800544a:	f1a7 0804 	sub.w	r8, r7, #4
 800544e:	4630      	mov	r0, r6
 8005450:	f7ff fd52 	bl	8004ef8 <__hi0bits>
 8005454:	f1c0 0320 	rsb	r3, r0, #32
 8005458:	280a      	cmp	r0, #10
 800545a:	600b      	str	r3, [r1, #0]
 800545c:	491f      	ldr	r1, [pc, #124]	; (80054dc <__b2d+0xa4>)
 800545e:	dc17      	bgt.n	8005490 <__b2d+0x58>
 8005460:	45c1      	cmp	r9, r8
 8005462:	bf28      	it	cs
 8005464:	2200      	movcs	r2, #0
 8005466:	f1c0 0c0b 	rsb	ip, r0, #11
 800546a:	fa26 f30c 	lsr.w	r3, r6, ip
 800546e:	bf38      	it	cc
 8005470:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005474:	ea43 0501 	orr.w	r5, r3, r1
 8005478:	f100 0315 	add.w	r3, r0, #21
 800547c:	fa06 f303 	lsl.w	r3, r6, r3
 8005480:	fa22 f20c 	lsr.w	r2, r2, ip
 8005484:	ea43 0402 	orr.w	r4, r3, r2
 8005488:	4620      	mov	r0, r4
 800548a:	4629      	mov	r1, r5
 800548c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005490:	45c1      	cmp	r9, r8
 8005492:	bf2e      	itee	cs
 8005494:	2200      	movcs	r2, #0
 8005496:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800549a:	f1a7 0808 	subcc.w	r8, r7, #8
 800549e:	f1b0 030b 	subs.w	r3, r0, #11
 80054a2:	d016      	beq.n	80054d2 <__b2d+0x9a>
 80054a4:	f1c3 0720 	rsb	r7, r3, #32
 80054a8:	fa22 f107 	lsr.w	r1, r2, r7
 80054ac:	45c8      	cmp	r8, r9
 80054ae:	fa06 f603 	lsl.w	r6, r6, r3
 80054b2:	ea46 0601 	orr.w	r6, r6, r1
 80054b6:	bf94      	ite	ls
 80054b8:	2100      	movls	r1, #0
 80054ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80054be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80054c2:	fa02 f003 	lsl.w	r0, r2, r3
 80054c6:	40f9      	lsrs	r1, r7
 80054c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80054cc:	ea40 0401 	orr.w	r4, r0, r1
 80054d0:	e7da      	b.n	8005488 <__b2d+0x50>
 80054d2:	4614      	mov	r4, r2
 80054d4:	ea46 0501 	orr.w	r5, r6, r1
 80054d8:	e7d6      	b.n	8005488 <__b2d+0x50>
 80054da:	bf00      	nop
 80054dc:	3ff00000 	.word	0x3ff00000

080054e0 <__d2b>:
 80054e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80054e4:	2101      	movs	r1, #1
 80054e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80054ea:	4690      	mov	r8, r2
 80054ec:	461d      	mov	r5, r3
 80054ee:	f7ff fc0d 	bl	8004d0c <_Balloc>
 80054f2:	4604      	mov	r4, r0
 80054f4:	b930      	cbnz	r0, 8005504 <__d2b+0x24>
 80054f6:	4602      	mov	r2, r0
 80054f8:	f240 310a 	movw	r1, #778	; 0x30a
 80054fc:	4b24      	ldr	r3, [pc, #144]	; (8005590 <__d2b+0xb0>)
 80054fe:	4825      	ldr	r0, [pc, #148]	; (8005594 <__d2b+0xb4>)
 8005500:	f000 f97e 	bl	8005800 <__assert_func>
 8005504:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005508:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800550c:	bb2d      	cbnz	r5, 800555a <__d2b+0x7a>
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	f1b8 0300 	subs.w	r3, r8, #0
 8005514:	d026      	beq.n	8005564 <__d2b+0x84>
 8005516:	4668      	mov	r0, sp
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	f7ff fd0d 	bl	8004f38 <__lo0bits>
 800551e:	9900      	ldr	r1, [sp, #0]
 8005520:	b1f0      	cbz	r0, 8005560 <__d2b+0x80>
 8005522:	9a01      	ldr	r2, [sp, #4]
 8005524:	f1c0 0320 	rsb	r3, r0, #32
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	430b      	orrs	r3, r1
 800552e:	40c2      	lsrs	r2, r0
 8005530:	6163      	str	r3, [r4, #20]
 8005532:	9201      	str	r2, [sp, #4]
 8005534:	9b01      	ldr	r3, [sp, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf14      	ite	ne
 800553a:	2102      	movne	r1, #2
 800553c:	2101      	moveq	r1, #1
 800553e:	61a3      	str	r3, [r4, #24]
 8005540:	6121      	str	r1, [r4, #16]
 8005542:	b1c5      	cbz	r5, 8005576 <__d2b+0x96>
 8005544:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005548:	4405      	add	r5, r0
 800554a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800554e:	603d      	str	r5, [r7, #0]
 8005550:	6030      	str	r0, [r6, #0]
 8005552:	4620      	mov	r0, r4
 8005554:	b002      	add	sp, #8
 8005556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800555e:	e7d6      	b.n	800550e <__d2b+0x2e>
 8005560:	6161      	str	r1, [r4, #20]
 8005562:	e7e7      	b.n	8005534 <__d2b+0x54>
 8005564:	a801      	add	r0, sp, #4
 8005566:	f7ff fce7 	bl	8004f38 <__lo0bits>
 800556a:	2101      	movs	r1, #1
 800556c:	9b01      	ldr	r3, [sp, #4]
 800556e:	6121      	str	r1, [r4, #16]
 8005570:	6163      	str	r3, [r4, #20]
 8005572:	3020      	adds	r0, #32
 8005574:	e7e5      	b.n	8005542 <__d2b+0x62>
 8005576:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800557a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800557e:	6038      	str	r0, [r7, #0]
 8005580:	6918      	ldr	r0, [r3, #16]
 8005582:	f7ff fcb9 	bl	8004ef8 <__hi0bits>
 8005586:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800558a:	6031      	str	r1, [r6, #0]
 800558c:	e7e1      	b.n	8005552 <__d2b+0x72>
 800558e:	bf00      	nop
 8005590:	080084e8 	.word	0x080084e8
 8005594:	0800858f 	.word	0x0800858f

08005598 <__ratio>:
 8005598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	4688      	mov	r8, r1
 800559e:	4669      	mov	r1, sp
 80055a0:	4681      	mov	r9, r0
 80055a2:	f7ff ff49 	bl	8005438 <__b2d>
 80055a6:	460f      	mov	r7, r1
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	4640      	mov	r0, r8
 80055ae:	a901      	add	r1, sp, #4
 80055b0:	f7ff ff42 	bl	8005438 <__b2d>
 80055b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80055b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80055bc:	468b      	mov	fp, r1
 80055be:	eba3 0c02 	sub.w	ip, r3, r2
 80055c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bfd5      	itete	le
 80055d0:	460a      	movle	r2, r1
 80055d2:	462a      	movgt	r2, r5
 80055d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80055d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80055dc:	bfd8      	it	le
 80055de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80055e2:	465b      	mov	r3, fp
 80055e4:	4602      	mov	r2, r0
 80055e6:	4639      	mov	r1, r7
 80055e8:	4620      	mov	r0, r4
 80055ea:	f7fb f953 	bl	8000894 <__aeabi_ddiv>
 80055ee:	b003      	add	sp, #12
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055f4 <_mprec_log10>:
 80055f4:	2817      	cmp	r0, #23
 80055f6:	b5d0      	push	{r4, r6, r7, lr}
 80055f8:	4604      	mov	r4, r0
 80055fa:	dc05      	bgt.n	8005608 <_mprec_log10+0x14>
 80055fc:	4808      	ldr	r0, [pc, #32]	; (8005620 <_mprec_log10+0x2c>)
 80055fe:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005602:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005606:	bdd0      	pop	{r4, r6, r7, pc}
 8005608:	2000      	movs	r0, #0
 800560a:	2600      	movs	r6, #0
 800560c:	4905      	ldr	r1, [pc, #20]	; (8005624 <_mprec_log10+0x30>)
 800560e:	4f06      	ldr	r7, [pc, #24]	; (8005628 <_mprec_log10+0x34>)
 8005610:	4632      	mov	r2, r6
 8005612:	463b      	mov	r3, r7
 8005614:	f7fb f814 	bl	8000640 <__aeabi_dmul>
 8005618:	3c01      	subs	r4, #1
 800561a:	d1f9      	bne.n	8005610 <_mprec_log10+0x1c>
 800561c:	e7f3      	b.n	8005606 <_mprec_log10+0x12>
 800561e:	bf00      	nop
 8005620:	08008618 	.word	0x08008618
 8005624:	3ff00000 	.word	0x3ff00000
 8005628:	40240000 	.word	0x40240000

0800562c <__copybits>:
 800562c:	3901      	subs	r1, #1
 800562e:	b570      	push	{r4, r5, r6, lr}
 8005630:	1149      	asrs	r1, r1, #5
 8005632:	6914      	ldr	r4, [r2, #16]
 8005634:	3101      	adds	r1, #1
 8005636:	f102 0314 	add.w	r3, r2, #20
 800563a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800563e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005642:	1f05      	subs	r5, r0, #4
 8005644:	42a3      	cmp	r3, r4
 8005646:	d30c      	bcc.n	8005662 <__copybits+0x36>
 8005648:	1aa3      	subs	r3, r4, r2
 800564a:	3b11      	subs	r3, #17
 800564c:	f023 0303 	bic.w	r3, r3, #3
 8005650:	3211      	adds	r2, #17
 8005652:	42a2      	cmp	r2, r4
 8005654:	bf88      	it	hi
 8005656:	2300      	movhi	r3, #0
 8005658:	4418      	add	r0, r3
 800565a:	2300      	movs	r3, #0
 800565c:	4288      	cmp	r0, r1
 800565e:	d305      	bcc.n	800566c <__copybits+0x40>
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	f853 6b04 	ldr.w	r6, [r3], #4
 8005666:	f845 6f04 	str.w	r6, [r5, #4]!
 800566a:	e7eb      	b.n	8005644 <__copybits+0x18>
 800566c:	f840 3b04 	str.w	r3, [r0], #4
 8005670:	e7f4      	b.n	800565c <__copybits+0x30>

08005672 <__any_on>:
 8005672:	f100 0214 	add.w	r2, r0, #20
 8005676:	6900      	ldr	r0, [r0, #16]
 8005678:	114b      	asrs	r3, r1, #5
 800567a:	4298      	cmp	r0, r3
 800567c:	b510      	push	{r4, lr}
 800567e:	db11      	blt.n	80056a4 <__any_on+0x32>
 8005680:	dd0a      	ble.n	8005698 <__any_on+0x26>
 8005682:	f011 011f 	ands.w	r1, r1, #31
 8005686:	d007      	beq.n	8005698 <__any_on+0x26>
 8005688:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800568c:	fa24 f001 	lsr.w	r0, r4, r1
 8005690:	fa00 f101 	lsl.w	r1, r0, r1
 8005694:	428c      	cmp	r4, r1
 8005696:	d10b      	bne.n	80056b0 <__any_on+0x3e>
 8005698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800569c:	4293      	cmp	r3, r2
 800569e:	d803      	bhi.n	80056a8 <__any_on+0x36>
 80056a0:	2000      	movs	r0, #0
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	4603      	mov	r3, r0
 80056a6:	e7f7      	b.n	8005698 <__any_on+0x26>
 80056a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80056ac:	2900      	cmp	r1, #0
 80056ae:	d0f5      	beq.n	800569c <__any_on+0x2a>
 80056b0:	2001      	movs	r0, #1
 80056b2:	e7f6      	b.n	80056a2 <__any_on+0x30>

080056b4 <_calloc_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	fb02 f501 	mul.w	r5, r2, r1
 80056ba:	4629      	mov	r1, r5
 80056bc:	f000 f808 	bl	80056d0 <_malloc_r>
 80056c0:	4604      	mov	r4, r0
 80056c2:	b118      	cbz	r0, 80056cc <_calloc_r+0x18>
 80056c4:	462a      	mov	r2, r5
 80056c6:	2100      	movs	r1, #0
 80056c8:	f7fe f836 	bl	8003738 <memset>
 80056cc:	4620      	mov	r0, r4
 80056ce:	bd38      	pop	{r3, r4, r5, pc}

080056d0 <_malloc_r>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	1ccd      	adds	r5, r1, #3
 80056d4:	f025 0503 	bic.w	r5, r5, #3
 80056d8:	3508      	adds	r5, #8
 80056da:	2d0c      	cmp	r5, #12
 80056dc:	bf38      	it	cc
 80056de:	250c      	movcc	r5, #12
 80056e0:	2d00      	cmp	r5, #0
 80056e2:	4606      	mov	r6, r0
 80056e4:	db01      	blt.n	80056ea <_malloc_r+0x1a>
 80056e6:	42a9      	cmp	r1, r5
 80056e8:	d903      	bls.n	80056f2 <_malloc_r+0x22>
 80056ea:	230c      	movs	r3, #12
 80056ec:	6033      	str	r3, [r6, #0]
 80056ee:	2000      	movs	r0, #0
 80056f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f2:	f000 ff39 	bl	8006568 <__malloc_lock>
 80056f6:	4921      	ldr	r1, [pc, #132]	; (800577c <_malloc_r+0xac>)
 80056f8:	680a      	ldr	r2, [r1, #0]
 80056fa:	4614      	mov	r4, r2
 80056fc:	b99c      	cbnz	r4, 8005726 <_malloc_r+0x56>
 80056fe:	4f20      	ldr	r7, [pc, #128]	; (8005780 <_malloc_r+0xb0>)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	b923      	cbnz	r3, 800570e <_malloc_r+0x3e>
 8005704:	4621      	mov	r1, r4
 8005706:	4630      	mov	r0, r6
 8005708:	f000 f842 	bl	8005790 <_sbrk_r>
 800570c:	6038      	str	r0, [r7, #0]
 800570e:	4629      	mov	r1, r5
 8005710:	4630      	mov	r0, r6
 8005712:	f000 f83d 	bl	8005790 <_sbrk_r>
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	d123      	bne.n	8005762 <_malloc_r+0x92>
 800571a:	230c      	movs	r3, #12
 800571c:	4630      	mov	r0, r6
 800571e:	6033      	str	r3, [r6, #0]
 8005720:	f000 ff28 	bl	8006574 <__malloc_unlock>
 8005724:	e7e3      	b.n	80056ee <_malloc_r+0x1e>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	1b5b      	subs	r3, r3, r5
 800572a:	d417      	bmi.n	800575c <_malloc_r+0x8c>
 800572c:	2b0b      	cmp	r3, #11
 800572e:	d903      	bls.n	8005738 <_malloc_r+0x68>
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	441c      	add	r4, r3
 8005734:	6025      	str	r5, [r4, #0]
 8005736:	e004      	b.n	8005742 <_malloc_r+0x72>
 8005738:	6863      	ldr	r3, [r4, #4]
 800573a:	42a2      	cmp	r2, r4
 800573c:	bf0c      	ite	eq
 800573e:	600b      	streq	r3, [r1, #0]
 8005740:	6053      	strne	r3, [r2, #4]
 8005742:	4630      	mov	r0, r6
 8005744:	f000 ff16 	bl	8006574 <__malloc_unlock>
 8005748:	f104 000b 	add.w	r0, r4, #11
 800574c:	1d23      	adds	r3, r4, #4
 800574e:	f020 0007 	bic.w	r0, r0, #7
 8005752:	1ac2      	subs	r2, r0, r3
 8005754:	d0cc      	beq.n	80056f0 <_malloc_r+0x20>
 8005756:	1a1b      	subs	r3, r3, r0
 8005758:	50a3      	str	r3, [r4, r2]
 800575a:	e7c9      	b.n	80056f0 <_malloc_r+0x20>
 800575c:	4622      	mov	r2, r4
 800575e:	6864      	ldr	r4, [r4, #4]
 8005760:	e7cc      	b.n	80056fc <_malloc_r+0x2c>
 8005762:	1cc4      	adds	r4, r0, #3
 8005764:	f024 0403 	bic.w	r4, r4, #3
 8005768:	42a0      	cmp	r0, r4
 800576a:	d0e3      	beq.n	8005734 <_malloc_r+0x64>
 800576c:	1a21      	subs	r1, r4, r0
 800576e:	4630      	mov	r0, r6
 8005770:	f000 f80e 	bl	8005790 <_sbrk_r>
 8005774:	3001      	adds	r0, #1
 8005776:	d1dd      	bne.n	8005734 <_malloc_r+0x64>
 8005778:	e7cf      	b.n	800571a <_malloc_r+0x4a>
 800577a:	bf00      	nop
 800577c:	2000028c 	.word	0x2000028c
 8005780:	20000290 	.word	0x20000290

08005784 <nan>:
 8005784:	2000      	movs	r0, #0
 8005786:	4901      	ldr	r1, [pc, #4]	; (800578c <nan+0x8>)
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	7ff80000 	.word	0x7ff80000

08005790 <_sbrk_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	2300      	movs	r3, #0
 8005794:	4d05      	ldr	r5, [pc, #20]	; (80057ac <_sbrk_r+0x1c>)
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	f7fc fa16 	bl	8001bcc <_sbrk>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_sbrk_r+0x1a>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_sbrk_r+0x1a>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	200003a8 	.word	0x200003a8

080057b0 <strcpy>:
 80057b0:	4603      	mov	r3, r0
 80057b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057b6:	f803 2b01 	strb.w	r2, [r3], #1
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	d1f9      	bne.n	80057b2 <strcpy+0x2>
 80057be:	4770      	bx	lr

080057c0 <strncmp>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	b16a      	cbz	r2, 80057e0 <strncmp+0x20>
 80057c4:	3901      	subs	r1, #1
 80057c6:	1884      	adds	r4, r0, r2
 80057c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80057cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <strncmp+0x1c>
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d001      	beq.n	80057dc <strncmp+0x1c>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f5      	bne.n	80057c8 <strncmp+0x8>
 80057dc:	1a98      	subs	r0, r3, r2
 80057de:	bd10      	pop	{r4, pc}
 80057e0:	4610      	mov	r0, r2
 80057e2:	e7fc      	b.n	80057de <strncmp+0x1e>

080057e4 <__ascii_wctomb>:
 80057e4:	4603      	mov	r3, r0
 80057e6:	4608      	mov	r0, r1
 80057e8:	b141      	cbz	r1, 80057fc <__ascii_wctomb+0x18>
 80057ea:	2aff      	cmp	r2, #255	; 0xff
 80057ec:	d904      	bls.n	80057f8 <__ascii_wctomb+0x14>
 80057ee:	228a      	movs	r2, #138	; 0x8a
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	4770      	bx	lr
 80057f8:	2001      	movs	r0, #1
 80057fa:	700a      	strb	r2, [r1, #0]
 80057fc:	4770      	bx	lr
	...

08005800 <__assert_func>:
 8005800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005802:	4614      	mov	r4, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4b09      	ldr	r3, [pc, #36]	; (800582c <__assert_func+0x2c>)
 8005808:	4605      	mov	r5, r0
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68d8      	ldr	r0, [r3, #12]
 800580e:	b14c      	cbz	r4, 8005824 <__assert_func+0x24>
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <__assert_func+0x30>)
 8005812:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005816:	9100      	str	r1, [sp, #0]
 8005818:	462b      	mov	r3, r5
 800581a:	4906      	ldr	r1, [pc, #24]	; (8005834 <__assert_func+0x34>)
 800581c:	f000 fe8a 	bl	8006534 <fiprintf>
 8005820:	f001 faa8 	bl	8006d74 <abort>
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <__assert_func+0x38>)
 8005826:	461c      	mov	r4, r3
 8005828:	e7f3      	b.n	8005812 <__assert_func+0x12>
 800582a:	bf00      	nop
 800582c:	20000088 	.word	0x20000088
 8005830:	080086ec 	.word	0x080086ec
 8005834:	080086f9 	.word	0x080086f9
 8005838:	08008727 	.word	0x08008727

0800583c <quorem>:
 800583c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	6903      	ldr	r3, [r0, #16]
 8005842:	690c      	ldr	r4, [r1, #16]
 8005844:	4607      	mov	r7, r0
 8005846:	42a3      	cmp	r3, r4
 8005848:	f2c0 8083 	blt.w	8005952 <quorem+0x116>
 800584c:	3c01      	subs	r4, #1
 800584e:	f100 0514 	add.w	r5, r0, #20
 8005852:	f101 0814 	add.w	r8, r1, #20
 8005856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005860:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005864:	3301      	adds	r3, #1
 8005866:	429a      	cmp	r2, r3
 8005868:	fbb2 f6f3 	udiv	r6, r2, r3
 800586c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005870:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005874:	d332      	bcc.n	80058dc <quorem+0xa0>
 8005876:	f04f 0e00 	mov.w	lr, #0
 800587a:	4640      	mov	r0, r8
 800587c:	46ac      	mov	ip, r5
 800587e:	46f2      	mov	sl, lr
 8005880:	f850 2b04 	ldr.w	r2, [r0], #4
 8005884:	b293      	uxth	r3, r2
 8005886:	fb06 e303 	mla	r3, r6, r3, lr
 800588a:	0c12      	lsrs	r2, r2, #16
 800588c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005890:	fb06 e202 	mla	r2, r6, r2, lr
 8005894:	b29b      	uxth	r3, r3
 8005896:	ebaa 0303 	sub.w	r3, sl, r3
 800589a:	f8dc a000 	ldr.w	sl, [ip]
 800589e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058a2:	fa1f fa8a 	uxth.w	sl, sl
 80058a6:	4453      	add	r3, sl
 80058a8:	fa1f fa82 	uxth.w	sl, r2
 80058ac:	f8dc 2000 	ldr.w	r2, [ip]
 80058b0:	4581      	cmp	r9, r0
 80058b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80058b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058c4:	f84c 3b04 	str.w	r3, [ip], #4
 80058c8:	d2da      	bcs.n	8005880 <quorem+0x44>
 80058ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80058ce:	b92b      	cbnz	r3, 80058dc <quorem+0xa0>
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	3b04      	subs	r3, #4
 80058d4:	429d      	cmp	r5, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	d32f      	bcc.n	800593a <quorem+0xfe>
 80058da:	613c      	str	r4, [r7, #16]
 80058dc:	4638      	mov	r0, r7
 80058de:	f7ff fcd9 	bl	8005294 <__mcmp>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	db25      	blt.n	8005932 <quorem+0xf6>
 80058e6:	4628      	mov	r0, r5
 80058e8:	f04f 0c00 	mov.w	ip, #0
 80058ec:	3601      	adds	r6, #1
 80058ee:	f858 1b04 	ldr.w	r1, [r8], #4
 80058f2:	f8d0 e000 	ldr.w	lr, [r0]
 80058f6:	b28b      	uxth	r3, r1
 80058f8:	ebac 0303 	sub.w	r3, ip, r3
 80058fc:	fa1f f28e 	uxth.w	r2, lr
 8005900:	4413      	add	r3, r2
 8005902:	0c0a      	lsrs	r2, r1, #16
 8005904:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800590c:	b29b      	uxth	r3, r3
 800590e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005912:	45c1      	cmp	r9, r8
 8005914:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005918:	f840 3b04 	str.w	r3, [r0], #4
 800591c:	d2e7      	bcs.n	80058ee <quorem+0xb2>
 800591e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005926:	b922      	cbnz	r2, 8005932 <quorem+0xf6>
 8005928:	3b04      	subs	r3, #4
 800592a:	429d      	cmp	r5, r3
 800592c:	461a      	mov	r2, r3
 800592e:	d30a      	bcc.n	8005946 <quorem+0x10a>
 8005930:	613c      	str	r4, [r7, #16]
 8005932:	4630      	mov	r0, r6
 8005934:	b003      	add	sp, #12
 8005936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	3b04      	subs	r3, #4
 800593e:	2a00      	cmp	r2, #0
 8005940:	d1cb      	bne.n	80058da <quorem+0x9e>
 8005942:	3c01      	subs	r4, #1
 8005944:	e7c6      	b.n	80058d4 <quorem+0x98>
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	3b04      	subs	r3, #4
 800594a:	2a00      	cmp	r2, #0
 800594c:	d1f0      	bne.n	8005930 <quorem+0xf4>
 800594e:	3c01      	subs	r4, #1
 8005950:	e7eb      	b.n	800592a <quorem+0xee>
 8005952:	2000      	movs	r0, #0
 8005954:	e7ee      	b.n	8005934 <quorem+0xf8>
	...

08005958 <_dtoa_r>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	4616      	mov	r6, r2
 800595e:	461f      	mov	r7, r3
 8005960:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005962:	b099      	sub	sp, #100	; 0x64
 8005964:	4605      	mov	r5, r0
 8005966:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800596a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800596e:	b974      	cbnz	r4, 800598e <_dtoa_r+0x36>
 8005970:	2010      	movs	r0, #16
 8005972:	f000 fdf1 	bl	8006558 <malloc>
 8005976:	4602      	mov	r2, r0
 8005978:	6268      	str	r0, [r5, #36]	; 0x24
 800597a:	b920      	cbnz	r0, 8005986 <_dtoa_r+0x2e>
 800597c:	21ea      	movs	r1, #234	; 0xea
 800597e:	4bae      	ldr	r3, [pc, #696]	; (8005c38 <_dtoa_r+0x2e0>)
 8005980:	48ae      	ldr	r0, [pc, #696]	; (8005c3c <_dtoa_r+0x2e4>)
 8005982:	f7ff ff3d 	bl	8005800 <__assert_func>
 8005986:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800598a:	6004      	str	r4, [r0, #0]
 800598c:	60c4      	str	r4, [r0, #12]
 800598e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	b151      	cbz	r1, 80059aa <_dtoa_r+0x52>
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	2301      	movs	r3, #1
 8005998:	4093      	lsls	r3, r2
 800599a:	604a      	str	r2, [r1, #4]
 800599c:	608b      	str	r3, [r1, #8]
 800599e:	4628      	mov	r0, r5
 80059a0:	f7ff f9f4 	bl	8004d8c <_Bfree>
 80059a4:	2200      	movs	r2, #0
 80059a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	1e3b      	subs	r3, r7, #0
 80059ac:	bfaf      	iteee	ge
 80059ae:	2300      	movge	r3, #0
 80059b0:	2201      	movlt	r2, #1
 80059b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059b6:	9305      	strlt	r3, [sp, #20]
 80059b8:	bfa8      	it	ge
 80059ba:	f8c8 3000 	strge.w	r3, [r8]
 80059be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80059c2:	4b9f      	ldr	r3, [pc, #636]	; (8005c40 <_dtoa_r+0x2e8>)
 80059c4:	bfb8      	it	lt
 80059c6:	f8c8 2000 	strlt.w	r2, [r8]
 80059ca:	ea33 0309 	bics.w	r3, r3, r9
 80059ce:	d119      	bne.n	8005a04 <_dtoa_r+0xac>
 80059d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80059d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059dc:	4333      	orrs	r3, r6
 80059de:	f000 8580 	beq.w	80064e2 <_dtoa_r+0xb8a>
 80059e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059e4:	b953      	cbnz	r3, 80059fc <_dtoa_r+0xa4>
 80059e6:	4b97      	ldr	r3, [pc, #604]	; (8005c44 <_dtoa_r+0x2ec>)
 80059e8:	e022      	b.n	8005a30 <_dtoa_r+0xd8>
 80059ea:	4b97      	ldr	r3, [pc, #604]	; (8005c48 <_dtoa_r+0x2f0>)
 80059ec:	9308      	str	r3, [sp, #32]
 80059ee:	3308      	adds	r3, #8
 80059f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	9808      	ldr	r0, [sp, #32]
 80059f6:	b019      	add	sp, #100	; 0x64
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fc:	4b91      	ldr	r3, [pc, #580]	; (8005c44 <_dtoa_r+0x2ec>)
 80059fe:	9308      	str	r3, [sp, #32]
 8005a00:	3303      	adds	r3, #3
 8005a02:	e7f5      	b.n	80059f0 <_dtoa_r+0x98>
 8005a04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a10:	2200      	movs	r2, #0
 8005a12:	2300      	movs	r3, #0
 8005a14:	f7fb f87c 	bl	8000b10 <__aeabi_dcmpeq>
 8005a18:	4680      	mov	r8, r0
 8005a1a:	b158      	cbz	r0, 8005a34 <_dtoa_r+0xdc>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8559 	beq.w	80064dc <_dtoa_r+0xb84>
 8005a2a:	4888      	ldr	r0, [pc, #544]	; (8005c4c <_dtoa_r+0x2f4>)
 8005a2c:	6018      	str	r0, [r3, #0]
 8005a2e:	1e43      	subs	r3, r0, #1
 8005a30:	9308      	str	r3, [sp, #32]
 8005a32:	e7df      	b.n	80059f4 <_dtoa_r+0x9c>
 8005a34:	ab16      	add	r3, sp, #88	; 0x58
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	ab17      	add	r3, sp, #92	; 0x5c
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a42:	f7ff fd4d 	bl	80054e0 <__d2b>
 8005a46:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a4a:	4682      	mov	sl, r0
 8005a4c:	2c00      	cmp	r4, #0
 8005a4e:	d07e      	beq.n	8005b4e <_dtoa_r+0x1f6>
 8005a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a56:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a5e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005a62:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005a66:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	4b78      	ldr	r3, [pc, #480]	; (8005c50 <_dtoa_r+0x2f8>)
 8005a6e:	f7fa fc2f 	bl	80002d0 <__aeabi_dsub>
 8005a72:	a36b      	add	r3, pc, #428	; (adr r3, 8005c20 <_dtoa_r+0x2c8>)
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f7fa fde2 	bl	8000640 <__aeabi_dmul>
 8005a7c:	a36a      	add	r3, pc, #424	; (adr r3, 8005c28 <_dtoa_r+0x2d0>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fc27 	bl	80002d4 <__adddf3>
 8005a86:	4606      	mov	r6, r0
 8005a88:	4620      	mov	r0, r4
 8005a8a:	460f      	mov	r7, r1
 8005a8c:	f7fa fd6e 	bl	800056c <__aeabi_i2d>
 8005a90:	a367      	add	r3, pc, #412	; (adr r3, 8005c30 <_dtoa_r+0x2d8>)
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	f7fa fdd3 	bl	8000640 <__aeabi_dmul>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa fc17 	bl	80002d4 <__adddf3>
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	460f      	mov	r7, r1
 8005aaa:	f7fb f863 	bl	8000b74 <__aeabi_d2iz>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4681      	mov	r9, r0
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	f7fb f834 	bl	8000b24 <__aeabi_dcmplt>
 8005abc:	b148      	cbz	r0, 8005ad2 <_dtoa_r+0x17a>
 8005abe:	4648      	mov	r0, r9
 8005ac0:	f7fa fd54 	bl	800056c <__aeabi_i2d>
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	f7fb f822 	bl	8000b10 <__aeabi_dcmpeq>
 8005acc:	b908      	cbnz	r0, 8005ad2 <_dtoa_r+0x17a>
 8005ace:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ad2:	f1b9 0f16 	cmp.w	r9, #22
 8005ad6:	d857      	bhi.n	8005b88 <_dtoa_r+0x230>
 8005ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005adc:	4b5d      	ldr	r3, [pc, #372]	; (8005c54 <_dtoa_r+0x2fc>)
 8005ade:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f7fb f81d 	bl	8000b24 <__aeabi_dcmplt>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d04e      	beq.n	8005b8c <_dtoa_r+0x234>
 8005aee:	2300      	movs	r3, #0
 8005af0:	f109 39ff 	add.w	r9, r9, #4294967295
 8005af4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005af6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005af8:	1b1c      	subs	r4, r3, r4
 8005afa:	1e63      	subs	r3, r4, #1
 8005afc:	9309      	str	r3, [sp, #36]	; 0x24
 8005afe:	bf49      	itett	mi
 8005b00:	f1c4 0301 	rsbmi	r3, r4, #1
 8005b04:	2300      	movpl	r3, #0
 8005b06:	9306      	strmi	r3, [sp, #24]
 8005b08:	2300      	movmi	r3, #0
 8005b0a:	bf54      	ite	pl
 8005b0c:	9306      	strpl	r3, [sp, #24]
 8005b0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005b10:	f1b9 0f00 	cmp.w	r9, #0
 8005b14:	db3c      	blt.n	8005b90 <_dtoa_r+0x238>
 8005b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b18:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b1c:	444b      	add	r3, r9
 8005b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b20:	2300      	movs	r3, #0
 8005b22:	930a      	str	r3, [sp, #40]	; 0x28
 8005b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b26:	2b09      	cmp	r3, #9
 8005b28:	d86c      	bhi.n	8005c04 <_dtoa_r+0x2ac>
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	bfc4      	itt	gt
 8005b2e:	3b04      	subgt	r3, #4
 8005b30:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005b32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b34:	bfc8      	it	gt
 8005b36:	2400      	movgt	r4, #0
 8005b38:	f1a3 0302 	sub.w	r3, r3, #2
 8005b3c:	bfd8      	it	le
 8005b3e:	2401      	movle	r4, #1
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	f200 808b 	bhi.w	8005c5c <_dtoa_r+0x304>
 8005b46:	e8df f003 	tbb	[pc, r3]
 8005b4a:	4f2d      	.short	0x4f2d
 8005b4c:	5b4d      	.short	0x5b4d
 8005b4e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005b52:	441c      	add	r4, r3
 8005b54:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	bfc3      	ittte	gt
 8005b5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b60:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005b64:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b68:	f1c3 0320 	rsble	r3, r3, #32
 8005b6c:	bfc6      	itte	gt
 8005b6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b72:	4318      	orrgt	r0, r3
 8005b74:	fa06 f003 	lslle.w	r0, r6, r3
 8005b78:	f7fa fce8 	bl	800054c <__aeabi_ui2d>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005b82:	3c01      	subs	r4, #1
 8005b84:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b86:	e770      	b.n	8005a6a <_dtoa_r+0x112>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e7b3      	b.n	8005af4 <_dtoa_r+0x19c>
 8005b8c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b8e:	e7b2      	b.n	8005af6 <_dtoa_r+0x19e>
 8005b90:	9b06      	ldr	r3, [sp, #24]
 8005b92:	eba3 0309 	sub.w	r3, r3, r9
 8005b96:	9306      	str	r3, [sp, #24]
 8005b98:	f1c9 0300 	rsb	r3, r9, #0
 8005b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8005ba2:	e7bf      	b.n	8005b24 <_dtoa_r+0x1cc>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dc59      	bgt.n	8005c62 <_dtoa_r+0x30a>
 8005bae:	f04f 0b01 	mov.w	fp, #1
 8005bb2:	465b      	mov	r3, fp
 8005bb4:	f8cd b008 	str.w	fp, [sp, #8]
 8005bb8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005bc0:	6042      	str	r2, [r0, #4]
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	f102 0614 	add.w	r6, r2, #20
 8005bc8:	429e      	cmp	r6, r3
 8005bca:	6841      	ldr	r1, [r0, #4]
 8005bcc:	d94f      	bls.n	8005c6e <_dtoa_r+0x316>
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f7ff f89c 	bl	8004d0c <_Balloc>
 8005bd4:	9008      	str	r0, [sp, #32]
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d14d      	bne.n	8005c76 <_dtoa_r+0x31e>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005be0:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <_dtoa_r+0x300>)
 8005be2:	e6cd      	b.n	8005980 <_dtoa_r+0x28>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e7de      	b.n	8005ba6 <_dtoa_r+0x24e>
 8005be8:	2300      	movs	r3, #0
 8005bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bee:	eb09 0b03 	add.w	fp, r9, r3
 8005bf2:	f10b 0301 	add.w	r3, fp, #1
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	9302      	str	r3, [sp, #8]
 8005bfa:	bfb8      	it	lt
 8005bfc:	2301      	movlt	r3, #1
 8005bfe:	e7dd      	b.n	8005bbc <_dtoa_r+0x264>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e7f2      	b.n	8005bea <_dtoa_r+0x292>
 8005c04:	2401      	movs	r4, #1
 8005c06:	2300      	movs	r3, #0
 8005c08:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c0a:	9322      	str	r3, [sp, #136]	; 0x88
 8005c0c:	f04f 3bff 	mov.w	fp, #4294967295
 8005c10:	2200      	movs	r2, #0
 8005c12:	2312      	movs	r3, #18
 8005c14:	f8cd b008 	str.w	fp, [sp, #8]
 8005c18:	9223      	str	r2, [sp, #140]	; 0x8c
 8005c1a:	e7cf      	b.n	8005bbc <_dtoa_r+0x264>
 8005c1c:	f3af 8000 	nop.w
 8005c20:	636f4361 	.word	0x636f4361
 8005c24:	3fd287a7 	.word	0x3fd287a7
 8005c28:	8b60c8b3 	.word	0x8b60c8b3
 8005c2c:	3fc68a28 	.word	0x3fc68a28
 8005c30:	509f79fb 	.word	0x509f79fb
 8005c34:	3fd34413 	.word	0x3fd34413
 8005c38:	08008578 	.word	0x08008578
 8005c3c:	08008838 	.word	0x08008838
 8005c40:	7ff00000 	.word	0x7ff00000
 8005c44:	08008832 	.word	0x08008832
 8005c48:	08008829 	.word	0x08008829
 8005c4c:	08008837 	.word	0x08008837
 8005c50:	3ff80000 	.word	0x3ff80000
 8005c54:	08008618 	.word	0x08008618
 8005c58:	080084e8 	.word	0x080084e8
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c60:	e7d4      	b.n	8005c0c <_dtoa_r+0x2b4>
 8005c62:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005c66:	465b      	mov	r3, fp
 8005c68:	f8cd b008 	str.w	fp, [sp, #8]
 8005c6c:	e7a6      	b.n	8005bbc <_dtoa_r+0x264>
 8005c6e:	3101      	adds	r1, #1
 8005c70:	6041      	str	r1, [r0, #4]
 8005c72:	0052      	lsls	r2, r2, #1
 8005c74:	e7a6      	b.n	8005bc4 <_dtoa_r+0x26c>
 8005c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c78:	9a08      	ldr	r2, [sp, #32]
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	9b02      	ldr	r3, [sp, #8]
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	f200 80a8 	bhi.w	8005dd4 <_dtoa_r+0x47c>
 8005c84:	2c00      	cmp	r4, #0
 8005c86:	f000 80a5 	beq.w	8005dd4 <_dtoa_r+0x47c>
 8005c8a:	f1b9 0f00 	cmp.w	r9, #0
 8005c8e:	dd34      	ble.n	8005cfa <_dtoa_r+0x3a2>
 8005c90:	4a9a      	ldr	r2, [pc, #616]	; (8005efc <_dtoa_r+0x5a4>)
 8005c92:	f009 030f 	and.w	r3, r9, #15
 8005c96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c9a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005c9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ca2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ca6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005caa:	d016      	beq.n	8005cda <_dtoa_r+0x382>
 8005cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cb0:	4b93      	ldr	r3, [pc, #588]	; (8005f00 <_dtoa_r+0x5a8>)
 8005cb2:	2703      	movs	r7, #3
 8005cb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cb8:	f7fa fdec 	bl	8000894 <__aeabi_ddiv>
 8005cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cc0:	f004 040f 	and.w	r4, r4, #15
 8005cc4:	4e8e      	ldr	r6, [pc, #568]	; (8005f00 <_dtoa_r+0x5a8>)
 8005cc6:	b954      	cbnz	r4, 8005cde <_dtoa_r+0x386>
 8005cc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cd0:	f7fa fde0 	bl	8000894 <__aeabi_ddiv>
 8005cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cd8:	e029      	b.n	8005d2e <_dtoa_r+0x3d6>
 8005cda:	2702      	movs	r7, #2
 8005cdc:	e7f2      	b.n	8005cc4 <_dtoa_r+0x36c>
 8005cde:	07e1      	lsls	r1, r4, #31
 8005ce0:	d508      	bpl.n	8005cf4 <_dtoa_r+0x39c>
 8005ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ce6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cea:	f7fa fca9 	bl	8000640 <__aeabi_dmul>
 8005cee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cf2:	3701      	adds	r7, #1
 8005cf4:	1064      	asrs	r4, r4, #1
 8005cf6:	3608      	adds	r6, #8
 8005cf8:	e7e5      	b.n	8005cc6 <_dtoa_r+0x36e>
 8005cfa:	f000 80a5 	beq.w	8005e48 <_dtoa_r+0x4f0>
 8005cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d02:	f1c9 0400 	rsb	r4, r9, #0
 8005d06:	4b7d      	ldr	r3, [pc, #500]	; (8005efc <_dtoa_r+0x5a4>)
 8005d08:	f004 020f 	and.w	r2, r4, #15
 8005d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fc94 	bl	8000640 <__aeabi_dmul>
 8005d18:	2702      	movs	r7, #2
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d20:	4e77      	ldr	r6, [pc, #476]	; (8005f00 <_dtoa_r+0x5a8>)
 8005d22:	1124      	asrs	r4, r4, #4
 8005d24:	2c00      	cmp	r4, #0
 8005d26:	f040 8084 	bne.w	8005e32 <_dtoa_r+0x4da>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1d2      	bne.n	8005cd4 <_dtoa_r+0x37c>
 8005d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 808b 	beq.w	8005e4c <_dtoa_r+0x4f4>
 8005d36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d42:	2200      	movs	r2, #0
 8005d44:	4b6f      	ldr	r3, [pc, #444]	; (8005f04 <_dtoa_r+0x5ac>)
 8005d46:	f7fa feed 	bl	8000b24 <__aeabi_dcmplt>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d07e      	beq.n	8005e4c <_dtoa_r+0x4f4>
 8005d4e:	9b02      	ldr	r3, [sp, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d07b      	beq.n	8005e4c <_dtoa_r+0x4f4>
 8005d54:	f1bb 0f00 	cmp.w	fp, #0
 8005d58:	dd38      	ble.n	8005dcc <_dtoa_r+0x474>
 8005d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4b69      	ldr	r3, [pc, #420]	; (8005f08 <_dtoa_r+0x5b0>)
 8005d62:	f7fa fc6d 	bl	8000640 <__aeabi_dmul>
 8005d66:	465c      	mov	r4, fp
 8005d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d6c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005d70:	3701      	adds	r7, #1
 8005d72:	4638      	mov	r0, r7
 8005d74:	f7fa fbfa 	bl	800056c <__aeabi_i2d>
 8005d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d7c:	f7fa fc60 	bl	8000640 <__aeabi_dmul>
 8005d80:	2200      	movs	r2, #0
 8005d82:	4b62      	ldr	r3, [pc, #392]	; (8005f0c <_dtoa_r+0x5b4>)
 8005d84:	f7fa faa6 	bl	80002d4 <__adddf3>
 8005d88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d90:	9611      	str	r6, [sp, #68]	; 0x44
 8005d92:	2c00      	cmp	r4, #0
 8005d94:	d15d      	bne.n	8005e52 <_dtoa_r+0x4fa>
 8005d96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	4b5c      	ldr	r3, [pc, #368]	; (8005f10 <_dtoa_r+0x5b8>)
 8005d9e:	f7fa fa97 	bl	80002d0 <__aeabi_dsub>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005daa:	4633      	mov	r3, r6
 8005dac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dae:	f7fa fed7 	bl	8000b60 <__aeabi_dcmpgt>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	f040 829e 	bne.w	80062f4 <_dtoa_r+0x99c>
 8005db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dbe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005dc2:	f7fa feaf 	bl	8000b24 <__aeabi_dcmplt>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f040 8292 	bne.w	80062f0 <_dtoa_r+0x998>
 8005dcc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005dd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f2c0 8153 	blt.w	8006082 <_dtoa_r+0x72a>
 8005ddc:	f1b9 0f0e 	cmp.w	r9, #14
 8005de0:	f300 814f 	bgt.w	8006082 <_dtoa_r+0x72a>
 8005de4:	4b45      	ldr	r3, [pc, #276]	; (8005efc <_dtoa_r+0x5a4>)
 8005de6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005dea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005df2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f280 80db 	bge.w	8005fb0 <_dtoa_r+0x658>
 8005dfa:	9b02      	ldr	r3, [sp, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f300 80d7 	bgt.w	8005fb0 <_dtoa_r+0x658>
 8005e02:	f040 8274 	bne.w	80062ee <_dtoa_r+0x996>
 8005e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4b40      	ldr	r3, [pc, #256]	; (8005f10 <_dtoa_r+0x5b8>)
 8005e0e:	f7fa fc17 	bl	8000640 <__aeabi_dmul>
 8005e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e16:	f7fa fe99 	bl	8000b4c <__aeabi_dcmpge>
 8005e1a:	9c02      	ldr	r4, [sp, #8]
 8005e1c:	4626      	mov	r6, r4
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	f040 824a 	bne.w	80062b8 <_dtoa_r+0x960>
 8005e24:	2331      	movs	r3, #49	; 0x31
 8005e26:	9f08      	ldr	r7, [sp, #32]
 8005e28:	f109 0901 	add.w	r9, r9, #1
 8005e2c:	f807 3b01 	strb.w	r3, [r7], #1
 8005e30:	e246      	b.n	80062c0 <_dtoa_r+0x968>
 8005e32:	07e2      	lsls	r2, r4, #31
 8005e34:	d505      	bpl.n	8005e42 <_dtoa_r+0x4ea>
 8005e36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e3a:	f7fa fc01 	bl	8000640 <__aeabi_dmul>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	3701      	adds	r7, #1
 8005e42:	1064      	asrs	r4, r4, #1
 8005e44:	3608      	adds	r6, #8
 8005e46:	e76d      	b.n	8005d24 <_dtoa_r+0x3cc>
 8005e48:	2702      	movs	r7, #2
 8005e4a:	e770      	b.n	8005d2e <_dtoa_r+0x3d6>
 8005e4c:	46c8      	mov	r8, r9
 8005e4e:	9c02      	ldr	r4, [sp, #8]
 8005e50:	e78f      	b.n	8005d72 <_dtoa_r+0x41a>
 8005e52:	9908      	ldr	r1, [sp, #32]
 8005e54:	4b29      	ldr	r3, [pc, #164]	; (8005efc <_dtoa_r+0x5a4>)
 8005e56:	4421      	add	r1, r4
 8005e58:	9112      	str	r1, [sp, #72]	; 0x48
 8005e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	d055      	beq.n	8005f18 <_dtoa_r+0x5c0>
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	4929      	ldr	r1, [pc, #164]	; (8005f14 <_dtoa_r+0x5bc>)
 8005e70:	f7fa fd10 	bl	8000894 <__aeabi_ddiv>
 8005e74:	463b      	mov	r3, r7
 8005e76:	4632      	mov	r2, r6
 8005e78:	f7fa fa2a 	bl	80002d0 <__aeabi_dsub>
 8005e7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e80:	9f08      	ldr	r7, [sp, #32]
 8005e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e86:	f7fa fe75 	bl	8000b74 <__aeabi_d2iz>
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	f7fa fb6e 	bl	800056c <__aeabi_i2d>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e98:	f7fa fa1a 	bl	80002d0 <__aeabi_dsub>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	3430      	adds	r4, #48	; 0x30
 8005ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005eaa:	f807 4b01 	strb.w	r4, [r7], #1
 8005eae:	f7fa fe39 	bl	8000b24 <__aeabi_dcmplt>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d174      	bne.n	8005fa0 <_dtoa_r+0x648>
 8005eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eba:	2000      	movs	r0, #0
 8005ebc:	4911      	ldr	r1, [pc, #68]	; (8005f04 <_dtoa_r+0x5ac>)
 8005ebe:	f7fa fa07 	bl	80002d0 <__aeabi_dsub>
 8005ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ec6:	f7fa fe2d 	bl	8000b24 <__aeabi_dcmplt>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f040 80b6 	bne.w	800603c <_dtoa_r+0x6e4>
 8005ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ed2:	429f      	cmp	r7, r3
 8005ed4:	f43f af7a 	beq.w	8005dcc <_dtoa_r+0x474>
 8005ed8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005edc:	2200      	movs	r2, #0
 8005ede:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <_dtoa_r+0x5b0>)
 8005ee0:	f7fa fbae 	bl	8000640 <__aeabi_dmul>
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eee:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <_dtoa_r+0x5b0>)
 8005ef0:	f7fa fba6 	bl	8000640 <__aeabi_dmul>
 8005ef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ef8:	e7c3      	b.n	8005e82 <_dtoa_r+0x52a>
 8005efa:	bf00      	nop
 8005efc:	08008618 	.word	0x08008618
 8005f00:	080085f0 	.word	0x080085f0
 8005f04:	3ff00000 	.word	0x3ff00000
 8005f08:	40240000 	.word	0x40240000
 8005f0c:	401c0000 	.word	0x401c0000
 8005f10:	40140000 	.word	0x40140000
 8005f14:	3fe00000 	.word	0x3fe00000
 8005f18:	4630      	mov	r0, r6
 8005f1a:	4639      	mov	r1, r7
 8005f1c:	f7fa fb90 	bl	8000640 <__aeabi_dmul>
 8005f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f26:	9c08      	ldr	r4, [sp, #32]
 8005f28:	9314      	str	r3, [sp, #80]	; 0x50
 8005f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2e:	f7fa fe21 	bl	8000b74 <__aeabi_d2iz>
 8005f32:	9015      	str	r0, [sp, #84]	; 0x54
 8005f34:	f7fa fb1a 	bl	800056c <__aeabi_i2d>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f40:	f7fa f9c6 	bl	80002d0 <__aeabi_dsub>
 8005f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f46:	4606      	mov	r6, r0
 8005f48:	3330      	adds	r3, #48	; 0x30
 8005f4a:	f804 3b01 	strb.w	r3, [r4], #1
 8005f4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f50:	460f      	mov	r7, r1
 8005f52:	429c      	cmp	r4, r3
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	d124      	bne.n	8005fa4 <_dtoa_r+0x64c>
 8005f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f5e:	4bb3      	ldr	r3, [pc, #716]	; (800622c <_dtoa_r+0x8d4>)
 8005f60:	f7fa f9b8 	bl	80002d4 <__adddf3>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa fdf8 	bl	8000b60 <__aeabi_dcmpgt>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d162      	bne.n	800603a <_dtoa_r+0x6e2>
 8005f74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f78:	2000      	movs	r0, #0
 8005f7a:	49ac      	ldr	r1, [pc, #688]	; (800622c <_dtoa_r+0x8d4>)
 8005f7c:	f7fa f9a8 	bl	80002d0 <__aeabi_dsub>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4630      	mov	r0, r6
 8005f86:	4639      	mov	r1, r7
 8005f88:	f7fa fdcc 	bl	8000b24 <__aeabi_dcmplt>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	f43f af1d 	beq.w	8005dcc <_dtoa_r+0x474>
 8005f92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f94:	1e7b      	subs	r3, r7, #1
 8005f96:	9314      	str	r3, [sp, #80]	; 0x50
 8005f98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005f9c:	2b30      	cmp	r3, #48	; 0x30
 8005f9e:	d0f8      	beq.n	8005f92 <_dtoa_r+0x63a>
 8005fa0:	46c1      	mov	r9, r8
 8005fa2:	e03a      	b.n	800601a <_dtoa_r+0x6c2>
 8005fa4:	4ba2      	ldr	r3, [pc, #648]	; (8006230 <_dtoa_r+0x8d8>)
 8005fa6:	f7fa fb4b 	bl	8000640 <__aeabi_dmul>
 8005faa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fae:	e7bc      	b.n	8005f2a <_dtoa_r+0x5d2>
 8005fb0:	9f08      	ldr	r7, [sp, #32]
 8005fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fba:	f7fa fc6b 	bl	8000894 <__aeabi_ddiv>
 8005fbe:	f7fa fdd9 	bl	8000b74 <__aeabi_d2iz>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	f7fa fad2 	bl	800056c <__aeabi_i2d>
 8005fc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fcc:	f7fa fb38 	bl	8000640 <__aeabi_dmul>
 8005fd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fdc:	f7fa f978 	bl	80002d0 <__aeabi_dsub>
 8005fe0:	f807 6b01 	strb.w	r6, [r7], #1
 8005fe4:	9e08      	ldr	r6, [sp, #32]
 8005fe6:	9b02      	ldr	r3, [sp, #8]
 8005fe8:	1bbe      	subs	r6, r7, r6
 8005fea:	42b3      	cmp	r3, r6
 8005fec:	d13a      	bne.n	8006064 <_dtoa_r+0x70c>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	f7fa f96f 	bl	80002d4 <__adddf3>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006002:	f7fa fdad 	bl	8000b60 <__aeabi_dcmpgt>
 8006006:	bb58      	cbnz	r0, 8006060 <_dtoa_r+0x708>
 8006008:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800600c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006010:	f7fa fd7e 	bl	8000b10 <__aeabi_dcmpeq>
 8006014:	b108      	cbz	r0, 800601a <_dtoa_r+0x6c2>
 8006016:	07e1      	lsls	r1, r4, #31
 8006018:	d422      	bmi.n	8006060 <_dtoa_r+0x708>
 800601a:	4628      	mov	r0, r5
 800601c:	4651      	mov	r1, sl
 800601e:	f7fe feb5 	bl	8004d8c <_Bfree>
 8006022:	2300      	movs	r3, #0
 8006024:	703b      	strb	r3, [r7, #0]
 8006026:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006028:	f109 0001 	add.w	r0, r9, #1
 800602c:	6018      	str	r0, [r3, #0]
 800602e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006030:	2b00      	cmp	r3, #0
 8006032:	f43f acdf 	beq.w	80059f4 <_dtoa_r+0x9c>
 8006036:	601f      	str	r7, [r3, #0]
 8006038:	e4dc      	b.n	80059f4 <_dtoa_r+0x9c>
 800603a:	4627      	mov	r7, r4
 800603c:	463b      	mov	r3, r7
 800603e:	461f      	mov	r7, r3
 8006040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006044:	2a39      	cmp	r2, #57	; 0x39
 8006046:	d107      	bne.n	8006058 <_dtoa_r+0x700>
 8006048:	9a08      	ldr	r2, [sp, #32]
 800604a:	429a      	cmp	r2, r3
 800604c:	d1f7      	bne.n	800603e <_dtoa_r+0x6e6>
 800604e:	2230      	movs	r2, #48	; 0x30
 8006050:	9908      	ldr	r1, [sp, #32]
 8006052:	f108 0801 	add.w	r8, r8, #1
 8006056:	700a      	strb	r2, [r1, #0]
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	3201      	adds	r2, #1
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e79f      	b.n	8005fa0 <_dtoa_r+0x648>
 8006060:	46c8      	mov	r8, r9
 8006062:	e7eb      	b.n	800603c <_dtoa_r+0x6e4>
 8006064:	2200      	movs	r2, #0
 8006066:	4b72      	ldr	r3, [pc, #456]	; (8006230 <_dtoa_r+0x8d8>)
 8006068:	f7fa faea 	bl	8000640 <__aeabi_dmul>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006074:	2200      	movs	r2, #0
 8006076:	2300      	movs	r3, #0
 8006078:	f7fa fd4a 	bl	8000b10 <__aeabi_dcmpeq>
 800607c:	2800      	cmp	r0, #0
 800607e:	d098      	beq.n	8005fb2 <_dtoa_r+0x65a>
 8006080:	e7cb      	b.n	800601a <_dtoa_r+0x6c2>
 8006082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006084:	2a00      	cmp	r2, #0
 8006086:	f000 80cd 	beq.w	8006224 <_dtoa_r+0x8cc>
 800608a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800608c:	2a01      	cmp	r2, #1
 800608e:	f300 80af 	bgt.w	80061f0 <_dtoa_r+0x898>
 8006092:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006094:	2a00      	cmp	r2, #0
 8006096:	f000 80a7 	beq.w	80061e8 <_dtoa_r+0x890>
 800609a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800609e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060a0:	9f06      	ldr	r7, [sp, #24]
 80060a2:	9a06      	ldr	r2, [sp, #24]
 80060a4:	2101      	movs	r1, #1
 80060a6:	441a      	add	r2, r3
 80060a8:	9206      	str	r2, [sp, #24]
 80060aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ac:	4628      	mov	r0, r5
 80060ae:	441a      	add	r2, r3
 80060b0:	9209      	str	r2, [sp, #36]	; 0x24
 80060b2:	f7fe ff6f 	bl	8004f94 <__i2b>
 80060b6:	4606      	mov	r6, r0
 80060b8:	2f00      	cmp	r7, #0
 80060ba:	dd0c      	ble.n	80060d6 <_dtoa_r+0x77e>
 80060bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	dd09      	ble.n	80060d6 <_dtoa_r+0x77e>
 80060c2:	42bb      	cmp	r3, r7
 80060c4:	bfa8      	it	ge
 80060c6:	463b      	movge	r3, r7
 80060c8:	9a06      	ldr	r2, [sp, #24]
 80060ca:	1aff      	subs	r7, r7, r3
 80060cc:	1ad2      	subs	r2, r2, r3
 80060ce:	9206      	str	r2, [sp, #24]
 80060d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	9309      	str	r3, [sp, #36]	; 0x24
 80060d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d8:	b1f3      	cbz	r3, 8006118 <_dtoa_r+0x7c0>
 80060da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80a9 	beq.w	8006234 <_dtoa_r+0x8dc>
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	dd10      	ble.n	8006108 <_dtoa_r+0x7b0>
 80060e6:	4631      	mov	r1, r6
 80060e8:	4622      	mov	r2, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	f7ff f80c 	bl	8005108 <__pow5mult>
 80060f0:	4652      	mov	r2, sl
 80060f2:	4601      	mov	r1, r0
 80060f4:	4606      	mov	r6, r0
 80060f6:	4628      	mov	r0, r5
 80060f8:	f7fe ff62 	bl	8004fc0 <__multiply>
 80060fc:	4680      	mov	r8, r0
 80060fe:	4651      	mov	r1, sl
 8006100:	4628      	mov	r0, r5
 8006102:	f7fe fe43 	bl	8004d8c <_Bfree>
 8006106:	46c2      	mov	sl, r8
 8006108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800610a:	1b1a      	subs	r2, r3, r4
 800610c:	d004      	beq.n	8006118 <_dtoa_r+0x7c0>
 800610e:	4651      	mov	r1, sl
 8006110:	4628      	mov	r0, r5
 8006112:	f7fe fff9 	bl	8005108 <__pow5mult>
 8006116:	4682      	mov	sl, r0
 8006118:	2101      	movs	r1, #1
 800611a:	4628      	mov	r0, r5
 800611c:	f7fe ff3a 	bl	8004f94 <__i2b>
 8006120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006122:	4604      	mov	r4, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	f340 8087 	ble.w	8006238 <_dtoa_r+0x8e0>
 800612a:	461a      	mov	r2, r3
 800612c:	4601      	mov	r1, r0
 800612e:	4628      	mov	r0, r5
 8006130:	f7fe ffea 	bl	8005108 <__pow5mult>
 8006134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006136:	4604      	mov	r4, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	f340 8080 	ble.w	800623e <_dtoa_r+0x8e6>
 800613e:	f04f 0800 	mov.w	r8, #0
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006148:	6918      	ldr	r0, [r3, #16]
 800614a:	f7fe fed5 	bl	8004ef8 <__hi0bits>
 800614e:	f1c0 0020 	rsb	r0, r0, #32
 8006152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006154:	4418      	add	r0, r3
 8006156:	f010 001f 	ands.w	r0, r0, #31
 800615a:	f000 8092 	beq.w	8006282 <_dtoa_r+0x92a>
 800615e:	f1c0 0320 	rsb	r3, r0, #32
 8006162:	2b04      	cmp	r3, #4
 8006164:	f340 808a 	ble.w	800627c <_dtoa_r+0x924>
 8006168:	f1c0 001c 	rsb	r0, r0, #28
 800616c:	9b06      	ldr	r3, [sp, #24]
 800616e:	4407      	add	r7, r0
 8006170:	4403      	add	r3, r0
 8006172:	9306      	str	r3, [sp, #24]
 8006174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006176:	4403      	add	r3, r0
 8006178:	9309      	str	r3, [sp, #36]	; 0x24
 800617a:	9b06      	ldr	r3, [sp, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	dd05      	ble.n	800618c <_dtoa_r+0x834>
 8006180:	4651      	mov	r1, sl
 8006182:	461a      	mov	r2, r3
 8006184:	4628      	mov	r0, r5
 8006186:	f7ff f819 	bl	80051bc <__lshift>
 800618a:	4682      	mov	sl, r0
 800618c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618e:	2b00      	cmp	r3, #0
 8006190:	dd05      	ble.n	800619e <_dtoa_r+0x846>
 8006192:	4621      	mov	r1, r4
 8006194:	461a      	mov	r2, r3
 8006196:	4628      	mov	r0, r5
 8006198:	f7ff f810 	bl	80051bc <__lshift>
 800619c:	4604      	mov	r4, r0
 800619e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d070      	beq.n	8006286 <_dtoa_r+0x92e>
 80061a4:	4621      	mov	r1, r4
 80061a6:	4650      	mov	r0, sl
 80061a8:	f7ff f874 	bl	8005294 <__mcmp>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	da6a      	bge.n	8006286 <_dtoa_r+0x92e>
 80061b0:	2300      	movs	r3, #0
 80061b2:	4651      	mov	r1, sl
 80061b4:	220a      	movs	r2, #10
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7fe fe0a 	bl	8004dd0 <__multadd>
 80061bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061be:	4682      	mov	sl, r0
 80061c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8193 	beq.w	80064f0 <_dtoa_r+0xb98>
 80061ca:	4631      	mov	r1, r6
 80061cc:	2300      	movs	r3, #0
 80061ce:	220a      	movs	r2, #10
 80061d0:	4628      	mov	r0, r5
 80061d2:	f7fe fdfd 	bl	8004dd0 <__multadd>
 80061d6:	f1bb 0f00 	cmp.w	fp, #0
 80061da:	4606      	mov	r6, r0
 80061dc:	f300 8093 	bgt.w	8006306 <_dtoa_r+0x9ae>
 80061e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	dc57      	bgt.n	8006296 <_dtoa_r+0x93e>
 80061e6:	e08e      	b.n	8006306 <_dtoa_r+0x9ae>
 80061e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061ee:	e756      	b.n	800609e <_dtoa_r+0x746>
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	1e5c      	subs	r4, r3, #1
 80061f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f6:	42a3      	cmp	r3, r4
 80061f8:	bfb7      	itett	lt
 80061fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061fc:	1b1c      	subge	r4, r3, r4
 80061fe:	1ae2      	sublt	r2, r4, r3
 8006200:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006202:	bfbe      	ittt	lt
 8006204:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006206:	189b      	addlt	r3, r3, r2
 8006208:	930e      	strlt	r3, [sp, #56]	; 0x38
 800620a:	9b02      	ldr	r3, [sp, #8]
 800620c:	bfb8      	it	lt
 800620e:	2400      	movlt	r4, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	bfbb      	ittet	lt
 8006214:	9b06      	ldrlt	r3, [sp, #24]
 8006216:	9a02      	ldrlt	r2, [sp, #8]
 8006218:	9f06      	ldrge	r7, [sp, #24]
 800621a:	1a9f      	sublt	r7, r3, r2
 800621c:	bfac      	ite	ge
 800621e:	9b02      	ldrge	r3, [sp, #8]
 8006220:	2300      	movlt	r3, #0
 8006222:	e73e      	b.n	80060a2 <_dtoa_r+0x74a>
 8006224:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006226:	9f06      	ldr	r7, [sp, #24]
 8006228:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800622a:	e745      	b.n	80060b8 <_dtoa_r+0x760>
 800622c:	3fe00000 	.word	0x3fe00000
 8006230:	40240000 	.word	0x40240000
 8006234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006236:	e76a      	b.n	800610e <_dtoa_r+0x7b6>
 8006238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800623a:	2b01      	cmp	r3, #1
 800623c:	dc19      	bgt.n	8006272 <_dtoa_r+0x91a>
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	b9bb      	cbnz	r3, 8006272 <_dtoa_r+0x91a>
 8006242:	9b05      	ldr	r3, [sp, #20]
 8006244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006248:	b99b      	cbnz	r3, 8006272 <_dtoa_r+0x91a>
 800624a:	9b05      	ldr	r3, [sp, #20]
 800624c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006250:	0d1b      	lsrs	r3, r3, #20
 8006252:	051b      	lsls	r3, r3, #20
 8006254:	b183      	cbz	r3, 8006278 <_dtoa_r+0x920>
 8006256:	f04f 0801 	mov.w	r8, #1
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	3301      	adds	r3, #1
 800625e:	9306      	str	r3, [sp, #24]
 8006260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006262:	3301      	adds	r3, #1
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006268:	2b00      	cmp	r3, #0
 800626a:	f47f af6a 	bne.w	8006142 <_dtoa_r+0x7ea>
 800626e:	2001      	movs	r0, #1
 8006270:	e76f      	b.n	8006152 <_dtoa_r+0x7fa>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	e7f6      	b.n	8006266 <_dtoa_r+0x90e>
 8006278:	4698      	mov	r8, r3
 800627a:	e7f4      	b.n	8006266 <_dtoa_r+0x90e>
 800627c:	f43f af7d 	beq.w	800617a <_dtoa_r+0x822>
 8006280:	4618      	mov	r0, r3
 8006282:	301c      	adds	r0, #28
 8006284:	e772      	b.n	800616c <_dtoa_r+0x814>
 8006286:	9b02      	ldr	r3, [sp, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	dc36      	bgt.n	80062fa <_dtoa_r+0x9a2>
 800628c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800628e:	2b02      	cmp	r3, #2
 8006290:	dd33      	ble.n	80062fa <_dtoa_r+0x9a2>
 8006292:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006296:	f1bb 0f00 	cmp.w	fp, #0
 800629a:	d10d      	bne.n	80062b8 <_dtoa_r+0x960>
 800629c:	4621      	mov	r1, r4
 800629e:	465b      	mov	r3, fp
 80062a0:	2205      	movs	r2, #5
 80062a2:	4628      	mov	r0, r5
 80062a4:	f7fe fd94 	bl	8004dd0 <__multadd>
 80062a8:	4601      	mov	r1, r0
 80062aa:	4604      	mov	r4, r0
 80062ac:	4650      	mov	r0, sl
 80062ae:	f7fe fff1 	bl	8005294 <__mcmp>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f73f adb6 	bgt.w	8005e24 <_dtoa_r+0x4cc>
 80062b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062ba:	9f08      	ldr	r7, [sp, #32]
 80062bc:	ea6f 0903 	mvn.w	r9, r3
 80062c0:	f04f 0800 	mov.w	r8, #0
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7fe fd60 	bl	8004d8c <_Bfree>
 80062cc:	2e00      	cmp	r6, #0
 80062ce:	f43f aea4 	beq.w	800601a <_dtoa_r+0x6c2>
 80062d2:	f1b8 0f00 	cmp.w	r8, #0
 80062d6:	d005      	beq.n	80062e4 <_dtoa_r+0x98c>
 80062d8:	45b0      	cmp	r8, r6
 80062da:	d003      	beq.n	80062e4 <_dtoa_r+0x98c>
 80062dc:	4641      	mov	r1, r8
 80062de:	4628      	mov	r0, r5
 80062e0:	f7fe fd54 	bl	8004d8c <_Bfree>
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7fe fd50 	bl	8004d8c <_Bfree>
 80062ec:	e695      	b.n	800601a <_dtoa_r+0x6c2>
 80062ee:	2400      	movs	r4, #0
 80062f0:	4626      	mov	r6, r4
 80062f2:	e7e1      	b.n	80062b8 <_dtoa_r+0x960>
 80062f4:	46c1      	mov	r9, r8
 80062f6:	4626      	mov	r6, r4
 80062f8:	e594      	b.n	8005e24 <_dtoa_r+0x4cc>
 80062fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062fc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80fc 	beq.w	80064fe <_dtoa_r+0xba6>
 8006306:	2f00      	cmp	r7, #0
 8006308:	dd05      	ble.n	8006316 <_dtoa_r+0x9be>
 800630a:	4631      	mov	r1, r6
 800630c:	463a      	mov	r2, r7
 800630e:	4628      	mov	r0, r5
 8006310:	f7fe ff54 	bl	80051bc <__lshift>
 8006314:	4606      	mov	r6, r0
 8006316:	f1b8 0f00 	cmp.w	r8, #0
 800631a:	d05c      	beq.n	80063d6 <_dtoa_r+0xa7e>
 800631c:	4628      	mov	r0, r5
 800631e:	6871      	ldr	r1, [r6, #4]
 8006320:	f7fe fcf4 	bl	8004d0c <_Balloc>
 8006324:	4607      	mov	r7, r0
 8006326:	b928      	cbnz	r0, 8006334 <_dtoa_r+0x9dc>
 8006328:	4602      	mov	r2, r0
 800632a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800632e:	4b7e      	ldr	r3, [pc, #504]	; (8006528 <_dtoa_r+0xbd0>)
 8006330:	f7ff bb26 	b.w	8005980 <_dtoa_r+0x28>
 8006334:	6932      	ldr	r2, [r6, #16]
 8006336:	f106 010c 	add.w	r1, r6, #12
 800633a:	3202      	adds	r2, #2
 800633c:	0092      	lsls	r2, r2, #2
 800633e:	300c      	adds	r0, #12
 8006340:	f7fe fcd6 	bl	8004cf0 <memcpy>
 8006344:	2201      	movs	r2, #1
 8006346:	4639      	mov	r1, r7
 8006348:	4628      	mov	r0, r5
 800634a:	f7fe ff37 	bl	80051bc <__lshift>
 800634e:	46b0      	mov	r8, r6
 8006350:	4606      	mov	r6, r0
 8006352:	9b08      	ldr	r3, [sp, #32]
 8006354:	3301      	adds	r3, #1
 8006356:	9302      	str	r3, [sp, #8]
 8006358:	9b08      	ldr	r3, [sp, #32]
 800635a:	445b      	add	r3, fp
 800635c:	930a      	str	r3, [sp, #40]	; 0x28
 800635e:	9b04      	ldr	r3, [sp, #16]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	9309      	str	r3, [sp, #36]	; 0x24
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	4621      	mov	r1, r4
 800636a:	4650      	mov	r0, sl
 800636c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006370:	f7ff fa64 	bl	800583c <quorem>
 8006374:	4603      	mov	r3, r0
 8006376:	4641      	mov	r1, r8
 8006378:	3330      	adds	r3, #48	; 0x30
 800637a:	9004      	str	r0, [sp, #16]
 800637c:	4650      	mov	r0, sl
 800637e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006380:	f7fe ff88 	bl	8005294 <__mcmp>
 8006384:	4632      	mov	r2, r6
 8006386:	9006      	str	r0, [sp, #24]
 8006388:	4621      	mov	r1, r4
 800638a:	4628      	mov	r0, r5
 800638c:	f7fe ff9e 	bl	80052cc <__mdiff>
 8006390:	68c2      	ldr	r2, [r0, #12]
 8006392:	4607      	mov	r7, r0
 8006394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006396:	bb02      	cbnz	r2, 80063da <_dtoa_r+0xa82>
 8006398:	4601      	mov	r1, r0
 800639a:	4650      	mov	r0, sl
 800639c:	f7fe ff7a 	bl	8005294 <__mcmp>
 80063a0:	4602      	mov	r2, r0
 80063a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a4:	4639      	mov	r1, r7
 80063a6:	4628      	mov	r0, r5
 80063a8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80063ac:	f7fe fcee 	bl	8004d8c <_Bfree>
 80063b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063b4:	9f02      	ldr	r7, [sp, #8]
 80063b6:	ea43 0102 	orr.w	r1, r3, r2
 80063ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063bc:	430b      	orrs	r3, r1
 80063be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063c0:	d10d      	bne.n	80063de <_dtoa_r+0xa86>
 80063c2:	2b39      	cmp	r3, #57	; 0x39
 80063c4:	d027      	beq.n	8006416 <_dtoa_r+0xabe>
 80063c6:	9a06      	ldr	r2, [sp, #24]
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	dd01      	ble.n	80063d0 <_dtoa_r+0xa78>
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	3331      	adds	r3, #49	; 0x31
 80063d0:	f88b 3000 	strb.w	r3, [fp]
 80063d4:	e776      	b.n	80062c4 <_dtoa_r+0x96c>
 80063d6:	4630      	mov	r0, r6
 80063d8:	e7b9      	b.n	800634e <_dtoa_r+0x9f6>
 80063da:	2201      	movs	r2, #1
 80063dc:	e7e2      	b.n	80063a4 <_dtoa_r+0xa4c>
 80063de:	9906      	ldr	r1, [sp, #24]
 80063e0:	2900      	cmp	r1, #0
 80063e2:	db04      	blt.n	80063ee <_dtoa_r+0xa96>
 80063e4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80063e6:	4301      	orrs	r1, r0
 80063e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ea:	4301      	orrs	r1, r0
 80063ec:	d120      	bne.n	8006430 <_dtoa_r+0xad8>
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	ddee      	ble.n	80063d0 <_dtoa_r+0xa78>
 80063f2:	4651      	mov	r1, sl
 80063f4:	2201      	movs	r2, #1
 80063f6:	4628      	mov	r0, r5
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	f7fe fedf 	bl	80051bc <__lshift>
 80063fe:	4621      	mov	r1, r4
 8006400:	4682      	mov	sl, r0
 8006402:	f7fe ff47 	bl	8005294 <__mcmp>
 8006406:	2800      	cmp	r0, #0
 8006408:	9b02      	ldr	r3, [sp, #8]
 800640a:	dc02      	bgt.n	8006412 <_dtoa_r+0xaba>
 800640c:	d1e0      	bne.n	80063d0 <_dtoa_r+0xa78>
 800640e:	07da      	lsls	r2, r3, #31
 8006410:	d5de      	bpl.n	80063d0 <_dtoa_r+0xa78>
 8006412:	2b39      	cmp	r3, #57	; 0x39
 8006414:	d1da      	bne.n	80063cc <_dtoa_r+0xa74>
 8006416:	2339      	movs	r3, #57	; 0x39
 8006418:	f88b 3000 	strb.w	r3, [fp]
 800641c:	463b      	mov	r3, r7
 800641e:	461f      	mov	r7, r3
 8006420:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006424:	3b01      	subs	r3, #1
 8006426:	2a39      	cmp	r2, #57	; 0x39
 8006428:	d050      	beq.n	80064cc <_dtoa_r+0xb74>
 800642a:	3201      	adds	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e749      	b.n	80062c4 <_dtoa_r+0x96c>
 8006430:	2a00      	cmp	r2, #0
 8006432:	dd03      	ble.n	800643c <_dtoa_r+0xae4>
 8006434:	2b39      	cmp	r3, #57	; 0x39
 8006436:	d0ee      	beq.n	8006416 <_dtoa_r+0xabe>
 8006438:	3301      	adds	r3, #1
 800643a:	e7c9      	b.n	80063d0 <_dtoa_r+0xa78>
 800643c:	9a02      	ldr	r2, [sp, #8]
 800643e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006440:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006444:	428a      	cmp	r2, r1
 8006446:	d02a      	beq.n	800649e <_dtoa_r+0xb46>
 8006448:	4651      	mov	r1, sl
 800644a:	2300      	movs	r3, #0
 800644c:	220a      	movs	r2, #10
 800644e:	4628      	mov	r0, r5
 8006450:	f7fe fcbe 	bl	8004dd0 <__multadd>
 8006454:	45b0      	cmp	r8, r6
 8006456:	4682      	mov	sl, r0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	f04f 020a 	mov.w	r2, #10
 8006460:	4641      	mov	r1, r8
 8006462:	4628      	mov	r0, r5
 8006464:	d107      	bne.n	8006476 <_dtoa_r+0xb1e>
 8006466:	f7fe fcb3 	bl	8004dd0 <__multadd>
 800646a:	4680      	mov	r8, r0
 800646c:	4606      	mov	r6, r0
 800646e:	9b02      	ldr	r3, [sp, #8]
 8006470:	3301      	adds	r3, #1
 8006472:	9302      	str	r3, [sp, #8]
 8006474:	e777      	b.n	8006366 <_dtoa_r+0xa0e>
 8006476:	f7fe fcab 	bl	8004dd0 <__multadd>
 800647a:	4631      	mov	r1, r6
 800647c:	4680      	mov	r8, r0
 800647e:	2300      	movs	r3, #0
 8006480:	220a      	movs	r2, #10
 8006482:	4628      	mov	r0, r5
 8006484:	f7fe fca4 	bl	8004dd0 <__multadd>
 8006488:	4606      	mov	r6, r0
 800648a:	e7f0      	b.n	800646e <_dtoa_r+0xb16>
 800648c:	f1bb 0f00 	cmp.w	fp, #0
 8006490:	bfcc      	ite	gt
 8006492:	465f      	movgt	r7, fp
 8006494:	2701      	movle	r7, #1
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	9a08      	ldr	r2, [sp, #32]
 800649c:	4417      	add	r7, r2
 800649e:	4651      	mov	r1, sl
 80064a0:	2201      	movs	r2, #1
 80064a2:	4628      	mov	r0, r5
 80064a4:	9302      	str	r3, [sp, #8]
 80064a6:	f7fe fe89 	bl	80051bc <__lshift>
 80064aa:	4621      	mov	r1, r4
 80064ac:	4682      	mov	sl, r0
 80064ae:	f7fe fef1 	bl	8005294 <__mcmp>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	dcb2      	bgt.n	800641c <_dtoa_r+0xac4>
 80064b6:	d102      	bne.n	80064be <_dtoa_r+0xb66>
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	07db      	lsls	r3, r3, #31
 80064bc:	d4ae      	bmi.n	800641c <_dtoa_r+0xac4>
 80064be:	463b      	mov	r3, r7
 80064c0:	461f      	mov	r7, r3
 80064c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064c6:	2a30      	cmp	r2, #48	; 0x30
 80064c8:	d0fa      	beq.n	80064c0 <_dtoa_r+0xb68>
 80064ca:	e6fb      	b.n	80062c4 <_dtoa_r+0x96c>
 80064cc:	9a08      	ldr	r2, [sp, #32]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d1a5      	bne.n	800641e <_dtoa_r+0xac6>
 80064d2:	2331      	movs	r3, #49	; 0x31
 80064d4:	f109 0901 	add.w	r9, r9, #1
 80064d8:	7013      	strb	r3, [r2, #0]
 80064da:	e6f3      	b.n	80062c4 <_dtoa_r+0x96c>
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <_dtoa_r+0xbd4>)
 80064de:	f7ff baa7 	b.w	8005a30 <_dtoa_r+0xd8>
 80064e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f aa80 	bne.w	80059ea <_dtoa_r+0x92>
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <_dtoa_r+0xbd8>)
 80064ec:	f7ff baa0 	b.w	8005a30 <_dtoa_r+0xd8>
 80064f0:	f1bb 0f00 	cmp.w	fp, #0
 80064f4:	dc03      	bgt.n	80064fe <_dtoa_r+0xba6>
 80064f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	f73f aecc 	bgt.w	8006296 <_dtoa_r+0x93e>
 80064fe:	9f08      	ldr	r7, [sp, #32]
 8006500:	4621      	mov	r1, r4
 8006502:	4650      	mov	r0, sl
 8006504:	f7ff f99a 	bl	800583c <quorem>
 8006508:	9a08      	ldr	r2, [sp, #32]
 800650a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800650e:	f807 3b01 	strb.w	r3, [r7], #1
 8006512:	1aba      	subs	r2, r7, r2
 8006514:	4593      	cmp	fp, r2
 8006516:	ddb9      	ble.n	800648c <_dtoa_r+0xb34>
 8006518:	4651      	mov	r1, sl
 800651a:	2300      	movs	r3, #0
 800651c:	220a      	movs	r2, #10
 800651e:	4628      	mov	r0, r5
 8006520:	f7fe fc56 	bl	8004dd0 <__multadd>
 8006524:	4682      	mov	sl, r0
 8006526:	e7eb      	b.n	8006500 <_dtoa_r+0xba8>
 8006528:	080084e8 	.word	0x080084e8
 800652c:	08008836 	.word	0x08008836
 8006530:	08008829 	.word	0x08008829

08006534 <fiprintf>:
 8006534:	b40e      	push	{r1, r2, r3}
 8006536:	b503      	push	{r0, r1, lr}
 8006538:	4601      	mov	r1, r0
 800653a:	ab03      	add	r3, sp, #12
 800653c:	4805      	ldr	r0, [pc, #20]	; (8006554 <fiprintf+0x20>)
 800653e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006542:	6800      	ldr	r0, [r0, #0]
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	f000 f88f 	bl	8006668 <_vfiprintf_r>
 800654a:	b002      	add	sp, #8
 800654c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006550:	b003      	add	sp, #12
 8006552:	4770      	bx	lr
 8006554:	20000088 	.word	0x20000088

08006558 <malloc>:
 8006558:	4b02      	ldr	r3, [pc, #8]	; (8006564 <malloc+0xc>)
 800655a:	4601      	mov	r1, r0
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	f7ff b8b7 	b.w	80056d0 <_malloc_r>
 8006562:	bf00      	nop
 8006564:	20000088 	.word	0x20000088

08006568 <__malloc_lock>:
 8006568:	4801      	ldr	r0, [pc, #4]	; (8006570 <__malloc_lock+0x8>)
 800656a:	f000 bdc3 	b.w	80070f4 <__retarget_lock_acquire_recursive>
 800656e:	bf00      	nop
 8006570:	200003b0 	.word	0x200003b0

08006574 <__malloc_unlock>:
 8006574:	4801      	ldr	r0, [pc, #4]	; (800657c <__malloc_unlock+0x8>)
 8006576:	f000 bdbe 	b.w	80070f6 <__retarget_lock_release_recursive>
 800657a:	bf00      	nop
 800657c:	200003b0 	.word	0x200003b0

08006580 <_free_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4605      	mov	r5, r0
 8006584:	2900      	cmp	r1, #0
 8006586:	d043      	beq.n	8006610 <_free_r+0x90>
 8006588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800658c:	1f0c      	subs	r4, r1, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	bfb8      	it	lt
 8006592:	18e4      	addlt	r4, r4, r3
 8006594:	f7ff ffe8 	bl	8006568 <__malloc_lock>
 8006598:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <_free_r+0x94>)
 800659a:	6813      	ldr	r3, [r2, #0]
 800659c:	4610      	mov	r0, r2
 800659e:	b933      	cbnz	r3, 80065ae <_free_r+0x2e>
 80065a0:	6063      	str	r3, [r4, #4]
 80065a2:	6014      	str	r4, [r2, #0]
 80065a4:	4628      	mov	r0, r5
 80065a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065aa:	f7ff bfe3 	b.w	8006574 <__malloc_unlock>
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	d90a      	bls.n	80065c8 <_free_r+0x48>
 80065b2:	6821      	ldr	r1, [r4, #0]
 80065b4:	1862      	adds	r2, r4, r1
 80065b6:	4293      	cmp	r3, r2
 80065b8:	bf01      	itttt	eq
 80065ba:	681a      	ldreq	r2, [r3, #0]
 80065bc:	685b      	ldreq	r3, [r3, #4]
 80065be:	1852      	addeq	r2, r2, r1
 80065c0:	6022      	streq	r2, [r4, #0]
 80065c2:	6063      	str	r3, [r4, #4]
 80065c4:	6004      	str	r4, [r0, #0]
 80065c6:	e7ed      	b.n	80065a4 <_free_r+0x24>
 80065c8:	461a      	mov	r2, r3
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	b10b      	cbz	r3, 80065d2 <_free_r+0x52>
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	d9fa      	bls.n	80065c8 <_free_r+0x48>
 80065d2:	6811      	ldr	r1, [r2, #0]
 80065d4:	1850      	adds	r0, r2, r1
 80065d6:	42a0      	cmp	r0, r4
 80065d8:	d10b      	bne.n	80065f2 <_free_r+0x72>
 80065da:	6820      	ldr	r0, [r4, #0]
 80065dc:	4401      	add	r1, r0
 80065de:	1850      	adds	r0, r2, r1
 80065e0:	4283      	cmp	r3, r0
 80065e2:	6011      	str	r1, [r2, #0]
 80065e4:	d1de      	bne.n	80065a4 <_free_r+0x24>
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4401      	add	r1, r0
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	6053      	str	r3, [r2, #4]
 80065f0:	e7d8      	b.n	80065a4 <_free_r+0x24>
 80065f2:	d902      	bls.n	80065fa <_free_r+0x7a>
 80065f4:	230c      	movs	r3, #12
 80065f6:	602b      	str	r3, [r5, #0]
 80065f8:	e7d4      	b.n	80065a4 <_free_r+0x24>
 80065fa:	6820      	ldr	r0, [r4, #0]
 80065fc:	1821      	adds	r1, r4, r0
 80065fe:	428b      	cmp	r3, r1
 8006600:	bf01      	itttt	eq
 8006602:	6819      	ldreq	r1, [r3, #0]
 8006604:	685b      	ldreq	r3, [r3, #4]
 8006606:	1809      	addeq	r1, r1, r0
 8006608:	6021      	streq	r1, [r4, #0]
 800660a:	6063      	str	r3, [r4, #4]
 800660c:	6054      	str	r4, [r2, #4]
 800660e:	e7c9      	b.n	80065a4 <_free_r+0x24>
 8006610:	bd38      	pop	{r3, r4, r5, pc}
 8006612:	bf00      	nop
 8006614:	2000028c 	.word	0x2000028c

08006618 <__sfputc_r>:
 8006618:	6893      	ldr	r3, [r2, #8]
 800661a:	b410      	push	{r4}
 800661c:	3b01      	subs	r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	6093      	str	r3, [r2, #8]
 8006622:	da07      	bge.n	8006634 <__sfputc_r+0x1c>
 8006624:	6994      	ldr	r4, [r2, #24]
 8006626:	42a3      	cmp	r3, r4
 8006628:	db01      	blt.n	800662e <__sfputc_r+0x16>
 800662a:	290a      	cmp	r1, #10
 800662c:	d102      	bne.n	8006634 <__sfputc_r+0x1c>
 800662e:	bc10      	pop	{r4}
 8006630:	f000 bae0 	b.w	8006bf4 <__swbuf_r>
 8006634:	6813      	ldr	r3, [r2, #0]
 8006636:	1c58      	adds	r0, r3, #1
 8006638:	6010      	str	r0, [r2, #0]
 800663a:	7019      	strb	r1, [r3, #0]
 800663c:	4608      	mov	r0, r1
 800663e:	bc10      	pop	{r4}
 8006640:	4770      	bx	lr

08006642 <__sfputs_r>:
 8006642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006644:	4606      	mov	r6, r0
 8006646:	460f      	mov	r7, r1
 8006648:	4614      	mov	r4, r2
 800664a:	18d5      	adds	r5, r2, r3
 800664c:	42ac      	cmp	r4, r5
 800664e:	d101      	bne.n	8006654 <__sfputs_r+0x12>
 8006650:	2000      	movs	r0, #0
 8006652:	e007      	b.n	8006664 <__sfputs_r+0x22>
 8006654:	463a      	mov	r2, r7
 8006656:	4630      	mov	r0, r6
 8006658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800665c:	f7ff ffdc 	bl	8006618 <__sfputc_r>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d1f3      	bne.n	800664c <__sfputs_r+0xa>
 8006664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006668 <_vfiprintf_r>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	460d      	mov	r5, r1
 800666e:	4614      	mov	r4, r2
 8006670:	4698      	mov	r8, r3
 8006672:	4606      	mov	r6, r0
 8006674:	b09d      	sub	sp, #116	; 0x74
 8006676:	b118      	cbz	r0, 8006680 <_vfiprintf_r+0x18>
 8006678:	6983      	ldr	r3, [r0, #24]
 800667a:	b90b      	cbnz	r3, 8006680 <_vfiprintf_r+0x18>
 800667c:	f000 fc9c 	bl	8006fb8 <__sinit>
 8006680:	4b89      	ldr	r3, [pc, #548]	; (80068a8 <_vfiprintf_r+0x240>)
 8006682:	429d      	cmp	r5, r3
 8006684:	d11b      	bne.n	80066be <_vfiprintf_r+0x56>
 8006686:	6875      	ldr	r5, [r6, #4]
 8006688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800668a:	07d9      	lsls	r1, r3, #31
 800668c:	d405      	bmi.n	800669a <_vfiprintf_r+0x32>
 800668e:	89ab      	ldrh	r3, [r5, #12]
 8006690:	059a      	lsls	r2, r3, #22
 8006692:	d402      	bmi.n	800669a <_vfiprintf_r+0x32>
 8006694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006696:	f000 fd2d 	bl	80070f4 <__retarget_lock_acquire_recursive>
 800669a:	89ab      	ldrh	r3, [r5, #12]
 800669c:	071b      	lsls	r3, r3, #28
 800669e:	d501      	bpl.n	80066a4 <_vfiprintf_r+0x3c>
 80066a0:	692b      	ldr	r3, [r5, #16]
 80066a2:	b9eb      	cbnz	r3, 80066e0 <_vfiprintf_r+0x78>
 80066a4:	4629      	mov	r1, r5
 80066a6:	4630      	mov	r0, r6
 80066a8:	f000 faf6 	bl	8006c98 <__swsetup_r>
 80066ac:	b1c0      	cbz	r0, 80066e0 <_vfiprintf_r+0x78>
 80066ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066b0:	07dc      	lsls	r4, r3, #31
 80066b2:	d50e      	bpl.n	80066d2 <_vfiprintf_r+0x6a>
 80066b4:	f04f 30ff 	mov.w	r0, #4294967295
 80066b8:	b01d      	add	sp, #116	; 0x74
 80066ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066be:	4b7b      	ldr	r3, [pc, #492]	; (80068ac <_vfiprintf_r+0x244>)
 80066c0:	429d      	cmp	r5, r3
 80066c2:	d101      	bne.n	80066c8 <_vfiprintf_r+0x60>
 80066c4:	68b5      	ldr	r5, [r6, #8]
 80066c6:	e7df      	b.n	8006688 <_vfiprintf_r+0x20>
 80066c8:	4b79      	ldr	r3, [pc, #484]	; (80068b0 <_vfiprintf_r+0x248>)
 80066ca:	429d      	cmp	r5, r3
 80066cc:	bf08      	it	eq
 80066ce:	68f5      	ldreq	r5, [r6, #12]
 80066d0:	e7da      	b.n	8006688 <_vfiprintf_r+0x20>
 80066d2:	89ab      	ldrh	r3, [r5, #12]
 80066d4:	0598      	lsls	r0, r3, #22
 80066d6:	d4ed      	bmi.n	80066b4 <_vfiprintf_r+0x4c>
 80066d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066da:	f000 fd0c 	bl	80070f6 <__retarget_lock_release_recursive>
 80066de:	e7e9      	b.n	80066b4 <_vfiprintf_r+0x4c>
 80066e0:	2300      	movs	r3, #0
 80066e2:	9309      	str	r3, [sp, #36]	; 0x24
 80066e4:	2320      	movs	r3, #32
 80066e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066ea:	2330      	movs	r3, #48	; 0x30
 80066ec:	f04f 0901 	mov.w	r9, #1
 80066f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80068b4 <_vfiprintf_r+0x24c>
 80066f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066fc:	4623      	mov	r3, r4
 80066fe:	469a      	mov	sl, r3
 8006700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006704:	b10a      	cbz	r2, 800670a <_vfiprintf_r+0xa2>
 8006706:	2a25      	cmp	r2, #37	; 0x25
 8006708:	d1f9      	bne.n	80066fe <_vfiprintf_r+0x96>
 800670a:	ebba 0b04 	subs.w	fp, sl, r4
 800670e:	d00b      	beq.n	8006728 <_vfiprintf_r+0xc0>
 8006710:	465b      	mov	r3, fp
 8006712:	4622      	mov	r2, r4
 8006714:	4629      	mov	r1, r5
 8006716:	4630      	mov	r0, r6
 8006718:	f7ff ff93 	bl	8006642 <__sfputs_r>
 800671c:	3001      	adds	r0, #1
 800671e:	f000 80aa 	beq.w	8006876 <_vfiprintf_r+0x20e>
 8006722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006724:	445a      	add	r2, fp
 8006726:	9209      	str	r2, [sp, #36]	; 0x24
 8006728:	f89a 3000 	ldrb.w	r3, [sl]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80a2 	beq.w	8006876 <_vfiprintf_r+0x20e>
 8006732:	2300      	movs	r3, #0
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800673c:	f10a 0a01 	add.w	sl, sl, #1
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	9307      	str	r3, [sp, #28]
 8006744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006748:	931a      	str	r3, [sp, #104]	; 0x68
 800674a:	4654      	mov	r4, sl
 800674c:	2205      	movs	r2, #5
 800674e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006752:	4858      	ldr	r0, [pc, #352]	; (80068b4 <_vfiprintf_r+0x24c>)
 8006754:	f000 fd34 	bl	80071c0 <memchr>
 8006758:	9a04      	ldr	r2, [sp, #16]
 800675a:	b9d8      	cbnz	r0, 8006794 <_vfiprintf_r+0x12c>
 800675c:	06d1      	lsls	r1, r2, #27
 800675e:	bf44      	itt	mi
 8006760:	2320      	movmi	r3, #32
 8006762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006766:	0713      	lsls	r3, r2, #28
 8006768:	bf44      	itt	mi
 800676a:	232b      	movmi	r3, #43	; 0x2b
 800676c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006770:	f89a 3000 	ldrb.w	r3, [sl]
 8006774:	2b2a      	cmp	r3, #42	; 0x2a
 8006776:	d015      	beq.n	80067a4 <_vfiprintf_r+0x13c>
 8006778:	4654      	mov	r4, sl
 800677a:	2000      	movs	r0, #0
 800677c:	f04f 0c0a 	mov.w	ip, #10
 8006780:	9a07      	ldr	r2, [sp, #28]
 8006782:	4621      	mov	r1, r4
 8006784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006788:	3b30      	subs	r3, #48	; 0x30
 800678a:	2b09      	cmp	r3, #9
 800678c:	d94e      	bls.n	800682c <_vfiprintf_r+0x1c4>
 800678e:	b1b0      	cbz	r0, 80067be <_vfiprintf_r+0x156>
 8006790:	9207      	str	r2, [sp, #28]
 8006792:	e014      	b.n	80067be <_vfiprintf_r+0x156>
 8006794:	eba0 0308 	sub.w	r3, r0, r8
 8006798:	fa09 f303 	lsl.w	r3, r9, r3
 800679c:	4313      	orrs	r3, r2
 800679e:	46a2      	mov	sl, r4
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	e7d2      	b.n	800674a <_vfiprintf_r+0xe2>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	1d19      	adds	r1, r3, #4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	9103      	str	r1, [sp, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfbb      	ittet	lt
 80067b0:	425b      	neglt	r3, r3
 80067b2:	f042 0202 	orrlt.w	r2, r2, #2
 80067b6:	9307      	strge	r3, [sp, #28]
 80067b8:	9307      	strlt	r3, [sp, #28]
 80067ba:	bfb8      	it	lt
 80067bc:	9204      	strlt	r2, [sp, #16]
 80067be:	7823      	ldrb	r3, [r4, #0]
 80067c0:	2b2e      	cmp	r3, #46	; 0x2e
 80067c2:	d10c      	bne.n	80067de <_vfiprintf_r+0x176>
 80067c4:	7863      	ldrb	r3, [r4, #1]
 80067c6:	2b2a      	cmp	r3, #42	; 0x2a
 80067c8:	d135      	bne.n	8006836 <_vfiprintf_r+0x1ce>
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	3402      	adds	r4, #2
 80067ce:	1d1a      	adds	r2, r3, #4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	9203      	str	r2, [sp, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfb8      	it	lt
 80067d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067dc:	9305      	str	r3, [sp, #20]
 80067de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068c4 <_vfiprintf_r+0x25c>
 80067e2:	2203      	movs	r2, #3
 80067e4:	4650      	mov	r0, sl
 80067e6:	7821      	ldrb	r1, [r4, #0]
 80067e8:	f000 fcea 	bl	80071c0 <memchr>
 80067ec:	b140      	cbz	r0, 8006800 <_vfiprintf_r+0x198>
 80067ee:	2340      	movs	r3, #64	; 0x40
 80067f0:	eba0 000a 	sub.w	r0, r0, sl
 80067f4:	fa03 f000 	lsl.w	r0, r3, r0
 80067f8:	9b04      	ldr	r3, [sp, #16]
 80067fa:	3401      	adds	r4, #1
 80067fc:	4303      	orrs	r3, r0
 80067fe:	9304      	str	r3, [sp, #16]
 8006800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006804:	2206      	movs	r2, #6
 8006806:	482c      	ldr	r0, [pc, #176]	; (80068b8 <_vfiprintf_r+0x250>)
 8006808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800680c:	f000 fcd8 	bl	80071c0 <memchr>
 8006810:	2800      	cmp	r0, #0
 8006812:	d03f      	beq.n	8006894 <_vfiprintf_r+0x22c>
 8006814:	4b29      	ldr	r3, [pc, #164]	; (80068bc <_vfiprintf_r+0x254>)
 8006816:	bb1b      	cbnz	r3, 8006860 <_vfiprintf_r+0x1f8>
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	3307      	adds	r3, #7
 800681c:	f023 0307 	bic.w	r3, r3, #7
 8006820:	3308      	adds	r3, #8
 8006822:	9303      	str	r3, [sp, #12]
 8006824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006826:	443b      	add	r3, r7
 8006828:	9309      	str	r3, [sp, #36]	; 0x24
 800682a:	e767      	b.n	80066fc <_vfiprintf_r+0x94>
 800682c:	460c      	mov	r4, r1
 800682e:	2001      	movs	r0, #1
 8006830:	fb0c 3202 	mla	r2, ip, r2, r3
 8006834:	e7a5      	b.n	8006782 <_vfiprintf_r+0x11a>
 8006836:	2300      	movs	r3, #0
 8006838:	f04f 0c0a 	mov.w	ip, #10
 800683c:	4619      	mov	r1, r3
 800683e:	3401      	adds	r4, #1
 8006840:	9305      	str	r3, [sp, #20]
 8006842:	4620      	mov	r0, r4
 8006844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006848:	3a30      	subs	r2, #48	; 0x30
 800684a:	2a09      	cmp	r2, #9
 800684c:	d903      	bls.n	8006856 <_vfiprintf_r+0x1ee>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0c5      	beq.n	80067de <_vfiprintf_r+0x176>
 8006852:	9105      	str	r1, [sp, #20]
 8006854:	e7c3      	b.n	80067de <_vfiprintf_r+0x176>
 8006856:	4604      	mov	r4, r0
 8006858:	2301      	movs	r3, #1
 800685a:	fb0c 2101 	mla	r1, ip, r1, r2
 800685e:	e7f0      	b.n	8006842 <_vfiprintf_r+0x1da>
 8006860:	ab03      	add	r3, sp, #12
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	462a      	mov	r2, r5
 8006866:	4630      	mov	r0, r6
 8006868:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <_vfiprintf_r+0x258>)
 800686a:	a904      	add	r1, sp, #16
 800686c:	f3af 8000 	nop.w
 8006870:	4607      	mov	r7, r0
 8006872:	1c78      	adds	r0, r7, #1
 8006874:	d1d6      	bne.n	8006824 <_vfiprintf_r+0x1bc>
 8006876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006878:	07d9      	lsls	r1, r3, #31
 800687a:	d405      	bmi.n	8006888 <_vfiprintf_r+0x220>
 800687c:	89ab      	ldrh	r3, [r5, #12]
 800687e:	059a      	lsls	r2, r3, #22
 8006880:	d402      	bmi.n	8006888 <_vfiprintf_r+0x220>
 8006882:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006884:	f000 fc37 	bl	80070f6 <__retarget_lock_release_recursive>
 8006888:	89ab      	ldrh	r3, [r5, #12]
 800688a:	065b      	lsls	r3, r3, #25
 800688c:	f53f af12 	bmi.w	80066b4 <_vfiprintf_r+0x4c>
 8006890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006892:	e711      	b.n	80066b8 <_vfiprintf_r+0x50>
 8006894:	ab03      	add	r3, sp, #12
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	462a      	mov	r2, r5
 800689a:	4630      	mov	r0, r6
 800689c:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <_vfiprintf_r+0x258>)
 800689e:	a904      	add	r1, sp, #16
 80068a0:	f000 f882 	bl	80069a8 <_printf_i>
 80068a4:	e7e4      	b.n	8006870 <_vfiprintf_r+0x208>
 80068a6:	bf00      	nop
 80068a8:	080088ec 	.word	0x080088ec
 80068ac:	0800890c 	.word	0x0800890c
 80068b0:	080088cc 	.word	0x080088cc
 80068b4:	08008897 	.word	0x08008897
 80068b8:	080088a1 	.word	0x080088a1
 80068bc:	00000000 	.word	0x00000000
 80068c0:	08006643 	.word	0x08006643
 80068c4:	0800889d 	.word	0x0800889d

080068c8 <_printf_common>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	4616      	mov	r6, r2
 80068ce:	4699      	mov	r9, r3
 80068d0:	688a      	ldr	r2, [r1, #8]
 80068d2:	690b      	ldr	r3, [r1, #16]
 80068d4:	4607      	mov	r7, r0
 80068d6:	4293      	cmp	r3, r2
 80068d8:	bfb8      	it	lt
 80068da:	4613      	movlt	r3, r2
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068e2:	460c      	mov	r4, r1
 80068e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068e8:	b10a      	cbz	r2, 80068ee <_printf_common+0x26>
 80068ea:	3301      	adds	r3, #1
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	0699      	lsls	r1, r3, #26
 80068f2:	bf42      	ittt	mi
 80068f4:	6833      	ldrmi	r3, [r6, #0]
 80068f6:	3302      	addmi	r3, #2
 80068f8:	6033      	strmi	r3, [r6, #0]
 80068fa:	6825      	ldr	r5, [r4, #0]
 80068fc:	f015 0506 	ands.w	r5, r5, #6
 8006900:	d106      	bne.n	8006910 <_printf_common+0x48>
 8006902:	f104 0a19 	add.w	sl, r4, #25
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	6832      	ldr	r2, [r6, #0]
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	42ab      	cmp	r3, r5
 800690e:	dc28      	bgt.n	8006962 <_printf_common+0x9a>
 8006910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006914:	1e13      	subs	r3, r2, #0
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	bf18      	it	ne
 800691a:	2301      	movne	r3, #1
 800691c:	0692      	lsls	r2, r2, #26
 800691e:	d42d      	bmi.n	800697c <_printf_common+0xb4>
 8006920:	4649      	mov	r1, r9
 8006922:	4638      	mov	r0, r7
 8006924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006928:	47c0      	blx	r8
 800692a:	3001      	adds	r0, #1
 800692c:	d020      	beq.n	8006970 <_printf_common+0xa8>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	68e5      	ldr	r5, [r4, #12]
 8006932:	f003 0306 	and.w	r3, r3, #6
 8006936:	2b04      	cmp	r3, #4
 8006938:	bf18      	it	ne
 800693a:	2500      	movne	r5, #0
 800693c:	6832      	ldr	r2, [r6, #0]
 800693e:	f04f 0600 	mov.w	r6, #0
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	bf08      	it	eq
 8006946:	1aad      	subeq	r5, r5, r2
 8006948:	6922      	ldr	r2, [r4, #16]
 800694a:	bf08      	it	eq
 800694c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006950:	4293      	cmp	r3, r2
 8006952:	bfc4      	itt	gt
 8006954:	1a9b      	subgt	r3, r3, r2
 8006956:	18ed      	addgt	r5, r5, r3
 8006958:	341a      	adds	r4, #26
 800695a:	42b5      	cmp	r5, r6
 800695c:	d11a      	bne.n	8006994 <_printf_common+0xcc>
 800695e:	2000      	movs	r0, #0
 8006960:	e008      	b.n	8006974 <_printf_common+0xac>
 8006962:	2301      	movs	r3, #1
 8006964:	4652      	mov	r2, sl
 8006966:	4649      	mov	r1, r9
 8006968:	4638      	mov	r0, r7
 800696a:	47c0      	blx	r8
 800696c:	3001      	adds	r0, #1
 800696e:	d103      	bne.n	8006978 <_printf_common+0xb0>
 8006970:	f04f 30ff 	mov.w	r0, #4294967295
 8006974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006978:	3501      	adds	r5, #1
 800697a:	e7c4      	b.n	8006906 <_printf_common+0x3e>
 800697c:	2030      	movs	r0, #48	; 0x30
 800697e:	18e1      	adds	r1, r4, r3
 8006980:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800698a:	4422      	add	r2, r4
 800698c:	3302      	adds	r3, #2
 800698e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006992:	e7c5      	b.n	8006920 <_printf_common+0x58>
 8006994:	2301      	movs	r3, #1
 8006996:	4622      	mov	r2, r4
 8006998:	4649      	mov	r1, r9
 800699a:	4638      	mov	r0, r7
 800699c:	47c0      	blx	r8
 800699e:	3001      	adds	r0, #1
 80069a0:	d0e6      	beq.n	8006970 <_printf_common+0xa8>
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7d9      	b.n	800695a <_printf_common+0x92>
	...

080069a8 <_printf_i>:
 80069a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069ac:	460c      	mov	r4, r1
 80069ae:	7e27      	ldrb	r7, [r4, #24]
 80069b0:	4691      	mov	r9, r2
 80069b2:	2f78      	cmp	r7, #120	; 0x78
 80069b4:	4680      	mov	r8, r0
 80069b6:	469a      	mov	sl, r3
 80069b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069be:	d807      	bhi.n	80069d0 <_printf_i+0x28>
 80069c0:	2f62      	cmp	r7, #98	; 0x62
 80069c2:	d80a      	bhi.n	80069da <_printf_i+0x32>
 80069c4:	2f00      	cmp	r7, #0
 80069c6:	f000 80d9 	beq.w	8006b7c <_printf_i+0x1d4>
 80069ca:	2f58      	cmp	r7, #88	; 0x58
 80069cc:	f000 80a4 	beq.w	8006b18 <_printf_i+0x170>
 80069d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069d8:	e03a      	b.n	8006a50 <_printf_i+0xa8>
 80069da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069de:	2b15      	cmp	r3, #21
 80069e0:	d8f6      	bhi.n	80069d0 <_printf_i+0x28>
 80069e2:	a001      	add	r0, pc, #4	; (adr r0, 80069e8 <_printf_i+0x40>)
 80069e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80069e8:	08006a41 	.word	0x08006a41
 80069ec:	08006a55 	.word	0x08006a55
 80069f0:	080069d1 	.word	0x080069d1
 80069f4:	080069d1 	.word	0x080069d1
 80069f8:	080069d1 	.word	0x080069d1
 80069fc:	080069d1 	.word	0x080069d1
 8006a00:	08006a55 	.word	0x08006a55
 8006a04:	080069d1 	.word	0x080069d1
 8006a08:	080069d1 	.word	0x080069d1
 8006a0c:	080069d1 	.word	0x080069d1
 8006a10:	080069d1 	.word	0x080069d1
 8006a14:	08006b63 	.word	0x08006b63
 8006a18:	08006a85 	.word	0x08006a85
 8006a1c:	08006b45 	.word	0x08006b45
 8006a20:	080069d1 	.word	0x080069d1
 8006a24:	080069d1 	.word	0x080069d1
 8006a28:	08006b85 	.word	0x08006b85
 8006a2c:	080069d1 	.word	0x080069d1
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	080069d1 	.word	0x080069d1
 8006a38:	080069d1 	.word	0x080069d1
 8006a3c:	08006b4d 	.word	0x08006b4d
 8006a40:	680b      	ldr	r3, [r1, #0]
 8006a42:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a46:	1d1a      	adds	r2, r3, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	600a      	str	r2, [r1, #0]
 8006a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0a4      	b.n	8006b9e <_printf_i+0x1f6>
 8006a54:	6825      	ldr	r5, [r4, #0]
 8006a56:	6808      	ldr	r0, [r1, #0]
 8006a58:	062e      	lsls	r6, r5, #24
 8006a5a:	f100 0304 	add.w	r3, r0, #4
 8006a5e:	d50a      	bpl.n	8006a76 <_printf_i+0xce>
 8006a60:	6805      	ldr	r5, [r0, #0]
 8006a62:	600b      	str	r3, [r1, #0]
 8006a64:	2d00      	cmp	r5, #0
 8006a66:	da03      	bge.n	8006a70 <_printf_i+0xc8>
 8006a68:	232d      	movs	r3, #45	; 0x2d
 8006a6a:	426d      	negs	r5, r5
 8006a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a70:	230a      	movs	r3, #10
 8006a72:	485e      	ldr	r0, [pc, #376]	; (8006bec <_printf_i+0x244>)
 8006a74:	e019      	b.n	8006aaa <_printf_i+0x102>
 8006a76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a7a:	6805      	ldr	r5, [r0, #0]
 8006a7c:	600b      	str	r3, [r1, #0]
 8006a7e:	bf18      	it	ne
 8006a80:	b22d      	sxthne	r5, r5
 8006a82:	e7ef      	b.n	8006a64 <_printf_i+0xbc>
 8006a84:	680b      	ldr	r3, [r1, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	1d18      	adds	r0, r3, #4
 8006a8a:	6008      	str	r0, [r1, #0]
 8006a8c:	0628      	lsls	r0, r5, #24
 8006a8e:	d501      	bpl.n	8006a94 <_printf_i+0xec>
 8006a90:	681d      	ldr	r5, [r3, #0]
 8006a92:	e002      	b.n	8006a9a <_printf_i+0xf2>
 8006a94:	0669      	lsls	r1, r5, #25
 8006a96:	d5fb      	bpl.n	8006a90 <_printf_i+0xe8>
 8006a98:	881d      	ldrh	r5, [r3, #0]
 8006a9a:	2f6f      	cmp	r7, #111	; 0x6f
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2308      	moveq	r3, #8
 8006aa0:	230a      	movne	r3, #10
 8006aa2:	4852      	ldr	r0, [pc, #328]	; (8006bec <_printf_i+0x244>)
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aaa:	6866      	ldr	r6, [r4, #4]
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	bfa8      	it	ge
 8006ab0:	6821      	ldrge	r1, [r4, #0]
 8006ab2:	60a6      	str	r6, [r4, #8]
 8006ab4:	bfa4      	itt	ge
 8006ab6:	f021 0104 	bicge.w	r1, r1, #4
 8006aba:	6021      	strge	r1, [r4, #0]
 8006abc:	b90d      	cbnz	r5, 8006ac2 <_printf_i+0x11a>
 8006abe:	2e00      	cmp	r6, #0
 8006ac0:	d04d      	beq.n	8006b5e <_printf_i+0x1b6>
 8006ac2:	4616      	mov	r6, r2
 8006ac4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ac8:	fb03 5711 	mls	r7, r3, r1, r5
 8006acc:	5dc7      	ldrb	r7, [r0, r7]
 8006ace:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ad2:	462f      	mov	r7, r5
 8006ad4:	42bb      	cmp	r3, r7
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	d9f4      	bls.n	8006ac4 <_printf_i+0x11c>
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d10b      	bne.n	8006af6 <_printf_i+0x14e>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	07df      	lsls	r7, r3, #31
 8006ae2:	d508      	bpl.n	8006af6 <_printf_i+0x14e>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	6861      	ldr	r1, [r4, #4]
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	bfde      	ittt	le
 8006aec:	2330      	movle	r3, #48	; 0x30
 8006aee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006af2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006af6:	1b92      	subs	r2, r2, r6
 8006af8:	6122      	str	r2, [r4, #16]
 8006afa:	464b      	mov	r3, r9
 8006afc:	4621      	mov	r1, r4
 8006afe:	4640      	mov	r0, r8
 8006b00:	f8cd a000 	str.w	sl, [sp]
 8006b04:	aa03      	add	r2, sp, #12
 8006b06:	f7ff fedf 	bl	80068c8 <_printf_common>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d14c      	bne.n	8006ba8 <_printf_i+0x200>
 8006b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b12:	b004      	add	sp, #16
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	4834      	ldr	r0, [pc, #208]	; (8006bec <_printf_i+0x244>)
 8006b1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b1e:	680e      	ldr	r6, [r1, #0]
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b26:	061f      	lsls	r7, r3, #24
 8006b28:	600e      	str	r6, [r1, #0]
 8006b2a:	d514      	bpl.n	8006b56 <_printf_i+0x1ae>
 8006b2c:	07d9      	lsls	r1, r3, #31
 8006b2e:	bf44      	itt	mi
 8006b30:	f043 0320 	orrmi.w	r3, r3, #32
 8006b34:	6023      	strmi	r3, [r4, #0]
 8006b36:	b91d      	cbnz	r5, 8006b40 <_printf_i+0x198>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	f023 0320 	bic.w	r3, r3, #32
 8006b3e:	6023      	str	r3, [r4, #0]
 8006b40:	2310      	movs	r3, #16
 8006b42:	e7af      	b.n	8006aa4 <_printf_i+0xfc>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	f043 0320 	orr.w	r3, r3, #32
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	2378      	movs	r3, #120	; 0x78
 8006b4e:	4828      	ldr	r0, [pc, #160]	; (8006bf0 <_printf_i+0x248>)
 8006b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b54:	e7e3      	b.n	8006b1e <_printf_i+0x176>
 8006b56:	065e      	lsls	r6, r3, #25
 8006b58:	bf48      	it	mi
 8006b5a:	b2ad      	uxthmi	r5, r5
 8006b5c:	e7e6      	b.n	8006b2c <_printf_i+0x184>
 8006b5e:	4616      	mov	r6, r2
 8006b60:	e7bb      	b.n	8006ada <_printf_i+0x132>
 8006b62:	680b      	ldr	r3, [r1, #0]
 8006b64:	6826      	ldr	r6, [r4, #0]
 8006b66:	1d1d      	adds	r5, r3, #4
 8006b68:	6960      	ldr	r0, [r4, #20]
 8006b6a:	600d      	str	r5, [r1, #0]
 8006b6c:	0635      	lsls	r5, r6, #24
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	d501      	bpl.n	8006b76 <_printf_i+0x1ce>
 8006b72:	6018      	str	r0, [r3, #0]
 8006b74:	e002      	b.n	8006b7c <_printf_i+0x1d4>
 8006b76:	0671      	lsls	r1, r6, #25
 8006b78:	d5fb      	bpl.n	8006b72 <_printf_i+0x1ca>
 8006b7a:	8018      	strh	r0, [r3, #0]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4616      	mov	r6, r2
 8006b80:	6123      	str	r3, [r4, #16]
 8006b82:	e7ba      	b.n	8006afa <_printf_i+0x152>
 8006b84:	680b      	ldr	r3, [r1, #0]
 8006b86:	1d1a      	adds	r2, r3, #4
 8006b88:	600a      	str	r2, [r1, #0]
 8006b8a:	681e      	ldr	r6, [r3, #0]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4630      	mov	r0, r6
 8006b90:	6862      	ldr	r2, [r4, #4]
 8006b92:	f000 fb15 	bl	80071c0 <memchr>
 8006b96:	b108      	cbz	r0, 8006b9c <_printf_i+0x1f4>
 8006b98:	1b80      	subs	r0, r0, r6
 8006b9a:	6060      	str	r0, [r4, #4]
 8006b9c:	6863      	ldr	r3, [r4, #4]
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba6:	e7a8      	b.n	8006afa <_printf_i+0x152>
 8006ba8:	4632      	mov	r2, r6
 8006baa:	4649      	mov	r1, r9
 8006bac:	4640      	mov	r0, r8
 8006bae:	6923      	ldr	r3, [r4, #16]
 8006bb0:	47d0      	blx	sl
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d0ab      	beq.n	8006b0e <_printf_i+0x166>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	079b      	lsls	r3, r3, #30
 8006bba:	d413      	bmi.n	8006be4 <_printf_i+0x23c>
 8006bbc:	68e0      	ldr	r0, [r4, #12]
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	4298      	cmp	r0, r3
 8006bc2:	bfb8      	it	lt
 8006bc4:	4618      	movlt	r0, r3
 8006bc6:	e7a4      	b.n	8006b12 <_printf_i+0x16a>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4632      	mov	r2, r6
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4640      	mov	r0, r8
 8006bd0:	47d0      	blx	sl
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d09b      	beq.n	8006b0e <_printf_i+0x166>
 8006bd6:	3501      	adds	r5, #1
 8006bd8:	68e3      	ldr	r3, [r4, #12]
 8006bda:	9903      	ldr	r1, [sp, #12]
 8006bdc:	1a5b      	subs	r3, r3, r1
 8006bde:	42ab      	cmp	r3, r5
 8006be0:	dcf2      	bgt.n	8006bc8 <_printf_i+0x220>
 8006be2:	e7eb      	b.n	8006bbc <_printf_i+0x214>
 8006be4:	2500      	movs	r5, #0
 8006be6:	f104 0619 	add.w	r6, r4, #25
 8006bea:	e7f5      	b.n	8006bd8 <_printf_i+0x230>
 8006bec:	080088a8 	.word	0x080088a8
 8006bf0:	080088b9 	.word	0x080088b9

08006bf4 <__swbuf_r>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	460e      	mov	r6, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	b118      	cbz	r0, 8006c06 <__swbuf_r+0x12>
 8006bfe:	6983      	ldr	r3, [r0, #24]
 8006c00:	b90b      	cbnz	r3, 8006c06 <__swbuf_r+0x12>
 8006c02:	f000 f9d9 	bl	8006fb8 <__sinit>
 8006c06:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <__swbuf_r+0x98>)
 8006c08:	429c      	cmp	r4, r3
 8006c0a:	d12b      	bne.n	8006c64 <__swbuf_r+0x70>
 8006c0c:	686c      	ldr	r4, [r5, #4]
 8006c0e:	69a3      	ldr	r3, [r4, #24]
 8006c10:	60a3      	str	r3, [r4, #8]
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	071a      	lsls	r2, r3, #28
 8006c16:	d52f      	bpl.n	8006c78 <__swbuf_r+0x84>
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	b36b      	cbz	r3, 8006c78 <__swbuf_r+0x84>
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	6820      	ldr	r0, [r4, #0]
 8006c20:	b2f6      	uxtb	r6, r6
 8006c22:	1ac0      	subs	r0, r0, r3
 8006c24:	6963      	ldr	r3, [r4, #20]
 8006c26:	4637      	mov	r7, r6
 8006c28:	4283      	cmp	r3, r0
 8006c2a:	dc04      	bgt.n	8006c36 <__swbuf_r+0x42>
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 f92e 	bl	8006e90 <_fflush_r>
 8006c34:	bb30      	cbnz	r0, 8006c84 <__swbuf_r+0x90>
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	3001      	adds	r0, #1
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	6022      	str	r2, [r4, #0]
 8006c44:	701e      	strb	r6, [r3, #0]
 8006c46:	6963      	ldr	r3, [r4, #20]
 8006c48:	4283      	cmp	r3, r0
 8006c4a:	d004      	beq.n	8006c56 <__swbuf_r+0x62>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	07db      	lsls	r3, r3, #31
 8006c50:	d506      	bpl.n	8006c60 <__swbuf_r+0x6c>
 8006c52:	2e0a      	cmp	r6, #10
 8006c54:	d104      	bne.n	8006c60 <__swbuf_r+0x6c>
 8006c56:	4621      	mov	r1, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 f919 	bl	8006e90 <_fflush_r>
 8006c5e:	b988      	cbnz	r0, 8006c84 <__swbuf_r+0x90>
 8006c60:	4638      	mov	r0, r7
 8006c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c64:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <__swbuf_r+0x9c>)
 8006c66:	429c      	cmp	r4, r3
 8006c68:	d101      	bne.n	8006c6e <__swbuf_r+0x7a>
 8006c6a:	68ac      	ldr	r4, [r5, #8]
 8006c6c:	e7cf      	b.n	8006c0e <__swbuf_r+0x1a>
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <__swbuf_r+0xa0>)
 8006c70:	429c      	cmp	r4, r3
 8006c72:	bf08      	it	eq
 8006c74:	68ec      	ldreq	r4, [r5, #12]
 8006c76:	e7ca      	b.n	8006c0e <__swbuf_r+0x1a>
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 f80c 	bl	8006c98 <__swsetup_r>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d0cb      	beq.n	8006c1c <__swbuf_r+0x28>
 8006c84:	f04f 37ff 	mov.w	r7, #4294967295
 8006c88:	e7ea      	b.n	8006c60 <__swbuf_r+0x6c>
 8006c8a:	bf00      	nop
 8006c8c:	080088ec 	.word	0x080088ec
 8006c90:	0800890c 	.word	0x0800890c
 8006c94:	080088cc 	.word	0x080088cc

08006c98 <__swsetup_r>:
 8006c98:	4b32      	ldr	r3, [pc, #200]	; (8006d64 <__swsetup_r+0xcc>)
 8006c9a:	b570      	push	{r4, r5, r6, lr}
 8006c9c:	681d      	ldr	r5, [r3, #0]
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	b125      	cbz	r5, 8006cae <__swsetup_r+0x16>
 8006ca4:	69ab      	ldr	r3, [r5, #24]
 8006ca6:	b913      	cbnz	r3, 8006cae <__swsetup_r+0x16>
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 f985 	bl	8006fb8 <__sinit>
 8006cae:	4b2e      	ldr	r3, [pc, #184]	; (8006d68 <__swsetup_r+0xd0>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d10f      	bne.n	8006cd4 <__swsetup_r+0x3c>
 8006cb4:	686c      	ldr	r4, [r5, #4]
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cbc:	0719      	lsls	r1, r3, #28
 8006cbe:	d42c      	bmi.n	8006d1a <__swsetup_r+0x82>
 8006cc0:	06dd      	lsls	r5, r3, #27
 8006cc2:	d411      	bmi.n	8006ce8 <__swsetup_r+0x50>
 8006cc4:	2309      	movs	r3, #9
 8006cc6:	6033      	str	r3, [r6, #0]
 8006cc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	e03e      	b.n	8006d52 <__swsetup_r+0xba>
 8006cd4:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <__swsetup_r+0xd4>)
 8006cd6:	429c      	cmp	r4, r3
 8006cd8:	d101      	bne.n	8006cde <__swsetup_r+0x46>
 8006cda:	68ac      	ldr	r4, [r5, #8]
 8006cdc:	e7eb      	b.n	8006cb6 <__swsetup_r+0x1e>
 8006cde:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <__swsetup_r+0xd8>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	bf08      	it	eq
 8006ce4:	68ec      	ldreq	r4, [r5, #12]
 8006ce6:	e7e6      	b.n	8006cb6 <__swsetup_r+0x1e>
 8006ce8:	0758      	lsls	r0, r3, #29
 8006cea:	d512      	bpl.n	8006d12 <__swsetup_r+0x7a>
 8006cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cee:	b141      	cbz	r1, 8006d02 <__swsetup_r+0x6a>
 8006cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	d002      	beq.n	8006cfe <__swsetup_r+0x66>
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f7ff fc41 	bl	8006580 <_free_r>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6363      	str	r3, [r4, #52]	; 0x34
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f043 0308 	orr.w	r3, r3, #8
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	b94b      	cbnz	r3, 8006d32 <__swsetup_r+0x9a>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d28:	d003      	beq.n	8006d32 <__swsetup_r+0x9a>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 fa07 	bl	8007140 <__smakebuf_r>
 8006d32:	89a0      	ldrh	r0, [r4, #12]
 8006d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d38:	f010 0301 	ands.w	r3, r0, #1
 8006d3c:	d00a      	beq.n	8006d54 <__swsetup_r+0xbc>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60a3      	str	r3, [r4, #8]
 8006d42:	6963      	ldr	r3, [r4, #20]
 8006d44:	425b      	negs	r3, r3
 8006d46:	61a3      	str	r3, [r4, #24]
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	b943      	cbnz	r3, 8006d5e <__swsetup_r+0xc6>
 8006d4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d50:	d1ba      	bne.n	8006cc8 <__swsetup_r+0x30>
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	0781      	lsls	r1, r0, #30
 8006d56:	bf58      	it	pl
 8006d58:	6963      	ldrpl	r3, [r4, #20]
 8006d5a:	60a3      	str	r3, [r4, #8]
 8006d5c:	e7f4      	b.n	8006d48 <__swsetup_r+0xb0>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e7f7      	b.n	8006d52 <__swsetup_r+0xba>
 8006d62:	bf00      	nop
 8006d64:	20000088 	.word	0x20000088
 8006d68:	080088ec 	.word	0x080088ec
 8006d6c:	0800890c 	.word	0x0800890c
 8006d70:	080088cc 	.word	0x080088cc

08006d74 <abort>:
 8006d74:	2006      	movs	r0, #6
 8006d76:	b508      	push	{r3, lr}
 8006d78:	f000 fa58 	bl	800722c <raise>
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f7fa feb2 	bl	8001ae6 <_exit>
	...

08006d84 <__sflush_r>:
 8006d84:	898a      	ldrh	r2, [r1, #12]
 8006d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	0710      	lsls	r0, r2, #28
 8006d8e:	460c      	mov	r4, r1
 8006d90:	d458      	bmi.n	8006e44 <__sflush_r+0xc0>
 8006d92:	684b      	ldr	r3, [r1, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc05      	bgt.n	8006da4 <__sflush_r+0x20>
 8006d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dc02      	bgt.n	8006da4 <__sflush_r+0x20>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006da6:	2e00      	cmp	r6, #0
 8006da8:	d0f9      	beq.n	8006d9e <__sflush_r+0x1a>
 8006daa:	2300      	movs	r3, #0
 8006dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006db0:	682f      	ldr	r7, [r5, #0]
 8006db2:	602b      	str	r3, [r5, #0]
 8006db4:	d032      	beq.n	8006e1c <__sflush_r+0x98>
 8006db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	075a      	lsls	r2, r3, #29
 8006dbc:	d505      	bpl.n	8006dca <__sflush_r+0x46>
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	1ac0      	subs	r0, r0, r3
 8006dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dc4:	b10b      	cbz	r3, 8006dca <__sflush_r+0x46>
 8006dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dc8:	1ac0      	subs	r0, r0, r3
 8006dca:	2300      	movs	r3, #0
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	6a21      	ldr	r1, [r4, #32]
 8006dd4:	47b0      	blx	r6
 8006dd6:	1c43      	adds	r3, r0, #1
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	d106      	bne.n	8006dea <__sflush_r+0x66>
 8006ddc:	6829      	ldr	r1, [r5, #0]
 8006dde:	291d      	cmp	r1, #29
 8006de0:	d82c      	bhi.n	8006e3c <__sflush_r+0xb8>
 8006de2:	4a2a      	ldr	r2, [pc, #168]	; (8006e8c <__sflush_r+0x108>)
 8006de4:	40ca      	lsrs	r2, r1
 8006de6:	07d6      	lsls	r6, r2, #31
 8006de8:	d528      	bpl.n	8006e3c <__sflush_r+0xb8>
 8006dea:	2200      	movs	r2, #0
 8006dec:	6062      	str	r2, [r4, #4]
 8006dee:	6922      	ldr	r2, [r4, #16]
 8006df0:	04d9      	lsls	r1, r3, #19
 8006df2:	6022      	str	r2, [r4, #0]
 8006df4:	d504      	bpl.n	8006e00 <__sflush_r+0x7c>
 8006df6:	1c42      	adds	r2, r0, #1
 8006df8:	d101      	bne.n	8006dfe <__sflush_r+0x7a>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	b903      	cbnz	r3, 8006e00 <__sflush_r+0x7c>
 8006dfe:	6560      	str	r0, [r4, #84]	; 0x54
 8006e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e02:	602f      	str	r7, [r5, #0]
 8006e04:	2900      	cmp	r1, #0
 8006e06:	d0ca      	beq.n	8006d9e <__sflush_r+0x1a>
 8006e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <__sflush_r+0x92>
 8006e10:	4628      	mov	r0, r5
 8006e12:	f7ff fbb5 	bl	8006580 <_free_r>
 8006e16:	2000      	movs	r0, #0
 8006e18:	6360      	str	r0, [r4, #52]	; 0x34
 8006e1a:	e7c1      	b.n	8006da0 <__sflush_r+0x1c>
 8006e1c:	6a21      	ldr	r1, [r4, #32]
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b0      	blx	r6
 8006e24:	1c41      	adds	r1, r0, #1
 8006e26:	d1c7      	bne.n	8006db8 <__sflush_r+0x34>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0c4      	beq.n	8006db8 <__sflush_r+0x34>
 8006e2e:	2b1d      	cmp	r3, #29
 8006e30:	d001      	beq.n	8006e36 <__sflush_r+0xb2>
 8006e32:	2b16      	cmp	r3, #22
 8006e34:	d101      	bne.n	8006e3a <__sflush_r+0xb6>
 8006e36:	602f      	str	r7, [r5, #0]
 8006e38:	e7b1      	b.n	8006d9e <__sflush_r+0x1a>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e40:	81a3      	strh	r3, [r4, #12]
 8006e42:	e7ad      	b.n	8006da0 <__sflush_r+0x1c>
 8006e44:	690f      	ldr	r7, [r1, #16]
 8006e46:	2f00      	cmp	r7, #0
 8006e48:	d0a9      	beq.n	8006d9e <__sflush_r+0x1a>
 8006e4a:	0793      	lsls	r3, r2, #30
 8006e4c:	bf18      	it	ne
 8006e4e:	2300      	movne	r3, #0
 8006e50:	680e      	ldr	r6, [r1, #0]
 8006e52:	bf08      	it	eq
 8006e54:	694b      	ldreq	r3, [r1, #20]
 8006e56:	eba6 0807 	sub.w	r8, r6, r7
 8006e5a:	600f      	str	r7, [r1, #0]
 8006e5c:	608b      	str	r3, [r1, #8]
 8006e5e:	f1b8 0f00 	cmp.w	r8, #0
 8006e62:	dd9c      	ble.n	8006d9e <__sflush_r+0x1a>
 8006e64:	4643      	mov	r3, r8
 8006e66:	463a      	mov	r2, r7
 8006e68:	4628      	mov	r0, r5
 8006e6a:	6a21      	ldr	r1, [r4, #32]
 8006e6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e6e:	47b0      	blx	r6
 8006e70:	2800      	cmp	r0, #0
 8006e72:	dc06      	bgt.n	8006e82 <__sflush_r+0xfe>
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7e:	81a3      	strh	r3, [r4, #12]
 8006e80:	e78e      	b.n	8006da0 <__sflush_r+0x1c>
 8006e82:	4407      	add	r7, r0
 8006e84:	eba8 0800 	sub.w	r8, r8, r0
 8006e88:	e7e9      	b.n	8006e5e <__sflush_r+0xda>
 8006e8a:	bf00      	nop
 8006e8c:	20400001 	.word	0x20400001

08006e90 <_fflush_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	690b      	ldr	r3, [r1, #16]
 8006e94:	4605      	mov	r5, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	b913      	cbnz	r3, 8006ea0 <_fflush_r+0x10>
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	b118      	cbz	r0, 8006eaa <_fflush_r+0x1a>
 8006ea2:	6983      	ldr	r3, [r0, #24]
 8006ea4:	b90b      	cbnz	r3, 8006eaa <_fflush_r+0x1a>
 8006ea6:	f000 f887 	bl	8006fb8 <__sinit>
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <_fflush_r+0x6c>)
 8006eac:	429c      	cmp	r4, r3
 8006eae:	d11b      	bne.n	8006ee8 <_fflush_r+0x58>
 8006eb0:	686c      	ldr	r4, [r5, #4]
 8006eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0ef      	beq.n	8006e9a <_fflush_r+0xa>
 8006eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ebc:	07d0      	lsls	r0, r2, #31
 8006ebe:	d404      	bmi.n	8006eca <_fflush_r+0x3a>
 8006ec0:	0599      	lsls	r1, r3, #22
 8006ec2:	d402      	bmi.n	8006eca <_fflush_r+0x3a>
 8006ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec6:	f000 f915 	bl	80070f4 <__retarget_lock_acquire_recursive>
 8006eca:	4628      	mov	r0, r5
 8006ecc:	4621      	mov	r1, r4
 8006ece:	f7ff ff59 	bl	8006d84 <__sflush_r>
 8006ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	07da      	lsls	r2, r3, #31
 8006ed8:	d4e0      	bmi.n	8006e9c <_fflush_r+0xc>
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	059b      	lsls	r3, r3, #22
 8006ede:	d4dd      	bmi.n	8006e9c <_fflush_r+0xc>
 8006ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ee2:	f000 f908 	bl	80070f6 <__retarget_lock_release_recursive>
 8006ee6:	e7d9      	b.n	8006e9c <_fflush_r+0xc>
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <_fflush_r+0x70>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d101      	bne.n	8006ef2 <_fflush_r+0x62>
 8006eee:	68ac      	ldr	r4, [r5, #8]
 8006ef0:	e7df      	b.n	8006eb2 <_fflush_r+0x22>
 8006ef2:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <_fflush_r+0x74>)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	bf08      	it	eq
 8006ef8:	68ec      	ldreq	r4, [r5, #12]
 8006efa:	e7da      	b.n	8006eb2 <_fflush_r+0x22>
 8006efc:	080088ec 	.word	0x080088ec
 8006f00:	0800890c 	.word	0x0800890c
 8006f04:	080088cc 	.word	0x080088cc

08006f08 <std>:
 8006f08:	2300      	movs	r3, #0
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f16:	6083      	str	r3, [r0, #8]
 8006f18:	8181      	strh	r1, [r0, #12]
 8006f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f1c:	81c2      	strh	r2, [r0, #14]
 8006f1e:	6183      	str	r3, [r0, #24]
 8006f20:	4619      	mov	r1, r3
 8006f22:	2208      	movs	r2, #8
 8006f24:	305c      	adds	r0, #92	; 0x5c
 8006f26:	f7fc fc07 	bl	8003738 <memset>
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <std+0x38>)
 8006f2c:	6224      	str	r4, [r4, #32]
 8006f2e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <std+0x3c>)
 8006f32:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f34:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <std+0x40>)
 8006f36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <std+0x44>)
 8006f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	bf00      	nop
 8006f40:	08007265 	.word	0x08007265
 8006f44:	08007287 	.word	0x08007287
 8006f48:	080072bf 	.word	0x080072bf
 8006f4c:	080072e3 	.word	0x080072e3

08006f50 <_cleanup_r>:
 8006f50:	4901      	ldr	r1, [pc, #4]	; (8006f58 <_cleanup_r+0x8>)
 8006f52:	f000 b8af 	b.w	80070b4 <_fwalk_reent>
 8006f56:	bf00      	nop
 8006f58:	08006e91 	.word	0x08006e91

08006f5c <__sfmoreglue>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	2568      	movs	r5, #104	; 0x68
 8006f60:	1e4a      	subs	r2, r1, #1
 8006f62:	4355      	muls	r5, r2
 8006f64:	460e      	mov	r6, r1
 8006f66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f6a:	f7fe fbb1 	bl	80056d0 <_malloc_r>
 8006f6e:	4604      	mov	r4, r0
 8006f70:	b140      	cbz	r0, 8006f84 <__sfmoreglue+0x28>
 8006f72:	2100      	movs	r1, #0
 8006f74:	e9c0 1600 	strd	r1, r6, [r0]
 8006f78:	300c      	adds	r0, #12
 8006f7a:	60a0      	str	r0, [r4, #8]
 8006f7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f80:	f7fc fbda 	bl	8003738 <memset>
 8006f84:	4620      	mov	r0, r4
 8006f86:	bd70      	pop	{r4, r5, r6, pc}

08006f88 <__sfp_lock_acquire>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__sfp_lock_acquire+0x8>)
 8006f8a:	f000 b8b3 	b.w	80070f4 <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	200003b4 	.word	0x200003b4

08006f94 <__sfp_lock_release>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__sfp_lock_release+0x8>)
 8006f96:	f000 b8ae 	b.w	80070f6 <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	200003b4 	.word	0x200003b4

08006fa0 <__sinit_lock_acquire>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__sinit_lock_acquire+0x8>)
 8006fa2:	f000 b8a7 	b.w	80070f4 <__retarget_lock_acquire_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	200003af 	.word	0x200003af

08006fac <__sinit_lock_release>:
 8006fac:	4801      	ldr	r0, [pc, #4]	; (8006fb4 <__sinit_lock_release+0x8>)
 8006fae:	f000 b8a2 	b.w	80070f6 <__retarget_lock_release_recursive>
 8006fb2:	bf00      	nop
 8006fb4:	200003af 	.word	0x200003af

08006fb8 <__sinit>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	4604      	mov	r4, r0
 8006fbc:	f7ff fff0 	bl	8006fa0 <__sinit_lock_acquire>
 8006fc0:	69a3      	ldr	r3, [r4, #24]
 8006fc2:	b11b      	cbz	r3, 8006fcc <__sinit+0x14>
 8006fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc8:	f7ff bff0 	b.w	8006fac <__sinit_lock_release>
 8006fcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fd0:	6523      	str	r3, [r4, #80]	; 0x50
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <__sinit+0x68>)
 8006fd4:	4a13      	ldr	r2, [pc, #76]	; (8007024 <__sinit+0x6c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	bf08      	it	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	bf08      	it	eq
 8006fe4:	61a3      	streq	r3, [r4, #24]
 8006fe6:	f000 f81f 	bl	8007028 <__sfp>
 8006fea:	6060      	str	r0, [r4, #4]
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 f81b 	bl	8007028 <__sfp>
 8006ff2:	60a0      	str	r0, [r4, #8]
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 f817 	bl	8007028 <__sfp>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2104      	movs	r1, #4
 8006ffe:	60e0      	str	r0, [r4, #12]
 8007000:	6860      	ldr	r0, [r4, #4]
 8007002:	f7ff ff81 	bl	8006f08 <std>
 8007006:	2201      	movs	r2, #1
 8007008:	2109      	movs	r1, #9
 800700a:	68a0      	ldr	r0, [r4, #8]
 800700c:	f7ff ff7c 	bl	8006f08 <std>
 8007010:	2202      	movs	r2, #2
 8007012:	2112      	movs	r1, #18
 8007014:	68e0      	ldr	r0, [r4, #12]
 8007016:	f7ff ff77 	bl	8006f08 <std>
 800701a:	2301      	movs	r3, #1
 800701c:	61a3      	str	r3, [r4, #24]
 800701e:	e7d1      	b.n	8006fc4 <__sinit+0xc>
 8007020:	08008488 	.word	0x08008488
 8007024:	08006f51 	.word	0x08006f51

08007028 <__sfp>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	4607      	mov	r7, r0
 800702c:	f7ff ffac 	bl	8006f88 <__sfp_lock_acquire>
 8007030:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <__sfp+0x84>)
 8007032:	681e      	ldr	r6, [r3, #0]
 8007034:	69b3      	ldr	r3, [r6, #24]
 8007036:	b913      	cbnz	r3, 800703e <__sfp+0x16>
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff ffbd 	bl	8006fb8 <__sinit>
 800703e:	3648      	adds	r6, #72	; 0x48
 8007040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007044:	3b01      	subs	r3, #1
 8007046:	d503      	bpl.n	8007050 <__sfp+0x28>
 8007048:	6833      	ldr	r3, [r6, #0]
 800704a:	b30b      	cbz	r3, 8007090 <__sfp+0x68>
 800704c:	6836      	ldr	r6, [r6, #0]
 800704e:	e7f7      	b.n	8007040 <__sfp+0x18>
 8007050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007054:	b9d5      	cbnz	r5, 800708c <__sfp+0x64>
 8007056:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <__sfp+0x88>)
 8007058:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800705c:	60e3      	str	r3, [r4, #12]
 800705e:	6665      	str	r5, [r4, #100]	; 0x64
 8007060:	f000 f847 	bl	80070f2 <__retarget_lock_init_recursive>
 8007064:	f7ff ff96 	bl	8006f94 <__sfp_lock_release>
 8007068:	2208      	movs	r2, #8
 800706a:	4629      	mov	r1, r5
 800706c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007070:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007074:	6025      	str	r5, [r4, #0]
 8007076:	61a5      	str	r5, [r4, #24]
 8007078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800707c:	f7fc fb5c 	bl	8003738 <memset>
 8007080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007088:	4620      	mov	r0, r4
 800708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708c:	3468      	adds	r4, #104	; 0x68
 800708e:	e7d9      	b.n	8007044 <__sfp+0x1c>
 8007090:	2104      	movs	r1, #4
 8007092:	4638      	mov	r0, r7
 8007094:	f7ff ff62 	bl	8006f5c <__sfmoreglue>
 8007098:	4604      	mov	r4, r0
 800709a:	6030      	str	r0, [r6, #0]
 800709c:	2800      	cmp	r0, #0
 800709e:	d1d5      	bne.n	800704c <__sfp+0x24>
 80070a0:	f7ff ff78 	bl	8006f94 <__sfp_lock_release>
 80070a4:	230c      	movs	r3, #12
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	e7ee      	b.n	8007088 <__sfp+0x60>
 80070aa:	bf00      	nop
 80070ac:	08008488 	.word	0x08008488
 80070b0:	ffff0001 	.word	0xffff0001

080070b4 <_fwalk_reent>:
 80070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	4606      	mov	r6, r0
 80070ba:	4688      	mov	r8, r1
 80070bc:	2700      	movs	r7, #0
 80070be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070c6:	f1b9 0901 	subs.w	r9, r9, #1
 80070ca:	d505      	bpl.n	80070d8 <_fwalk_reent+0x24>
 80070cc:	6824      	ldr	r4, [r4, #0]
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	d1f7      	bne.n	80070c2 <_fwalk_reent+0xe>
 80070d2:	4638      	mov	r0, r7
 80070d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d8:	89ab      	ldrh	r3, [r5, #12]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d907      	bls.n	80070ee <_fwalk_reent+0x3a>
 80070de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070e2:	3301      	adds	r3, #1
 80070e4:	d003      	beq.n	80070ee <_fwalk_reent+0x3a>
 80070e6:	4629      	mov	r1, r5
 80070e8:	4630      	mov	r0, r6
 80070ea:	47c0      	blx	r8
 80070ec:	4307      	orrs	r7, r0
 80070ee:	3568      	adds	r5, #104	; 0x68
 80070f0:	e7e9      	b.n	80070c6 <_fwalk_reent+0x12>

080070f2 <__retarget_lock_init_recursive>:
 80070f2:	4770      	bx	lr

080070f4 <__retarget_lock_acquire_recursive>:
 80070f4:	4770      	bx	lr

080070f6 <__retarget_lock_release_recursive>:
 80070f6:	4770      	bx	lr

080070f8 <__swhatbuf_r>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	460e      	mov	r6, r1
 80070fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007100:	4614      	mov	r4, r2
 8007102:	2900      	cmp	r1, #0
 8007104:	461d      	mov	r5, r3
 8007106:	b096      	sub	sp, #88	; 0x58
 8007108:	da07      	bge.n	800711a <__swhatbuf_r+0x22>
 800710a:	2300      	movs	r3, #0
 800710c:	602b      	str	r3, [r5, #0]
 800710e:	89b3      	ldrh	r3, [r6, #12]
 8007110:	061a      	lsls	r2, r3, #24
 8007112:	d410      	bmi.n	8007136 <__swhatbuf_r+0x3e>
 8007114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007118:	e00e      	b.n	8007138 <__swhatbuf_r+0x40>
 800711a:	466a      	mov	r2, sp
 800711c:	f000 f908 	bl	8007330 <_fstat_r>
 8007120:	2800      	cmp	r0, #0
 8007122:	dbf2      	blt.n	800710a <__swhatbuf_r+0x12>
 8007124:	9a01      	ldr	r2, [sp, #4]
 8007126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800712a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800712e:	425a      	negs	r2, r3
 8007130:	415a      	adcs	r2, r3
 8007132:	602a      	str	r2, [r5, #0]
 8007134:	e7ee      	b.n	8007114 <__swhatbuf_r+0x1c>
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	2000      	movs	r0, #0
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	b016      	add	sp, #88	; 0x58
 800713e:	bd70      	pop	{r4, r5, r6, pc}

08007140 <__smakebuf_r>:
 8007140:	898b      	ldrh	r3, [r1, #12]
 8007142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007144:	079d      	lsls	r5, r3, #30
 8007146:	4606      	mov	r6, r0
 8007148:	460c      	mov	r4, r1
 800714a:	d507      	bpl.n	800715c <__smakebuf_r+0x1c>
 800714c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	2301      	movs	r3, #1
 8007156:	6163      	str	r3, [r4, #20]
 8007158:	b002      	add	sp, #8
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	466a      	mov	r2, sp
 800715e:	ab01      	add	r3, sp, #4
 8007160:	f7ff ffca 	bl	80070f8 <__swhatbuf_r>
 8007164:	9900      	ldr	r1, [sp, #0]
 8007166:	4605      	mov	r5, r0
 8007168:	4630      	mov	r0, r6
 800716a:	f7fe fab1 	bl	80056d0 <_malloc_r>
 800716e:	b948      	cbnz	r0, 8007184 <__smakebuf_r+0x44>
 8007170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007174:	059a      	lsls	r2, r3, #22
 8007176:	d4ef      	bmi.n	8007158 <__smakebuf_r+0x18>
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	f043 0302 	orr.w	r3, r3, #2
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	e7e3      	b.n	800714c <__smakebuf_r+0xc>
 8007184:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <__smakebuf_r+0x7c>)
 8007186:	62b3      	str	r3, [r6, #40]	; 0x28
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	6020      	str	r0, [r4, #0]
 800718c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007190:	81a3      	strh	r3, [r4, #12]
 8007192:	9b00      	ldr	r3, [sp, #0]
 8007194:	6120      	str	r0, [r4, #16]
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	9b01      	ldr	r3, [sp, #4]
 800719a:	b15b      	cbz	r3, 80071b4 <__smakebuf_r+0x74>
 800719c:	4630      	mov	r0, r6
 800719e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a2:	f000 f8d7 	bl	8007354 <_isatty_r>
 80071a6:	b128      	cbz	r0, 80071b4 <__smakebuf_r+0x74>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	f023 0303 	bic.w	r3, r3, #3
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	81a3      	strh	r3, [r4, #12]
 80071b4:	89a0      	ldrh	r0, [r4, #12]
 80071b6:	4305      	orrs	r5, r0
 80071b8:	81a5      	strh	r5, [r4, #12]
 80071ba:	e7cd      	b.n	8007158 <__smakebuf_r+0x18>
 80071bc:	08006f51 	.word	0x08006f51

080071c0 <memchr>:
 80071c0:	4603      	mov	r3, r0
 80071c2:	b510      	push	{r4, lr}
 80071c4:	b2c9      	uxtb	r1, r1
 80071c6:	4402      	add	r2, r0
 80071c8:	4293      	cmp	r3, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	d101      	bne.n	80071d2 <memchr+0x12>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e003      	b.n	80071da <memchr+0x1a>
 80071d2:	7804      	ldrb	r4, [r0, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	428c      	cmp	r4, r1
 80071d8:	d1f6      	bne.n	80071c8 <memchr+0x8>
 80071da:	bd10      	pop	{r4, pc}

080071dc <_raise_r>:
 80071dc:	291f      	cmp	r1, #31
 80071de:	b538      	push	{r3, r4, r5, lr}
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	d904      	bls.n	80071f0 <_raise_r+0x14>
 80071e6:	2316      	movs	r3, #22
 80071e8:	6003      	str	r3, [r0, #0]
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071f2:	b112      	cbz	r2, 80071fa <_raise_r+0x1e>
 80071f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071f8:	b94b      	cbnz	r3, 800720e <_raise_r+0x32>
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 f830 	bl	8007260 <_getpid_r>
 8007200:	462a      	mov	r2, r5
 8007202:	4601      	mov	r1, r0
 8007204:	4620      	mov	r0, r4
 8007206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800720a:	f000 b817 	b.w	800723c <_kill_r>
 800720e:	2b01      	cmp	r3, #1
 8007210:	d00a      	beq.n	8007228 <_raise_r+0x4c>
 8007212:	1c59      	adds	r1, r3, #1
 8007214:	d103      	bne.n	800721e <_raise_r+0x42>
 8007216:	2316      	movs	r3, #22
 8007218:	6003      	str	r3, [r0, #0]
 800721a:	2001      	movs	r0, #1
 800721c:	e7e7      	b.n	80071ee <_raise_r+0x12>
 800721e:	2400      	movs	r4, #0
 8007220:	4628      	mov	r0, r5
 8007222:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007226:	4798      	blx	r3
 8007228:	2000      	movs	r0, #0
 800722a:	e7e0      	b.n	80071ee <_raise_r+0x12>

0800722c <raise>:
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <raise+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f7ff bfd3 	b.w	80071dc <_raise_r>
 8007236:	bf00      	nop
 8007238:	20000088 	.word	0x20000088

0800723c <_kill_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	2300      	movs	r3, #0
 8007240:	4d06      	ldr	r5, [pc, #24]	; (800725c <_kill_r+0x20>)
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	f7fa fc3c 	bl	8001ac6 <_kill>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d102      	bne.n	8007258 <_kill_r+0x1c>
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	b103      	cbz	r3, 8007258 <_kill_r+0x1c>
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	bf00      	nop
 800725c:	200003a8 	.word	0x200003a8

08007260 <_getpid_r>:
 8007260:	f7fa bc2a 	b.w	8001ab8 <_getpid>

08007264 <__sread>:
 8007264:	b510      	push	{r4, lr}
 8007266:	460c      	mov	r4, r1
 8007268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726c:	f000 f894 	bl	8007398 <_read_r>
 8007270:	2800      	cmp	r0, #0
 8007272:	bfab      	itete	ge
 8007274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007276:	89a3      	ldrhlt	r3, [r4, #12]
 8007278:	181b      	addge	r3, r3, r0
 800727a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800727e:	bfac      	ite	ge
 8007280:	6563      	strge	r3, [r4, #84]	; 0x54
 8007282:	81a3      	strhlt	r3, [r4, #12]
 8007284:	bd10      	pop	{r4, pc}

08007286 <__swrite>:
 8007286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	461f      	mov	r7, r3
 800728c:	898b      	ldrh	r3, [r1, #12]
 800728e:	4605      	mov	r5, r0
 8007290:	05db      	lsls	r3, r3, #23
 8007292:	460c      	mov	r4, r1
 8007294:	4616      	mov	r6, r2
 8007296:	d505      	bpl.n	80072a4 <__swrite+0x1e>
 8007298:	2302      	movs	r3, #2
 800729a:	2200      	movs	r2, #0
 800729c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a0:	f000 f868 	bl	8007374 <_lseek_r>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	4632      	mov	r2, r6
 80072a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	4628      	mov	r0, r5
 80072b0:	463b      	mov	r3, r7
 80072b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ba:	f000 b817 	b.w	80072ec <_write_r>

080072be <__sseek>:
 80072be:	b510      	push	{r4, lr}
 80072c0:	460c      	mov	r4, r1
 80072c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c6:	f000 f855 	bl	8007374 <_lseek_r>
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	bf15      	itete	ne
 80072d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80072d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072da:	81a3      	strheq	r3, [r4, #12]
 80072dc:	bf18      	it	ne
 80072de:	81a3      	strhne	r3, [r4, #12]
 80072e0:	bd10      	pop	{r4, pc}

080072e2 <__sclose>:
 80072e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e6:	f000 b813 	b.w	8007310 <_close_r>
	...

080072ec <_write_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	2200      	movs	r2, #0
 80072f6:	4d05      	ldr	r5, [pc, #20]	; (800730c <_write_r+0x20>)
 80072f8:	602a      	str	r2, [r5, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7fa fc1a 	bl	8001b34 <_write>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_write_r+0x1e>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_write_r+0x1e>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	200003a8 	.word	0x200003a8

08007310 <_close_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	2300      	movs	r3, #0
 8007314:	4d05      	ldr	r5, [pc, #20]	; (800732c <_close_r+0x1c>)
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	f7fa fc26 	bl	8001b6c <_close>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_close_r+0x1a>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_close_r+0x1a>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	200003a8 	.word	0x200003a8

08007330 <_fstat_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	2300      	movs	r3, #0
 8007334:	4d06      	ldr	r5, [pc, #24]	; (8007350 <_fstat_r+0x20>)
 8007336:	4604      	mov	r4, r0
 8007338:	4608      	mov	r0, r1
 800733a:	4611      	mov	r1, r2
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	f7fa fc20 	bl	8001b82 <_fstat>
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	d102      	bne.n	800734c <_fstat_r+0x1c>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	b103      	cbz	r3, 800734c <_fstat_r+0x1c>
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	bd38      	pop	{r3, r4, r5, pc}
 800734e:	bf00      	nop
 8007350:	200003a8 	.word	0x200003a8

08007354 <_isatty_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	2300      	movs	r3, #0
 8007358:	4d05      	ldr	r5, [pc, #20]	; (8007370 <_isatty_r+0x1c>)
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	f7fa fc1e 	bl	8001ba0 <_isatty>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_isatty_r+0x1a>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_isatty_r+0x1a>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	200003a8 	.word	0x200003a8

08007374 <_lseek_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	4611      	mov	r1, r2
 800737c:	2200      	movs	r2, #0
 800737e:	4d05      	ldr	r5, [pc, #20]	; (8007394 <_lseek_r+0x20>)
 8007380:	602a      	str	r2, [r5, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	f7fa fc16 	bl	8001bb4 <_lseek>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_lseek_r+0x1e>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_lseek_r+0x1e>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	200003a8 	.word	0x200003a8

08007398 <_read_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	2200      	movs	r2, #0
 80073a2:	4d05      	ldr	r5, [pc, #20]	; (80073b8 <_read_r+0x20>)
 80073a4:	602a      	str	r2, [r5, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f7fa fba7 	bl	8001afa <_read>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_read_r+0x1e>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_read_r+0x1e>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	200003a8 	.word	0x200003a8

080073bc <cos>:
 80073bc:	b530      	push	{r4, r5, lr}
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <cos+0x7c>)
 80073c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073c4:	4293      	cmp	r3, r2
 80073c6:	b087      	sub	sp, #28
 80073c8:	dc04      	bgt.n	80073d4 <cos+0x18>
 80073ca:	2200      	movs	r2, #0
 80073cc:	2300      	movs	r3, #0
 80073ce:	f000 fa6f 	bl	80078b0 <__kernel_cos>
 80073d2:	e006      	b.n	80073e2 <cos+0x26>
 80073d4:	4a19      	ldr	r2, [pc, #100]	; (800743c <cos+0x80>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	dd05      	ble.n	80073e6 <cos+0x2a>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	f7f8 ff77 	bl	80002d0 <__aeabi_dsub>
 80073e2:	b007      	add	sp, #28
 80073e4:	bd30      	pop	{r4, r5, pc}
 80073e6:	aa02      	add	r2, sp, #8
 80073e8:	f000 f872 	bl	80074d0 <__ieee754_rem_pio2>
 80073ec:	f000 0003 	and.w	r0, r0, #3
 80073f0:	2801      	cmp	r0, #1
 80073f2:	d007      	beq.n	8007404 <cos+0x48>
 80073f4:	2802      	cmp	r0, #2
 80073f6:	d00f      	beq.n	8007418 <cos+0x5c>
 80073f8:	b9a8      	cbnz	r0, 8007426 <cos+0x6a>
 80073fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007402:	e7e4      	b.n	80073ce <cos+0x12>
 8007404:	9000      	str	r0, [sp, #0]
 8007406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740e:	f000 fe57 	bl	80080c0 <__kernel_sin>
 8007412:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007416:	e7e4      	b.n	80073e2 <cos+0x26>
 8007418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800741c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007420:	f000 fa46 	bl	80078b0 <__kernel_cos>
 8007424:	e7f5      	b.n	8007412 <cos+0x56>
 8007426:	2301      	movs	r3, #1
 8007428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007432:	f000 fe45 	bl	80080c0 <__kernel_sin>
 8007436:	e7d4      	b.n	80073e2 <cos+0x26>
 8007438:	3fe921fb 	.word	0x3fe921fb
 800743c:	7fefffff 	.word	0x7fefffff

08007440 <sin>:
 8007440:	b530      	push	{r4, r5, lr}
 8007442:	4a20      	ldr	r2, [pc, #128]	; (80074c4 <sin+0x84>)
 8007444:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007448:	4293      	cmp	r3, r2
 800744a:	b087      	sub	sp, #28
 800744c:	dc06      	bgt.n	800745c <sin+0x1c>
 800744e:	2300      	movs	r3, #0
 8007450:	2200      	movs	r2, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	f000 fe33 	bl	80080c0 <__kernel_sin>
 800745a:	e006      	b.n	800746a <sin+0x2a>
 800745c:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <sin+0x88>)
 800745e:	4293      	cmp	r3, r2
 8007460:	dd05      	ble.n	800746e <sin+0x2e>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	f7f8 ff33 	bl	80002d0 <__aeabi_dsub>
 800746a:	b007      	add	sp, #28
 800746c:	bd30      	pop	{r4, r5, pc}
 800746e:	aa02      	add	r2, sp, #8
 8007470:	f000 f82e 	bl	80074d0 <__ieee754_rem_pio2>
 8007474:	f000 0003 	and.w	r0, r0, #3
 8007478:	2801      	cmp	r0, #1
 800747a:	d009      	beq.n	8007490 <sin+0x50>
 800747c:	2802      	cmp	r0, #2
 800747e:	d00e      	beq.n	800749e <sin+0x5e>
 8007480:	b9c0      	cbnz	r0, 80074b4 <sin+0x74>
 8007482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007486:	2301      	movs	r3, #1
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800748e:	e7e2      	b.n	8007456 <sin+0x16>
 8007490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007498:	f000 fa0a 	bl	80078b0 <__kernel_cos>
 800749c:	e7e5      	b.n	800746a <sin+0x2a>
 800749e:	2301      	movs	r3, #1
 80074a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074aa:	f000 fe09 	bl	80080c0 <__kernel_sin>
 80074ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80074b2:	e7da      	b.n	800746a <sin+0x2a>
 80074b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074bc:	f000 f9f8 	bl	80078b0 <__kernel_cos>
 80074c0:	e7f5      	b.n	80074ae <sin+0x6e>
 80074c2:	bf00      	nop
 80074c4:	3fe921fb 	.word	0x3fe921fb
 80074c8:	7fefffff 	.word	0x7fefffff
 80074cc:	00000000 	.word	0x00000000

080074d0 <__ieee754_rem_pio2>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	4614      	mov	r4, r2
 80074d6:	4ac4      	ldr	r2, [pc, #784]	; (80077e8 <__ieee754_rem_pio2+0x318>)
 80074d8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80074dc:	b08d      	sub	sp, #52	; 0x34
 80074de:	4592      	cmp	sl, r2
 80074e0:	9104      	str	r1, [sp, #16]
 80074e2:	dc07      	bgt.n	80074f4 <__ieee754_rem_pio2+0x24>
 80074e4:	2200      	movs	r2, #0
 80074e6:	2300      	movs	r3, #0
 80074e8:	e9c4 0100 	strd	r0, r1, [r4]
 80074ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80074f0:	2500      	movs	r5, #0
 80074f2:	e024      	b.n	800753e <__ieee754_rem_pio2+0x6e>
 80074f4:	4abd      	ldr	r2, [pc, #756]	; (80077ec <__ieee754_rem_pio2+0x31c>)
 80074f6:	4592      	cmp	sl, r2
 80074f8:	dc72      	bgt.n	80075e0 <__ieee754_rem_pio2+0x110>
 80074fa:	9b04      	ldr	r3, [sp, #16]
 80074fc:	4dbc      	ldr	r5, [pc, #752]	; (80077f0 <__ieee754_rem_pio2+0x320>)
 80074fe:	2b00      	cmp	r3, #0
 8007500:	a3ab      	add	r3, pc, #684	; (adr r3, 80077b0 <__ieee754_rem_pio2+0x2e0>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	dd36      	ble.n	8007576 <__ieee754_rem_pio2+0xa6>
 8007508:	f7f8 fee2 	bl	80002d0 <__aeabi_dsub>
 800750c:	45aa      	cmp	sl, r5
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	d018      	beq.n	8007546 <__ieee754_rem_pio2+0x76>
 8007514:	a3a8      	add	r3, pc, #672	; (adr r3, 80077b8 <__ieee754_rem_pio2+0x2e8>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7f8 fed9 	bl	80002d0 <__aeabi_dsub>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4630      	mov	r0, r6
 8007524:	e9c4 2300 	strd	r2, r3, [r4]
 8007528:	4639      	mov	r1, r7
 800752a:	f7f8 fed1 	bl	80002d0 <__aeabi_dsub>
 800752e:	a3a2      	add	r3, pc, #648	; (adr r3, 80077b8 <__ieee754_rem_pio2+0x2e8>)
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	f7f8 fecc 	bl	80002d0 <__aeabi_dsub>
 8007538:	2501      	movs	r5, #1
 800753a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800753e:	4628      	mov	r0, r5
 8007540:	b00d      	add	sp, #52	; 0x34
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	a39e      	add	r3, pc, #632	; (adr r3, 80077c0 <__ieee754_rem_pio2+0x2f0>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f7f8 fec0 	bl	80002d0 <__aeabi_dsub>
 8007550:	a39d      	add	r3, pc, #628	; (adr r3, 80077c8 <__ieee754_rem_pio2+0x2f8>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	4606      	mov	r6, r0
 8007558:	460f      	mov	r7, r1
 800755a:	f7f8 feb9 	bl	80002d0 <__aeabi_dsub>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4630      	mov	r0, r6
 8007564:	e9c4 2300 	strd	r2, r3, [r4]
 8007568:	4639      	mov	r1, r7
 800756a:	f7f8 feb1 	bl	80002d0 <__aeabi_dsub>
 800756e:	a396      	add	r3, pc, #600	; (adr r3, 80077c8 <__ieee754_rem_pio2+0x2f8>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	e7de      	b.n	8007534 <__ieee754_rem_pio2+0x64>
 8007576:	f7f8 fead 	bl	80002d4 <__adddf3>
 800757a:	45aa      	cmp	sl, r5
 800757c:	4606      	mov	r6, r0
 800757e:	460f      	mov	r7, r1
 8007580:	d016      	beq.n	80075b0 <__ieee754_rem_pio2+0xe0>
 8007582:	a38d      	add	r3, pc, #564	; (adr r3, 80077b8 <__ieee754_rem_pio2+0x2e8>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f7f8 fea4 	bl	80002d4 <__adddf3>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4630      	mov	r0, r6
 8007592:	e9c4 2300 	strd	r2, r3, [r4]
 8007596:	4639      	mov	r1, r7
 8007598:	f7f8 fe9a 	bl	80002d0 <__aeabi_dsub>
 800759c:	a386      	add	r3, pc, #536	; (adr r3, 80077b8 <__ieee754_rem_pio2+0x2e8>)
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f7f8 fe97 	bl	80002d4 <__adddf3>
 80075a6:	f04f 35ff 	mov.w	r5, #4294967295
 80075aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80075ae:	e7c6      	b.n	800753e <__ieee754_rem_pio2+0x6e>
 80075b0:	a383      	add	r3, pc, #524	; (adr r3, 80077c0 <__ieee754_rem_pio2+0x2f0>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f8 fe8d 	bl	80002d4 <__adddf3>
 80075ba:	a383      	add	r3, pc, #524	; (adr r3, 80077c8 <__ieee754_rem_pio2+0x2f8>)
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	4606      	mov	r6, r0
 80075c2:	460f      	mov	r7, r1
 80075c4:	f7f8 fe86 	bl	80002d4 <__adddf3>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4630      	mov	r0, r6
 80075ce:	e9c4 2300 	strd	r2, r3, [r4]
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f8 fe7c 	bl	80002d0 <__aeabi_dsub>
 80075d8:	a37b      	add	r3, pc, #492	; (adr r3, 80077c8 <__ieee754_rem_pio2+0x2f8>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	e7e0      	b.n	80075a2 <__ieee754_rem_pio2+0xd2>
 80075e0:	4a84      	ldr	r2, [pc, #528]	; (80077f4 <__ieee754_rem_pio2+0x324>)
 80075e2:	4592      	cmp	sl, r2
 80075e4:	f300 80d5 	bgt.w	8007792 <__ieee754_rem_pio2+0x2c2>
 80075e8:	f000 fe20 	bl	800822c <fabs>
 80075ec:	a378      	add	r3, pc, #480	; (adr r3, 80077d0 <__ieee754_rem_pio2+0x300>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	4606      	mov	r6, r0
 80075f4:	460f      	mov	r7, r1
 80075f6:	f7f9 f823 	bl	8000640 <__aeabi_dmul>
 80075fa:	2200      	movs	r2, #0
 80075fc:	4b7e      	ldr	r3, [pc, #504]	; (80077f8 <__ieee754_rem_pio2+0x328>)
 80075fe:	f7f8 fe69 	bl	80002d4 <__adddf3>
 8007602:	f7f9 fab7 	bl	8000b74 <__aeabi_d2iz>
 8007606:	4605      	mov	r5, r0
 8007608:	f7f8 ffb0 	bl	800056c <__aeabi_i2d>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007614:	a366      	add	r3, pc, #408	; (adr r3, 80077b0 <__ieee754_rem_pio2+0x2e0>)
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f9 f811 	bl	8000640 <__aeabi_dmul>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4630      	mov	r0, r6
 8007624:	4639      	mov	r1, r7
 8007626:	f7f8 fe53 	bl	80002d0 <__aeabi_dsub>
 800762a:	a363      	add	r3, pc, #396	; (adr r3, 80077b8 <__ieee754_rem_pio2+0x2e8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	4680      	mov	r8, r0
 8007632:	4689      	mov	r9, r1
 8007634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007638:	f7f9 f802 	bl	8000640 <__aeabi_dmul>
 800763c:	2d1f      	cmp	r5, #31
 800763e:	4606      	mov	r6, r0
 8007640:	460f      	mov	r7, r1
 8007642:	dc0e      	bgt.n	8007662 <__ieee754_rem_pio2+0x192>
 8007644:	4b6d      	ldr	r3, [pc, #436]	; (80077fc <__ieee754_rem_pio2+0x32c>)
 8007646:	1e6a      	subs	r2, r5, #1
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	4553      	cmp	r3, sl
 800764e:	d008      	beq.n	8007662 <__ieee754_rem_pio2+0x192>
 8007650:	4632      	mov	r2, r6
 8007652:	463b      	mov	r3, r7
 8007654:	4640      	mov	r0, r8
 8007656:	4649      	mov	r1, r9
 8007658:	f7f8 fe3a 	bl	80002d0 <__aeabi_dsub>
 800765c:	e9c4 0100 	strd	r0, r1, [r4]
 8007660:	e013      	b.n	800768a <__ieee754_rem_pio2+0x1ba>
 8007662:	463b      	mov	r3, r7
 8007664:	4632      	mov	r2, r6
 8007666:	4640      	mov	r0, r8
 8007668:	4649      	mov	r1, r9
 800766a:	f7f8 fe31 	bl	80002d0 <__aeabi_dsub>
 800766e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007672:	9305      	str	r3, [sp, #20]
 8007674:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007678:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800767c:	f1ba 0f10 	cmp.w	sl, #16
 8007680:	dc1f      	bgt.n	80076c2 <__ieee754_rem_pio2+0x1f2>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	e9c4 2300 	strd	r2, r3, [r4]
 800768a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800768e:	4640      	mov	r0, r8
 8007690:	4653      	mov	r3, sl
 8007692:	4649      	mov	r1, r9
 8007694:	f7f8 fe1c 	bl	80002d0 <__aeabi_dsub>
 8007698:	4632      	mov	r2, r6
 800769a:	463b      	mov	r3, r7
 800769c:	f7f8 fe18 	bl	80002d0 <__aeabi_dsub>
 80076a0:	460b      	mov	r3, r1
 80076a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80076a6:	9904      	ldr	r1, [sp, #16]
 80076a8:	4602      	mov	r2, r0
 80076aa:	2900      	cmp	r1, #0
 80076ac:	f6bf af47 	bge.w	800753e <__ieee754_rem_pio2+0x6e>
 80076b0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80076b4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80076b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80076bc:	60e3      	str	r3, [r4, #12]
 80076be:	426d      	negs	r5, r5
 80076c0:	e73d      	b.n	800753e <__ieee754_rem_pio2+0x6e>
 80076c2:	a33f      	add	r3, pc, #252	; (adr r3, 80077c0 <__ieee754_rem_pio2+0x2f0>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076cc:	f7f8 ffb8 	bl	8000640 <__aeabi_dmul>
 80076d0:	4606      	mov	r6, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4640      	mov	r0, r8
 80076da:	4649      	mov	r1, r9
 80076dc:	f7f8 fdf8 	bl	80002d0 <__aeabi_dsub>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4682      	mov	sl, r0
 80076e6:	468b      	mov	fp, r1
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f7f8 fdf0 	bl	80002d0 <__aeabi_dsub>
 80076f0:	4632      	mov	r2, r6
 80076f2:	463b      	mov	r3, r7
 80076f4:	f7f8 fdec 	bl	80002d0 <__aeabi_dsub>
 80076f8:	a333      	add	r3, pc, #204	; (adr r3, 80077c8 <__ieee754_rem_pio2+0x2f8>)
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	4606      	mov	r6, r0
 8007700:	460f      	mov	r7, r1
 8007702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007706:	f7f8 ff9b 	bl	8000640 <__aeabi_dmul>
 800770a:	4632      	mov	r2, r6
 800770c:	463b      	mov	r3, r7
 800770e:	f7f8 fddf 	bl	80002d0 <__aeabi_dsub>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4606      	mov	r6, r0
 8007718:	460f      	mov	r7, r1
 800771a:	4650      	mov	r0, sl
 800771c:	4659      	mov	r1, fp
 800771e:	f7f8 fdd7 	bl	80002d0 <__aeabi_dsub>
 8007722:	9a05      	ldr	r2, [sp, #20]
 8007724:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b31      	cmp	r3, #49	; 0x31
 800772c:	dc06      	bgt.n	800773c <__ieee754_rem_pio2+0x26c>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	46d0      	mov	r8, sl
 8007734:	46d9      	mov	r9, fp
 8007736:	e9c4 2300 	strd	r2, r3, [r4]
 800773a:	e7a6      	b.n	800768a <__ieee754_rem_pio2+0x1ba>
 800773c:	a326      	add	r3, pc, #152	; (adr r3, 80077d8 <__ieee754_rem_pio2+0x308>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007746:	f7f8 ff7b 	bl	8000640 <__aeabi_dmul>
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4650      	mov	r0, sl
 8007754:	4659      	mov	r1, fp
 8007756:	f7f8 fdbb 	bl	80002d0 <__aeabi_dsub>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4680      	mov	r8, r0
 8007760:	4689      	mov	r9, r1
 8007762:	4650      	mov	r0, sl
 8007764:	4659      	mov	r1, fp
 8007766:	f7f8 fdb3 	bl	80002d0 <__aeabi_dsub>
 800776a:	4632      	mov	r2, r6
 800776c:	463b      	mov	r3, r7
 800776e:	f7f8 fdaf 	bl	80002d0 <__aeabi_dsub>
 8007772:	a31b      	add	r3, pc, #108	; (adr r3, 80077e0 <__ieee754_rem_pio2+0x310>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	4606      	mov	r6, r0
 800777a:	460f      	mov	r7, r1
 800777c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007780:	f7f8 ff5e 	bl	8000640 <__aeabi_dmul>
 8007784:	4632      	mov	r2, r6
 8007786:	463b      	mov	r3, r7
 8007788:	f7f8 fda2 	bl	80002d0 <__aeabi_dsub>
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	e75e      	b.n	8007650 <__ieee754_rem_pio2+0x180>
 8007792:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <__ieee754_rem_pio2+0x330>)
 8007794:	4592      	cmp	sl, r2
 8007796:	dd35      	ble.n	8007804 <__ieee754_rem_pio2+0x334>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	f7f8 fd98 	bl	80002d0 <__aeabi_dsub>
 80077a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077a4:	e9c4 0100 	strd	r0, r1, [r4]
 80077a8:	e6a2      	b.n	80074f0 <__ieee754_rem_pio2+0x20>
 80077aa:	bf00      	nop
 80077ac:	f3af 8000 	nop.w
 80077b0:	54400000 	.word	0x54400000
 80077b4:	3ff921fb 	.word	0x3ff921fb
 80077b8:	1a626331 	.word	0x1a626331
 80077bc:	3dd0b461 	.word	0x3dd0b461
 80077c0:	1a600000 	.word	0x1a600000
 80077c4:	3dd0b461 	.word	0x3dd0b461
 80077c8:	2e037073 	.word	0x2e037073
 80077cc:	3ba3198a 	.word	0x3ba3198a
 80077d0:	6dc9c883 	.word	0x6dc9c883
 80077d4:	3fe45f30 	.word	0x3fe45f30
 80077d8:	2e000000 	.word	0x2e000000
 80077dc:	3ba3198a 	.word	0x3ba3198a
 80077e0:	252049c1 	.word	0x252049c1
 80077e4:	397b839a 	.word	0x397b839a
 80077e8:	3fe921fb 	.word	0x3fe921fb
 80077ec:	4002d97b 	.word	0x4002d97b
 80077f0:	3ff921fb 	.word	0x3ff921fb
 80077f4:	413921fb 	.word	0x413921fb
 80077f8:	3fe00000 	.word	0x3fe00000
 80077fc:	0800892c 	.word	0x0800892c
 8007800:	7fefffff 	.word	0x7fefffff
 8007804:	ea4f 552a 	mov.w	r5, sl, asr #20
 8007808:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800780c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8007810:	460f      	mov	r7, r1
 8007812:	4606      	mov	r6, r0
 8007814:	f7f9 f9ae 	bl	8000b74 <__aeabi_d2iz>
 8007818:	f7f8 fea8 	bl	800056c <__aeabi_i2d>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4630      	mov	r0, r6
 8007822:	4639      	mov	r1, r7
 8007824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007828:	f7f8 fd52 	bl	80002d0 <__aeabi_dsub>
 800782c:	2200      	movs	r2, #0
 800782e:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <__ieee754_rem_pio2+0x3d8>)
 8007830:	f7f8 ff06 	bl	8000640 <__aeabi_dmul>
 8007834:	460f      	mov	r7, r1
 8007836:	4606      	mov	r6, r0
 8007838:	f7f9 f99c 	bl	8000b74 <__aeabi_d2iz>
 800783c:	f7f8 fe96 	bl	800056c <__aeabi_i2d>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800784c:	f7f8 fd40 	bl	80002d0 <__aeabi_dsub>
 8007850:	2200      	movs	r2, #0
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <__ieee754_rem_pio2+0x3d8>)
 8007854:	f7f8 fef4 	bl	8000640 <__aeabi_dmul>
 8007858:	f04f 0803 	mov.w	r8, #3
 800785c:	2600      	movs	r6, #0
 800785e:	2700      	movs	r7, #0
 8007860:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007864:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8007868:	4632      	mov	r2, r6
 800786a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800786e:	463b      	mov	r3, r7
 8007870:	46c2      	mov	sl, r8
 8007872:	f108 38ff 	add.w	r8, r8, #4294967295
 8007876:	f7f9 f94b 	bl	8000b10 <__aeabi_dcmpeq>
 800787a:	2800      	cmp	r0, #0
 800787c:	d1f4      	bne.n	8007868 <__ieee754_rem_pio2+0x398>
 800787e:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <__ieee754_rem_pio2+0x3dc>)
 8007880:	462a      	mov	r2, r5
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	2302      	movs	r3, #2
 8007886:	4621      	mov	r1, r4
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	a806      	add	r0, sp, #24
 800788c:	4653      	mov	r3, sl
 800788e:	f000 f8cd 	bl	8007a2c <__kernel_rem_pio2>
 8007892:	9b04      	ldr	r3, [sp, #16]
 8007894:	4605      	mov	r5, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	f6bf ae51 	bge.w	800753e <__ieee754_rem_pio2+0x6e>
 800789c:	6863      	ldr	r3, [r4, #4]
 800789e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078a2:	6063      	str	r3, [r4, #4]
 80078a4:	68e3      	ldr	r3, [r4, #12]
 80078a6:	e707      	b.n	80076b8 <__ieee754_rem_pio2+0x1e8>
 80078a8:	41700000 	.word	0x41700000
 80078ac:	080089ac 	.word	0x080089ac

080078b0 <__kernel_cos>:
 80078b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80078b8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80078bc:	4680      	mov	r8, r0
 80078be:	460f      	mov	r7, r1
 80078c0:	e9cd 2300 	strd	r2, r3, [sp]
 80078c4:	da04      	bge.n	80078d0 <__kernel_cos+0x20>
 80078c6:	f7f9 f955 	bl	8000b74 <__aeabi_d2iz>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f000 8086 	beq.w	80079dc <__kernel_cos+0x12c>
 80078d0:	4642      	mov	r2, r8
 80078d2:	463b      	mov	r3, r7
 80078d4:	4640      	mov	r0, r8
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f8 feb2 	bl	8000640 <__aeabi_dmul>
 80078dc:	2200      	movs	r2, #0
 80078de:	4b4e      	ldr	r3, [pc, #312]	; (8007a18 <__kernel_cos+0x168>)
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	f7f8 feac 	bl	8000640 <__aeabi_dmul>
 80078e8:	a33f      	add	r3, pc, #252	; (adr r3, 80079e8 <__kernel_cos+0x138>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	4682      	mov	sl, r0
 80078f0:	468b      	mov	fp, r1
 80078f2:	4620      	mov	r0, r4
 80078f4:	4629      	mov	r1, r5
 80078f6:	f7f8 fea3 	bl	8000640 <__aeabi_dmul>
 80078fa:	a33d      	add	r3, pc, #244	; (adr r3, 80079f0 <__kernel_cos+0x140>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f8 fce8 	bl	80002d4 <__adddf3>
 8007904:	4622      	mov	r2, r4
 8007906:	462b      	mov	r3, r5
 8007908:	f7f8 fe9a 	bl	8000640 <__aeabi_dmul>
 800790c:	a33a      	add	r3, pc, #232	; (adr r3, 80079f8 <__kernel_cos+0x148>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 fcdd 	bl	80002d0 <__aeabi_dsub>
 8007916:	4622      	mov	r2, r4
 8007918:	462b      	mov	r3, r5
 800791a:	f7f8 fe91 	bl	8000640 <__aeabi_dmul>
 800791e:	a338      	add	r3, pc, #224	; (adr r3, 8007a00 <__kernel_cos+0x150>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f8 fcd6 	bl	80002d4 <__adddf3>
 8007928:	4622      	mov	r2, r4
 800792a:	462b      	mov	r3, r5
 800792c:	f7f8 fe88 	bl	8000640 <__aeabi_dmul>
 8007930:	a335      	add	r3, pc, #212	; (adr r3, 8007a08 <__kernel_cos+0x158>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fccb 	bl	80002d0 <__aeabi_dsub>
 800793a:	4622      	mov	r2, r4
 800793c:	462b      	mov	r3, r5
 800793e:	f7f8 fe7f 	bl	8000640 <__aeabi_dmul>
 8007942:	a333      	add	r3, pc, #204	; (adr r3, 8007a10 <__kernel_cos+0x160>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fcc4 	bl	80002d4 <__adddf3>
 800794c:	4622      	mov	r2, r4
 800794e:	462b      	mov	r3, r5
 8007950:	f7f8 fe76 	bl	8000640 <__aeabi_dmul>
 8007954:	4622      	mov	r2, r4
 8007956:	462b      	mov	r3, r5
 8007958:	f7f8 fe72 	bl	8000640 <__aeabi_dmul>
 800795c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007960:	4604      	mov	r4, r0
 8007962:	460d      	mov	r5, r1
 8007964:	4640      	mov	r0, r8
 8007966:	4639      	mov	r1, r7
 8007968:	f7f8 fe6a 	bl	8000640 <__aeabi_dmul>
 800796c:	460b      	mov	r3, r1
 800796e:	4602      	mov	r2, r0
 8007970:	4629      	mov	r1, r5
 8007972:	4620      	mov	r0, r4
 8007974:	f7f8 fcac 	bl	80002d0 <__aeabi_dsub>
 8007978:	4b28      	ldr	r3, [pc, #160]	; (8007a1c <__kernel_cos+0x16c>)
 800797a:	4680      	mov	r8, r0
 800797c:	429e      	cmp	r6, r3
 800797e:	4689      	mov	r9, r1
 8007980:	dc0e      	bgt.n	80079a0 <__kernel_cos+0xf0>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4650      	mov	r0, sl
 8007988:	4659      	mov	r1, fp
 800798a:	f7f8 fca1 	bl	80002d0 <__aeabi_dsub>
 800798e:	4602      	mov	r2, r0
 8007990:	2000      	movs	r0, #0
 8007992:	460b      	mov	r3, r1
 8007994:	4922      	ldr	r1, [pc, #136]	; (8007a20 <__kernel_cos+0x170>)
 8007996:	f7f8 fc9b 	bl	80002d0 <__aeabi_dsub>
 800799a:	b003      	add	sp, #12
 800799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a0:	2400      	movs	r4, #0
 80079a2:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <__kernel_cos+0x174>)
 80079a4:	4622      	mov	r2, r4
 80079a6:	429e      	cmp	r6, r3
 80079a8:	bfcc      	ite	gt
 80079aa:	4d1f      	ldrgt	r5, [pc, #124]	; (8007a28 <__kernel_cos+0x178>)
 80079ac:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80079b0:	462b      	mov	r3, r5
 80079b2:	2000      	movs	r0, #0
 80079b4:	491a      	ldr	r1, [pc, #104]	; (8007a20 <__kernel_cos+0x170>)
 80079b6:	f7f8 fc8b 	bl	80002d0 <__aeabi_dsub>
 80079ba:	4622      	mov	r2, r4
 80079bc:	4606      	mov	r6, r0
 80079be:	460f      	mov	r7, r1
 80079c0:	462b      	mov	r3, r5
 80079c2:	4650      	mov	r0, sl
 80079c4:	4659      	mov	r1, fp
 80079c6:	f7f8 fc83 	bl	80002d0 <__aeabi_dsub>
 80079ca:	4642      	mov	r2, r8
 80079cc:	464b      	mov	r3, r9
 80079ce:	f7f8 fc7f 	bl	80002d0 <__aeabi_dsub>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4630      	mov	r0, r6
 80079d8:	4639      	mov	r1, r7
 80079da:	e7dc      	b.n	8007996 <__kernel_cos+0xe6>
 80079dc:	2000      	movs	r0, #0
 80079de:	4910      	ldr	r1, [pc, #64]	; (8007a20 <__kernel_cos+0x170>)
 80079e0:	e7db      	b.n	800799a <__kernel_cos+0xea>
 80079e2:	bf00      	nop
 80079e4:	f3af 8000 	nop.w
 80079e8:	be8838d4 	.word	0xbe8838d4
 80079ec:	bda8fae9 	.word	0xbda8fae9
 80079f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80079f4:	3e21ee9e 	.word	0x3e21ee9e
 80079f8:	809c52ad 	.word	0x809c52ad
 80079fc:	3e927e4f 	.word	0x3e927e4f
 8007a00:	19cb1590 	.word	0x19cb1590
 8007a04:	3efa01a0 	.word	0x3efa01a0
 8007a08:	16c15177 	.word	0x16c15177
 8007a0c:	3f56c16c 	.word	0x3f56c16c
 8007a10:	5555554c 	.word	0x5555554c
 8007a14:	3fa55555 	.word	0x3fa55555
 8007a18:	3fe00000 	.word	0x3fe00000
 8007a1c:	3fd33332 	.word	0x3fd33332
 8007a20:	3ff00000 	.word	0x3ff00000
 8007a24:	3fe90000 	.word	0x3fe90000
 8007a28:	3fd20000 	.word	0x3fd20000

08007a2c <__kernel_rem_pio2>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007a34:	9308      	str	r3, [sp, #32]
 8007a36:	9101      	str	r1, [sp, #4]
 8007a38:	4bc0      	ldr	r3, [pc, #768]	; (8007d3c <__kernel_rem_pio2+0x310>)
 8007a3a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007a3c:	f112 0f14 	cmn.w	r2, #20
 8007a40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a44:	bfa8      	it	ge
 8007a46:	1ed4      	subge	r4, r2, #3
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	bfb8      	it	lt
 8007a4e:	2400      	movlt	r4, #0
 8007a50:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a54:	9306      	str	r3, [sp, #24]
 8007a56:	bfa4      	itt	ge
 8007a58:	2318      	movge	r3, #24
 8007a5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007a5e:	f06f 0317 	mvn.w	r3, #23
 8007a62:	fb04 3303 	mla	r3, r4, r3, r3
 8007a66:	eb03 0a02 	add.w	sl, r3, r2
 8007a6a:	9a06      	ldr	r2, [sp, #24]
 8007a6c:	9b04      	ldr	r3, [sp, #16]
 8007a6e:	1aa7      	subs	r7, r4, r2
 8007a70:	eb03 0802 	add.w	r8, r3, r2
 8007a74:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007a76:	2500      	movs	r5, #0
 8007a78:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9009      	str	r0, [sp, #36]	; 0x24
 8007a82:	ae20      	add	r6, sp, #128	; 0x80
 8007a84:	4545      	cmp	r5, r8
 8007a86:	dd19      	ble.n	8007abc <__kernel_rem_pio2+0x90>
 8007a88:	9b08      	ldr	r3, [sp, #32]
 8007a8a:	aa20      	add	r2, sp, #128	; 0x80
 8007a8c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007a90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007a94:	f1c3 0301 	rsb	r3, r3, #1
 8007a98:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007a9c:	9307      	str	r3, [sp, #28]
 8007a9e:	9b07      	ldr	r3, [sp, #28]
 8007aa0:	9a04      	ldr	r2, [sp, #16]
 8007aa2:	4443      	add	r3, r8
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	db35      	blt.n	8007b14 <__kernel_rem_pio2+0xe8>
 8007aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f1a3 0908 	sub.w	r9, r3, #8
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	462f      	mov	r7, r5
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007aba:	e01f      	b.n	8007afc <__kernel_rem_pio2+0xd0>
 8007abc:	42ef      	cmn	r7, r5
 8007abe:	d40b      	bmi.n	8007ad8 <__kernel_rem_pio2+0xac>
 8007ac0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ac8:	f7f8 fd50 	bl	800056c <__aeabi_i2d>
 8007acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ad0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	e7d5      	b.n	8007a84 <__kernel_rem_pio2+0x58>
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4619      	mov	r1, r3
 8007adc:	e7f8      	b.n	8007ad0 <__kernel_rem_pio2+0xa4>
 8007ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae2:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8007ae6:	f7f8 fdab 	bl	8000640 <__aeabi_dmul>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007af2:	f7f8 fbef 	bl	80002d4 <__adddf3>
 8007af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007afa:	3601      	adds	r6, #1
 8007afc:	9b06      	ldr	r3, [sp, #24]
 8007afe:	3f08      	subs	r7, #8
 8007b00:	429e      	cmp	r6, r3
 8007b02:	ddec      	ble.n	8007ade <__kernel_rem_pio2+0xb2>
 8007b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b08:	3508      	adds	r5, #8
 8007b0a:	e8eb 2302 	strd	r2, r3, [fp], #8
 8007b0e:	f108 0801 	add.w	r8, r8, #1
 8007b12:	e7c4      	b.n	8007a9e <__kernel_rem_pio2+0x72>
 8007b14:	9b04      	ldr	r3, [sp, #16]
 8007b16:	aa0c      	add	r2, sp, #48	; 0x30
 8007b18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b1e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007b20:	9f04      	ldr	r7, [sp, #16]
 8007b22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b26:	930a      	str	r3, [sp, #40]	; 0x28
 8007b28:	463e      	mov	r6, r7
 8007b2a:	ab98      	add	r3, sp, #608	; 0x260
 8007b2c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007b30:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b34:	f8cd b008 	str.w	fp, [sp, #8]
 8007b38:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8007b3c:	2e00      	cmp	r6, #0
 8007b3e:	dc71      	bgt.n	8007c24 <__kernel_rem_pio2+0x1f8>
 8007b40:	4652      	mov	r2, sl
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	f000 fbf7 	bl	8008338 <scalbn>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007b50:	4604      	mov	r4, r0
 8007b52:	460d      	mov	r5, r1
 8007b54:	f7f8 fd74 	bl	8000640 <__aeabi_dmul>
 8007b58:	f000 fb6e 	bl	8008238 <floor>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4b78      	ldr	r3, [pc, #480]	; (8007d40 <__kernel_rem_pio2+0x314>)
 8007b60:	f7f8 fd6e 	bl	8000640 <__aeabi_dmul>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4620      	mov	r0, r4
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7f8 fbb0 	bl	80002d0 <__aeabi_dsub>
 8007b70:	460d      	mov	r5, r1
 8007b72:	4604      	mov	r4, r0
 8007b74:	f7f8 fffe 	bl	8000b74 <__aeabi_d2iz>
 8007b78:	9007      	str	r0, [sp, #28]
 8007b7a:	f7f8 fcf7 	bl	800056c <__aeabi_i2d>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4620      	mov	r0, r4
 8007b84:	4629      	mov	r1, r5
 8007b86:	f7f8 fba3 	bl	80002d0 <__aeabi_dsub>
 8007b8a:	f1ba 0f00 	cmp.w	sl, #0
 8007b8e:	4680      	mov	r8, r0
 8007b90:	4689      	mov	r9, r1
 8007b92:	dd70      	ble.n	8007c76 <__kernel_rem_pio2+0x24a>
 8007b94:	1e7a      	subs	r2, r7, #1
 8007b96:	ab0c      	add	r3, sp, #48	; 0x30
 8007b98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007b9c:	9c07      	ldr	r4, [sp, #28]
 8007b9e:	f1ca 0118 	rsb	r1, sl, #24
 8007ba2:	fa40 f301 	asr.w	r3, r0, r1
 8007ba6:	441c      	add	r4, r3
 8007ba8:	408b      	lsls	r3, r1
 8007baa:	1ac0      	subs	r0, r0, r3
 8007bac:	ab0c      	add	r3, sp, #48	; 0x30
 8007bae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007bb2:	f1ca 0317 	rsb	r3, sl, #23
 8007bb6:	9407      	str	r4, [sp, #28]
 8007bb8:	fa40 f303 	asr.w	r3, r0, r3
 8007bbc:	9302      	str	r3, [sp, #8]
 8007bbe:	9b02      	ldr	r3, [sp, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dd66      	ble.n	8007c92 <__kernel_rem_pio2+0x266>
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007bca:	4614      	mov	r4, r2
 8007bcc:	9b07      	ldr	r3, [sp, #28]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	9307      	str	r3, [sp, #28]
 8007bd2:	4297      	cmp	r7, r2
 8007bd4:	f300 809f 	bgt.w	8007d16 <__kernel_rem_pio2+0x2ea>
 8007bd8:	f1ba 0f00 	cmp.w	sl, #0
 8007bdc:	dd07      	ble.n	8007bee <__kernel_rem_pio2+0x1c2>
 8007bde:	f1ba 0f01 	cmp.w	sl, #1
 8007be2:	f000 80b9 	beq.w	8007d58 <__kernel_rem_pio2+0x32c>
 8007be6:	f1ba 0f02 	cmp.w	sl, #2
 8007bea:	f000 80bf 	beq.w	8007d6c <__kernel_rem_pio2+0x340>
 8007bee:	9b02      	ldr	r3, [sp, #8]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d14e      	bne.n	8007c92 <__kernel_rem_pio2+0x266>
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	4952      	ldr	r1, [pc, #328]	; (8007d44 <__kernel_rem_pio2+0x318>)
 8007bfc:	f7f8 fb68 	bl	80002d0 <__aeabi_dsub>
 8007c00:	4680      	mov	r8, r0
 8007c02:	4689      	mov	r9, r1
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	d044      	beq.n	8007c92 <__kernel_rem_pio2+0x266>
 8007c08:	4652      	mov	r2, sl
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	494d      	ldr	r1, [pc, #308]	; (8007d44 <__kernel_rem_pio2+0x318>)
 8007c0e:	f000 fb93 	bl	8008338 <scalbn>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f7f8 fb59 	bl	80002d0 <__aeabi_dsub>
 8007c1e:	4680      	mov	r8, r0
 8007c20:	4689      	mov	r9, r1
 8007c22:	e036      	b.n	8007c92 <__kernel_rem_pio2+0x266>
 8007c24:	2200      	movs	r2, #0
 8007c26:	4b48      	ldr	r3, [pc, #288]	; (8007d48 <__kernel_rem_pio2+0x31c>)
 8007c28:	4620      	mov	r0, r4
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	f7f8 fd08 	bl	8000640 <__aeabi_dmul>
 8007c30:	f7f8 ffa0 	bl	8000b74 <__aeabi_d2iz>
 8007c34:	f7f8 fc9a 	bl	800056c <__aeabi_i2d>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4b44      	ldr	r3, [pc, #272]	; (8007d4c <__kernel_rem_pio2+0x320>)
 8007c3c:	4680      	mov	r8, r0
 8007c3e:	4689      	mov	r9, r1
 8007c40:	f7f8 fcfe 	bl	8000640 <__aeabi_dmul>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fb40 	bl	80002d0 <__aeabi_dsub>
 8007c50:	f7f8 ff90 	bl	8000b74 <__aeabi_d2iz>
 8007c54:	9b02      	ldr	r3, [sp, #8]
 8007c56:	3e01      	subs	r6, #1
 8007c58:	f843 0b04 	str.w	r0, [r3], #4
 8007c5c:	9302      	str	r3, [sp, #8]
 8007c5e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007c60:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c64:	4640      	mov	r0, r8
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 fb32 	bl	80002d4 <__adddf3>
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	e762      	b.n	8007b3c <__kernel_rem_pio2+0x110>
 8007c76:	d105      	bne.n	8007c84 <__kernel_rem_pio2+0x258>
 8007c78:	1e7b      	subs	r3, r7, #1
 8007c7a:	aa0c      	add	r2, sp, #48	; 0x30
 8007c7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007c80:	15c3      	asrs	r3, r0, #23
 8007c82:	e79b      	b.n	8007bbc <__kernel_rem_pio2+0x190>
 8007c84:	2200      	movs	r2, #0
 8007c86:	4b32      	ldr	r3, [pc, #200]	; (8007d50 <__kernel_rem_pio2+0x324>)
 8007c88:	f7f8 ff60 	bl	8000b4c <__aeabi_dcmpge>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d13f      	bne.n	8007d10 <__kernel_rem_pio2+0x2e4>
 8007c90:	9002      	str	r0, [sp, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	2300      	movs	r3, #0
 8007c96:	4640      	mov	r0, r8
 8007c98:	4649      	mov	r1, r9
 8007c9a:	f7f8 ff39 	bl	8000b10 <__aeabi_dcmpeq>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f000 80b5 	beq.w	8007e0e <__kernel_rem_pio2+0x3e2>
 8007ca4:	1e7c      	subs	r4, r7, #1
 8007ca6:	4623      	mov	r3, r4
 8007ca8:	2200      	movs	r2, #0
 8007caa:	9904      	ldr	r1, [sp, #16]
 8007cac:	428b      	cmp	r3, r1
 8007cae:	da64      	bge.n	8007d7a <__kernel_rem_pio2+0x34e>
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	d078      	beq.n	8007da6 <__kernel_rem_pio2+0x37a>
 8007cb4:	ab0c      	add	r3, sp, #48	; 0x30
 8007cb6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007cba:	f1aa 0a18 	sub.w	sl, sl, #24
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 80a3 	beq.w	8007e0a <__kernel_rem_pio2+0x3de>
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	491e      	ldr	r1, [pc, #120]	; (8007d44 <__kernel_rem_pio2+0x318>)
 8007cca:	f000 fb35 	bl	8008338 <scalbn>
 8007cce:	46a2      	mov	sl, r4
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	f04f 0800 	mov.w	r8, #0
 8007cd8:	00e3      	lsls	r3, r4, #3
 8007cda:	9306      	str	r3, [sp, #24]
 8007cdc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8007d48 <__kernel_rem_pio2+0x31c>
 8007ce0:	ab70      	add	r3, sp, #448	; 0x1c0
 8007ce2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8007ce6:	f1ba 0f00 	cmp.w	sl, #0
 8007cea:	f280 80c6 	bge.w	8007e7a <__kernel_rem_pio2+0x44e>
 8007cee:	4627      	mov	r7, r4
 8007cf0:	f04f 0800 	mov.w	r8, #0
 8007cf4:	2f00      	cmp	r7, #0
 8007cf6:	f2c0 80f3 	blt.w	8007ee0 <__kernel_rem_pio2+0x4b4>
 8007cfa:	4b16      	ldr	r3, [pc, #88]	; (8007d54 <__kernel_rem_pio2+0x328>)
 8007cfc:	f04f 0a00 	mov.w	sl, #0
 8007d00:	461d      	mov	r5, r3
 8007d02:	ab70      	add	r3, sp, #448	; 0x1c0
 8007d04:	f04f 0b00 	mov.w	fp, #0
 8007d08:	2600      	movs	r6, #0
 8007d0a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007d0e:	e0d9      	b.n	8007ec4 <__kernel_rem_pio2+0x498>
 8007d10:	2302      	movs	r3, #2
 8007d12:	9302      	str	r3, [sp, #8]
 8007d14:	e756      	b.n	8007bc4 <__kernel_rem_pio2+0x198>
 8007d16:	f8db 3000 	ldr.w	r3, [fp]
 8007d1a:	b954      	cbnz	r4, 8007d32 <__kernel_rem_pio2+0x306>
 8007d1c:	b123      	cbz	r3, 8007d28 <__kernel_rem_pio2+0x2fc>
 8007d1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007d22:	f8cb 3000 	str.w	r3, [fp]
 8007d26:	2301      	movs	r3, #1
 8007d28:	461c      	mov	r4, r3
 8007d2a:	3201      	adds	r2, #1
 8007d2c:	f10b 0b04 	add.w	fp, fp, #4
 8007d30:	e74f      	b.n	8007bd2 <__kernel_rem_pio2+0x1a6>
 8007d32:	1acb      	subs	r3, r1, r3
 8007d34:	f8cb 3000 	str.w	r3, [fp]
 8007d38:	4623      	mov	r3, r4
 8007d3a:	e7f5      	b.n	8007d28 <__kernel_rem_pio2+0x2fc>
 8007d3c:	08008af8 	.word	0x08008af8
 8007d40:	40200000 	.word	0x40200000
 8007d44:	3ff00000 	.word	0x3ff00000
 8007d48:	3e700000 	.word	0x3e700000
 8007d4c:	41700000 	.word	0x41700000
 8007d50:	3fe00000 	.word	0x3fe00000
 8007d54:	08008ab8 	.word	0x08008ab8
 8007d58:	1e7a      	subs	r2, r7, #1
 8007d5a:	ab0c      	add	r3, sp, #48	; 0x30
 8007d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d60:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007d64:	a90c      	add	r1, sp, #48	; 0x30
 8007d66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007d6a:	e740      	b.n	8007bee <__kernel_rem_pio2+0x1c2>
 8007d6c:	1e7a      	subs	r2, r7, #1
 8007d6e:	ab0c      	add	r3, sp, #48	; 0x30
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007d78:	e7f4      	b.n	8007d64 <__kernel_rem_pio2+0x338>
 8007d7a:	a90c      	add	r1, sp, #48	; 0x30
 8007d7c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	430a      	orrs	r2, r1
 8007d84:	e791      	b.n	8007caa <__kernel_rem_pio2+0x27e>
 8007d86:	3401      	adds	r4, #1
 8007d88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	d0fa      	beq.n	8007d86 <__kernel_rem_pio2+0x35a>
 8007d90:	9b08      	ldr	r3, [sp, #32]
 8007d92:	1c7e      	adds	r6, r7, #1
 8007d94:	18fd      	adds	r5, r7, r3
 8007d96:	ab20      	add	r3, sp, #128	; 0x80
 8007d98:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007d9c:	443c      	add	r4, r7
 8007d9e:	42b4      	cmp	r4, r6
 8007da0:	da04      	bge.n	8007dac <__kernel_rem_pio2+0x380>
 8007da2:	4627      	mov	r7, r4
 8007da4:	e6c0      	b.n	8007b28 <__kernel_rem_pio2+0xfc>
 8007da6:	2401      	movs	r4, #1
 8007da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007daa:	e7ed      	b.n	8007d88 <__kernel_rem_pio2+0x35c>
 8007dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dae:	462f      	mov	r7, r5
 8007db0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007db4:	f7f8 fbda 	bl	800056c <__aeabi_i2d>
 8007db8:	f04f 0b00 	mov.w	fp, #0
 8007dbc:	f04f 0800 	mov.w	r8, #0
 8007dc0:	f04f 0900 	mov.w	r9, #0
 8007dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc6:	e8e7 0102 	strd	r0, r1, [r7], #8
 8007dca:	3b08      	subs	r3, #8
 8007dcc:	9302      	str	r3, [sp, #8]
 8007dce:	9b06      	ldr	r3, [sp, #24]
 8007dd0:	459b      	cmp	fp, r3
 8007dd2:	dd07      	ble.n	8007de4 <__kernel_rem_pio2+0x3b8>
 8007dd4:	ab70      	add	r3, sp, #448	; 0x1c0
 8007dd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007dda:	463d      	mov	r5, r7
 8007ddc:	e9c3 8900 	strd	r8, r9, [r3]
 8007de0:	3601      	adds	r6, #1
 8007de2:	e7dc      	b.n	8007d9e <__kernel_rem_pio2+0x372>
 8007de4:	9902      	ldr	r1, [sp, #8]
 8007de6:	f10b 0b01 	add.w	fp, fp, #1
 8007dea:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007dee:	9102      	str	r1, [sp, #8]
 8007df0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8007df4:	f7f8 fc24 	bl	8000640 <__aeabi_dmul>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4649      	mov	r1, r9
 8007e00:	f7f8 fa68 	bl	80002d4 <__adddf3>
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	e7e1      	b.n	8007dce <__kernel_rem_pio2+0x3a2>
 8007e0a:	3c01      	subs	r4, #1
 8007e0c:	e752      	b.n	8007cb4 <__kernel_rem_pio2+0x288>
 8007e0e:	f1ca 0200 	rsb	r2, sl, #0
 8007e12:	4640      	mov	r0, r8
 8007e14:	4649      	mov	r1, r9
 8007e16:	f000 fa8f 	bl	8008338 <scalbn>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4ba5      	ldr	r3, [pc, #660]	; (80080b4 <__kernel_rem_pio2+0x688>)
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	f7f8 fe93 	bl	8000b4c <__aeabi_dcmpge>
 8007e26:	b1f8      	cbz	r0, 8007e68 <__kernel_rem_pio2+0x43c>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4ba3      	ldr	r3, [pc, #652]	; (80080b8 <__kernel_rem_pio2+0x68c>)
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	4629      	mov	r1, r5
 8007e30:	f7f8 fc06 	bl	8000640 <__aeabi_dmul>
 8007e34:	f7f8 fe9e 	bl	8000b74 <__aeabi_d2iz>
 8007e38:	4606      	mov	r6, r0
 8007e3a:	f7f8 fb97 	bl	800056c <__aeabi_i2d>
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4b9c      	ldr	r3, [pc, #624]	; (80080b4 <__kernel_rem_pio2+0x688>)
 8007e42:	f7f8 fbfd 	bl	8000640 <__aeabi_dmul>
 8007e46:	460b      	mov	r3, r1
 8007e48:	4602      	mov	r2, r0
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f7f8 fa3f 	bl	80002d0 <__aeabi_dsub>
 8007e52:	f7f8 fe8f 	bl	8000b74 <__aeabi_d2iz>
 8007e56:	1c7c      	adds	r4, r7, #1
 8007e58:	ab0c      	add	r3, sp, #48	; 0x30
 8007e5a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007e5e:	f10a 0a18 	add.w	sl, sl, #24
 8007e62:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8007e66:	e72d      	b.n	8007cc4 <__kernel_rem_pio2+0x298>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7f8 fe82 	bl	8000b74 <__aeabi_d2iz>
 8007e70:	ab0c      	add	r3, sp, #48	; 0x30
 8007e72:	463c      	mov	r4, r7
 8007e74:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007e78:	e724      	b.n	8007cc4 <__kernel_rem_pio2+0x298>
 8007e7a:	ab0c      	add	r3, sp, #48	; 0x30
 8007e7c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007e80:	f7f8 fb74 	bl	800056c <__aeabi_i2d>
 8007e84:	4632      	mov	r2, r6
 8007e86:	463b      	mov	r3, r7
 8007e88:	f7f8 fbda 	bl	8000640 <__aeabi_dmul>
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8007e92:	464b      	mov	r3, r9
 8007e94:	4630      	mov	r0, r6
 8007e96:	4639      	mov	r1, r7
 8007e98:	f7f8 fbd2 	bl	8000640 <__aeabi_dmul>
 8007e9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	460f      	mov	r7, r1
 8007ea4:	e71f      	b.n	8007ce6 <__kernel_rem_pio2+0x2ba>
 8007ea6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007eaa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007eae:	f7f8 fbc7 	bl	8000640 <__aeabi_dmul>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	4659      	mov	r1, fp
 8007eba:	f7f8 fa0b 	bl	80002d4 <__adddf3>
 8007ebe:	4682      	mov	sl, r0
 8007ec0:	468b      	mov	fp, r1
 8007ec2:	3601      	adds	r6, #1
 8007ec4:	9b04      	ldr	r3, [sp, #16]
 8007ec6:	429e      	cmp	r6, r3
 8007ec8:	dc01      	bgt.n	8007ece <__kernel_rem_pio2+0x4a2>
 8007eca:	45b0      	cmp	r8, r6
 8007ecc:	daeb      	bge.n	8007ea6 <__kernel_rem_pio2+0x47a>
 8007ece:	ab48      	add	r3, sp, #288	; 0x120
 8007ed0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ed4:	e9c3 ab00 	strd	sl, fp, [r3]
 8007ed8:	3f01      	subs	r7, #1
 8007eda:	f108 0801 	add.w	r8, r8, #1
 8007ede:	e709      	b.n	8007cf4 <__kernel_rem_pio2+0x2c8>
 8007ee0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	dc09      	bgt.n	8007efa <__kernel_rem_pio2+0x4ce>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dc34      	bgt.n	8007f54 <__kernel_rem_pio2+0x528>
 8007eea:	d05e      	beq.n	8007faa <__kernel_rem_pio2+0x57e>
 8007eec:	9b07      	ldr	r3, [sp, #28]
 8007eee:	f003 0007 	and.w	r0, r3, #7
 8007ef2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efa:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d1f5      	bne.n	8007eec <__kernel_rem_pio2+0x4c0>
 8007f00:	9a06      	ldr	r2, [sp, #24]
 8007f02:	ab48      	add	r3, sp, #288	; 0x120
 8007f04:	441a      	add	r2, r3
 8007f06:	4615      	mov	r5, r2
 8007f08:	4692      	mov	sl, r2
 8007f0a:	46a3      	mov	fp, r4
 8007f0c:	f1bb 0f00 	cmp.w	fp, #0
 8007f10:	dc7a      	bgt.n	8008008 <__kernel_rem_pio2+0x5dc>
 8007f12:	46aa      	mov	sl, r5
 8007f14:	46a3      	mov	fp, r4
 8007f16:	f1bb 0f01 	cmp.w	fp, #1
 8007f1a:	f300 8094 	bgt.w	8008046 <__kernel_rem_pio2+0x61a>
 8007f1e:	2700      	movs	r7, #0
 8007f20:	463e      	mov	r6, r7
 8007f22:	2c01      	cmp	r4, #1
 8007f24:	f300 80ae 	bgt.w	8008084 <__kernel_rem_pio2+0x658>
 8007f28:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007f2c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f040 80b0 	bne.w	8008098 <__kernel_rem_pio2+0x66c>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	462a      	mov	r2, r5
 8007f3c:	9801      	ldr	r0, [sp, #4]
 8007f3e:	e9c0 2300 	strd	r2, r3, [r0]
 8007f42:	4622      	mov	r2, r4
 8007f44:	460b      	mov	r3, r1
 8007f46:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	4633      	mov	r3, r6
 8007f4e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007f52:	e7cb      	b.n	8007eec <__kernel_rem_pio2+0x4c0>
 8007f54:	2000      	movs	r0, #0
 8007f56:	9a06      	ldr	r2, [sp, #24]
 8007f58:	ab48      	add	r3, sp, #288	; 0x120
 8007f5a:	441a      	add	r2, r3
 8007f5c:	4615      	mov	r5, r2
 8007f5e:	46a0      	mov	r8, r4
 8007f60:	4601      	mov	r1, r0
 8007f62:	f1b8 0f00 	cmp.w	r8, #0
 8007f66:	da3c      	bge.n	8007fe2 <__kernel_rem_pio2+0x5b6>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d040      	beq.n	8007ff0 <__kernel_rem_pio2+0x5c4>
 8007f6e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007f72:	4602      	mov	r2, r0
 8007f74:	462b      	mov	r3, r5
 8007f76:	9d01      	ldr	r5, [sp, #4]
 8007f78:	2601      	movs	r6, #1
 8007f7a:	e9c5 2300 	strd	r2, r3, [r5]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007f84:	f7f8 f9a4 	bl	80002d0 <__aeabi_dsub>
 8007f88:	4684      	mov	ip, r0
 8007f8a:	460f      	mov	r7, r1
 8007f8c:	ad48      	add	r5, sp, #288	; 0x120
 8007f8e:	42b4      	cmp	r4, r6
 8007f90:	f105 0508 	add.w	r5, r5, #8
 8007f94:	da2e      	bge.n	8007ff4 <__kernel_rem_pio2+0x5c8>
 8007f96:	9b02      	ldr	r3, [sp, #8]
 8007f98:	b10b      	cbz	r3, 8007f9e <__kernel_rem_pio2+0x572>
 8007f9a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007f9e:	4662      	mov	r2, ip
 8007fa0:	463b      	mov	r3, r7
 8007fa2:	9901      	ldr	r1, [sp, #4]
 8007fa4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007fa8:	e7a0      	b.n	8007eec <__kernel_rem_pio2+0x4c0>
 8007faa:	9a06      	ldr	r2, [sp, #24]
 8007fac:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007fae:	ab48      	add	r3, sp, #288	; 0x120
 8007fb0:	441a      	add	r2, r3
 8007fb2:	4615      	mov	r5, r2
 8007fb4:	4637      	mov	r7, r6
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	da09      	bge.n	8007fce <__kernel_rem_pio2+0x5a2>
 8007fba:	9b02      	ldr	r3, [sp, #8]
 8007fbc:	b10b      	cbz	r3, 8007fc2 <__kernel_rem_pio2+0x596>
 8007fbe:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007fc2:	4632      	mov	r2, r6
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	9901      	ldr	r1, [sp, #4]
 8007fc8:	e9c1 2300 	strd	r2, r3, [r1]
 8007fcc:	e78e      	b.n	8007eec <__kernel_rem_pio2+0x4c0>
 8007fce:	4630      	mov	r0, r6
 8007fd0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	f7f8 f97d 	bl	80002d4 <__adddf3>
 8007fda:	3c01      	subs	r4, #1
 8007fdc:	4606      	mov	r6, r0
 8007fde:	460f      	mov	r7, r1
 8007fe0:	e7e9      	b.n	8007fb6 <__kernel_rem_pio2+0x58a>
 8007fe2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007fe6:	f7f8 f975 	bl	80002d4 <__adddf3>
 8007fea:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fee:	e7b8      	b.n	8007f62 <__kernel_rem_pio2+0x536>
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	e7be      	b.n	8007f72 <__kernel_rem_pio2+0x546>
 8007ff4:	4660      	mov	r0, ip
 8007ff6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 f96a 	bl	80002d4 <__adddf3>
 8008000:	3601      	adds	r6, #1
 8008002:	4684      	mov	ip, r0
 8008004:	460f      	mov	r7, r1
 8008006:	e7c2      	b.n	8007f8e <__kernel_rem_pio2+0x562>
 8008008:	e9da 6700 	ldrd	r6, r7, [sl]
 800800c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8008010:	4632      	mov	r2, r6
 8008012:	463b      	mov	r3, r7
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	f7f8 f95c 	bl	80002d4 <__adddf3>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008024:	4640      	mov	r0, r8
 8008026:	4649      	mov	r1, r9
 8008028:	f7f8 f952 	bl	80002d0 <__aeabi_dsub>
 800802c:	4632      	mov	r2, r6
 800802e:	463b      	mov	r3, r7
 8008030:	f7f8 f950 	bl	80002d4 <__adddf3>
 8008034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008038:	e86a 0102 	strd	r0, r1, [sl], #-8
 800803c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008040:	e9ca 2300 	strd	r2, r3, [sl]
 8008044:	e762      	b.n	8007f0c <__kernel_rem_pio2+0x4e0>
 8008046:	e9da 8900 	ldrd	r8, r9, [sl]
 800804a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800804e:	4642      	mov	r2, r8
 8008050:	464b      	mov	r3, r9
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 f93d 	bl	80002d4 <__adddf3>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008062:	4630      	mov	r0, r6
 8008064:	4639      	mov	r1, r7
 8008066:	f7f8 f933 	bl	80002d0 <__aeabi_dsub>
 800806a:	4642      	mov	r2, r8
 800806c:	464b      	mov	r3, r9
 800806e:	f7f8 f931 	bl	80002d4 <__adddf3>
 8008072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008076:	e86a 0102 	strd	r0, r1, [sl], #-8
 800807a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800807e:	e9ca 2300 	strd	r2, r3, [sl]
 8008082:	e748      	b.n	8007f16 <__kernel_rem_pio2+0x4ea>
 8008084:	4638      	mov	r0, r7
 8008086:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800808a:	4631      	mov	r1, r6
 800808c:	f7f8 f922 	bl	80002d4 <__adddf3>
 8008090:	3c01      	subs	r4, #1
 8008092:	4607      	mov	r7, r0
 8008094:	460e      	mov	r6, r1
 8008096:	e744      	b.n	8007f22 <__kernel_rem_pio2+0x4f6>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800809e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80080a2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80080a6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80080aa:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80080ae:	601d      	str	r5, [r3, #0]
 80080b0:	615e      	str	r6, [r3, #20]
 80080b2:	e71b      	b.n	8007eec <__kernel_rem_pio2+0x4c0>
 80080b4:	41700000 	.word	0x41700000
 80080b8:	3e700000 	.word	0x3e700000
 80080bc:	00000000 	.word	0x00000000

080080c0 <__kernel_sin>:
 80080c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	e9cd 2300 	strd	r2, r3, [sp]
 80080ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80080d2:	4682      	mov	sl, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80080d8:	da03      	bge.n	80080e2 <__kernel_sin+0x22>
 80080da:	f7f8 fd4b 	bl	8000b74 <__aeabi_d2iz>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d050      	beq.n	8008184 <__kernel_sin+0xc4>
 80080e2:	4652      	mov	r2, sl
 80080e4:	4623      	mov	r3, r4
 80080e6:	4650      	mov	r0, sl
 80080e8:	4621      	mov	r1, r4
 80080ea:	f7f8 faa9 	bl	8000640 <__aeabi_dmul>
 80080ee:	4606      	mov	r6, r0
 80080f0:	460f      	mov	r7, r1
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4650      	mov	r0, sl
 80080f8:	4621      	mov	r1, r4
 80080fa:	f7f8 faa1 	bl	8000640 <__aeabi_dmul>
 80080fe:	a33e      	add	r3, pc, #248	; (adr r3, 80081f8 <__kernel_sin+0x138>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	4680      	mov	r8, r0
 8008106:	4689      	mov	r9, r1
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f7f8 fa98 	bl	8000640 <__aeabi_dmul>
 8008110:	a33b      	add	r3, pc, #236	; (adr r3, 8008200 <__kernel_sin+0x140>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	f7f8 f8db 	bl	80002d0 <__aeabi_dsub>
 800811a:	4632      	mov	r2, r6
 800811c:	463b      	mov	r3, r7
 800811e:	f7f8 fa8f 	bl	8000640 <__aeabi_dmul>
 8008122:	a339      	add	r3, pc, #228	; (adr r3, 8008208 <__kernel_sin+0x148>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f7f8 f8d4 	bl	80002d4 <__adddf3>
 800812c:	4632      	mov	r2, r6
 800812e:	463b      	mov	r3, r7
 8008130:	f7f8 fa86 	bl	8000640 <__aeabi_dmul>
 8008134:	a336      	add	r3, pc, #216	; (adr r3, 8008210 <__kernel_sin+0x150>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f7f8 f8c9 	bl	80002d0 <__aeabi_dsub>
 800813e:	4632      	mov	r2, r6
 8008140:	463b      	mov	r3, r7
 8008142:	f7f8 fa7d 	bl	8000640 <__aeabi_dmul>
 8008146:	a334      	add	r3, pc, #208	; (adr r3, 8008218 <__kernel_sin+0x158>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 f8c2 	bl	80002d4 <__adddf3>
 8008150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008154:	b9dd      	cbnz	r5, 800818e <__kernel_sin+0xce>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4630      	mov	r0, r6
 800815c:	4639      	mov	r1, r7
 800815e:	f7f8 fa6f 	bl	8000640 <__aeabi_dmul>
 8008162:	a32f      	add	r3, pc, #188	; (adr r3, 8008220 <__kernel_sin+0x160>)
 8008164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008168:	f7f8 f8b2 	bl	80002d0 <__aeabi_dsub>
 800816c:	4642      	mov	r2, r8
 800816e:	464b      	mov	r3, r9
 8008170:	f7f8 fa66 	bl	8000640 <__aeabi_dmul>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4650      	mov	r0, sl
 800817a:	4621      	mov	r1, r4
 800817c:	f7f8 f8aa 	bl	80002d4 <__adddf3>
 8008180:	4682      	mov	sl, r0
 8008182:	460c      	mov	r4, r1
 8008184:	4650      	mov	r0, sl
 8008186:	4621      	mov	r1, r4
 8008188:	b006      	add	sp, #24
 800818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818e:	2200      	movs	r2, #0
 8008190:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008194:	4b24      	ldr	r3, [pc, #144]	; (8008228 <__kernel_sin+0x168>)
 8008196:	f7f8 fa53 	bl	8000640 <__aeabi_dmul>
 800819a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800819e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a2:	4640      	mov	r0, r8
 80081a4:	4649      	mov	r1, r9
 80081a6:	f7f8 fa4b 	bl	8000640 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b2:	f7f8 f88d 	bl	80002d0 <__aeabi_dsub>
 80081b6:	4632      	mov	r2, r6
 80081b8:	463b      	mov	r3, r7
 80081ba:	f7f8 fa41 	bl	8000640 <__aeabi_dmul>
 80081be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081c2:	f7f8 f885 	bl	80002d0 <__aeabi_dsub>
 80081c6:	a316      	add	r3, pc, #88	; (adr r3, 8008220 <__kernel_sin+0x160>)
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	4606      	mov	r6, r0
 80081ce:	460f      	mov	r7, r1
 80081d0:	4640      	mov	r0, r8
 80081d2:	4649      	mov	r1, r9
 80081d4:	f7f8 fa34 	bl	8000640 <__aeabi_dmul>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4630      	mov	r0, r6
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 f878 	bl	80002d4 <__adddf3>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4650      	mov	r0, sl
 80081ea:	4621      	mov	r1, r4
 80081ec:	f7f8 f870 	bl	80002d0 <__aeabi_dsub>
 80081f0:	e7c6      	b.n	8008180 <__kernel_sin+0xc0>
 80081f2:	bf00      	nop
 80081f4:	f3af 8000 	nop.w
 80081f8:	5acfd57c 	.word	0x5acfd57c
 80081fc:	3de5d93a 	.word	0x3de5d93a
 8008200:	8a2b9ceb 	.word	0x8a2b9ceb
 8008204:	3e5ae5e6 	.word	0x3e5ae5e6
 8008208:	57b1fe7d 	.word	0x57b1fe7d
 800820c:	3ec71de3 	.word	0x3ec71de3
 8008210:	19c161d5 	.word	0x19c161d5
 8008214:	3f2a01a0 	.word	0x3f2a01a0
 8008218:	1110f8a6 	.word	0x1110f8a6
 800821c:	3f811111 	.word	0x3f811111
 8008220:	55555549 	.word	0x55555549
 8008224:	3fc55555 	.word	0x3fc55555
 8008228:	3fe00000 	.word	0x3fe00000

0800822c <fabs>:
 800822c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008230:	4770      	bx	lr
 8008232:	0000      	movs	r0, r0
 8008234:	0000      	movs	r0, r0
	...

08008238 <floor>:
 8008238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800823c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008240:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008244:	2e13      	cmp	r6, #19
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4607      	mov	r7, r0
 800824c:	460c      	mov	r4, r1
 800824e:	4605      	mov	r5, r0
 8008250:	dc34      	bgt.n	80082bc <floor+0x84>
 8008252:	2e00      	cmp	r6, #0
 8008254:	da15      	bge.n	8008282 <floor+0x4a>
 8008256:	a334      	add	r3, pc, #208	; (adr r3, 8008328 <floor+0xf0>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f8 f83a 	bl	80002d4 <__adddf3>
 8008260:	2200      	movs	r2, #0
 8008262:	2300      	movs	r3, #0
 8008264:	f7f8 fc7c 	bl	8000b60 <__aeabi_dcmpgt>
 8008268:	b140      	cbz	r0, 800827c <floor+0x44>
 800826a:	2c00      	cmp	r4, #0
 800826c:	da59      	bge.n	8008322 <floor+0xea>
 800826e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008272:	ea57 0503 	orrs.w	r5, r7, r3
 8008276:	d001      	beq.n	800827c <floor+0x44>
 8008278:	2500      	movs	r5, #0
 800827a:	4c2d      	ldr	r4, [pc, #180]	; (8008330 <floor+0xf8>)
 800827c:	4623      	mov	r3, r4
 800827e:	462f      	mov	r7, r5
 8008280:	e025      	b.n	80082ce <floor+0x96>
 8008282:	4a2c      	ldr	r2, [pc, #176]	; (8008334 <floor+0xfc>)
 8008284:	fa42 f806 	asr.w	r8, r2, r6
 8008288:	ea01 0208 	and.w	r2, r1, r8
 800828c:	4302      	orrs	r2, r0
 800828e:	d01e      	beq.n	80082ce <floor+0x96>
 8008290:	a325      	add	r3, pc, #148	; (adr r3, 8008328 <floor+0xf0>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f81d 	bl	80002d4 <__adddf3>
 800829a:	2200      	movs	r2, #0
 800829c:	2300      	movs	r3, #0
 800829e:	f7f8 fc5f 	bl	8000b60 <__aeabi_dcmpgt>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0ea      	beq.n	800827c <floor+0x44>
 80082a6:	2c00      	cmp	r4, #0
 80082a8:	bfbe      	ittt	lt
 80082aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80082ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80082b2:	19a4      	addlt	r4, r4, r6
 80082b4:	2500      	movs	r5, #0
 80082b6:	ea24 0408 	bic.w	r4, r4, r8
 80082ba:	e7df      	b.n	800827c <floor+0x44>
 80082bc:	2e33      	cmp	r6, #51	; 0x33
 80082be:	dd0a      	ble.n	80082d6 <floor+0x9e>
 80082c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80082c4:	d103      	bne.n	80082ce <floor+0x96>
 80082c6:	f7f8 f805 	bl	80002d4 <__adddf3>
 80082ca:	4607      	mov	r7, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4638      	mov	r0, r7
 80082d0:	4619      	mov	r1, r3
 80082d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d6:	f04f 32ff 	mov.w	r2, #4294967295
 80082da:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80082de:	fa22 f808 	lsr.w	r8, r2, r8
 80082e2:	ea18 0f00 	tst.w	r8, r0
 80082e6:	d0f2      	beq.n	80082ce <floor+0x96>
 80082e8:	a30f      	add	r3, pc, #60	; (adr r3, 8008328 <floor+0xf0>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f7 fff1 	bl	80002d4 <__adddf3>
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	f7f8 fc33 	bl	8000b60 <__aeabi_dcmpgt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0be      	beq.n	800827c <floor+0x44>
 80082fe:	2c00      	cmp	r4, #0
 8008300:	da02      	bge.n	8008308 <floor+0xd0>
 8008302:	2e14      	cmp	r6, #20
 8008304:	d103      	bne.n	800830e <floor+0xd6>
 8008306:	3401      	adds	r4, #1
 8008308:	ea25 0508 	bic.w	r5, r5, r8
 800830c:	e7b6      	b.n	800827c <floor+0x44>
 800830e:	2301      	movs	r3, #1
 8008310:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008314:	fa03 f606 	lsl.w	r6, r3, r6
 8008318:	4435      	add	r5, r6
 800831a:	42bd      	cmp	r5, r7
 800831c:	bf38      	it	cc
 800831e:	18e4      	addcc	r4, r4, r3
 8008320:	e7f2      	b.n	8008308 <floor+0xd0>
 8008322:	2500      	movs	r5, #0
 8008324:	462c      	mov	r4, r5
 8008326:	e7a9      	b.n	800827c <floor+0x44>
 8008328:	8800759c 	.word	0x8800759c
 800832c:	7e37e43c 	.word	0x7e37e43c
 8008330:	bff00000 	.word	0xbff00000
 8008334:	000fffff 	.word	0x000fffff

08008338 <scalbn>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	4617      	mov	r7, r2
 8008344:	460b      	mov	r3, r1
 8008346:	b996      	cbnz	r6, 800836e <scalbn+0x36>
 8008348:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800834c:	4303      	orrs	r3, r0
 800834e:	d039      	beq.n	80083c4 <scalbn+0x8c>
 8008350:	4b35      	ldr	r3, [pc, #212]	; (8008428 <scalbn+0xf0>)
 8008352:	2200      	movs	r2, #0
 8008354:	f7f8 f974 	bl	8000640 <__aeabi_dmul>
 8008358:	4b34      	ldr	r3, [pc, #208]	; (800842c <scalbn+0xf4>)
 800835a:	4604      	mov	r4, r0
 800835c:	429f      	cmp	r7, r3
 800835e:	460d      	mov	r5, r1
 8008360:	da0f      	bge.n	8008382 <scalbn+0x4a>
 8008362:	a32d      	add	r3, pc, #180	; (adr r3, 8008418 <scalbn+0xe0>)
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f7f8 f96a 	bl	8000640 <__aeabi_dmul>
 800836c:	e006      	b.n	800837c <scalbn+0x44>
 800836e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008372:	4296      	cmp	r6, r2
 8008374:	d10a      	bne.n	800838c <scalbn+0x54>
 8008376:	4602      	mov	r2, r0
 8008378:	f7f7 ffac 	bl	80002d4 <__adddf3>
 800837c:	4604      	mov	r4, r0
 800837e:	460d      	mov	r5, r1
 8008380:	e020      	b.n	80083c4 <scalbn+0x8c>
 8008382:	460b      	mov	r3, r1
 8008384:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008388:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800838c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008390:	19b9      	adds	r1, r7, r6
 8008392:	4291      	cmp	r1, r2
 8008394:	dd0e      	ble.n	80083b4 <scalbn+0x7c>
 8008396:	a322      	add	r3, pc, #136	; (adr r3, 8008420 <scalbn+0xe8>)
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80083a0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80083a4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80083a8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80083ac:	4820      	ldr	r0, [pc, #128]	; (8008430 <scalbn+0xf8>)
 80083ae:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80083b2:	e7d9      	b.n	8008368 <scalbn+0x30>
 80083b4:	2900      	cmp	r1, #0
 80083b6:	dd08      	ble.n	80083ca <scalbn+0x92>
 80083b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083c0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80083c4:	4620      	mov	r0, r4
 80083c6:	4629      	mov	r1, r5
 80083c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ca:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80083ce:	da16      	bge.n	80083fe <scalbn+0xc6>
 80083d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80083d4:	429f      	cmp	r7, r3
 80083d6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80083da:	dd08      	ble.n	80083ee <scalbn+0xb6>
 80083dc:	4c15      	ldr	r4, [pc, #84]	; (8008434 <scalbn+0xfc>)
 80083de:	4814      	ldr	r0, [pc, #80]	; (8008430 <scalbn+0xf8>)
 80083e0:	f363 74df 	bfi	r4, r3, #31, #1
 80083e4:	a30e      	add	r3, pc, #56	; (adr r3, 8008420 <scalbn+0xe8>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	4621      	mov	r1, r4
 80083ec:	e7bc      	b.n	8008368 <scalbn+0x30>
 80083ee:	4c12      	ldr	r4, [pc, #72]	; (8008438 <scalbn+0x100>)
 80083f0:	4812      	ldr	r0, [pc, #72]	; (800843c <scalbn+0x104>)
 80083f2:	f363 74df 	bfi	r4, r3, #31, #1
 80083f6:	a308      	add	r3, pc, #32	; (adr r3, 8008418 <scalbn+0xe0>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	e7f5      	b.n	80083ea <scalbn+0xb2>
 80083fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008402:	3136      	adds	r1, #54	; 0x36
 8008404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008408:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800840c:	4620      	mov	r0, r4
 800840e:	4629      	mov	r1, r5
 8008410:	2200      	movs	r2, #0
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <scalbn+0x108>)
 8008414:	e7a8      	b.n	8008368 <scalbn+0x30>
 8008416:	bf00      	nop
 8008418:	c2f8f359 	.word	0xc2f8f359
 800841c:	01a56e1f 	.word	0x01a56e1f
 8008420:	8800759c 	.word	0x8800759c
 8008424:	7e37e43c 	.word	0x7e37e43c
 8008428:	43500000 	.word	0x43500000
 800842c:	ffff3cb0 	.word	0xffff3cb0
 8008430:	8800759c 	.word	0x8800759c
 8008434:	7e37e43c 	.word	0x7e37e43c
 8008438:	01a56e1f 	.word	0x01a56e1f
 800843c:	c2f8f359 	.word	0xc2f8f359
 8008440:	3c900000 	.word	0x3c900000

08008444 <_init>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr

08008450 <_fini>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr
